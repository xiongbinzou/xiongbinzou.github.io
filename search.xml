<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode刷题-001-两数之和①</title>
      <link href="/leetcode-shua-ti-0001-liang-shu-zhi-he/"/>
      <url>/leetcode-shua-ti-0001-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和①"><a href="#两数之和①" class="headerlink" title="两数之和①"></a>两数之和①</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组<code>nums</code>和一个整数目标值<code>target</code>，从该整数数组<code>nums</code>中找出和为目标值<code>target</code>的那两个整数，并返回他们的数组下标。</p><p>假设每种输入只会对应一个答案，数组中同一个元素在答案里不能重复出现，可以按任意顺序返回答案。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [2,7,11,15], target=9输出: [0, 1] 或 [1, 0]解释：2 + 7 = 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3,2,4], target=6输出: [1, 2] 或 [2, 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力枚举"><a href="#方法一：暴力枚举" class="headerlink" title="方法一：暴力枚举"></a>方法一：暴力枚举</h3><p>复杂度 时间O(N^2)+空间O(1)</p><p>枚举数组中的每一个数<code>x</code>，遍历寻找数组中是否存在<code>target - x</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：哈希表法"><a href="#方法二：哈希表法" class="headerlink" title="方法二：哈希表法"></a>方法二：哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>哈希表是从算法的角度讲，采用“哈希”这种算法维护的表。“哈希”是将任意长度的数据映射到有限长度的域上，哈希结果称为哈希值，哈希表在index为哈希值的存储单元存储对应的原始数据。把哈希值和原始数据看成一对（key, value），可以看到哈希表实现了字典。</p><p>创建一个哈希表，对于每一个<code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p>关键点：</p><ul><li>求和转换为求差</li><li>借助哈希结构将数组中每个元素及其索引相互对应</li><li>以空间换时间，将查找时间从O(N)减低到O(1)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0020-有效的括号</title>
      <link href="/leetcode-shua-ti-0020-you-xiao-de-gua-hao/"/>
      <url>/leetcode-shua-ti-0020-you-xiao-de-gua-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个只包括<code>(</code>，<code>)</code>，<code>{</code>，<code>}</code>，<code>[</code>，<code>]</code>的字符串<code>s</code>，判断字符串是否有效。注意空字符串可被认为是有效字符串。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "()"输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "(])"输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：栈"><a href="#方法一：栈" class="headerlink" title="方法一：栈"></a>方法一：栈</h3><p>复杂度 时间O(N)+空间O(N)</p><p>使用栈，遍历输入字符串，如果当前字符为左半边字符，则将其压入栈中，如果遇到右半边符号，分类讨论：</p><ol><li>如果栈不为空，取出栈顶元素，如果栈顶元素是其对应的左半边括号，则取出栈顶元素继续循环</li><li>如果栈为空，直接返回False</li><li>如果栈顶元素不是其对应的左半边括号，返回False</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"{"</span><span class="token punctuation">:</span> <span class="token string">"}"</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">:</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">:</span> <span class="token string">")"</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token keyword">in</span> <span class="token builtin">map</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> stack<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> x <span class="token operator">!=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token keyword">not</span> stack <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：正则匹配"><a href="#方法二：正则匹配" class="headerlink" title="方法二：正则匹配"></a>方法二：正则匹配</h3><p>复杂度 取决于正则引擎的实现</p><p>通过不断消除‘[]’, ‘()’, ‘{}’，最终判断剩下的是否为空串即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token string">'[]'</span> <span class="token keyword">in</span> s <span class="token keyword">or</span> <span class="token string">'()'</span> <span class="token keyword">in</span> s <span class="token keyword">or</span> <span class="token string">'{}'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>            s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'()'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0021-合并两个有序链表</title>
      <link href="/leetcode-shua-ti-0021-he-bing-liang-ge-you-xu-lian-biao/"/>
      <url>/leetcode-shua-ti-0021-he-bing-liang-ge-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>将两个升序链表合并为一个新的升序链表并返回，新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>必须满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: l1 = [1, 2, 4], l2 = [1, 3, 4]输出: [1, 1, 2, 3, 4, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: l1 = [], l2 = []输出: []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：迭代法"><a href="#方法一：迭代法" class="headerlink" title="方法一：迭代法"></a>方法一：迭代法</h3><p>复杂度 时间O(N+M)+空间O(1)</p><p>当两个链表都不为空时，判断两个链表中哪一个链表的头节点的值更小，将较小值的节点添加到结果里，当一个节点被添加到结果里之后，将对应链表中的节点后移一位。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        pNode <span class="token operator">=</span> pHead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> l1 <span class="token keyword">and</span> l2<span class="token punctuation">:</span>            <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> l1<span class="token punctuation">:</span>            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1        <span class="token keyword">if</span> l2<span class="token punctuation">:</span>            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2        <span class="token keyword">return</span> pHead<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归法"><a href="#方法二：递归法" class="headerlink" title="方法二：递归法"></a>方法二：递归法</h3><p>复杂度 时间O(N+M)+空间O(N+M)</p><p>如果两个链表中的一个一开始就是空链表，则返回那个非空链表，否则，需要判断两个链表的头节点的值谁更小，然后递归地决定下一个添加到结果里的节点，如果两个链表有一个为空，递归结束。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">:</span>            <span class="token keyword">return</span> l2        <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">:</span>            <span class="token keyword">return</span> l1        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> l2        <span class="token keyword">else</span><span class="token punctuation">:</span>            l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span>        <span class="token keyword">return</span> l1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0026-删除有序数组中的重复项</title>
      <link href="/leetcode-shua-ti-0026-shan-chu-you-xu-shu-zu-zhong-de-chong-fu-xiang/"/>
      <url>/leetcode-shua-ti-0026-shan-chu-you-xu-shu-zu-zhong-de-chong-fu-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个有序数字，请原地删除重复出现的元素，使得每个元素只出现一次，返回删除后数组的长度，不需要额外的数组空间，必须在原地修改输入数组在使用O(1)额外空间的条件下完成。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [1, 1, 2]输出: 2, nums = [1, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]输出: 5, nums = [0, 1, 2, 3, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>用快慢指针来记录遍历的坐标</p><ul><li>开始时两个指针都指向第一个数字</li><li>如果两个指针指的数字相同，则快指针向前一步</li><li>如果不同，则两个指针都向前一步</li><li>当快指针走完整个数组后，满指针当前的坐标加1就是数组中不同数字的个数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        slow <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> fast <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">:</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>         <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0053-最大子序和</title>
      <link href="/leetcode-shua-ti-0053-zui-da-zi-xu-he/"/>
      <url>/leetcode-shua-ti-0053-zui-da-zi-xu-he/</url>
      
        <content type="html"><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组<code>nums</code>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]输出: 6解释：连续子数组[4, -1, 2, 1]的和最大，为6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力解"><a href="#方法一：暴力解" class="headerlink" title="方法一：暴力解"></a>方法一：暴力解</h3><p>算法复杂度  时间O(N^3) +空间O(1)</p><p>列举所有组合子序列首尾位置的组合，求解最大的子序列和</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                maxSum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> maxSum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：优化暴力解"><a href="#方法二：优化暴力解" class="headerlink" title="方法二：优化暴力解"></a>方法二：优化暴力解</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>优化暴力解，可以预先处理，得到前缀和。</p><p>定义函数<code>S(i)</code>，表示计算以<code>0</code>开始到<code>i</code>的累和，那么<code>S(j) - s(i-1)</code>表示从<code>i</code>开始到<code>j</code>的累和。因此，只需要遍历一遍计算出所有的<code>S(i)</code>，然后再减去之前的<code>S(k)</code>在的最小值即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        minSum <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            maxSum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> <span class="token builtin">sum</span> <span class="token operator">-</span> minSum<span class="token punctuation">)</span>            minSum <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>minSum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> maxSum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三：分治法"><a href="#方法三：分治法" class="headerlink" title="方法三：分治法"></a>方法三：分治法</h3><p>算法复杂度 时间O(NlogN) + 空间O(logN)</p><p>把数组<code>nums</code>以中间位置<code>m</code>分为左<code>left</code>、右<code>right</code>两部分，那么就有<code>left=nums[0]...nums[m-1]</code>和<code>right=nums[m+1]...nums[n-1]</code></p><p>最大子序列和的位置有以下三种情况：</p><ol><li>考虑中间元素，跨越左右两部分，从中间元素开始，往左求出后缀最大，往右求出前缀足底啊，保持连续性。</li><li>不考虑中间元素，最大子序列和出现在左半部分，递归求解左边部分最大子序列和。</li><li>不考虑中间元素，最大子序列和出现在右半部分，递归求解右边部分最大子序列和</li></ol><p>分别求出上述三种情况的最大子序，三者中最大值即为最大子序和</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l <span class="token operator">&gt;</span> r<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        left <span class="token operator">=</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        right <span class="token operator">=</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        left_suffix_max_sum <span class="token operator">=</span> right_prefix_max_sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            left_suffix_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left_suffix_max_sum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            right_prefix_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>right_prefix_max_sum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        cross_max_man <span class="token operator">=</span> left_suffix_max_sum <span class="token operator">+</span> right_prefix_max_sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cross_max_man<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法四：动态规划"><a href="#方法四：动态规划" class="headerlink" title="方法四：动态规划"></a>方法四：动态规划</h3><p>动态规划的难点在于找到动态转移方程，<code>dp[i]</code>-表示当前位置<code>i</code>的最大子序和，状态转移方程为<code>dp[i]=max(dp[i-1] + nums[i], nums[i])</code>，初始化<code>dp[0] = nums[0]</code>，从状态转移方程中，只需要关注一个状态的值，不需要开一个数组记录位置所有子序列和，只需要两个变量<code>curMaxSum</code> - 累计最大和到当前位置，<code>maxSum</code> - 全局最大子序和</p><p><code>currMaxSum = max(currMaxSum + nums[i], nums[i])</code></p><p><code>maxSum = max(currMaxSum, maxSum)</code></p><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        max_sum <span class="token operator">=</span> curr_max_sum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            curr_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>curr_max_sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>curr_max_sum<span class="token punctuation">,</span> max_sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> max_sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0088-合并两个有序数组</title>
      <link href="/leetcode-shua-ti-0088-he-bing-liang-ge-you-xu-shu-zu/"/>
      <url>/leetcode-shua-ti-0088-he-bing-liang-ge-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定两个按非递减顺序排列的整数数组<code>nums1</code>和<code>nums2</code>，另有两个整数<code>m</code>和<code>n</code>，分别表示<code>nums1</code>和<code>nums2</code>中的元素数目。请合并<code>nums2</code>到<code>nums1</code>中，使得合并后的数组同样按非递减顺序排列</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组<code>nums1</code>中，为了应当此种情况，<code>nums1</code>的初始长度为<code>m+n</code>，其中前<code>m</code>个元素表示应合并的元素，后<code>n</code>个元素为<code>0</code>。<code>nums2</code>的长度为<code>n</code>。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1 = [1,2,3,0,0,0], m=3, nums2=[2,5,6], n=3输出: [1,2,2,3,5,6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1=[1], m=1, nums2=[], n=0输出：[1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="三指针法"><a href="#三指针法" class="headerlink" title="三指针法"></a>三指针法</h3><p>算法复杂度 时间O(M+N) + 空间O(1)</p><p>写指针记录当前填补的那个位置，m指针用于记录nums1处理的那个元素，n指针用于记录nums2处理的那个元素。从后往前比较，并从后往前插入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        pos <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> m <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                n <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                m <span class="token operator">-=</span> <span class="token number">1</span>            pos <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            n <span class="token operator">-=</span> <span class="token number">1</span>            pos <span class="token operator">-=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0066-加一</title>
      <link href="/leetcode-shua-ti-0066-jia-yi/"/>
      <url>/leetcode-shua-ti-0066-jia-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一</p><p>最高位数组存放在数组的首位，数组中每个元素只存储单个数字</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: digits = [1, 2, 3]输出: [1, 2, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: digits = [4, 3, 2, 1]输出: [4, 3, 2, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="反向遍历数组"><a href="#反向遍历数组" class="headerlink" title="反向遍历数组"></a>反向遍历数组</h3><p>算法复杂度  时间O(N) +空间O(1)</p><p>两条链表先遍历其中一个，将其所有节点存入哈希表，然后遍历另一个链表，检查节点是否在哈希表中，第一个存在的节点就是相交节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span>        digits<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span>                <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    digits<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    digits<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> digits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0101-对称二叉树</title>
      <link href="/leetcode-shua-ti-0101-dui-cheng-er-cha-shu/"/>
      <url>/leetcode-shua-ti-0101-dui-cheng-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，检查它是否是镜像对称的</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1, 2, 2, 3, 4, 4, 3]输出: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1, 2, 2, null, 3, null, 3]输出: False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root1 <span class="token keyword">and</span> <span class="token keyword">not</span> root2            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root1 <span class="token keyword">or</span> <span class="token keyword">not</span> root2<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> root1<span class="token punctuation">.</span>val <span class="token operator">!=</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0104-二叉树的最大深度</title>
      <link href="/leetcode-shua-ti-0104-er-cha-shu-de-zui-da-shen-du/"/>
      <url>/leetcode-shua-ti-0104-er-cha-shu-de-zui-da-shen-du/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，找出其最大深度，二叉树的深度为根节点到最远子节点的最长路径上的节点数</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [3, 9, 20, null, null, 15, 7]输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>由于数是一种递归的数据结构，因此使用递归去解决比较容易。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left <span class="token keyword">and</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：迭代法"><a href="#方法二：迭代法" class="headerlink" title="方法二：迭代法"></a>方法二：迭代法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>使用树的层次遍历（BFS)</p><p>关键点：</p><ul><li><p>队列</p></li><li><p>队列中用None来划分每层，或者在对每层进行迭代之前保存当前队列元素的个数</p></li><li><p>树的基本操作-遍历-层次遍历</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        q<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            node <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>           <span class="token keyword">elif</span> q<span class="token punctuation">:</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>                depth <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> depth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0108-将有序数组转换为二叉搜索树</title>
      <link href="/leetcode-shua-ti-0108-jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-suo-shu/"/>
      <url>/leetcode-shua-ti-0108-jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-suo-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="将有序数组转换为二叉搜索树"><a href="#将有序数组转换为二叉搜索树" class="headerlink" title="将有序数组转换为二叉搜索树"></a>将有序数组转换为二叉搜索树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个升序的整数数组，将其转换为一颗高度平衡二叉搜索树</p><p>高度平衡二叉树是一颗满足每个节点的左右两个子树的高度差的绝对值不超过1的二叉树</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[-10,-3,0,5,9]输出: [0,-3,9,-10,null,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>算法复杂度 时间O(N) + 空间O(N^2)</p><p>找中点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>sortedArrayToBST<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>sortedArrayToBST<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：改进的递归法"><a href="#方法二：改进的递归法" class="headerlink" title="方法二：改进的递归法"></a>方法二：改进的递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>每次递归不用开辟新的空间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">reBuild</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left <span class="token operator">&gt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">return</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0121-买卖股票的最佳时机①</title>
      <link href="/leetcode-shua-ti-0121-mai-mai-gu-piao-de-zui-jia-shi-ji/"/>
      <url>/leetcode-shua-ti-0121-mai-mai-gu-piao-de-zui-jia-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机①"><a href="#买卖股票的最佳时机①" class="headerlink" title="买卖股票的最佳时机①"></a>买卖股票的最佳时机①</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>prices</code>，它的第<code>i</code>个元素<code>prices[i]</code>表示给定股票第<code>i</code>天的价格。</p><p>你只能选择某一天买入这只股票，并选择在未来的某一个不同的日子卖出这支股票。设计一个算法来计算你能获得的最大利润并返回。如果不能获得任何利润，返回<code>0</code></p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,1,5,3,6,4]输出: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,6,4,3,1]输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="遍历求最大值"><a href="#遍历求最大值" class="headerlink" title="遍历求最大值"></a>遍历求最大值</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prices<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        min_price <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        max_profit <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> price <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            <span class="token keyword">if</span> price <span class="token operator">&lt;</span> min_price<span class="token punctuation">:</span>                min_price <span class="token operator">=</span> price            <span class="token keyword">elif</span> max_profit <span class="token operator">&lt;</span> price <span class="token operator">-</span> min_price<span class="token punctuation">:</span>                max_profit <span class="token operator">=</span> price <span class="token operator">-</span> min_price        <span class="token keyword">return</span> max_profit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0125-验证回文串</title>
      <link href="/leetcode-shua-ti-0125-yan-zheng-hui-wen-chuan/"/>
      <url>/leetcode-shua-ti-0125-yan-zheng-hui-wen-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="验证回文串"><a href="#验证回文串" class="headerlink" title="验证回文串"></a>验证回文串</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "A man, a plan, a canal: Panama"输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "race a car"输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><ul><li>使用头尾双指针，如果两个指针的元素不相同，直接返回false</li><li>如果两个指针的元素相同，更新头尾指针，循环直到头尾指针相遇</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">continue</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用python语言特征</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> s <span class="token keyword">if</span> i<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0122-买卖股票的最佳时机②</title>
      <link href="/leetcode-shua-ti-0122-mai-mai-gu-piao-de-zui-jia-shi-ji/"/>
      <url>/leetcode-shua-ti-0122-mai-mai-gu-piao-de-zui-jia-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机②"><a href="#买卖股票的最佳时机②" class="headerlink" title="买卖股票的最佳时机②"></a>买卖股票的最佳时机②</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>prices</code>，它的第<code>i</code>个元素<code>prices[i]</code>表示给定股票第<code>i</code>天的价格。</p><p>设计一个算法来计算你能获得的最大利润并返回。可以多次买卖一支股票，但是必须在再次购买前出售掉之前的股票</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,1,5,3,6,4]输出: 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,6,4,3,1]输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="遍历求最大值"><a href="#遍历求最大值" class="headerlink" title="遍历求最大值"></a>遍历求最大值</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prices<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0136-只出现一次的数字</title>
      <link href="/leetcode-shua-ti-0136-zhi-chu-xian-yi-ci-de-shu-zi/"/>
      <url>/leetcode-shua-ti-0136-zhi-chu-xian-yi-ci-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个非空整数数组，除了某个元素只出现一次外，其余元素均出现两次，找出那个只出现一次的元素，要求线性时间复杂度且不使用额外空间</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,2,1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [4,1,2,1,2]输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="异或法"><a href="#异或法" class="headerlink" title="异或法"></a>异或法</h3><p>利用二进制异或的性质，将所有数字异或即可得唯一出现一次的数字</p><p>关键点：</p><ul><li>异或的性质 两个数字异或的结果<code>a^b</code>的二进制每一位进行运算，得出数字，运算的逻辑是，如果同一位数字相同则为0，不同则为1</li><li>任何数异或本身为0</li><li>任何数和0异或是本身</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            res <span class="token operator">^</span><span class="token operator">=</span> num        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0155-最小栈</title>
      <link href="/leetcode-shua-ti-0155-zui-xiao-zhan/"/>
      <url>/leetcode-shua-ti-0155-zui-xiao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h1><p><a href="https://leetcode-cn.com/problems/min-stack/">https://leetcode-cn.com/problems/min-stack/</a></p><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>设计一个支持<code>push</code>,<code>pop</code>,<code>top</code>操作，并能在常数时间内检测到最小元素的栈。</p><ul><li><code>push(x)</code>——将元素<code>x</code>推入栈中</li><li><code>pop(x)</code>——删除栈顶元素</li><li><code>top()</code>——获取栈顶元素</li><li><code>getMin()</code>——检索栈中的最小元素</li></ul><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: ["MinStack","push","push","push","getMin","pop","top","getMin"][[],[-2],[0],[-3],[],[],[],[]]输出: [null,null,null,null,-3,null,0,-2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：两个栈"><a href="#方法一：两个栈" class="headerlink" title="方法一：两个栈"></a>方法一：两个栈</h3><p>算法复杂度 时间O(1) + 空间O(1)</p><ul><li>一个栈存放全部的元素，<code>push</code>和<code>pop</code>都是正常操作</li><li>另一个栈存放最小栈，每次<code>push</code>，如果比最小栈的栈顶元素小，则<code>push</code>进最小栈</li><li>每次<code>pop</code>的时候判断是否和最小栈栈顶元素相同，如果相同则<code>pop</code>掉最小栈栈顶元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>minStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>minStack <span class="token keyword">or</span> val <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：一个栈"><a href="#方法二：一个栈" class="headerlink" title="方法二：一个栈"></a>方法二：一个栈</h3><p>算法复杂度 时间O(1) + 空间O(1)</p><ul><li>最小栈存储的不是真实值，而是真实值与min的差值</li><li>top的时候涉及到对数据的还原，这里千万注意是上一个最小值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>minV <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val <span class="token operator">-</span> self<span class="token punctuation">.</span>minV<span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>minV<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minV <span class="token operator">=</span> val                <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            <span class="token keyword">return</span>        tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minV <span class="token operator">-=</span> tmp            <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            <span class="token keyword">return</span>       tmp <span class="token operator">=</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV <span class="token operator">+</span> tmp            <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0167-两数之和②-输入有序数组</title>
      <link href="/leetcode-shua-ti-0167-liang-shu-zhi-he-shu-ru-you-xu-shu-zu/"/>
      <url>/leetcode-shua-ti-0167-liang-shu-zhi-he-shu-ru-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和②-输入有序数组"><a href="#两数之和②-输入有序数组" class="headerlink" title="两数之和②-输入有序数组"></a>两数之和②-输入有序数组</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个非递减顺序排列的整数数组<code>nums</code>和一个整数目标值<code>target</code>，从该整数数组<code>nums</code>中找出和为目标值<code>target</code>的那两个整数，并返回他们的数组下标。下标从<code>1</code>开始计数</p><p>假设每种输入只会对应一个答案，数组中同一个元素在答案里不能重复出现，可以按任意顺序返回答案。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [2,7,11,15], target=9输出: [1, 2]解释：2 + 7 = 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3,2,4], target=6输出: [2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希表法"><a href="#方法一：哈希表法" class="headerlink" title="方法一：哈希表法"></a>方法一：哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>创建一个哈希表，对于每一个<code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p>关键点：</p><ul><li>求和转换为求差</li><li>借助哈希结构将数组中每个元素及其索引相互对应</li><li>以空间换时间，将查找时间从O(N)减低到O(1)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p>复杂度 时间O(N)+空间O(1)</p><p>因为数组是有序的，所以使用双指针法。一个<code>left</code>指针，一个<code>right</code>指针，如果<code>left+right</code>的值大于<code>target</code>，则<code>right</code>减1，否则<code>left</code>加1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>           <span class="token keyword">elif</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0160-相交链表</title>
      <link href="/leetcode-shua-ti-0160-xiang-jiao-lian-biao/"/>
      <url>/leetcode-shua-ti-0160-xiang-jiao-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>编写一个程序，找到两个单链表相交的起始节点</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: intersectVal=8, listA=[4, 1, 8, 4, 5], listB = [5, 0, 1, 8, 4, 5], skipA= 2, skipB = 3输出: Intersected at '8'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: intersectVal=2, listA=[0, 9, 1, 2, 4], listB = [3, 2, 4], skipA= 3, skipB = 1输出: Intersected at '2'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希法"><a href="#方法一：哈希法" class="headerlink" title="方法一：哈希法"></a>方法一：哈希法</h3><p>算法复杂度  时间O(N) +空间O(N)</p><p>两条链表先遍历其中一个，将其所有节点存入哈希表，然后遍历另一个链表，检查节点是否在哈希表中，第一个存在的节点就是相交节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        data <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> headA<span class="token punctuation">:</span>            data<span class="token punctuation">.</span>add<span class="token punctuation">(</span>headA<span class="token punctuation">)</span>            headA <span class="token operator">=</span> headA<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> headB<span class="token punctuation">:</span>            <span class="token keyword">if</span> headB <span class="token keyword">in</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span> headB            headB <span class="token operator">=</span> headB<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>使用a,b两个指针分别指向A, B两条链表，两个指针以相同的速度向后移动</p><p>当a到达链表的尾部时，重定位到链表B的头结点</p><p>当b到达链表的尾部时，重定位到链表A的头结点</p><p>a, b指针相遇的点为相交的起始节点，否则没有相交点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        pA<span class="token punctuation">,</span> pB <span class="token operator">=</span> pheadA<span class="token punctuation">,</span> pheadB        <span class="token keyword">while</span> pA <span class="token operator">!=</span> pB<span class="token punctuation">:</span>            pA <span class="token operator">=</span> pA<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pA <span class="token keyword">else</span> pheadB            pB <span class="token operator">=</span> pB<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pB <span class="token keyword">else</span> pheadA        <span class="token keyword">return</span> pA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0169-多数元素</title>
      <link href="/leetcode-shua-ti-0169-duo-shu-yuan-su/"/>
      <url>/leetcode-shua-ti-0169-duo-shu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个大小为<code>n</code>的数组，找到其中的多数元素。多数元素指在数组中出现次数大于<code>[n/2]</code>的元素</p><p>假设数组是非空的，并且给定的数组总是存在多数元素。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [3,2,3]输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,2,1,1,1,2,2]输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="投票算法"><a href="#投票算法" class="headerlink" title="投票算法"></a>投票算法</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        count<span class="token punctuation">,</span> major <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                major <span class="token operator">=</span> num            <span class="token keyword">if</span> num <span class="token operator">==</span> major<span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                count <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> major<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
