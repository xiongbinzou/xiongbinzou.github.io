<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django-Vue搭建个人博客(4)：前端功能完善</title>
      <link href="/posts/12498.html"/>
      <url>/posts/12498.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备工作">1. 准备工作</h2><h3 id="1-1-安装Axios">1.1 安装Axios</h3><p>虽然现在前后端 Django + Vue 都有了，但还缺一个它们之间通信的手段。Vue 官方推荐的是 <a href="https://github.com/axios/axios">axios</a> 这个前端库。</p><p>命令行进入 <code>frontend</code> 目录，安装 axios</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&gt; npm install axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-解决跨域">1.2 解决跨域</h3><p>跨域问题是由于浏览器的同源策略（域名，协议，端口均相同）造成的，是浏览器施加的安全限制。即Vue 服务器端口（8080）和 Django 服务器端口（8000）不一致，因此无法通过 Javascript 代码请求后端资源。</p><p>解决跨域的方法有两种：</p><p>方法一（前端解决）：前端配置<code>fronted/vite.config.js</code>文件并写入：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/vite.config.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath<span class="token punctuation">,</span> <span class="token constant">URL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'node:url'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'./src'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">'5173'</span><span class="token punctuation">,</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8000/api'</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二（后端解决）：后端引入<code>django-cors-middleware</code>库</p><p>两种解决方法都可以，这里选择前端代理的方法。</p><h2 id="2-Vue结构">2. Vue结构</h2><p>为了理解 Vue 的基本结构，让我们来看三个重要的文件。</p><h3 id="2-1-index-html">2.1 index.html</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- frontend/index.html --&gt;</span> <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/src/main.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个页面是整个前端工程提供 html 的入口，里面的 <code>&lt;div id="app"&gt;</code> 是 Vue 初始化应用程序的根容器。</p><p>不过在前端工程化的思想中，很少会直接去写这类 <code>html</code> 文件。</p><h3 id="2-2-main-js">2.2 main.js</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/src/main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token string">'./assets/main.css'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用是把后续你要写的 Vue 组件挂载到刚才那个 <code>index.html</code> 中。</p><p>如果你有些前端的初始化配置，都可以写到这里。</p><h3 id="2-3-App-vue">2.3 App.vue</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/App.vue --&gt;&lt;script setup&gt;import HelloWorld from './components/HelloWorld.vue'import TheWelcome from './components/TheWelcome.vue'&lt;/script&gt;&lt;template&gt;  &lt;header&gt;    &lt;img alt="Vue logo" class="logo" src="./assets/logo.svg" width="125" height="125" /&gt;    &lt;div class="wrapper"&gt;      &lt;HelloWorld msg="You did it!" /&gt;    &lt;/div&gt;  &lt;/header&gt;  &lt;main&gt;    &lt;TheWelcome /&gt;  &lt;/main&gt;&lt;/template&gt;&lt;style scoped&gt;header {  line-height: 1.5;}.logo {  display: block;  margin: 0 auto 2rem;}@media (min-width: 1024px) {  header {    display: flex;    place-items: center;    padding-right: calc(var(--section-gap) / 2);  }  .logo {    margin: 0 2rem 0 0;  }  header .wrapper {    display: flex;    place-items: flex-start;    flex-wrap: wrap;  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件对应 Vue 的欢迎页面，</p><p>Vue 采用组件化的思想，把同一个组件的内容打包到一起。比如这个默认的 <code>App.vue</code> 文件， <code>&lt;template&gt;</code> 标签就对应传统的 <code>html</code> ，<code>&lt;script&gt;</code> 标签对应 <code>javascript</code> ，<code>&lt;style&gt;</code> 标签对应了 <code>css</code> 。</p><p><code>&lt;HelloWorld .../&gt;</code> 和<code>&lt;TheWelcome /&gt;</code>是封装好的组件，路径位于 <code>frontend/src/components/</code> 。</p><p>以上就是 Vue 项目三个重要的文件，而对入门者来说，最重要的就是各种 <code>.vue</code> 文件，这就是你最主要的写代码的地方。</p><h2 id="3-文章列表">3. 文章列表</h2><h3 id="3-1-初次尝试">3.1 初次尝试</h3><p>Vue 把同一个组件的 <code>template</code> / <code>script</code> / <code>style</code> 打包到一起组成<code>.vue</code>文件。在<code>App.vue</code>里编写文章列表页面代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/App.vue --&gt;&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div class="article-title"&gt;      {{ article.title }}    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'App',  data() {    return {      info: ''    }  },  mounted() {    axios.get('/api/article').then(response =&gt; {      this.info = response.data    })  }}&lt;/script&gt;&lt;style&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除<code>main.js</code>中引入的样式，即删除<code>import './assets/main.css'</code>这一行内容。</p><p>访问地址：<a href="http://localhost:5173/">http://localhost:5173/</a> 即可看到后端文章列表数据被渲染出来了。</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(4)%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/image-20230328201646275.png" alt="初次尝试"></p><h3 id="3-2-优化界面">3.2 优化界面</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/App.vue --&gt;&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div&gt;      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;        {{ tag }}      &lt;/span&gt;    &lt;/div&gt;    &lt;div class="article-title"&gt;      {{ article.title }}    &lt;/div&gt;    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'App',  data() {    return {      info: ''    }  },  mounted() {    axios.get('/api/article').then(response =&gt; {      this.info = response.data    })  },  methods: {    formatted_time(iso_date_string) {      const date = new Date(iso_date_string)      return date.toLocaleDateString()    }  }}&lt;/script&gt;&lt;style&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在博客页面大概是这样子的：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(4)%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/image-20230328201737241.png" alt="image-20230328201737241"></p><h3 id="3-3-添加页眉页脚">3.3 添加页眉页脚</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/App.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;    &lt;hr&gt;  &lt;/div&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div&gt;      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;        {{ tag }}      &lt;/span&gt;    &lt;/div&gt;    &lt;div class="article-title"&gt;      {{ article.title }}    &lt;/div&gt;    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;  &lt;/div&gt;  &lt;div id="footer"&gt;    &lt;p&gt;http://localhost:5173/&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'App',  data() {    return {      info: ''    }  },  mounted() {    axios.get('/api/article').then(response =&gt; {      this.info = response.data    })  },  methods: {    formatted_time(iso_date_string) {      const date = new Date(iso_date_string)      return date.toLocaleDateString()    }  }}&lt;/script&gt;&lt;style&gt;#app {  font-family: Georgia, Arial, sans-serif;  margin-left: 40px;  margin-right: 40px;}#header {  text-align: center;  margin-top: 20px;}#footer {  position: fixed;  left: 0;  bottom: 0;  height: 50px;  width: 100%;  background: whitesmoke;  text-align: center;  font-weight: bold;}#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在博客页面大概是这样子的：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(4)%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/image-20230328203043454.png" alt="添加页眉页脚"></p><h3 id="3-4-组件化">3.4 组件化</h3><p>组件化是 Vue 的核心思想之一。组件可以把网页分解成一个个的小功能，达到代码解耦及复用。</p><p>在 <code>frontend/src/components/</code> 路径下分别创建 <code>ArticleList.vue</code> / <code>BlogHeader.vue</code> / <code>BlogFooter.vue</code> 三个文件，并且把我们之前在 <code>App.vue</code> 中写的代码分别搬运到对应的位置。</p><p>三个文件的内容如下（注意 <code>export</code> 中的 <code>name</code> 有对应的更改）：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/ArticleList.vue --&gt;&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div&gt;      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;        {{ tag }}      &lt;/span&gt;    &lt;/div&gt;    &lt;div class="article-title"&gt;      {{ article.title }}    &lt;/div&gt;    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'ArticleList',  data() {    return {      info: ''    }  },  mounted() {    axios.get('/api/article').then(response =&gt; {      this.info = response.data    })  },  methods: {    formatted_time(iso_date_string) {      const date = new Date(iso_date_string)      return date.toLocaleDateString()    }  }}&lt;/script&gt;&lt;style scoped&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;    &lt;hr&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'BlogHeader'}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogFooter.vue --&gt;&lt;template&gt;  &lt;div id="footer"&gt;    &lt;p&gt;http://localhost:5173/&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'BlogFooter'}&lt;/script&gt;&lt;style scoped&gt;#footer {  position: fixed;  left: 0;  bottom: 0;  height: 50px;  width: 100%;  background: whitesmoke;  text-align: center;  font-weight: bold;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/App.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;article-list /&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import ArticleList from '@/components/ArticleList.vue'export default {  name: 'App',  components: { BlogHeader, BlogFooter, ArticleList }}&lt;/script&gt;&lt;style&gt;#app {  font-family: Georgia, Arial, sans-serif;  margin-left: 40px;  margin-right: 40px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新页面，功能虽然与修改前完全相同，但代码变得更加规整。</p><h2 id="4-文章详情">4. 文章详情</h2><h3 id="4-1-优化文件结构">4.1 优化文件结构</h3><p>由于后续页面会越来越多，为了避免 <code>App.vue</code> 越发臃肿，因此必须优化文件结构。</p><p>新建 <code>frontend/src/views/</code> 目录，用来存放现在及将来所有的页面文件。在此目录新建 <code>Home.vue</code> 文件，把之前的首页代码稍加修改搬运过来：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/Home.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;article-list /&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import ArticleList from '@/components/ArticleList.vue'export default {  name: 'Home',  components: { BlogHeader, BlogFooter, ArticleList }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增文章详情页面：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;blog-footer /&gt;&lt;/template&gt;  &lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'export default {  name: 'ArticleDetail',  components: { BlogHeader, BlogFooter }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>App.vue</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/App.vue --&gt;&lt;template&gt;  &lt;router-view /&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'App',}&lt;/script&gt;&lt;style&gt;#app {  font-family: Georgia, Arial, sans-serif;  margin-left: 40px;  margin-right: 40px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从列表到详情，需要解决页面跳转，采用<strong>前端路由</strong>的方式来实现页面跳转</p><h3 id="4-2-配置路由">4.2 配置路由</h3><p>执行<code>npm install vue-router</code>安装 Vue 的官方前端路由库<code>vue-router</code></p><p>因为 vue-router 会用到文章的 id 作为动态地址，所以修改 <strong>Django 后端</strong>文件<code>article/serializers.py</code>的<code>ArticleBaseSerializer</code>，添加一行 <code>id = serializers.IntegerField(read_only=True)</code> ，简单的把文章的 id 值增加到接口数据中。</p><p>新建 <code>frontend/src/router/index.js</code> 文件用于存放路由相关的文件，写入：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/src/router/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleDetail.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Home  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/:id'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleDetail'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleDetail  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>列表 <code>routes</code> 定义了所有需要挂载到路由中的路径，成员为<strong>路径 url</strong> 、<strong>路径名</strong>和<strong>路径的 vue 对象</strong>。详情页面的动态路由采用冒号 <code>:id</code> 的形式来定义。</li><li>接着就用 <code>createRouter()</code> 创建 router。参数里的 <code>history</code> 定义具体的路由形式，<code>createWebHashHistory()</code> 为哈希模式（具体路径在 # 符号后面）；<code>createWebHistory()</code> 为 HTML5 模式（路径中没有丑陋的 # 符号），此为<strong>推荐模式</strong>，但是<strong>部署时需要额外的配置</strong>。</li></ul><blockquote><p><em>各模式的详细介绍看</em><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">文档</a><em>。</em></p></blockquote><p>将 vue-router 加载 Vue 实例中：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/src/main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，浏览器访问 <a href="http://localhost:5173/">http://localhost:5173/</a> 得到 <strong>Home</strong> 页面</p><h3 id="4-3-文章详情页面">4.3 文章详情页面</h3><p>修改文章列表的组件代码</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/ArticleList.vue --&gt;&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div&gt;      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;        {{ tag }}      &lt;/span&gt;     &lt;/div&gt;    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;      {{ article.title }}    &lt;/router-link&gt;    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'ArticleList',  data() {    return {      info: ''    }  },  mounted() {    axios.get('/api/article').then(response =&gt; {      this.info = response.data    })  },  methods: {    formatted_time(iso_date_string) {      const date = new Date(iso_date_string)      return date.toLocaleDateString()    }  }}&lt;/script&gt;&lt;style scoped&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 vue-router 不再需要常规的 <code>&lt;a&gt;</code> 标签，而是 <code>&lt;router-link&gt;</code> ，<code>:to</code> 属性指定了跳转位置，注意看<strong>动态参数 id</strong> 是如何传递的。</p><p>在 Vue 中，属性前面的冒号 <code>:</code> 表示此属性被”绑定“了。”绑定“的对象可以是某个动态的参数（比如这里的 id 值），也可以是 Vue 所管理的 data，也可以是 methods。冒号 <code>:</code> 实际上是 <code>v-bind:</code> 的缩写。</p><p>Router 骨架就搭建完毕了。此时点击首页的文章标题链接后，应该就顺利跳转到一个只有页眉页脚的详情页面了。</p><p>接下来编写详情页面：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div v-if="article !== null" class="grid-container"&gt;    &lt;div&gt;      &lt;h1 id="title"&gt;{{ article.title }}&lt;/h1&gt;      &lt;p id="subtitle"&gt;本文由 {{ article.author.username }} 发布于 {{ formatted_time(article.created) }}&lt;/p&gt;      &lt;div v-html="article.body_html" class="article-body"&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div&gt;      &lt;h3&gt;目录&lt;/h3&gt;      &lt;div v-html="article.toc_html" class="toc"&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;  &lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import axios from 'axios'export default {  name: 'ArticleDetail',  components: { BlogHeader, BlogFooter },  data() {    return {      article: null    }  },  mounted() {    axios.get('/api/article/' + this.$route.params.id).then(response =&gt; {      this.article = response.data    })  },  methods: {    formatted_time(iso_date_string) {      const date = new Date(iso_date_string)      return date.toLocaleDateString()    }  }}&lt;/script&gt;  &lt;style scoped&gt;.grid-container {  display: grid;  grid-template-columns: 3fr 1fr;}#title {  text-align: center;  font-size: x-large;}#subtitle {  text-align: center;  color: gray;  font-size: small;}&lt;/style&gt;&lt;style&gt;.article-body p img {  max-width: 100%;  border-radius: 50px;  box-shadow: gray 0 0 20px;}.toc ul {  list-style-type: none;}.toc a {  color: gray;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>模板 - template</strong>部分：</p><ul><li>在渲染文章前，逻辑控制语句 <code>v-if</code> 先确认数据是否存在，避免出现<strong>潜在的</strong>调用数据不存在的 bug。</li><li>由于 <code>body_html</code> 、<code>toc_html</code> 都是后端渲染好的 markdown 文本，需要将其直接转换为 HTML ，所以需要用 <code>v-html</code> 标注。</li></ul><p><strong>脚本 - script</strong>部分：</p><ul><li>通过 <code>$route.params.id</code> 可以获得路由中的动态参数，以此拼接为接口向后端请求数据。</li></ul><p><strong>样式 - style</strong>部分：</p><ul><li><code>.grid-container</code> 简单的给文章内容、目录划分了网格区域。</li><li><code>&lt;style&gt;</code> 标签可以有多个，满足“分块强迫症患者”的需求。这里分两个的原因是文章内容、目录都是从原始 HTML 渲染的，不在 <code>scoped</code> 的管理范围内。</li></ul><h2 id="5-翻页与监听">5. 翻页与监听</h2><h3 id="5-1-路由与查询参数">5.1 路由与查询参数</h3><p>详情页面跳转，用到了 vue-router 动态匹配路由的能力。而翻页功能通常不会直接改变当前路由，而是修改 url 中的查询参数来实现。区别如下：</p><pre class="line-numbers language-none"><code class="language-none"># 改变路由https://abc.com/2# 改变查询参数http://abc.com/?page=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-实现翻页">5.2 实现翻页</h3><blockquote><p>翻页在 <code>ArticleList.vue</code> 中完成</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/ArticleList.vue --&gt;&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div&gt;      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;        {{ tag }}      &lt;/span&gt;    &lt;/div&gt;    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;      {{ article.title }}    &lt;/router-link&gt;    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;  &lt;/div&gt;  &lt;div id="paginator"&gt;    &lt;span v-if="is_page_exists('previous')"&gt;      &lt;router-link :to="{ name: 'Home', query: { page: get_page_param('previous') } }"&gt;        Prev      &lt;/router-link&gt;    &lt;/span&gt;    &lt;span class="current-page"&gt;      {{ get_page_param('current') }}    &lt;/span&gt;    &lt;span v-if="is_page_exists('next')"&gt;      &lt;router-link :to="{ name: 'Home', query: { page: get_page_param('next') } }"&gt;        Next      &lt;/router-link&gt;    &lt;/span&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'ArticleList',  data() {    return {      info: '',    }  },  mounted() {    this.get_article_data()  },  methods: {    // 判断页面是否存在    is_page_exists(direction) {      if (direction === 'next') {        return this.info.next !== null      }      return this.info.previous !== null    },    // 获取页码    get_page_param(direction) {      try {        let url_string        switch (direction) {          case 'next':            url_string = this.info.next            break          case 'previous':            url_string = this.info.previous            break          default:            if (!('page' in this.$route.query)) {              return 1            }            if (this.$route.query.page === null) {              return 1            }            return this.$route.query.page        }        const url = new URL(url_string)        return url.searchParams.get('page')      } catch (err) {        return      }    },    // 获取文章列表数据    get_article_data() {      let url = '/api/article/'      const page = Number(this.$route.query.page)      if (!isNaN(page) &amp;&amp; (page !== 0)) {        url = url + '?page=' + page      }      axios.get(url).then(response =&gt; {        this.info = response.data      }).catch(error =&gt; {        console.log(error)      })    },  },  watch: {    // 监听路由变化    $route() {      this.get_article_data()    }  },  computed: {    // 格式化时间    formatted_time() {      return timeString =&gt; new Date(timeString).toLocaleDateString()    }  }}&lt;/script&gt;&lt;style scoped&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}#paginator {  text-align: center;  padding-top: 50px;}a {  color: black;}.current-page {  font-size: x-large;  font-weight: bold;  padding-left: 10px;  padding-right: 10px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>is_page_exists(...)</code> 用于确认需要跳转的页面是否存在，如果不存在那就不渲染对应的跳转标签。它的唯一参数用于确定页面的方向（当前页、上一页或下一页）。</li><li><code>get_page_param(...)</code> 用于获取页码。</li><li><code>router-link</code> 通过 query 传递参数</li><li><code>try</code> 是为了避免潜在的取值问题（比如网速缓慢时 <code>info</code> 还未获取到数据）， <code>catch</code> 语句向控制台打印报错。</li><li><code>switch</code> 用来控制翻页方向，它默认查询了当前的页码，用于显示。</li><li><code>watch</code> 的作用是监听路由的变化，一旦发生变化则立即根据当前页码更新对应的文章数据。</li><li><code>computed</code> 用来格式化时间，与<code>methods</code>不同之处在于，<strong>competed</strong> 有缓存，在值不变的情况下不会再次计算，而是直接使用缓存中的值。</li></ul><h2 id="6-搜索文章">6. 搜索文章</h2><h3 id="6-1-实现输入框">6.1 实现输入框</h3><p>将搜索框放在页眉，这样用户在博客的所有页面都能找到搜索框。修改<code>BlogHeader.vue</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;div class="search"&gt;        &lt;form&gt;          &lt;input v-model="searchText" type="text" placeholder="输入搜索内容..."&gt;          &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;        &lt;/form&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;hr&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'BlogHeader',  data() {    return {      searchText: ''    }  },  methods: {    searchArticle() {      const text = this.searchText.trim()      if (text.charAt(0) !== '') {        this.$router.push({ name: 'Home', query: { search: text } })      }    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.search {  padding-top: 22px;}* {  box-sizing: border-box;}form {  position: relative;  width: 200px;  margin: 0 auto;}input,button {  border: none;  outline: none;}input {  width: 100%;  height: 35px;  padding-left: 13px;  padding-right: 46px;}button {  height: 35px;  width: 35px;  cursor: pointer;  position: absolute;}.search input {  border: 2px solid gray;  border-radius: 5px;  background: transparent;  top: 0;  right: 0;}.search button {  background: gray;  border-radius: 0 5px 5px 0;  width: 45px;  top: 0;  right: 0;}.search button:before {  content: "搜索";  font-size: 13px;  color: white;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>v-model</code> 指令可以在表单控件上创建<strong>双向数据绑定</strong>。具体来说，就是上面的 <code>&lt;input&gt;</code> 中的数据和 Vue 管理的 <code>searchText</code> 数据绑定在一起了，其中一个发生变化，另一个也会改变。</li><li><code>@click</code> 绑定了按钮的<strong>鼠标点击事件</strong>，即点击则触发 <code>searchArticles()</code> 方法。<code>.prevent</code> 用于阻止按钮原本的表单提交功能。</li><li><code>&lt;router-link&gt;</code> 标签实现路由跳转。在必要时候也可以通过脚本来<strong>动态实现</strong>路由跳转，即 <code>this.$router.push(...)</code> 。注意 <code>this.$route</code> 和 <code>this.$router</code> ，前者代表路径对象，后者代表路由器对象。</li></ul><h3 id="6-2-实现搜索">6.2 实现搜索</h3><p>在 <code>ArticleList.vue</code> 里进行修改（主要是 Javascript 部分）。</p><p>旧的翻页 <code>&lt;router-link&gt;</code> 仅考虑了路径参数中的 <code>page</code> 值。为了在翻页后取得包括 <code>page</code> 和 <code>search</code> 的正确路径，新写一个方法 <code>get_path()</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/ArticleList.vue --&gt;&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div&gt;      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;        {{ tag }}      &lt;/span&gt;    &lt;/div&gt;    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;      {{ article.title }}    &lt;/router-link&gt;    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;  &lt;/div&gt;  &lt;div id="paginator"&gt;    &lt;span v-if="is_page_exists('previous')"&gt;      &lt;router-link :to="get_path('previous')"&gt;        Prev      &lt;/router-link&gt;    &lt;/span&gt;    &lt;span class="current-page"&gt;      {{ get_page_param('current') }}    &lt;/span&gt;    &lt;span v-if="is_page_exists('next')"&gt;      &lt;router-link :to="get_path('next')"&gt;        Next      &lt;/router-link&gt;    &lt;/span&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'ArticleList',  data() {    return {      info: '',    }  },  mounted() {    this.get_article_data()  },  methods: {    // 判断页面是否存在    is_page_exists(direction) {      if (direction === 'next') {        return this.info.next !== null      }      return this.info.previous !== null    },    // 获取页码    get_page_param(direction) {      try {        let url_string        switch (direction) {          case 'next':            url_string = this.info.next            break          case 'previous':            url_string = this.info.previous            break          default:            if (!('page' in this.$route.query)) {              return 1            }            if (this.$route.query.page === null) {              return 1            }            return this.$route.query.page        }        const url = new URL(url_string)        return url.searchParams.get('page')      } catch (err) {        return      }    },    // 获取文章列表数据    get_article_data() {      let url = '/api/article/'      let params = new URLSearchParams()      if (this.isExists(this.$route.query.page)) {        params.append('page', this.$route.query.page)      }      if (this.isExists(this.$route.query.search)) {        params.append('search', this.$route.query.search)      }      const paramsString = params.toString()      if (paramsString.charAt(0) !== '') {        url += '/?' + paramsString      }      axios.get(url).then(response =&gt; {        this.info = response.data      }).catch(error =&gt; {        console.log(error)      })    },    // 获取路径    get_path(direction) {      let url = ''      try {        switch (direction) {          case 'next':            if (this.info.next !== undefined) {              url += (new URL(this.info.next)).search            }            break          case 'previous':            if (this.info.previous !== undefined) {              url += (new URL(this.info.previous)).search            }            break        }      } catch {        return url      }      return url    },    // 检查参数是否存在    isExists(value) {      return value !== null &amp;&amp; value !== undefined    }  },  watch: {    // 监听路由变化    $route() {      this.get_article_data()    }  },  computed: {    // 格式化时间    formatted_time() {      return timeString =&gt; new Date(timeString).toLocaleDateString()    }  }}&lt;/script&gt;&lt;style scoped&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}#paginator {  text-align: center;  padding-top: 50px;}a {  color: black;}.current-page {  font-size: x-large;  font-weight: bold;  padding-left: 10px;  padding-right: 10px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于处理路径参数的 <code>URLSearchParams()</code> 对象。为了将路径中已有的参数添加到 <code>URLSearchParams()</code> 中，编写isExists方法<strong>判断值是否存在</strong>，然后用 <code>append()</code> 方法添加到路径。</p><h2 id="7-用户注册">7. 用户注册</h2><p>前面都是实现文章的 GET 请求，接下来实现更新、删除之类的请求，从用户管理入手。</p><h3 id="7-1-注册页面">7.1 注册页面</h3><p>新建 <code>frontend/src/views/Login.vue</code> 文件作为用户注册（以及登录）的页面：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/Login.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div id="grid"&gt;    &lt;div id="signup"&gt;      &lt;h3&gt;注册账号&lt;/h3&gt;      &lt;form&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;账号：&lt;/span&gt;          &lt;input type="text" v-model="signupName" placeholder="输入用户名"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;密码：&lt;/span&gt;          &lt;input type="password" v-model="signupPwd" placeholder="输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;确认密码：&lt;/span&gt;          &lt;input type="password" v-model="signupPwdConfirm" placeholder="再次输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;button @click.prevent="signup"&gt;提交&lt;/button&gt;        &lt;/div&gt;      &lt;/form&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import BlogHeader from '@/components/BlogHeader.vue';import BlogFooter from '@/components/BlogFooter.vue';export default {  name: "Login",  components: { BlogHeader, BlogFooter },  data() {    return {      signupName: '',      signupPwd: '',      signupPwdConfirm: '',      signupResponse: null,    }  },  methods: {    signup() {      if (this.signupPwd !== this.signupPwdConfirm) {        alert("两次密码不一致，请重新输入!")        return      }      axios.post('/api/user/', {        username: this.signupName,        password: this.signupPwd,      }).then((response) =&gt; {        this.signupResponse = response.data        alert('用户注册成功')      }).catch((error) =&gt; {        alert('用户注册失败:', error.message)      })    }  }}&lt;/script&gt;&lt;style scoped&gt;#grid {  display: grid;  grid-template-columns: 1fr 1fr;}#signup {  text-align: center;}.form-elem {  padding: 10px;}.label {  display: inline-block;  width: 80px;  text-align: justify;  text-align-last: justify;  margin-right: 1px;}input {  height: 25px;  padding-left: 10px;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: gray;  color: whitesmoke;  border-radius: 5px;  width: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的功能是将表单中的用户名和密码 <code>post</code> 到 <code>/api/user/</code> 接口，若创建成功则提醒用户前往登录，失败则将提示信息显示出来。</p><h3 id="7-2-注册路由">7.2 注册路由</h3><p>在<code>frontend/src/router/index.js</code>中添加注册路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/src/router/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleDetail.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Login.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Home  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/:id'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleDetail'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleDetail  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>frontend/src/components/BlogHeader.vue</code>添加入口：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;div class="search"&gt;        &lt;form&gt;          &lt;input v-model="searchText" type="text" placeholder="输入搜索内容..."&gt;          &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;        &lt;/form&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;hr&gt;    &lt;div class="login"&gt;      &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'BlogHeader',  data() {    return {      searchText: ''    }  },  methods: {    searchArticle() {      const text = this.searchText.trim()      if (text.charAt(0) !== '') {        this.$router.push({ name: 'Home', query: { search: text } })      }    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.search {  padding-top: 22px;}* {  box-sizing: border-box;}form {  position: relative;  width: 200px;  margin: 0 auto;}input,button {  border: none;  outline: none;}input {  width: 100%;  height: 35px;  padding-left: 13px;  padding-right: 46px;}button {  height: 35px;  width: 35px;  cursor: pointer;  position: absolute;}.search input {  border: 2px solid gray;  border-radius: 5px;  background: transparent;  top: 0;  right: 0;}.search button {  background: gray;  border-radius: 0 5px 5px 0;  width: 45px;  top: 0;  right: 0;}.search botton:before {  content: "搜索";  font-size: 13px;  color: white;}.login {  text-align: right;  padding-right: 5px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-用户登录">8. 用户登录</h2><p>由于后端的认证方式为 JWT 认证，即后端返回给前端一个 token，前端在请求的 Header 中附带此 token 令牌来证明身份。<strong>token 保存在前端的什么地方？</strong></p><p>本教程将采用 token 保存在 <code>localStorage</code> 中，实现登录功能。</p><blockquote><p><em>此问题有广泛的讨论，因为 token 无论是保存在 localStorage、sessionStorage 或者 cookie 中均存在某些情况下被盗取的可能。网络安全不是本教程重点关注的问题，因此为了入门平滑将 token 保存于 localStorage 中，更深入的对安全的讨论请见</em> <a href="https://hasura.io/blog/best-practices-of-using-jwt-with-graphql/">HASURA</a><em>、</em><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie">MDN</a><em>以及</em><a href="https://stackoverflow.com/questions/26340275/where-to-save-a-jwt-in-a-browser-based-application-and-how-to-use-it">Stackoverflow</a><em>。有关 localStorage 的入门讲解</em><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage">看这里</a><em>。</em></p></blockquote><h3 id="8-1-登录页面">8.1 登录页面</h3><p>在 <code>Login.vue</code> 添加登录的表单的代码</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/Login.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div id="grid"&gt;    &lt;div id="signup"&gt;      &lt;h3&gt;注册账号&lt;/h3&gt;      &lt;form&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;账号：&lt;/span&gt;          &lt;input type="text" v-model="signupName" placeholder="输入用户名"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;密码：&lt;/span&gt;          &lt;input type="password" v-model="signupPwd" placeholder="输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;确认密码：&lt;/span&gt;          &lt;input type="password" v-model="signupPwdConfirm" placeholder="再次输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;button @click.prevent="signup"&gt;提交&lt;/button&gt;        &lt;/div&gt;      &lt;/form&gt;    &lt;/div&gt;    &lt;div id="signin"&gt;      &lt;h3&gt;登录账号&lt;/h3&gt;      &lt;form&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;账号：&lt;/span&gt;          &lt;input type="text" v-model="signinName" placeholder="输入用户名"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;密码：&lt;/span&gt;          &lt;input type="password" v-model="signinPwd" placeholder="输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;button @click.prevent="signin"&gt;登录&lt;/button&gt;        &lt;/div&gt;      &lt;/form&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import BlogHeader from '@/components/BlogHeader.vue';import BlogFooter from '@/components/BlogFooter.vue';export default {  name: "Login",  components: { BlogHeader, BlogFooter },  data() {    return {      signupName: '',      signupPwd: '',      signupPwdConfirm: '',      signinName: '',      signinPwd: '',      signupResponse: null,    }  },  methods: {    signup() {      if (this.signupPwd !== this.signupPwdConfirm) {        alert("两次密码不一致，请重新输入!")        return      }      axios.post('/api/user/', {        username: this.signupName,        password: this.signupPwd,      }).then((response) =&gt; {        this.signupResponse = response.data        alert('用户注册成功')      }).catch((error) =&gt; {        alert('用户注册失败:', error.message)      })    },    signin() {      axios.post('/api/token/', {        username: this.signinName,        password: this.signinPwd,      }).then((response) =&gt; {        const storage = localStorage        const expiredTime = Date.parse(response.headers.date) + 10800000        storage.setItem('access.myblog', response.data.access)        storage.setItem('refresh.myblog', response.data.refresh)        storage.setItem('expiredTime.myblog', expiredTime)        storage.setItem('username.myblog', this.signinName)        this.$router.push({ name: 'Home' })      }).catch((error) =&gt; {        alert('用户登录失败:', error.message)      })    }  }}&lt;/script&gt;&lt;style scoped&gt;#grid {  display: grid;  grid-template-columns: 1fr 1fr;}#signup {  text-align: center;}#signin {  text-align: center;}.form-elem {  padding: 10px;}.label {  display: inline-block;  width: 80px;  text-align: justify;  text-align-last: justify;  margin-right: 1px;}input {  height: 25px;  padding-left: 10px;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: gray;  color: whitesmoke;  border-radius: 5px;  width: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-显示登录状态">8.2 显示登录状态</h3><p>修改<code>frontend/src/components/Blogheader.vue</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/Blogheader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;div class="search"&gt;        &lt;form&gt;          &lt;input v-model="searchText" type="text" placeholder="输入搜索内容..."&gt;          &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;        &lt;/form&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;hr&gt;    &lt;div class="login"&gt;      &lt;div v-if="hasLogin"&gt;欢迎，{{ username }}&lt;/div&gt;      &lt;div v-else&gt;        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'BlogHeader',  data() {    return {      searchText: '',      username: '',      hasLogin: false,    }  },  methods: {    searchArticle() {      const text = this.searchText.trim()      if (text.charAt(0) !== '') {        this.$router.push({ name: 'Home', query: { search: text } })      }    }  },  mounted() {    const storage = localStorage    const expiredTime = Number(storage.getItem('expiredTime.myblog'))    const current = (new Date()).getTime()    const refreshToken = storage.getItem('refresh.myblog')    this.username = storage.getItem('username.myblog')    if (expiredTime &gt; current) {      this.hasLogin = true    } else if (refreshToken !== null) {      axios.post('/api/token/refresh/', { refresh: refreshToken }).then((response) =&gt; {        const nextExpiredTime = Date.parse(response.headers.date) + 10800000        storage.setItem('access.myblog', response.data.access)        storage.setItem('expiredTime.myblog', nextExpiredTime)        this.hasLogin = true      }).catch(() =&gt; {        storage.clear()        this.hasLogin = false        alert('请重新登录')      })    } else {      storage.clear()      this.hasLogin = false      alert('请重新登录')    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.search {  padding-top: 22px;}* {  box-sizing: border-box;}form {  position: relative;  width: 200px;  margin: 0 auto;}input,button {  border: none;  outline: none;}input {  width: 100%;  height: 35px;  padding-left: 13px;  padding-right: 46px;}button {  height: 35px;  width: 35px;  cursor: pointer;  position: absolute;}.search input {  border: 2px solid gray;  border-radius: 5px;  background: transparent;  top: 0;  right: 0;}.search button {  background: gray;  border-radius: 0 5px 5px 0;  width: 45px;  top: 0;  right: 0;}.search button:before {  content: "搜索";  font-size: 13px;  color: white;}.login {  text-align: right;  padding-right: 5px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-用户资料">9 用户资料</h2><h3 id="9-1-搜索框组件化">9.1 搜索框组件化</h3><p>把搜索框组件化，新建一个<code>SearchButton.vue</code>文件，把<code>BlogHeader.vue</code>中与搜索相关的内容全部搬运过来。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/SearchButton.vue --&gt;&lt;template&gt;  &lt;div class="search"&gt;    &lt;form&gt;      &lt;input type="text" v-model="searchText" placeholder="输入搜索内容..."&gt;      &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;    &lt;/form&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: 'SearchButton',  data() {    return {      searchText: '',    }  },  methods: {    searchArticle() {      const text = this.searchText.trim()      if (text.charAt(0) !== '') {        this.$router.push({ name: 'Home', query: { search: text } })      } else {        this.$router.push({ name: 'Home' })      }    }  }}&lt;/script&gt;&lt;style scoped&gt;.search {  padding-top: 22px;}* {  box-sizing: border-box;}form {  position: relative;  width: 200px;  margin: 0 auto;}input,button {  border: none;  outline: none;}input {  width: 100%;  height: 35px;  padding-left: 13px;  padding-right: 46px;}button {  height: 35px;  width: 35px;  cursor: pointer;  position: absolute;}.search input {  border: 2px solid gray;  border-radius: 5px;  background: transparent;  top: 0;  right: 0;}.search button {  background: gray;  border-radius: 0 5px 5px 0;  width: 45px;  top: 0;  right: 0;}.search button:before {  content: "搜索";  font-size: 13px;  color: white;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>BlogHeader.vue</code>对应搜索的部分删除：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;search-button /&gt;    &lt;/div&gt;    &lt;hr&gt;    &lt;div class="login"&gt;      &lt;div v-if="hasLogin"&gt;欢迎，{{ username }}&lt;/div&gt;      &lt;div v-else&gt;        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import SearchButton from '@/components/SearchButton.vue'export default {  name: 'BlogHeader',  data() {    return {      searchText: '',      username: '',      hasLogin: false,    }  },  components: {    SearchButton  },  methods: {  },  mounted() {    const storage = localStorage    const expiredTime = Number(storage.getItem('expiredTime.myblog'))    const current = (new Date()).getTime()    const refreshToken = storage.getItem('refresh.myblog')    this.username = storage.getItem('username.myblog')    if (expiredTime &gt; current) {      this.hasLogin = true    } else if (refreshToken !== null) {      axios.post('/api/token/refresh/', { refresh: refreshToken }).then((response) =&gt; {        const nextExpiredTime = Date.parse(response.headers.date) + 10800000        storage.setItem('access.myblog', response.data.access)        storage.setItem('expiredTime.myblog', nextExpiredTime)        this.hasLogin = true      }).catch(() =&gt; {        storage.clear()        this.hasLogin = false        alert('请重新登录')      })    } else {      storage.clear()      this.hasLogin = false      alert('请重新登录')    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.login {  text-align: right;  padding-right: 5px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-异步和重构">9.2 异步和重构</h3><ul><li>用户资料页面涉及 POST/PATCH 等操作，需要验证用户的身份和 token 有效性；前面写的 <code>BlogHeader.vue</code> 也有类似的需求。因此需要将<strong>验证代码</strong>重构为一个单独的函数。</li><li>把<strong>验证代码</strong>抽象为单独的函数后，由于 <code>axios</code> 发送的请求是异步的，所以要将此处的异步代码转换为同步代码，否则 localStorage 的存取顺序会因为网速的快慢而不可预测，带来潜在 bug。</li></ul><p>新建路径和文件<code>frontend/src/utils/authorization.js</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/src/utils/authorization.js</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">authorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> storage <span class="token operator">=</span> localStorage  <span class="token keyword">let</span> hasLogin <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">let</span> username <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username.myblog'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> expiredTime <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'expiredTime.myblog'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> refreshToken <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'refresh.myblog'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expiredTime <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    hasLogin <span class="token operator">=</span> <span class="token boolean">true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'authorization access'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>refreshToken <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'/api/token/refresh/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">refresh</span><span class="token operator">:</span> refreshToken <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> nextExpiredTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10800000</span>      storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'access.myblog'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access<span class="token punctuation">)</span>      storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'expiredTime.myblog'</span><span class="token punctuation">,</span> nextExpiredTime<span class="token punctuation">)</span>      hasLogin <span class="token operator">=</span> <span class="token boolean">true</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'authorization refresh'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      hasLogin <span class="token operator">=</span> <span class="token boolean">false</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'authorization err'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    hasLogin <span class="token operator">=</span> <span class="token boolean">false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'authorization exp'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'authorization done'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>hasLogin<span class="token punctuation">,</span> username<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> authorization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>async/await</code> ： <code>async</code> 表示函数里含有异步操作，<code>await</code> 表示紧跟在后面的表达式需要等待结果。<code>await</code> 关键字只能用在 <code>async</code> 函数中，并且由于它返回的 <code>Promise</code> 对象运行的结果可能是 <code>rejected</code> ，所以最好放到 <code>try...catch</code> 语句中。</li><li><code>async</code> 函数返回的不再是 <code>return</code> 后面的数据，而是包含数据的 <code>Promise</code> 对象，因此调用它的位置需要改为 <code>Promise.then().catch()</code> 进行异常处理。（有点像 <code>axios.then().catch()</code>)</li></ul><h3 id="9-3-用户中心">9.3 用户中心</h3><p>新建 <code>frontend/src/views/UserCenter.vue</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/UserCenter.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div id="user-center"&gt;    &lt;h3&gt;更新资料信息&lt;/h3&gt;    &lt;form&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;用户名：&lt;/span&gt;        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;新密码：&lt;/span&gt;        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import BlogHeader from '@/components/BlogHeader.vue';import BlogFooter from '@/components/BlogFooter.vue';import authorization from '@/utils/authorization'const storage = localStorageexport default {  name: 'UserCenter',  components: {    BlogHeader,    BlogFooter  },  data() {    return {      username: '',      password: '',      token: '',    }  },  mounted() {    this.username = storage.getItem('username.myblog')  },  methods: {    changeInfo() {      authorization().then((resoponse) =&gt; {        if (!resoponse[0]) {          alert('登录已过期，请重新登录')          return        }        console.log('Change info start')        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {          alert('Password too short')          return        }        const oldName = storage.getItem('username.myblog')        let data = {}        if (this.username !== '') {          data.username = this.username        }        if (this.password !== '') {          data.password = this.password        }        this.token = storage.getItem('access.myblog')        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {          const name = response.data.username          storage.setItem('username.myblog', name)          this.$router.push({ name: 'UserCenter', params: { username: name } })        })      })    }  }}&lt;/script&gt;&lt;style scoped&gt;#user-center {  text-align: center;}.form-elem {  padding: 10px;}input {  height: 25px;  padding-left: 10px;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: gray;  color: whitesmoke;  border-radius: 5px;  width: 200px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>检查函数返回的数据，如果登录失效，或者密码太短，则拒绝执行后面的逻辑。</li></ul><ul><li>拿到用户填写的表单数据，并取出保存在本地的令牌，发送到后端接口更新用户数据。</li></ul><p>修改<code>BlogHeader.vue</code>代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;search-button /&gt;    &lt;/div&gt;    &lt;hr&gt;    &lt;div class="login"&gt;      &lt;div v-if="hasLogin"&gt;        &lt;div class="dropdown"&gt;          &lt;button class="dropbtn"&gt;欢迎，{{ username }}&lt;/button&gt;          &lt;div class="dropdown-content"&gt;            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div v-else&gt;        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import SearchButton from '@/components/SearchButton.vue'import authorization from '@/utils/authorization'export default {  name: 'BlogHeader',  data() {    return {      username: '',      hasLogin: false,    }  },  components: {    SearchButton  },  mounted() {    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)  },  methods: {    logout() {      localStorage.clear()      window.location.reload(false)    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.login {  text-align: right;  padding-right: 5px;}.dropbtn {  background-color: mediumaquamarine;  color: white;  padding: 8px 8px 30px 8px;  font-size: 16px;  border: none;  cursor: pointer;  height: 16px;  border-radius: 5px;}.dropdown {  position: relative;  display: inline-block;}.dropdown-content {  display: none;  position: absolute;  background-color: #f9f9f9;  min-width: 120px;  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);  text-align: center;}.dropdown-content a {  color: black;  padding: 12px 16px;  text-decoration: none;  display: block;}.dropdown-content a:hover {  background-color: #f1f1f1;}.dropdown:hover .dropdown-content {  display: block;}.dropdown:hover .dropbtn {  background-color: darkslateblue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路由注册到<code>backend/src/router/index.js</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// backend/src/router/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleDetail.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Login.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">UserCenter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/UserCenter.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Home  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/:id'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleDetail'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleDetail  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:username'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'UserCenter'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> UserCenter  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-组件通信">9.4 组件通信</h3><p>Vue 中父组件向子组件传递信息的方式就是 <code>Props</code> 了，使用 Props 来实现欢迎词的更新。</p><p>修改<code>UserCenter.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/UserCenter.vue --&gt;&lt;template&gt;  &lt;blog-header :welcome-name="welcomeName" /&gt;  &lt;div id="user-center"&gt;    &lt;h3&gt;更新资料信息&lt;/h3&gt;    &lt;form&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;用户名：&lt;/span&gt;        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;新密码：&lt;/span&gt;        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import BlogHeader from '@/components/BlogHeader.vue';import BlogFooter from '@/components/BlogFooter.vue';import authorization from '@/utils/authorization'const storage = localStorageexport default {  name: 'UserCenter',  components: {    BlogHeader,    BlogFooter  },  data() {    return {      username: '',      password: '',      token: '',      welcomeName: '',    }  },  mounted() {    this.username = storage.getItem('username.myblog')    this.welcomeName = storage.get('username.myblog')  },  methods: {    changeInfo() {      authorization().then((resoponse) =&gt; {        if (!resoponse[0]) {          alert('登录已过期，请重新登录')          return        }        console.log('Change info start')        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {          alert('Password too short')          return        }        const oldName = storage.getItem('username.myblog')        let data = {}        if (this.username !== '') {          data.username = this.username        }        if (this.password !== '') {          data.password = this.password        }        this.token = storage.getItem('access.myblog')        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {          const name = response.data.username          storage.setItem('username.myblog', name)          this.$router.push({ name: 'UserCenter', params: { username: name } })          this.welcomeName = name        })      })    }  }}&lt;/script&gt;&lt;style scoped&gt;#user-center {  text-align: center;}.form-elem {  padding: 10px;}input {  height: 25px;  padding-left: 10px;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: gray;  color: whitesmoke;  border-radius: 5px;  width: 200px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到组件是可以带参数的（也就是 Props 了），这个参数会传递到<strong>子组件</strong>中使用。</p><p>修改<code>BlogHeader.vue</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;search-button /&gt;    &lt;/div&gt;    &lt;hr&gt;    &lt;div class="login"&gt;      &lt;div v-if="hasLogin"&gt;        &lt;div class="dropdown"&gt;          &lt;button class="dropbtn"&gt;欢迎，{{ name }}&lt;/button&gt;          &lt;div class="dropdown-content"&gt;            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div v-else&gt;        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import SearchButton from '@/components/SearchButton.vue'import authorization from '@/utils/authorization'export default {  name: 'BlogHeader',  props: ['welcomeName'],  data() {    return {      username: '',      hasLogin: false,    }  },  components: {    SearchButton  },  mounted() {    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)  },  methods: {    logout() {      localStorage.clear()      window.location.reload(false)    }  },  computed: {    name() {      return this.welcomeName !== undefined ? this.welcomeName : this.username    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.login {  text-align: right;  padding-right: 5px;}.dropbtn {  background-color: mediumaquamarine;  color: white;  padding: 8px 8px 30px 8px;  font-size: 16px;  border: none;  cursor: pointer;  height: 16px;  border-radius: 5px;}.dropdown {  position: relative;  display: inline-block;}.dropdown-content {  display: none;  position: absolute;  background-color: #f9f9f9;  min-width: 120px;  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);  text-align: center;}.dropdown-content a {  color: black;  padding: 12px 16px;  text-decoration: none;  display: block;}.dropdown-content a:hover {  background-color: #f1f1f1;}.dropdown:hover .dropdown-content {  display: block;}.dropdown:hover .dropbtn {  background-color: darkslateblue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>computed</code> 计算属性：</p><ul><li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要与它有关系的参数没有发生改变，多次访问此计算属性会立即返回之前的计算结果，而不必再次执行函数。相比之下，每当触发重新渲染时，<strong>方法</strong>将<strong>总会</strong>再次执行函数。</li><li>**计算属性默认不接受参数，并且不能产生副作用。**也就是说，在它的执行过程中不能改变任何 Vue 所管理的数据，否则将会报错。计算属性是依赖数据工作的，副作用会使代码不可预测。</li></ul><p>一般来说，能用 <code>computed</code> 就尽量用它，不能的再考虑 <code>methods</code> ，算是用空间（缓存）换取时间（效率）</p><p>Vue 的子<strong>组件给父组件传递信息采用的是事件</strong>的形式。</p><p>Vuex 是一个专为 Vue 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。也就是说，Vuex 把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为。</p><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的；应用够简单，最好不要使用 Vuex。一个简单的 <a href="https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">store 模式</a>就足够了。如果需要构建一个中大型单页应用，Vuex 将会成为自然而然的选择。中小型单页应用也可以使用 Pinia。</p><p>Props 虽然能够解决我们的问题，但总要持有 <code>welcomeName</code> 和 <code>username</code> 两个状态，可以使用 <code>ref</code> 访问子组件来改进。在 <code>BlogHeader.vue</code> 中写一个刷新数据的方法：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;search-button /&gt;    &lt;/div&gt;    &lt;hr&gt;    &lt;div class="login"&gt;      &lt;div v-if="hasLogin"&gt;        &lt;div class="dropdown"&gt;          &lt;button class="dropbtn"&gt;欢迎，{{ username }}&lt;/button&gt;          &lt;div class="dropdown-content"&gt;            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div v-else&gt;        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import SearchButton from '@/components/SearchButton.vue'import authorization from '@/utils/authorization'export default {  name: 'BlogHeader',  data() {    return {      username: '',      hasLogin: false,    }  },  components: {    SearchButton  },  mounted() {    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)  },  methods: {    logout() {      localStorage.clear()      window.location.reload(false)    },    refresh() {      this.username = localStorage.getItem('username.myblog')    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.login {  text-align: right;  padding-right: 5px;}.dropbtn {  background-color: mediumaquamarine;  color: white;  padding: 8px 8px 30px 8px;  font-size: 16px;  border: none;  cursor: pointer;  height: 16px;  border-radius: 5px;}.dropdown {  position: relative;  display: inline-block;}.dropdown-content {  display: none;  position: absolute;  background-color: #f9f9f9;  min-width: 120px;  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);  text-align: center;}.dropdown-content a {  color: black;  padding: 12px 16px;  text-decoration: none;  display: block;}.dropdown-content a:hover {  background-color: #f1f1f1;}.dropdown:hover .dropdown-content {  display: block;}.dropdown:hover .dropbtn {  background-color: darkslateblue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 <code>UserCenter.vue</code> 更新用户数据时访问此函数：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/UserCenter.vue --&gt;&lt;template&gt;  &lt;blog-header ref="header" /&gt;  &lt;div id="user-center"&gt;    &lt;h3&gt;更新资料信息&lt;/h3&gt;    &lt;form&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;用户名：&lt;/span&gt;        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;新密码：&lt;/span&gt;        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import BlogHeader from '@/components/BlogHeader.vue';import BlogFooter from '@/components/BlogFooter.vue';import authorization from '@/utils/authorization'const storage = localStorageexport default {  name: 'UserCenter',  components: {    BlogHeader,    BlogFooter  },  data() {    return {      username: '',      password: '',      token: '',    }  },  mounted() {    this.username = storage.getItem('username.myblog')  },  methods: {    changeInfo() {      authorization().then((resoponse) =&gt; {        if (!resoponse[0]) {          alert('登录已过期，请重新登录')          return        }        console.log('Change info start')        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {          alert('Password too short')          return        }        const oldName = storage.getItem('username.myblog')        let data = {}        if (this.username !== '') {          data.username = this.username        }        if (this.password !== '') {          data.password = this.password        }        this.token = storage.getItem('access.myblog')        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {          const name = response.data.username          storage.setItem('username.myblog', name)          this.$router.push({ name: 'UserCenter', params: { username: name } })          this.$refs.header.refresh()        })      })    }  }}&lt;/script&gt;&lt;style scoped&gt;#user-center {  text-align: center;}.form-elem {  padding: 10px;}input {  height: 25px;  padding-left: 10px;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: gray;  color: whitesmoke;  border-radius: 5px;  width: 200px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-5-用户删除">9.5 用户删除</h3><p>删除用户按钮通常会放在用户中心页面，并且为了避免用户误操作，点击后还要进行第二次确认，方可删除。</p><p>修改 <code>UserCenter.vue</code> 文件：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/UserCenter.vue --&gt;&lt;template&gt;  &lt;blog-header ref="header" /&gt;  &lt;div id="user-center"&gt;    &lt;h3&gt;更新资料信息&lt;/h3&gt;    &lt;form&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;用户名：&lt;/span&gt;        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;新密码：&lt;/span&gt;        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="showingDeleteAlert = true" class="delete-btn"&gt;删除用户&lt;/button&gt;        &lt;div :class="{ shake: showingDeleteAlert }"&gt;          &lt;button v-if="showingDeleteAlert" class="confirm-btn" @click.prevent="confirmDelete"&gt;            确定？          &lt;/button&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import BlogHeader from '@/components/BlogHeader.vue';import BlogFooter from '@/components/BlogFooter.vue';import authorization from '@/utils/authorization'const storage = localStorageexport default {  name: 'UserCenter',  components: {    BlogHeader,    BlogFooter  },  data() {    return {      username: '',      password: '',      token: '',      showingDeleteAlert: false    }  },  mounted() {    this.username = storage.getItem('username.myblog')  },  methods: {    changeInfo() {      authorization().then((resoponse) =&gt; {        if (!resoponse[0]) {          alert('登录已过期，请重新登录')          return        }        console.log('Change info start')        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {          alert('Password too short')          return        }        const oldName = storage.getItem('username.myblog')        let data = {}        if (this.username !== '') {          data.username = this.username        }        if (this.password !== '') {          data.password = this.password        }        this.token = storage.getItem('access.myblog')        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {          const name = response.data.username          storage.setItem('username.myblog', name)          this.$router.push({ name: 'UserCenter', params: { username: name } })          this.$refs.header.refresh()        })      })    },    confirmDelete() {      authorization().then((response) =&gt; {        if (response[0]) {          this.token = storage.getItem('access.myblog')          axios.delete('/api/user/' + this.username + '/', { headers: { Authorization: 'Bearer ' + this.token } }).then(() =&gt; {            storage.clear()            this.$router.push({ name: 'Home' })          })        }      })    }  }}&lt;/script&gt;&lt;style scoped&gt;#user-center {  text-align: center;}.form-elem {  padding: 10px;}input {  height: 25px;  padding-left: 10px;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: gray;  color: whitesmoke;  border-radius: 5px;  width: 200px;}.confirm-btn {  width: 80px;  background-color: darkorange;}.delete-btn {  background-color: darkred;  margin-bottom: 10px;}.shake {  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;  transform: translate3d(0, 0, 0);  backface-visibility: hidden;  perspective: 1000px;}@keyframes shake {  10%,  90% {    transform: translate3d(-1px, 0, 0);  }  20%,  80% {    transform: translate3d(2px, 0, 0);  }  30%,  50%,  70% {    transform: translate3d(-4px, 0, 0);  }  40%,  60% {    transform: translate3d(4px, 0, 0);  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-文章操作">10. 文章操作</h2><h3 id="10-1-准备工作">10.1 准备工作</h3><p>修改后端文件 <code>user_info/serializers.py</code> ，增加返回<strong>当前用户</strong>是否为<strong>超级用户</strong>的信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user_info/serializers.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">UserDescSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表中引用的嵌套用户信息    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'username'</span><span class="token punctuation">,</span>            <span class="token string">'last_login'</span><span class="token punctuation">,</span>            <span class="token string">'date_joined'</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">UserRegisterSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户管理序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'user-detail'</span><span class="token punctuation">,</span> lookup_field<span class="token operator">=</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">'is_superuser'</span><span class="token punctuation">]</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'write_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'is_superuser'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'read_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> user        <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'password'</span> <span class="token keyword">in</span> validated_data<span class="token punctuation">:</span>            password <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>            instance<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'username'</span><span class="token punctuation">,</span>            <span class="token string">'first_name'</span><span class="token punctuation">,</span>            <span class="token string">'last_name'</span><span class="token punctuation">,</span>            <span class="token string">'email'</span><span class="token punctuation">,</span>            <span class="token string">'last_login'</span><span class="token punctuation">,</span>            <span class="token string">'date_joined'</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后端文件 <code>article/views.py</code> ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token punctuation">,</span> filters<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token punctuation">,</span> Avatar<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> <span class="token punctuation">(</span>    ArticleSerializer<span class="token punctuation">,</span>    CategorySerializer<span class="token punctuation">,</span>    CategoryDetailSerializer<span class="token punctuation">,</span>    TagSerializer<span class="token punctuation">,</span>    ArticleDetailSerializer<span class="token punctuation">,</span>    AvatarSerializer<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AvatarViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章标题图视图集    """</span>    queryset <span class="token operator">=</span> Avatar<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> AvatarSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">TagViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签视图集    """</span>    queryset <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> TagSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    pagination_class <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">CategoryViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类视图集    """</span>    queryset <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> CategorySerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    pagination_class <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategorySerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategoryDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章视图集    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ArticleSerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ArticleDetailSerializer    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-发布文章界面">10.2 发布文章界面</h3><p>在用户登录时追加记录用户<strong>是否为超级管理员</strong>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/Login.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div id="grid"&gt;    &lt;div id="signup"&gt;      &lt;h3&gt;注册账号&lt;/h3&gt;      &lt;form&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;账号：&lt;/span&gt;          &lt;input type="text" v-model="signupName" placeholder="输入用户名"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;密码：&lt;/span&gt;          &lt;input type="password" v-model="signupPwd" placeholder="输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;确认密码：&lt;/span&gt;          &lt;input type="password" v-model="signupPwdConfirm" placeholder="再次输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;button @click.prevent="signup"&gt;提交&lt;/button&gt;        &lt;/div&gt;      &lt;/form&gt;    &lt;/div&gt;    &lt;div id="signin"&gt;      &lt;h3&gt;登录账号&lt;/h3&gt;      &lt;form&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;账号：&lt;/span&gt;          &lt;input type="text" v-model="signinName" placeholder="输入用户名"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;span class="label"&gt;密码：&lt;/span&gt;          &lt;input type="password" v-model="signinPwd" placeholder="输入密码"&gt;        &lt;/div&gt;        &lt;div class="form-elem"&gt;          &lt;button @click.prevent="signin"&gt;登录&lt;/button&gt;        &lt;/div&gt;      &lt;/form&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'import BlogHeader from '@/components/BlogHeader.vue';import BlogFooter from '@/components/BlogFooter.vue';export default {  name: "Login",  components: { BlogHeader, BlogFooter },  data() {    return {      signupName: '',      signupPwd: '',      signupPwdConfirm: '',      signinName: '',      signinPwd: '',      signupResponse: null,    }  },  methods: {    signup() {      if (this.signupPwd !== this.signupPwdConfirm) {        alert("两次密码不一致，请重新输入!")        return      }      axios.post('/api/user/', {        username: this.signupName,        password: this.signupPwd,      }).then((response) =&gt; {        this.signupResponse = response.data        alert('用户注册成功')      }).catch((error) =&gt; {        alert('用户注册失败:', error.message)      })    },    signin() {      axios.post('/api/token/', {        username: this.signinName,        password: this.signinPwd,      }).then((response) =&gt; {        const storage = localStorage        const expiredTime = Date.parse(response.headers.date) + 10800000        storage.setItem('access.myblog', response.data.access)        storage.setItem('refresh.myblog', response.data.refresh)        storage.setItem('expiredTime.myblog', expiredTime)        storage.setItem('username.myblog', this.signinName)        axios.get('/api/user/' + this.signinName + '/').then((response) =&gt; {          storage.setItem('isSuperuser.myblog', response.data.is_superuser)          this.$router.push({ name: 'Home' })        })      }).catch((error) =&gt; {        alert('用户登录失败:', error.message)      })    }  }}&lt;/script&gt;&lt;style scoped&gt;#grid {  display: grid;  grid-template-columns: 1fr 1fr;}#signup {  text-align: center;}#signin {  text-align: center;}.form-elem {  padding: 10px;}.label {  display: inline-block;  width: 80px;  text-align: justify;  text-align-last: justify;  margin-right: 1px;}input {  height: 25px;  padding-left: 10px;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: gray;  color: whitesmoke;  border-radius: 5px;  width: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发表文章页面 <code>frontend/src/views/ArticleCreate.vue</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/ArticleCreate.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div id="article-create"&gt;    &lt;h3&gt;发表文章&lt;/h3&gt;    &lt;form&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;标题：&lt;/span&gt;        &lt;input type="text" v-model="title" placeholder="输入标题"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;分类：&lt;/span&gt;        &lt;span v-for="category in categories" :key="category.id"&gt;          &lt;button class="category-btn" :style="categoryStyle(category)" @click.prevent="chooseCategory(category)"&gt;            {{ category.title }}          &lt;/button&gt;        &lt;/span&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;标签：&lt;/span&gt;        &lt;input type="text" v-model="tags" placeholder="输入标签，用逗号分隔"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;正文：&lt;/span&gt;        &lt;textarea v-model="body" placeholder="输入正文" cols="80" rows="20"&gt;&lt;/textarea&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="submit"&gt;提交&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import axios from 'axios'import authorization from '@/utils/authorization'export default {  name: 'ArticleCreate',  components: {    BlogHeader,    BlogFooter  },  data() {    return {      title: '',      body: '',      categories: [],      selectedCategory: null,      tags: '',    }  },  mounted() {    axios.get('/api/category/').then((response) =&gt; {      this.categories = response.data    })  },  methods: {    categoryStyle(category) {      if (this.selectedCategory !== null &amp;&amp; category.id === this.selectedCategory.id) {        return {          backgroundColor: 'black'        }      }      return {        backgroundColor: 'lightgrey',        color: 'black'      }    },    chooseCategory(category) {      if (this.selectedCategory !== null &amp;&amp; this.selectedCategory.id === category.id) {        this.selectedCategory = null      } else {        this.selectedCategory = category      }    },    submit() {      authorization().then((response) =&gt; {        if (response[0]) {          let data = { title: this.title, body: this.body }          if (this.selectedCategory) {            data.category_id = this.selectedCategory.id          }          data.tags = this.tags.split(/[,，]/).map(x =&gt; x.trim()).filter(x =&gt; x.charAt(0) !== '')          const token = localStorage.getItem('access.myblog')          axios.post('/api/article/', data, { headers: { Authorization: 'Bearer ' + token } }).then((response) =&gt; {            this.$router.push({ name: 'ArticleDetail', params: { id: response.data.id } })          })        } else {          alert('令牌过期，请重新登录。')        }      })    }  }}&lt;/script&gt;&lt;style scoped&gt;.category-btn {  margin-right: 10px;}#article-create {  text-align: center;  font-size: large;}form {  text-align: left;  padding-left: 100px;  padding-right: 10px;}.form-elem {  padding: 10px;}input {  height: 25px;  padding-left: 10px;  width: 50%;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: steelblue;  color: whitesmoke;  border-radius: 5px;  width: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册发布文章页面的路由：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/src/router/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleDetail.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Login.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">UserCenter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/UserCenter.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleCreate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleCreate.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Home  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/:id'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleDetail'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleDetail  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:username'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'UserCenter'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> UserCenter<span class="token punctuation">,</span>    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/create'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleCreate'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleCreate<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requireAuth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'access.myblog'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username <span class="token operator">===</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username.myblog'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username <span class="token operator">!==</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username.myblog'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> from<span class="token punctuation">.</span>path      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请先登录！'</span><span class="token punctuation">)</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页眉的欢迎词下拉框用 <code>v-if</code> 仅对<strong>超级用户</strong>显示入口，普通用户不显示：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;&lt;template&gt;  &lt;div id="header"&gt;    &lt;div class="grid"&gt;      &lt;div&gt;&lt;/div&gt;      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;      &lt;search-button /&gt;    &lt;/div&gt;    &lt;hr&gt;    &lt;div class="login"&gt;      &lt;div v-if="hasLogin"&gt;        &lt;div class="dropdown"&gt;          &lt;button class="dropbtn"&gt;欢迎，{{ username }}&lt;/button&gt;          &lt;div class="dropdown-content"&gt;            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;            &lt;router-link :to="{ name: 'ArticleCreate' }" v-if="isSuperuser"&gt;发布文章&lt;/router-link&gt;            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div v-else&gt;        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import SearchButton from '@/components/SearchButton.vue'import authorization from '@/utils/authorization'export default {  name: 'BlogHeader',  data() {    return {      username: '',      hasLogin: false,      isSuperuser: JSON.parse(localStorage.getItem('isSuperuser.myblog'))    }  },  components: {    SearchButton  },  mounted() {    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)  },  methods: {    logout() {      localStorage.clear()      window.location.reload(false)    },    refresh() {      this.username = localStorage.getItem('username.myblog')    }  }}&lt;/script&gt;&lt;style scoped&gt;#header {  text-align: center;  margin-top: 20px;}.grid {  display: grid;  grid-template-columns: 1fr 4fr 1fr;}.login {  text-align: right;  padding-right: 5px;}.dropbtn {  background-color: mediumaquamarine;  color: white;  padding: 8px 8px 30px 8px;  font-size: 16px;  border: none;  cursor: pointer;  height: 16px;  border-radius: 5px;}.dropdown {  position: relative;  display: inline-block;}.dropdown-content {  display: none;  position: absolute;  background-color: #f9f9f9;  min-width: 120px;  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);  text-align: center;}.dropdown-content a {  color: black;  padding: 12px 16px;  text-decoration: none;  display: block;}.dropdown-content a:hover {  background-color: #f1f1f1;}.dropdown:hover .dropdown-content {  display: block;}.dropdown:hover .dropbtn {  background-color: darkslateblue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了让列表页面也能显示<strong>分类</strong>信息，稍微改一改 <code>ArticleList.vue</code> :</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/ArticleList.vue --&gt;&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div&gt;      &lt;span v-if="article.category !== null" class="category"&gt;{{ article.category.title }}&lt;/span&gt;      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;        {{ tag }}      &lt;/span&gt;    &lt;/div&gt;    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;      {{ article.title }}    &lt;/router-link&gt;    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;  &lt;/div&gt;  &lt;div id="paginator"&gt;    &lt;span v-if="is_page_exists('previous')"&gt;      &lt;router-link :to="get_path('previous')"&gt;        Prev      &lt;/router-link&gt;    &lt;/span&gt;    &lt;span class="current-page"&gt;      {{ get_page_param('current') }}    &lt;/span&gt;    &lt;span v-if="is_page_exists('next')"&gt;      &lt;router-link :to="get_path('next')"&gt;        Next      &lt;/router-link&gt;    &lt;/span&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'ArticleList',  data() {    return {      info: '',    }  },  mounted() {    this.get_article_data()  },  methods: {    // 判断页面是否存在    is_page_exists(direction) {      if (direction === 'next') {        return this.info.next !== null      }      return this.info.previous !== null    },    // 获取页码    get_page_param(direction) {      try {        let url_string        switch (direction) {          case 'next':            url_string = this.info.next            break          case 'previous':            url_string = this.info.previous            break          default:            if (!('page' in this.$route.query)) {              return 1            }            if (this.$route.query.page === null) {              return 1            }            return this.$route.query.page        }        const url = new URL(url_string)        return url.searchParams.get('page')      } catch (err) {        return      }    },    // 获取文章列表数据    get_article_data() {      let url = '/api/article/'      let params = new URLSearchParams()      if (this.isExists(this.$route.query.page)) {        params.append('page', this.$route.query.page)      }      if (this.isExists(this.$route.query.search)) {        params.append('search', this.$route.query.search)      }      const paramsString = params.toString()      if (paramsString.charAt(0) !== '') {        url += '/?' + paramsString      }      axios.get(url).then(response =&gt; {        this.info = response.data      }).catch(error =&gt; {        console.log(error)      })    },    // 获取路径    get_path(direction) {      let url = ''      try {        switch (direction) {          case 'next':            if (this.info.next !== undefined) {              url += (new URL(this.info.next)).search            }            break          case 'previous':            if (this.info.previous !== undefined) {              url += (new URL(this.info.previous)).search            }            break        }      } catch {        return url      }      return url    },    // 检查参数是否存在    isExists(value) {      return value !== null &amp;&amp; value !== undefined    }  },  watch: {    // 监听路由变化    $route() {      this.get_article_data()    }  },  computed: {    // 格式化时间    formatted_time() {      return timeString =&gt; new Date(timeString).toLocaleDateString()    }  }}&lt;/script&gt;&lt;style scoped&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}#paginator {  text-align: center;  padding-top: 50px;}a {  color: black;}.current-page {  font-size: x-large;  font-weight: bold;  padding-left: 10px;  padding-right: 10px;}.category {  padding: 5px 10px 5px 10px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: darkred;  color: whitesmoke;  border-radius: 15px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-文章更新与删除页面">10.3 文章更新与删除页面</h3><p>新建 <code>frontend/src/views/ArticleEdit.vue</code> 文件：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/ArticleEdit.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div id="article-create"&gt;    &lt;h3&gt;更新文章&lt;/h3&gt;    &lt;form&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;标题：&lt;/span&gt;        &lt;input type="text" v-model="title" placeholder="输入标题"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;分类：&lt;/span&gt;        &lt;span v-for="category in categories" :key="category.id"&gt;          &lt;button class="category-btn" :style="categoryStyle(category)" @click.prevent="chooseCategory(category)"&gt;            {{ category.title }}          &lt;/button&gt;        &lt;/span&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;标签：&lt;/span&gt;        &lt;input type="text" v-model="tags" placeholder="输入标签，用逗号分隔"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;正文：&lt;/span&gt;        &lt;textarea v-model="body" placeholder="输入正文" cols="80" rows="20"&gt;&lt;/textarea&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="submit"&gt;提交&lt;/button&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button @click.prevent="deleteArticle" style="background-color: darkred;"&gt;删除&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;&lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import axios from 'axios'import authorization from '@/utils/authorization'export default {  name: 'ArticleEdit',  components: {    BlogHeader,    BlogFooter,  },  data() {    return {      title: '',      body: '',      categories: [],      selectedCategory: null,      tags: '',      articleID: null,    }  },  mounted() {    axios.get('/api/category/').then(response =&gt; this.categories = response.data)    axios.get('/api/article/' + this.$route.params.id + '/').then((response) =&gt; {      this.title = response.data.title      this.body = response.data.body      this.selectedCategory = response.data.category      this.tags = response.data.tags.join(',')      this.articleID = response.data.id    })  },  methods: {    categoryStyle(category) {      if (this.selectedCategory !== null &amp;&amp; category.id === this.selectedCategory.id) {        return {          backgroundColor: 'black',        }      }      return {        backgroundColor: 'lightgrey',        color: 'black'      }    },    chooseCategory(category) {      if (this.selectedCategory !== null &amp;&amp; category.id == this.selectedCategory.id) {        this.selectedCategory = null      } else {        this.selectedCategory = category      }    },    submit() {      authorization().then((response) =&gt; {        if (response[0]) {          let data = {            title: this.title,            body: this.body          }          data.category_id = this.selectedCategory ? this.selectedCategory.id : null          data.tags = this.tags.split(/[,，]/).map(x =&gt; x.trim()).filter(x =&gt; x.charAt(0) !== '')          const token = localStorage.getItem('access.myblog')          axios.put('/api/article/' + this.articleID + '/', data, { headers: { Authorization: 'Bearer ' + token } }).then((response) =&gt; {            this.$router.push({ name: 'ArticleDetail', params: { id: response.data.id } })          })        } else {          alert('令牌过期，请重新登录')        }      })    },    deleteArticle() {      const token = localStorage.getItem('access.myblog')      authorization().then((response) =&gt; {        if (response[0]) {          axios.delete('/api/article/' + this.articleID + '/', { headers: { Authorization: 'Bearer ' + token } }).then((response) =&gt; {            this.$router.push({ name: 'Home' })          })        } else {          alert('令牌过期，请重新登录')        }      })    }  }}&lt;/script&gt;&lt;style scoped&gt;.category-btn {  margin-left: 10px;}#article-create {  text-align: center;  font-size: large;}form {  text-align: left;  padding-left: 100px;  padding-right: 10px;}.form-elem {  padding: 10px;}input {  height: 25px;  padding-left: 10px;  width: 50%;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: steelblue;  color: whitesmoke;  border-radius: 5px;  width: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册路由：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// frontend/src/router/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleDetail.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Login.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">UserCenter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/UserCenter.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleCreate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleCreate.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ArticleEdit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/ArticleEdit.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Home  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/:id'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleDetail'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleDetail  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:username'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'UserCenter'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> UserCenter<span class="token punctuation">,</span>    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">requireAuth</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/create'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleCreate'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleCreate<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/article/edit/:id'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ArticleEdit'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> ArticleEdit<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requireAuth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'access.myblog'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username <span class="token operator">===</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username.myblog'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username <span class="token operator">!==</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'username.myblog'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> from<span class="token punctuation">.</span>path      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请先登录！'</span><span class="token punctuation">)</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文章详情页中放一个更新和删除页面的入口：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div v-if="article !== null" class="grid-container"&gt;    &lt;div&gt;      &lt;h1 id="title"&gt;{{ article.title }}&lt;/h1&gt;      &lt;p id="subtitle"&gt;本文由 {{ article.author.username }} 发布于 {{ formatted_time }}        &lt;span if="isSuperuser"&gt;          &lt;router-link :to="{ name: 'ArticleEdit', params: { id: article.id } }"&gt;更新与删除&lt;/router-link&gt;        &lt;/span&gt;      &lt;/p&gt;      &lt;div v-html="article.body_html" class="article-body"&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div&gt;      &lt;h3&gt;目录&lt;/h3&gt;      &lt;div v-html="article.toc_html" class="toc"&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;blog-footer /&gt;&lt;/template&gt;  &lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import axios from 'axios'export default {  name: 'ArticleDetail',  components: { BlogHeader, BlogFooter },  data() {    return {      article: null    }  },  mounted() {    axios.get('/api/article/' + this.$route.params.id).then(response =&gt; {      this.article = response.data    }).catch(error =&gt; {      console.log(error)    })  },  computed: {    formatted_time() {      return new Date(this.article.created).toLocaleDateString()    },    isSuperuser() {      return localStorage.getItem('isSuperuser.myblog') === 'true'    }  }}&lt;/script&gt;  &lt;style scoped&gt;.grid-container {  display: grid;  grid-template-columns: 3fr 1fr;}#title {  text-align: center;  font-size: x-large;}#subtitle {  text-align: center;  color: gray;  font-size: small;}&lt;/style&gt;&lt;style&gt;.article-body p img {  max-width: 100%;  border-radius: 50px;  box-shadow: gray 0 0 20px;}.toc ul {  list-style-type: none;}.toc a {  color: gray;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-文章标题图">10.4 文章标题图</h3><p><strong>图片提交</strong>的流程：在 <code>multipart/form-data</code> 中发送文件，然后将保存好的文件 id 返回给客户端。客户端拿到文件 id 后，发送带有 id 的 Json 数据，在服务器端将它们关联起来。</p><ul><li>在发表新文章页面中选定图片后，不等待文章的提交而是立即将图片上传。</li><li>图片上传成功后返回图片 id，前端将 id 保存待用。</li><li>提交文章时，将图片 id 一并打包提交即可。</li></ul><p>在 <code>ArticleCreate.vue</code> 中添加代码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/ArticleCreate.vue --&gt;&lt;!-- frontend/src/views/ArticleCreate.vue --&gt;&lt;template&gt;  &lt;BlogHeader /&gt;  &lt;div id="article-create"&gt;    &lt;h3&gt;发表文章&lt;/h3&gt;    &lt;form id="image-form"&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;图片：&lt;/span&gt;        &lt;input type="file" id="file" @change="onFileChange"&gt;      &lt;/div&gt;    &lt;/form&gt;    &lt;form&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;标题：&lt;/span&gt;        &lt;input v-model="title" type="text" placeholder="输入标题"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;分类：&lt;/span&gt;        &lt;span v-for="category in categories" :key="category.id"&gt;          &lt;!--样式也可以通过 :style 绑定--&gt;          &lt;button class="category-btn" :style="categoryStyle(category)" @click.prevent="chooseCategory(category)"&gt;            {{ category.title }}          &lt;/button&gt;        &lt;/span&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;标签：&lt;/span&gt;        &lt;input v-model="tags" type="text" placeholder="输入标签，用逗号分隔"&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;span&gt;正文：&lt;/span&gt;        &lt;textarea v-model="body" placeholder="输入正文" rows="20" cols="80"&gt;&lt;/textarea&gt;      &lt;/div&gt;      &lt;div class="form-elem"&gt;        &lt;button v-on:click.prevent="submit"&gt;提交&lt;/button&gt;      &lt;/div&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;BlogFooter /&gt;&lt;/template&gt;&lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import axios from 'axios';import authorization from '@/utils/authorization';export default {  name: 'ArticleCreate',  components: { BlogHeader, BlogFooter },  data: function () {    return {      // 文章标题      title: '',      // 文章正文      body: '',      // 数据库中所有的分类      categories: [],      // 选定的分类      selectedCategory: null,      // 标签      tags: '',      // 标题图      avatarID: null    }  },  mounted() {    // 页面初始化时获取所有分类    axios      .get('/api/category/')      .then(response =&gt; this.categories = response.data)  },  methods: {    onFileChange(e) {      // 将文件二进制数据添加到提交数据中      const file = e.target.files[0]      let formData = new FormData()      formData.append("content", file)      axios.post('/api/avatar/', formData, { headers: { 'Content-Type': 'multipart/form-data', 'Authorization': 'Bearer ' + localStorage.getItem('access.myblog') } }).then((response) =&gt; {        this.avatarID = response.data.id      })    },    // 根据分类是否被选中，按钮的颜色发生变化    // 这里可以看出 css 也是可以被 vue 绑定的，很方便    categoryStyle(category) {      if (this.selectedCategory !== null &amp;&amp; category.id === this.selectedCategory.id) {        return {          backgroundColor: 'black',        }      }      return {        backgroundColor: 'lightgrey',        color: 'black',      }    },    // 选取分类的方法    chooseCategory(category) {      // 如果点击已选取的分类，则将 selectedCategory 置空      if (this.selectedCategory !== null &amp;&amp; this.selectedCategory.id === category.id) {        this.selectedCategory = null      }      // 如果没选中当前分类，则选中它      else {        this.selectedCategory = category;      }    },    // 点击提交按钮    submit() {      const that = this;      // 前面封装的验证函数又用上了      authorization()        .then(function (response) {          if (response[0]) {            // 需要传给后端的数据字典            let data = {              title: that.title,              body: that.body,            };            // 添加分类            if (that.selectedCategory) {              data.category_id = that.selectedCategory.id            }            // 标签预处理            data.tags = that.tags              // 用逗号分隔标签              .split(/[,，]/)              // 剔除标签首尾空格              .map(x =&gt; x.trim())              // 剔除长度为零的无效标签              .filter(x =&gt; x.charAt(0) !== '');            data.avatar_id = this.avatarID            // 将发表文章请求发送至接口            // 成功后前往详情页面            const token = localStorage.getItem('access.myblog');            axios              .post('/api/article/',                data,                {                  headers: { Authorization: 'Bearer ' + token }                })              .then(function (response) {                that.$router.push({ name: 'ArticleDetail', params: { id: response.data.id } });              })          }          else {            alert('令牌过期，请重新登录。')          }        }        )    }  }}&lt;/script&gt;&lt;style scoped&gt;.category-btn {  margin-right: 10px;}#article-create {  text-align: center;  font-size: large;}form {  text-align: left;  padding-left: 100px;  padding-right: 10px;}.form-elem {  padding: 10px;}input {  height: 25px;  padding-left: 10px;  width: 50%;}button {  height: 35px;  cursor: pointer;  border: none;  outline: none;  background: steelblue;  color: whitesmoke;  border-radius: 5px;  width: 60px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增了一个<strong>表单</strong>（不用表单其实也没关系），表单含有一个提交文件的控件；<code>v-on:change</code> 将控件绑定到 <code>onFileChange()</code> 方法，即只要用户选定了任何图片，都会触发此方法。</li><li><code>onFileChange(e)</code> 中的参数为控件所触发的事件对象。由于图片二进制流不能以简单的字符串数据进行表示，所以将其添加到 <code>FormData</code> 表单对象中，发送到图片上传接口。若接口返回成功，则将返回的 id 值保存待用。</li><li><code>submit()</code> 对应增加了图片 id 的赋值语句。</li></ul><p>接下来在文章列表页面<strong>显示</strong>它，修改 <code>ArticleList.vue</code> 代码。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;    &lt;div class="grid" :style="gridStyle(article)"&gt;      &lt;div class="image-container"&gt;        &lt;img :src="imageIfExists(article)" alt="" class="image" accept="image/gif, image/jpeg"&gt;      &lt;/div&gt;      &lt;div&gt;        &lt;div&gt;          &lt;span v-if="article.category !== null" class="category"&gt;{{ article.category.title }}&lt;/span&gt;          &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;            {{ tag }}          &lt;/span&gt;        &lt;/div&gt;        &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;          {{ article.title }}        &lt;/router-link&gt;        &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;div id="paginator"&gt;    &lt;span v-if="is_page_exists('previous')"&gt;      &lt;router-link :to="get_path('previous')"&gt;        Prev      &lt;/router-link&gt;    &lt;/span&gt;    &lt;span class="current-page"&gt;      {{ get_page_param('current') }}    &lt;/span&gt;    &lt;span v-if="is_page_exists('next')"&gt;      &lt;router-link :to="get_path('next')"&gt;        Next      &lt;/router-link&gt;    &lt;/span&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'ArticleList',  data() {    return {      info: '',    }  },  mounted() {    this.get_article_data()  },  methods: {    // 判断标题图是否存在并返回图像    imageIfExists(article) {      if (article.avatar) {        return article.avatar.content      }    },    // 修改grid样式    gridStyle(article) {      if (article.avatar) {        return {          display: 'grid',          gridTemplateColumns: '1fr 7fr'        }      }    },    // 判断页面是否存在    is_page_exists(direction) {      if (direction === 'next') {        return this.info.next !== null      }      return this.info.previous !== null    },    // 获取页码    get_page_param(direction) {      try {        let url_string        switch (direction) {          case 'next':            url_string = this.info.next            break          case 'previous':            url_string = this.info.previous            break          default:            if (!('page' in this.$route.query)) {              return 1            }            if (this.$route.query.page === null) {              return 1            }            return this.$route.query.page        }        const url = new URL(url_string)        return url.searchParams.get('page')      } catch (err) {        return      }    },    // 获取文章列表数据    get_article_data() {      let url = '/api/article/'      let params = new URLSearchParams()      if (this.isExists(this.$route.query.page)) {        params.append('page', this.$route.query.page)      }      if (this.isExists(this.$route.query.search)) {        params.append('search', this.$route.query.search)      }      const paramsString = params.toString()      if (paramsString.charAt(0) !== '') {        url += '/?' + paramsString      }      axios.get(url).then(response =&gt; {        this.info = response.data      }).catch(error =&gt; {        console.log(error)      })    },    // 获取路径    get_path(direction) {      let url = ''      try {        switch (direction) {          case 'next':            if (this.info.next !== undefined) {              url += (new URL(this.info.next)).search            }            break          case 'previous':            if (this.info.previous !== undefined) {              url += (new URL(this.info.previous)).search            }            break        }      } catch {        return url      }      return url    },    // 检查参数是否存在    isExists(value) {      return value !== null &amp;&amp; value !== undefined    }  },  watch: {    // 监听路由变化    $route() {      this.get_article_data()    }  },  computed: {    // 格式化时间    formatted_time() {      return timeString =&gt; new Date(timeString).toLocaleDateString()    }  }}&lt;/script&gt;&lt;style scoped&gt;#articles {  padding: 10px;}.article-title {  font-size: large;  font-weight: bolder;  color: black;  text-decoration: none;  padding: 5px 0 5px 0;}.tag {  padding: 2px 5px 2px 5px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: #4e4e4e;  color: whitesmoke;  border-radius: 5px;}#paginator {  text-align: center;  padding-top: 50px;}a {  color: black;}.current-page {  font-size: x-large;  font-weight: bold;  padding-left: 10px;  padding-right: 10px;}.category {  padding: 5px 10px 5px 10px;  margin: 5px 5px 5px 0;  font-family: Georgia, Arial, sans-serif;  font-size: small;  background-color: darkred;  color: whitesmoke;  border-radius: 15px;}.image {  width: 180px;  border-radius: 10px;  box-shadow: darkslategrey 0 0 12px;}.image-container {  width: 200px;}.grid {  padding-bottom: 10px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-发布评论">11. 发布评论</h2><h3 id="11-1-发布评论组件">11.1 发布评论组件</h3><p>新建 <code>frontend/src/components/Comments.vue</code>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/Comments.vue --&gt;&lt;template&gt;  &lt;br&gt;&lt;br&gt;  &lt;hr&gt;  &lt;h3&gt;发表评论&lt;/h3&gt;  &lt;!-- 评论多行文本输入控件 --&gt;  &lt;textarea v-model="message" :placeholder="placeholder" name="comment" id="comment-area" cols="60" rows="10"&gt;&lt;/textarea&gt;  &lt;div&gt;    &lt;button @click="submit" class="submitBtn"&gt;发布&lt;/button&gt;  &lt;/div&gt;  &lt;br&gt;  &lt;p&gt;已有 {{ comments.length }} 条评论&lt;/p&gt;  &lt;hr&gt;  &lt;!-- 渲染所有评论内容 --&gt;  &lt;div v-for="comment in comments" :key="comment.id"&gt;    &lt;div class="comments"&gt;      &lt;div&gt;        &lt;span class="username"&gt;          {{ comment.author.username }}        &lt;/span&gt;        于        &lt;span class="created"&gt;          {{ formatted_time(comment.created) }}        &lt;/span&gt;        &lt;span v-if="comment.parent"&gt;          对          &lt;span class="parent"&gt;            {{ comment.parent.author.username }}          &lt;/span&gt;        &lt;/span&gt;        说道：      &lt;/div&gt;      &lt;div class="content"&gt;        {{ comment.content }}      &lt;/div&gt;      &lt;div&gt;        &lt;button class="commentBtn" @click="replyTo(comment)"&gt;回复&lt;/button&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;hr&gt;  &lt;/div&gt;&lt;/template&gt;  &lt;script&gt;import axios from 'axios';import authorization from '@/utils/authorization';export default {  name: 'Comments',  // 通过 props 获取当前文章  props: { article: Object },  data() {    return {      // 所有评论      comments: [],      // 评论控件绑定的文本和占位符      message: '',      placeholder: '说点啥吧...',      // 评论的评论      parentID: null    }  },  // 监听 article 对象  // 以便实时更新评论  watch: {    article() {      this.comments = this.article !== null ? this.article.comments : []    }  },  methods: {    // 提交评论    submit() {      authorization().then((response) =&gt; {        if (response[0]) {          axios.post('/api/comment/', { content: this.message, article_id: this.article.id, parent_id: this.parentID }, { headers: { Authorization: 'Bearer ' + localStorage.getItem('access.myblog') } }).then((response) =&gt; {            // 将新评论添加到顶部            this.comments.unshift(response.data);            this.message = '';            alert('留言成功')          })        } else {          alert('请登录后评论。')        }      })    },    // 对某条评论进行评论    // 即二级评论    replyTo(comment) {      this.parentID = comment.id;      this.placeholder = '对' + comment.author.username + '说:'    },  },  computed: {    // 格式化时间    formatted_time() {      return timeString =&gt; new Date(timeString).toLocaleDateString()    }  }}&lt;/script&gt;  &lt;style scoped&gt;button {  cursor: pointer;  border: none;  outline: none;  color: whitesmoke;  border-radius: 5px;}.submitBtn {  height: 35px;  background: steelblue;  width: 60px;}.commentBtn {  height: 25px;  background: lightslategray;  width: 40px;}.comments {  padding-top: 10px;}.username {  font-weight: bold;  color: darkorange;}.created {  font-weight: bold;  color: darkblue;}.parent {  font-weight: bold;  color: orangered;}.content {  font-size: large;  padding: 15px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-添加发布评论功能">11.2 添加发布评论功能</h3><p>修改 <code>ArticleDetail.vue</code> ，使用 <code>Comments</code> <strong>组件</strong>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;&lt;template&gt;  &lt;blog-header /&gt;  &lt;div v-if="article !== null" class="grid-container"&gt;    &lt;div&gt;      &lt;h1 id="title"&gt;{{ article.title }}&lt;/h1&gt;      &lt;p id="subtitle"&gt;本文由 {{ article.author.username }} 发布于 {{ formatted_time }}        &lt;span if="isSuperuser"&gt;          &lt;router-link :to="{ name: 'ArticleEdit', params: { id: article.id } }"&gt;更新与删除&lt;/router-link&gt;        &lt;/span&gt;      &lt;/p&gt;      &lt;div v-html="article.body_html" class="article-body"&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div&gt;      &lt;h3&gt;目录&lt;/h3&gt;      &lt;div v-html="article.toc_html" class="toc"&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;comments :article="article" /&gt;  &lt;blog-footer /&gt;&lt;/template&gt;  &lt;script&gt;import BlogHeader from '@/components/BlogHeader.vue'import BlogFooter from '@/components/BlogFooter.vue'import Comments from '@/components/Comments.vue'import axios from 'axios'export default {  name: 'ArticleDetail',  components: { BlogHeader, BlogFooter, Comments },  data() {    return {      article: null    }  },  mounted() {    axios.get('/api/article/' + this.$route.params.id).then(response =&gt; {      this.article = response.data    }).catch(error =&gt; {      console.log(error)    })  },  computed: {    formatted_time() {      return new Date(this.article.created).toLocaleDateString()    },    isSuperuser() {      return localStorage.getItem('isSuperuser.myblog') === 'true'    }  }}&lt;/script&gt;  &lt;style scoped&gt;.grid-container {  display: grid;  grid-template-columns: 3fr 1fr;}#title {  text-align: center;  font-size: x-large;}#subtitle {  text-align: center;  color: gray;  font-size: small;}&lt;/style&gt;&lt;style&gt;.article-body p img {  max-width: 100%;  border-radius: 50px;  box-shadow: gray 0 0 20px;}.toc ul {  list-style-type: none;}.toc a {  color: gray;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-组合式API">12. 组合式API</h2><h3 id="12-1-什么是组合式API">12.1 什么是组合式API</h3><p>之前我们用的是选项式API方式编写Vue组件，Vue还提供组合式API方式编写组件。</p><p><a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">官方文档</a>解释总结：</p><ul><li>选项式API能够很好的胜任任何中小大型项目，但是对于超大型项目（几百个以上的组件）有天生的缺陷，最显著的矛盾是<strong>逻辑关注点分离</strong>：你可能很难短时间分清哪些方法在操作哪些数据、哪些变量又被哪些组件所更改了。</li><li>组合式 API 将相同逻辑关注点代码聚合在了一起，并且很自然的支持代码复用。</li></ul><h3 id="12-2-编写组合式API">12.2 编写组合式API</h3><p>将文章列表页面 <code>ArticleList.vue</code> 的<strong>选项式API</strong>改为<strong>组合式API</strong>，本部分的所有修改只涉及到 <code>ArticleList.vue</code> 的 Javascript 脚本部分，因此先把原代码贴出来：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- frontend/src/components/ArticleList.vue --&gt;&lt;script&gt;import axios from 'axios'export default {  name: 'ArticleList',  data() {    return {      info: '',    }  },  mounted() {    this.get_article_data()  },  methods: {    // 判断标题图是否存在并返回图像    imageIfExists(article) {      if (article.avatar) {        return article.avatar.content      }    },    // 修改grid样式    gridStyle(article) {      if (article.avatar) {        return {          display: 'grid',          gridTemplateColumns: '1fr 7fr'        }      }    },    // 判断页面是否存在    is_page_exists(direction) {      if (direction === 'next') {        return this.info.next !== null      }      return this.info.previous !== null    },    // 获取页码    get_page_param(direction) {      try {        let url_string        switch (direction) {          case 'next':            url_string = this.info.next            break          case 'previous':            url_string = this.info.previous            break          default:            if (!('page' in this.$route.query)) {              return 1            }            if (this.$route.query.page === null) {              return 1            }            return this.$route.query.page        }        const url = new URL(url_string)        return url.searchParams.get('page')      } catch (err) {        return      }    },    // 获取文章列表数据    get_article_data() {      let url = '/api/article/'      let params = new URLSearchParams()      if (this.isExists(this.$route.query.page)) {        params.append('page', this.$route.query.page)      }      if (this.isExists(this.$route.query.search)) {        params.append('search', this.$route.query.search)      }      const paramsString = params.toString()      if (paramsString.charAt(0) !== '') {        url += '/?' + paramsString      }      axios.get(url).then(response =&gt; {        this.info = response.data      }).catch(error =&gt; {        console.log(error)      })    },    // 获取路径    get_path(direction) {      let url = ''      try {        switch (direction) {          case 'next':            if (this.info.next !== undefined) {              url += (new URL(this.info.next)).search            }            break          case 'previous':            if (this.info.previous !== undefined) {              url += (new URL(this.info.previous)).search            }            break        }      } catch {        return url      }      return url    },    // 检查参数是否存在    isExists(value) {      return value !== null &amp;&amp; value !== undefined    }  },  watch: {    // 监听路由变化    $route() {      this.get_article_data()    }  },  computed: {    // 格式化时间    formatted_time() {      return timeString =&gt; new Date(timeString).toLocaleDateString()    }  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">本文标题： Django-Vue搭建个人博客(4)：前端功能完善原文链接： https://www.dusaiphoto.com/article/122/ ~ https://www.dusaiphoto.com/article/122/原文作者： 杜赛许可协议： 署名-非商业性使用 4.0 国际许可协议本文对原始作品作了修改，转载请保留原文链接及作者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(3)：后端功能完善</title>
      <link href="/posts/16431.html"/>
      <url>/posts/16431.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-过滤文章">1. 过滤文章</h2><p>用户需要某个特定范围的文章时，后端需要把返回的数据进行过滤。最简单的过滤方法是修改视图集中的<code>queryset</code>属性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>author__username<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样会导致原本正常的列表也都过滤了</p><h3 id="1-1-参数过滤">1.1 参数过滤</h3><p>假设有如下带有参数 GET 的请求：</p><blockquote><p><a href="http://127.0.0.1:8000/api/article/?username=admin">http://127.0.0.1:8000/api/article/?username=admin</a></p></blockquote><p>可以通过覆写<code>get_queryset()</code>的方式实现过滤：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>queryset        username <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            queryset <span class="token operator">=</span> queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>author__username<span class="token operator">=</span>username<span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-通用过滤">1.2 通用过滤</h3><p><code>django-filter</code>库可以用于通用过滤，要使用这个库，首先执行<code>pip install django-filter==23.1</code>安装，然后修改配置文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/settings.py</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span>    <span class="token string">'article'</span><span class="token punctuation">,</span>    <span class="token string">'user_info'</span><span class="token punctuation">,</span>    <span class="token string">'django_filters'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_PAGINATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.pagination.PageNumberPagination'</span><span class="token punctuation">,</span>    <span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_FILTER_BACKENDS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'django-filter.rest_framework.DjangoFilterBackend'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>        filterset_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'author__username'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以将其单独配置在特定的视图中，不在<code>setting.py</code>中配置 REST_FRAMEWORK 相关内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> django_filters<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> DjangoFilterBackend<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>        filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>DjangoFilterBackend<span class="token punctuation">]</span>    filterset_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'author__username'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完全匹配示例url：<a href="http://127.0.0.1:8000/api/article/?author__username=dusai&amp;title=newtest">http://127.0.0.1:8000/api/article/?author__username=dusai&amp;title=newtest</a></p><p>如果要实现模糊搜索，可以使用<code>SearchFilter</code>来做。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> filters<span class="token punctuation">,</span> viewsets<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模糊搜索示例url：<a href="http://127.0.0.1:8000/api/article/?search=post">http://127.0.0.1:8000/api/article/?search=post</a></p><h2 id="2-文章分类">2. 文章分类</h2><p>博客文章通常需要分类，方便用户快速识别文章的类型，或者进行某种关联操作。</p><h3 id="2-1-增加模型">2.1 增加模型</h3><p>首先在<code>article/models.py</code>增加一个分类的模型，并且将其和博文称为一对多的外键：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Category</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章分类    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    category <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Category<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 分类</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"articles"</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 作者</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行数据迁移：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> python manage<span class="token punctuation">.</span>py makemigrations<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><em>教程把分类的 model 放到 article app中了。实际项目应根据情况考虑是否需要另起一个单独的分类 app。</em></p></blockquote><h3 id="2-2-序列化器">2.2 序列化器</h3><p>编写和修改序列化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Category with id </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string"> not exits."</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CategorySerializer</code> ：</p><ul><li><code>HyperlinkedIdentityField</code> 前面章节有讲过，作用是将路由间的表示转换为超链接。<code>view_name</code> 参数是路由名，你必须显示指定。 <code>category-detail</code> 是自动注册路由时，<code>Router</code> 默认帮你设置的详情页面的名称，类似的还有 <code>category-list</code> 等，更多规则参考<a href="https://www.django-rest-framework.org/api-guide/routers/#defaultrouter">文档</a>。</li><li>创建日期不需要后期修改，所以设置为 <code>read_only_fields</code>。</li></ul><p><code>ArticleSerializer</code>：</p><ul><li>文章接口不仅仅只返回分类的 id ，需要显式指定 <code>category</code> ，将其变成一个嵌套数据，与之前的 <code>author</code> 类似。</li><li>DRF 框架原生没有实现<strong>可写的嵌套数据</strong>，想<strong>创建/更新</strong>文章和分类的外键关系时：一种方法是自己去实现序列化器的 <code>create()/update()</code> 方法；另一种就是 DRF 框架提供的修改外键的快捷方式，即显式指定 <code>category_id</code> 字段，则此字段会自动链接到 <code>category</code> 外键，以便你更新外键关系。</li><li>再看 <code>category_id</code> 内部。<code>write_only</code> 表示此字段仅需要可写；<code>allow_null</code> 表示允许将其设置为空；<code>required</code> 表示在<strong>创建/更新</strong>时可以不设置此字段。</li></ul><p>如果用户提交了一个不存在的分类外键，后端会返回外键数据不存在的 500 错误，解决方法就是对数据预先进行<strong>验证</strong>。</p><p>验证方式又有如下几种：</p><ul><li>覆写序列化器的 <code>.validate(...)</code> 方法。这是个全局的验证器，其接收的唯一参数是所有字段值的字典。当你需要同时对多个字段进行验证时，这是个很好的选择。</li><li>另一种就是教程用到的，即 <code>.validate_{field_name}(...)</code> 方法，它会只验证某个特定的字段，比如 <code>category_id</code> 。</li></ul><p><code>validate_category_id</code> 检查了两样东西：</p><ul><li>数据库中是否包含了对应 id 值的数据。</li><li>传入值是否为 None。这是为了能够将已有的外键置空。</li></ul><h3 id="2-3-视图与路由">2.3 视图与路由</h3><p>编写视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token punctuation">,</span> filters<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token punctuation">,</span> CategorySerializer<span class="token keyword">class</span> <span class="token class-name">CategoryViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类视图集    """</span>    queryset <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> CategorySerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章视图集    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写路由：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> article <span class="token keyword">import</span> viewsrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'article'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'category'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CategoryViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-测试">2.4 测试</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 1.创建分类</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a admin:admin POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/category/ title=Django      HTTP/1<span class="token punctuation">.</span>1 201 CreatedAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 116Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Mon<span class="token punctuation">,</span> 27 Mar 2023 15:52:17 GMTLocation: http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/category/2/Referrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T23:52:17.604118+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"Django"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/category/2/"</span><span class="token punctuation">}</span><span class="token comment"># 2.更新已有分类</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a admin:admin PUT http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/category/2/ title=FlaskHTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> PATCH<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 115Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Mon<span class="token punctuation">,</span> 27 Mar 2023 15:53:12 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T23:52:17.604118+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"Flask"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/category/2/"</span><span class="token punctuation">}</span><span class="token comment"># 3.创建文章时指定分类</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a admin:admin POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/ category_id=2 title=ILoveDRF body=WishYouToo!HTTP/1<span class="token punctuation">.</span>1 201 CreatedAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 437Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Mon<span class="token punctuation">,</span> 27 Mar 2023 15:54:05 GMTLocation: http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/9/Referrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"author"</span>: <span class="token punctuation">{</span>        <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>        <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T23:24:54.504055+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"username"</span>: <span class="token string">"admin"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"body"</span>: <span class="token string">"WishYouToo!"</span><span class="token punctuation">,</span>    <span class="token string">"category"</span>: <span class="token punctuation">{</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T23:52:17.604118+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"Flask"</span><span class="token punctuation">,</span>        <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/category/2/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T23:54:05.550915+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"ILoveDRF"</span><span class="token punctuation">,</span>    <span class="token string">"updated"</span>: <span class="token string">"2023-03-27T23:54:05.550915+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/9/"</span><span class="token punctuation">}</span><span class="token comment"># 4.把已有的分类置空</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a admin:admin PATCH http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/9/ category_id:=nullHTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> PATCH<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 326Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Mon<span class="token punctuation">,</span> 27 Mar 2023 15:55:26 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"author"</span>: <span class="token punctuation">{</span>        <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>        <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T23:24:54.504055+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"username"</span>: <span class="token string">"admin"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"body"</span>: <span class="token string">"WishYouToo!"</span><span class="token punctuation">,</span>    <span class="token string">"category"</span>: null<span class="token punctuation">,</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T23:54:05.550915+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"ILoveDRF"</span><span class="token punctuation">,</span>    <span class="token string">"updated"</span>: <span class="token string">"2023-03-27T23:55:26.915902+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/9/"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在更新资源时用到了 <code>POST</code> 、<code>PUT</code> 、 <code>PATCH</code> 三种请求方法</p><ul><li><code>POST</code> ：创建新的资源。</li><li><code>PUT</code> ： 整体更新特定资源，默认情况下你需要完整给出所有必须的字段。</li><li><code>PATCH</code>： 部分更新特定资源，仅需要给出需要更新的字段，未给出的字段默认不更改。</li></ul><h3 id="2-5-完善分类详情">2.5 完善分类详情</h3><p>现在希望分类的<strong>列表页面</strong>不显示其链接的文章，以保持数据简洁，但是详情页面则展示出链接的所有文章，方便接口的使用。因此就需要同一个视图集用到两个不同的序列化器，可以使用 <code>get_serializer_class()</code> 。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Category with id </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string"> not exits."</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleCategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    给分类详情的文章嵌套序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'url'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类详情    """</span>    articles <span class="token operator">=</span> ArticleCategoryDetailSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>            <span class="token string">'created'</span><span class="token punctuation">,</span>            <span class="token string">'articles'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后修改视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token punctuation">,</span> filters<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token punctuation">,</span> CategorySerializer<span class="token punctuation">,</span> CategoryDetailSerializer<span class="token keyword">class</span> <span class="token class-name">CategoryViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类视图集    """</span>    queryset <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> CategorySerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategorySerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategoryDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章视图集    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-文章标签">3. 文章标签</h2><p>文章通常还有<strong>标签</strong>功能，作为分类的补充。分类对文章一般是<strong>一对多</strong>的关系，标签对文章时<strong>多对多</strong>的关系。</p><h3 id="3-1-增加模型">3.1 增加模型</h3><p>先创建标签的 model 并进行数据迁移</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Tag</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章标签    """</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-id'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text<span class="token keyword">class</span> <span class="token class-name">Category</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章分类    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    category <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Category<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 分类</span>    tags <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>        Tag<span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 标签</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"articles"</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 作者</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行数据迁移：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> python manage<span class="token punctuation">.</span>py makemigrations<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-序列化器">3.2 序列化器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">TagSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Tag        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tag <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>query_set<span class="token operator">=</span>Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> slug_field<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Category with id </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string"> not exits."</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleCategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    给分类详情的文章嵌套序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'url'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类详情    """</span>    articles <span class="token operator">=</span> ArticleCategoryDetailSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>            <span class="token string">'created'</span><span class="token punctuation">,</span>            <span class="token string">'articles'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SlugRelatedField</code> 直接显示其 <code>text</code> 字段的内容。</p><p>多对多关系，DRF 默认你必须先得有这个外键对象，才能指定其关系。</p><p>现在希望在创建、更新文章时，程序会<strong>自动检查</strong>数据库里是否存在当前标签。如果存在则指向它，如果不存在则创建一个并指向它。可以覆写<code>to_internal_value()</code>方法。<code>to_internal_value()</code> 方法原本作用是将请求中的原始 Json 数据转化为 Python 表示形式（期间还会对字段有效性做初步检查）。它的执行时间比默认验证器的字段检查更早，因此有机会在此方法中将需要的数据创建好，然后等待检查的降临。<code>isinstance()</code> 确定标签数据是列表，才会循环并创建新数据。</p><p>除此之外，因为标签仅有 <code>text</code> 字段是有用的，两个 <code>id</code> 不同但是 <code>text</code> 相同的标签没有任何意义。更重要的是，<code>SlugRelatedField</code> 是不允许有重复的 <code>slug_field</code> 。因此还需要覆写 <code>TagSerializer</code> 的 <code>create()/update()</code> 方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">TagSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签序列化器    """</span>    <span class="token keyword">def</span> <span class="token function">check_tag_obj_exists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Tag with text </span><span class="token interpolation"><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span><span class="token string"> exists.'</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>check_tag_obj_exists<span class="token punctuation">(</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>create<span class="token punctuation">(</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>check_tag_obj_exists<span class="token punctuation">(</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Tag        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tags <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> slug_field<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Category with id </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string"> not exits."</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value        <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        tags_data <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>tags_data<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> text <span class="token keyword">in</span> tags_data<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_internal_value<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleCategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    给分类详情的文章嵌套序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'url'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类详情    """</span>    articles <span class="token operator">=</span> ArticleCategoryDetailSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>            <span class="token string">'created'</span><span class="token punctuation">,</span>            <span class="token string">'articles'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-视图与路由">3.3 视图与路由</h3><p>编写视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token punctuation">,</span> filters<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token punctuation">,</span> CategorySerializer<span class="token punctuation">,</span> CategoryDetailSerializer<span class="token punctuation">,</span> TagSerializer<span class="token keyword">class</span> <span class="token class-name">TagViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签视图集    """</span>    queryset <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> TagSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类视图集    """</span>    queryset <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> CategorySerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategorySerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategoryDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章视图集    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写路由：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> article <span class="token keyword">import</span> viewsrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'article'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'category'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CategoryViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'tag'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>TagViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然也可以简化代码，可以直接设置 tag 模型的 text 字段唯一, 即<code>unique=True</code>，然后执行数据迁移，再简化 Tag 的序列化器中唯一性的检查：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Tag</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章标签    """</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-id'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text<span class="token keyword">class</span> <span class="token class-name">Category</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章分类    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    category <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Category<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 分类</span>    tags <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>        Tag<span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 标签</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"articles"</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 作者</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">TagSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Tag        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tags <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> slug_field<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Category with id </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string"> not exits."</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value        <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        tags_data <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>tags_data<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> text <span class="token keyword">in</span> tags_data<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_internal_value<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        category_id <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'category_id'</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>category_id<span class="token punctuation">)</span>        tags <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text__in<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">'tags'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>        article <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span>        <span class="token keyword">return</span> article    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleCategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    给分类详情的文章嵌套序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'url'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类详情    """</span>    articles <span class="token operator">=</span> ArticleCategoryDetailSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>            <span class="token string">'created'</span><span class="token punctuation">,</span>            <span class="token string">'articles'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Markdown正文">4. Markdown正文</h2><p>Markdown 是一种排版标注规则，”渲染“ Markdown 也就是把原始文本中的注释转化为前端中真正被用户看到的 HTML 排版文字。渲染过程可以在前端也可以在后端，本文将使用后端渲染，以便你理解 DRF 的相关知识。</p><h3 id="1-1-修改模型">1.1 修改模型</h3><p><code>markdown</code>库可Markdown渲染，要使用这个库，首先执行<code>pip install markdown==3.4.3</code>， 给文章模型添加一个 <code>get_md()</code> 方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> markdown <span class="token keyword">import</span> Markdown<span class="token keyword">class</span> <span class="token class-name">Tag</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章标签    """</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-id'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text<span class="token keyword">class</span> <span class="token class-name">Category</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章分类    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    category <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Category<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 分类</span>    tags <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>        Tag<span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 标签</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"articles"</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 作者</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title        <span class="token keyword">def</span> <span class="token function">get_md</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        md <span class="token operator">=</span> Markdown<span class="token punctuation">(</span>            extensions<span class="token operator">=</span><span class="token punctuation">[</span>                <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>                <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>                <span class="token string">'markdown.extensions.toc'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">)</span>        md_body <span class="token operator">=</span> md<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>self<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token keyword">return</span> md_body<span class="token punctuation">,</span> md<span class="token punctuation">.</span>toc        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法返回了包含了两个元素的元组，分别为已渲染为 html 的<strong>正文</strong>和<strong>目录</strong>。</p><h3 id="1-2-序列化器">1.2 序列化器</h3><p>重构代码，添加文章序列化器父类，在列表接口传入 <code>extra_kwargs</code> 使其变成仅可写却不显示的字段，然后写新的 <code>ArticleDetailSerializer</code> ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">TagSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Tag        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleBaseSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器父类    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tags <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> slug_field<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Category with id </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string"> not exits."</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value        <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        tags_data <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>tags_data<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> text <span class="token keyword">in</span> tags_data<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_internal_value<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        category_id <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'category_id'</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>category_id<span class="token punctuation">)</span>        tags <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text__in<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">'tags'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>        article <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span>        <span class="token keyword">return</span> article<span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>ArticleBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'write_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailSerializer</span><span class="token punctuation">(</span>ArticleBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情序列化器    """</span>    body_html <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>    toc_html <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_body_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>get_md<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_toc_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>get_md<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleCategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    给分类详情的文章嵌套序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'url'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类详情    """</span>    articles <span class="token operator">=</span> ArticleCategoryDetailSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>            <span class="token string">'created'</span><span class="token punctuation">,</span>            <span class="token string">'articles'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>body_html</code> 、 <code>toc_html</code> 这两个渲染后的字段是经过加工后的数据，不存在于原始的数据中。为了将这类只读的附加字段添加到接口里，可以用<code>SerializerMethodField()</code> 字段。比如说上面代码中的 <code>body_html</code> 字段，它会自动去调用 <code>get_body_html()</code> 方法，并将其返回结果作为需要序列化的数据。方法中的 <code>obj</code> 参数是序列化器获取到的 model 实例，即文章对象。</p><h3 id="1-3-修复视图">1.3 修复视图</h3><p>渲染后的数据，在文章<strong>详情接口</strong>是需要的，但是在<strong>列表接口</strong>却没必要，因此视图集根据请求方式动态获取序列化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token punctuation">,</span> filters<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token punctuation">,</span> CategorySerializer<span class="token punctuation">,</span> CategoryDetailSerializer<span class="token punctuation">,</span> TagSerializer<span class="token punctuation">,</span> ArticleDetailSerializer<span class="token keyword">class</span> <span class="token class-name">TagViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签视图集    """</span>    queryset <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> TagSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类视图集    """</span>    queryset <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> CategorySerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategorySerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategoryDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章视图集    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ArticleSerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ArticleDetailSerializer    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-文章标题图">5. 文章标题图</h2><p>博客可能会有文件的上传与下载，但是 JSON 格式的载体是字符串，不能够直接处理文件流。</p><p>Django 用 <code>multipart/form-data</code> 表单发送夹杂着元数据的文件，DRF中也可以这样做，这种方法可行，但在主要接口中发送编码文不太好，还有其他方法：</p><ul><li>方法1：用 Base64 对文件进行编码（将文件变成字符串）。这种方法简单粗暴，并且只靠 Json 接口就可以实现。代价是数据传输大小增加了约 33％，并在服务器和客户端中增加了编码/解码的开销。</li><li>方法2：首先在 <code>multipart/form-data</code> 中单独发送文件，然后后端将保存好的文件 id 返回给客户端。客户端拿到文件 id 后，发送带有文件 id 的 Json 数据，在服务器端将它们关联起来。</li><li>方法3：首先单独发送 Json 数据，然后后端保存好这些元数据后将其 id 返回给客户端。接着客户端发送带有元数据 id 的文件，在服务器端将它们关联起来。</li></ul><p>三种方法各有优劣，具体用哪种方法应当视实际情况确定。</p><p>本文将使用第二种方法来实现博文标题图的功能。</p><h3 id="5-1-增加模型">5.1 增加模型</h3><p><code>Pillow</code>库可用于处理图片字段，要使用这个库，首先执行<code>pip install Pillow==9.4.0</code>，添加标题图模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> markdown <span class="token keyword">import</span> Markdown<span class="token keyword">class</span> <span class="token class-name">Avatar</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar/%Y%m%d'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Tag</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章标签    """</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-id'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>text<span class="token keyword">class</span> <span class="token class-name">Category</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章分类    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Avatar<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'article'</span>    <span class="token punctuation">)</span>    category <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Category<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 分类</span>    tags <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>        Tag<span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'articles'</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 标签</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"articles"</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 作者</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title        <span class="token keyword">def</span> <span class="token function">get_md</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        md <span class="token operator">=</span> Markdown<span class="token punctuation">(</span>            extensions<span class="token operator">=</span><span class="token punctuation">[</span>                <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>                <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>                <span class="token string">'markdown.extensions.toc'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">)</span>        md_body <span class="token operator">=</span> md<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>self<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token keyword">return</span> md_body<span class="token punctuation">,</span> md<span class="token punctuation">.</span>toc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Avatar</code> 模型仅包含一个图片字段。接收的图片将保存在 <code>media/avatar/年月日/</code> 的路径中。</p><p>执行迁移：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py makemigrations<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-2-序列化器">5.2 序列化器</h3><p>用户的操作流程如下：</p><ul><li>发表新文章时，标题图需要先上传，添加一个单独的序列化器，DRF 对图片的处理进行了封装，通常不需要你关心实现的细节。</li><li>标题图上传完成会返回其数据（比如图片数据的 id）到前端并暂存，前端将图片的信息以嵌套结构表示到文章接口中，并在适当的时候将其链接到文章数据中，等待新文章完成后一起提交。</li><li>提交新文章时，序列化器对标题图进行检查，如果无效则返回错误信息。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token punctuation">,</span> Avatar<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">AvatarSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'avatar-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Avatar        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">TagSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Tag        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleBaseSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器父类    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tags <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> slug_field<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">)</span>    avatar <span class="token operator">=</span> AvatarSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    avatar_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        default_error_messages <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'incorrect_avatar_id'</span><span class="token punctuation">:</span> <span class="token string">'Avatar with id {value} not exits.'</span><span class="token punctuation">,</span>        <span class="token string">'incorrect_category_id'</span><span class="token punctuation">:</span> <span class="token string">'Category with id {value} not exits.'</span><span class="token punctuation">,</span>        <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token string">'No more message here...'</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">check_obj_exists_or_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> value<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>default_error_messages<span class="token punctuation">.</span>get<span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            message <span class="token operator">=</span> <span class="token string">'default'</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> model<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span>message<span class="token punctuation">,</span> value<span class="token operator">=</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>check_obj_exists_or_fail<span class="token punctuation">(</span>model<span class="token operator">=</span>Category<span class="token punctuation">,</span> value<span class="token operator">=</span>value<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'incorrect_category_id'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value        <span class="token keyword">def</span> <span class="token function">validate_avatar_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>check_obj_exists_or_fail<span class="token punctuation">(</span>model<span class="token operator">=</span>Avatar<span class="token punctuation">,</span> value<span class="token operator">=</span>value<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'incorrect_avatar_id'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value        <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        tags_data <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>tags_data<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> text <span class="token keyword">in</span> tags_data<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_internal_value<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        category_id <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'category_id'</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>category_id<span class="token punctuation">)</span>        tags <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text__in<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">'tags'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>        article <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span>        <span class="token keyword">return</span> article<span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>ArticleBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'write_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailSerializer</span><span class="token punctuation">(</span>ArticleBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情序列化器    """</span>    body_html <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>    toc_html <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_body_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>get_md<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_toc_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>get_md<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleCategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    给分类详情的文章嵌套序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'url'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类详情    """</span>    articles <span class="token operator">=</span> ArticleCategoryDetailSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>            <span class="token string">'created'</span><span class="token punctuation">,</span>            <span class="token string">'articles'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-视图与路由">5.3 视图与路由</h3><p>编写视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token punctuation">,</span> filters<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token punctuation">,</span> Avatar<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> <span class="token punctuation">(</span>    ArticleSerializer<span class="token punctuation">,</span>    CategorySerializer<span class="token punctuation">,</span>    CategoryDetailSerializer<span class="token punctuation">,</span>    TagSerializer<span class="token punctuation">,</span>    ArticleDetailSerializer<span class="token punctuation">,</span>    AvatarSerializer<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AvatarViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章标题图视图集    """</span>    queryset <span class="token operator">=</span> Avatar<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> AvatarSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">TagViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签视图集    """</span>    queryset <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> TagSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类视图集    """</span>    queryset <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> CategorySerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategorySerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> CategoryDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章视图集    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ArticleSerializer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ArticleDetailSerializer    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还需要修改配置文件，配置图片存放的路径</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/settings.py</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>MEDIA_URL <span class="token operator">=</span>  <span class="token string">'/media/'</span>MEDIA_ROOT <span class="token operator">=</span> BASE_DIR <span class="token operator">/</span> <span class="token string">'media'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后编写路由：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> static<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> article <span class="token keyword">import</span> viewsrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'article'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'category'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CategoryViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'tag'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>TagViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'avatar'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>AvatarViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">if</span> settings<span class="token punctuation">.</span>DEBUG<span class="token punctuation">:</span>    urlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-测试">5.4 测试</h3><blockquote><p><em>Postman 操作文件接口需要将</em> <code>Content-Type</code> <em>改为</em> <code>multipart/form-data</code> <em>，并在</em> <code>Body</code> <em>中上传图片文件。</em></p></blockquote><p>可浏览器打开http://127.0.0.1:8000/api/avatar/"进行测试</p><h2 id="6-评论">6. 评论</h2><p>有很多方式可以将评论功能托管给第三方（推荐这么做），不过也可以自己实现简单的评论接口。</p><p>评论功能比较独立，因此新增一个 <code>comment</code> 的 App：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py startapp comment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将App注册到配置文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/settings.py</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span>    <span class="token string">'article'</span><span class="token punctuation">,</span>    <span class="token string">'user_info'</span><span class="token punctuation">,</span>    <span class="token string">'django_filters'</span><span class="token punctuation">,</span>    <span class="token string">'comment'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-添加模型">6.1 添加模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># comment/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'comments'</span>    <span class="token punctuation">)</span>    article <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Article<span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'comments'</span>    <span class="token punctuation">)</span>    content <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模型包含一对多的作者外键、一对多的文章外键、评论实际内容、评论时间这4个字段。</p><p>执行 <code>python manage.py makemigrations</code> 和 <code>python manage.py migrate</code> 。</p><h3 id="6-2-序列化器">6.2 序列化器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># comment/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> comment<span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    评论序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'comment-detail'</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Comment        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'created'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'read_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>url</code> 超链接字段让接口的跳转更方便，<code>author</code> 嵌套序列化器让显示的内容更丰富，让评论通过文章接口显示出来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token punctuation">,</span> Category<span class="token punctuation">,</span> Tag<span class="token punctuation">,</span> Avatar<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">from</span> comment<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> CommentSerializer<span class="token keyword">class</span> <span class="token class-name">AvatarSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'avatar-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Avatar        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">TagSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    标签序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Tag        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">CategorySerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'category-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleBaseSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章序列化器父类    """</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> CategorySerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    category_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tags <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> slug_field<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">)</span>    avatar <span class="token operator">=</span> AvatarSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    avatar_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        default_error_messages <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'incorrect_avatar_id'</span><span class="token punctuation">:</span> <span class="token string">'Avatar with id {value} not exits.'</span><span class="token punctuation">,</span>        <span class="token string">'incorrect_category_id'</span><span class="token punctuation">:</span> <span class="token string">'Category with id {value} not exits.'</span><span class="token punctuation">,</span>        <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token string">'No more message here...'</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">check_obj_exists_or_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> value<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>default_error_messages<span class="token punctuation">.</span>get<span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            message <span class="token operator">=</span> <span class="token string">'default'</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> model<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span>message<span class="token punctuation">,</span> value<span class="token operator">=</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_category_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>check_obj_exists_or_fail<span class="token punctuation">(</span>model<span class="token operator">=</span>Category<span class="token punctuation">,</span> value<span class="token operator">=</span>value<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'incorrect_category_id'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value        <span class="token keyword">def</span> <span class="token function">validate_avatar_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>check_obj_exists_or_fail<span class="token punctuation">(</span>model<span class="token operator">=</span>Avatar<span class="token punctuation">,</span> value<span class="token operator">=</span>value<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'incorrect_avatar_id'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value        <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        tags_data <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>tags_data<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> text <span class="token keyword">in</span> tags_data<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_internal_value<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        category_id <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'category_id'</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>category_id<span class="token punctuation">)</span>        tags <span class="token operator">=</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>text__in<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">'tags'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span>        article <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>tags<span class="token punctuation">)</span>        <span class="token keyword">return</span> article<span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>ArticleBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表序列化器    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'write_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailSerializer</span><span class="token punctuation">(</span>ArticleBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情序列化器    """</span>    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    comments <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    body_html <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>    toc_html <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_body_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>get_md<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_toc_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>get_md<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleCategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    给分类详情的文章嵌套序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'url'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CategoryDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    分类详情    """</span>    articles <span class="token operator">=</span> ArticleCategoryDetailSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Category        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">,</span>            <span class="token string">'created'</span><span class="token punctuation">,</span>            <span class="token string">'articles'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-权限、视图与路由">6.3 权限、视图与路由</h3><p>评论对用户身份的要求比文章宽松，<strong>非安全请求</strong>只需要是本人操作就可以了。</p><p>因此自定义一个所有人都可查看、仅本人可更改的权限：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># comment/permissions.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> BasePermission<span class="token punctuation">,</span> SAFE_METHODS<span class="token keyword">class</span> <span class="token class-name">IsOwnerOrReadOnly</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> <span class="token string">'You must be the owner to update.'</span>    <span class="token keyword">def</span> <span class="token function">safe_methods_or_owner</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token keyword">in</span> SAFE_METHODS<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>safe_methods_or_owner<span class="token punctuation">(</span>            request<span class="token punctuation">,</span>            <span class="token keyword">lambda</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_authenticated        <span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>safe_methods_or_owner<span class="token punctuation">(</span>            request<span class="token punctuation">,</span>            <span class="token keyword">lambda</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>author <span class="token operator">==</span> request<span class="token punctuation">.</span>user        <span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行<strong>非安全请求</strong>时，需要验证当前评论的作者和当前登录的用户是否为同一个人，这里用到了 <code>def has_object_permission(...)</code> 这个钩子方法，方法参数中的 <code>obj</code> 即为评论模型的实例。</p><p>看起来只需要实现这个 <code>def has_object_permission(...)</code> 就可以了，但还有一点点小问题：此方法是晚于视图集中的 <code>def perform_create(author=self.request.user)</code> 执行的。如果用户未登录时新建评论，由于用户不存在，接口会抛出 500 错误。</p><p>本着即使出错也要做出正确错误提示的原则，增加了 <code>def has_permission(...)</code> 方法。此方法早于 <code>def perform_create(...)</code> 执行，因此能够对用户登录状态做一个预先检查。</p><p>编写视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># comment/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> comment<span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment<span class="token keyword">from</span> comment<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> CommentSerializer<span class="token keyword">from</span> comment<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsOwnerOrReadOnly<span class="token keyword">class</span> <span class="token class-name">CommentViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    评论视图集    """</span>    queryset <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> CommentSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsOwnerOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册路由：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> static<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> article <span class="token keyword">import</span> views<span class="token keyword">from</span> comment<span class="token punctuation">.</span>views <span class="token keyword">import</span> CommentViewSetrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'article'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'category'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CategoryViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'tag'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>TagViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'avatar'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>AvatarViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'comment'</span><span class="token punctuation">,</span> CommentViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">if</span> settings<span class="token punctuation">.</span>DEBUG<span class="token punctuation">:</span>    urlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可浏览器打开http://127.0.0.1:8000/api/comment/"进行测试</p><h3 id="6-4-多级评论">6.4 多级评论</h3><p>多级评论，也就是让评论模型和自身相关联，使其可以有一个父级。</p><p>修改评论模型，新增 <code>parent</code> 字段：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># comment/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    parent <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        <span class="token string">'self'</span><span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'children'</span>    <span class="token punctuation">)</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'comments'</span>    <span class="token punctuation">)</span>    article <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        Article<span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'comments'</span>    <span class="token punctuation">)</span>    content <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一个父评论可以有多个子评论，而一个子评论只能有一个父评论，因此用了一对多外键。</li><li>之前的一对多外键，第一个参数直接引用了对应的模型，但是由于语法规则限制，这里显然不能够自己引用自己，因此用了传递字符串 <code>self</code> 的方式，作用都是一样的。</li></ul><p>执行 <code>python manage.py makemigrations</code> 和 <code>python manage.py migrate</code> 进行迁移。</p><p>修改序列化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># comment/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> comment<span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">CommentChildrenSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    子评论序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'comment-detail'</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Comment        exclude <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'parent'</span><span class="token punctuation">,</span> <span class="token string">'article'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    评论序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'comment-detail'</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    article <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedRelatedField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'article-detail'</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    article_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parent <span class="token operator">=</span> CommentChildrenSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parent_id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'parent_id'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Comment        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'created'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'read_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增代码大致可以分为三块：</p><ul><li>将 <code>article</code> 改为超链接字段用了 <code>HyperlinkedRelatedField</code> ，它同 <code>HyperlinkedIdentityField</code> 差别很小，可以简化理解为 <code>HyperlinkedRelatedField</code> 用于对外键关系，而 <code>HyperlinkedIdentityField</code> 用于对当前模型自身。（完整的解释<a href="https://stackoverflow.com/questions/31566675/for-django-rest-framework-what-is-the-difference-in-use-case-for-hyperlinkedrel">看这里</a>）</li><li><code>parent</code> 为父评论，用了嵌套序列化器 <code>CommentChildrenSerializer</code> 。注意这个序列化器的 <code>Meta</code> 用 <code>exclude</code> 来定义不需要的字段。</li><li>由于希望父评论只能在创建时被关联，后续不能更改，因此覆写 <code>def update(...)</code> ，使得在更新评论时忽略掉 <code>parent_id</code> 参数。</li></ul><p>可浏览器打开http://127.0.0.1:8000/api/comment/"，在界面上进行评论的增删改查测试</p><h2 id="7-JWT身份认证">7. JWT身份认证</h2><p>Web 程序是使用 HTTP 协议传输的，而 HTTP 协议是<strong>无状态</strong>的协议，对于事务没有记忆能力。如果没有其他形式的帮助，服务器是没办法知道前后两次请求是否是同一个用户发起的，也不具有对用户进行身份验证的能力。</p><p>传统 web 开发中，身份验证<strong>通常</strong>是基于 Session 会话机制的。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。 Session 通常是存储在服务器当中的，如果 Session 过多，会对服务器产生压力。</p><p>另一种比较常用的身份验证方式是 <strong>JWT (JSON Web Token)</strong> 令牌。JWT 是一种开放标准，它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。由于 Token 是经过数字签名的，因此可以被验证和信任。<strong>JWT 非常适合用于身份验证和服务器到服务器授权</strong>。与 Session 不同，JWT 的 <strong>Token</strong> 是保存在用户端的，即摆脱了对服务器的依赖。在进行某些需要验证身份的业务中，用户需要把令牌一并提交。</p><p>JWT令牌组成如图所示：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(3)%EF%BC%9A%E5%90%8E%E7%AB%AF%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/image-20230328162558878.png" alt="JWT令牌"></p><blockquote><p><em>详细的</em> <a href="https://jwt.io/introduction">JWT 工作方式讲解</a><em>。</em></p></blockquote><h3 id="7-1-JWT引入">7.1 JWT引入</h3><p><code>djangorestframework-simplejwt</code>库可用于 JWT ，要使用这个库，首先执行<code>pip install djangorestframework-simplejwt==5.2.2</code>，修改配置文件，使用 JWT 为默认验证机制，同时配置token的有效期：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/settings.py</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_PAGINATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.pagination.PageNumberPagination'</span><span class="token punctuation">,</span>    <span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token string">'rest_framework_simplejwt.authentication.JWTAuthentication'</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>SIMPLE_JWT <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'ACCESS_TOKEN_LIFETIME'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'REFRESH_TOKEN_LIFETIME'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Token 一旦泄露，任何人都可以获得该令牌的所有权限。出于安全考虑，Token 的有效期通常不应该设置得太长。</p></blockquote><p>更多配置项请查看<a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html">官方文档</a>。</p><p>在路由中添加Token的获取和刷新地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> static<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> article <span class="token keyword">import</span> views<span class="token keyword">from</span> comment<span class="token punctuation">.</span>views <span class="token keyword">import</span> CommentViewSet<span class="token keyword">from</span> rest_framework_simplejwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token punctuation">(</span>    TokenObtainPairView<span class="token punctuation">,</span>    TokenRefreshView<span class="token punctuation">,</span><span class="token punctuation">)</span>router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'article'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'category'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CategoryViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'tag'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>TagViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'avatar'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>AvatarViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'comment'</span><span class="token punctuation">,</span> CommentViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'api/token/'</span><span class="token punctuation">,</span> TokenObtainPairView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'token_obtain_pair'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'api/token/refresh'</span><span class="token punctuation">,</span> TokenRefreshView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'token_refresh'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">if</span> settings<span class="token punctuation">.</span>DEBUG<span class="token punctuation">:</span>    urlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-测试">7.2 测试</h3><p>浏览器打开页面 <a href="http://127.0.0.1:8000/api/token/">http://127.0.0.1:8000/api/token/</a> ，填入你的用户名和密码，点击 <strong>POST</strong> 即可得到 Access Token 和 Refresh Token 。如：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">HTTP 200 OKAllow: POST<span class="token punctuation">,</span> OPTIONSContent-<span class="token function">Type</span>: application/jsonVary: Accept<span class="token punctuation">{</span>    <span class="token string">"refresh"</span>: <span class="token string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4MDA3OTMwMiwiaWF0IjoxNjc5OTkyOTAyLCJqdGkiOiI2ZWZmYzRhODJjZDY0ZjZiYjk3MDlmZTUzNDE2N2M1NSIsInVzZXJfaWQiOjF9.A2Z0oqu_TB-eLwCFgBkYMjjE71utzPa492VV9hX_zS0"</span><span class="token punctuation">,</span>    <span class="token string">"access"</span>: <span class="token string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjgwMDAzNzAyLCJpYXQiOjE2Nzk5OTI5MDIsImp0aSI6ImYyMDNkNmMxMGY5ZDQ4MmJiNGI4ZjQwNGFhNzJlMjQ3IiwidXNlcl9pZCI6MX0.lN3ThGRBGg0Kz3u1vPrUJoYzlEFgoTNy_fyciPHxNRo"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到 Token 后，就可以用 Access Token 作为你的身份令牌，进行正常的资源请求了：</p><blockquote><p>Postman 有一个专门的标签页 (Authorization) 用于填写令牌。此标签页的 Type 栏选择 Bearer Token 即可。</p></blockquote><p>当 Access Token 过期后，可使用 Refresh Token 访问 <a href="http://127.0.0.1:8000/api/token/refresh/">http://127.0.0.1:8000/api/token/refresh/</a> 再获取一个新的令牌 Access Token ，当 Refresh Token 也过期后，之后浏览器打开页面 <a href="http://127.0.0.1:8000/api/token/">http://127.0.0.1:8000/api/token/</a> ，填入你的用户名和密码，获取新的Token了。</p><p>功能与用 Session 相同，并且成功切换到 JWT 方式了，非安全类的请求必须携带 Access Token。</p><blockquote><p>开启 JWT 后，Session 验证就自动失效了。也就是说，除了申请 Token 时会用到账户密码，其他时候的身份验证都不再需要它们了。</p></blockquote><p>Session V.S. JWT: JWT将会话移至客户端意味着摆脱了对服务器端会话的依赖，但这会带来如何安全存储、运输令牌等一系列挑战。不能够一概而论，而是要根据你的项目实际需求。关于这个话题更深入的讨论，请移步<a href="https://stackoverflow.com/questions/43452896/authentication-jwt-usage-vs-session">Stackoverflow</a>。</p><h2 id="8-用户管理">8. 用户管理</h2><h3 id="8-1-序列化器">8.1 序列化器</h3><p>用户管理涉及到对密码的操作，因此新写一个序列化器，覆写 <code>def create(...)</code> 和 <code>def update(...)</code> 方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user_info/serializers.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">UserDescSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表中引用的嵌套用户信息    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'username'</span><span class="token punctuation">,</span>            <span class="token string">'last_login'</span><span class="token punctuation">,</span>            <span class="token string">'date_joined'</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">UserRegisterSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户管理序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'user-detail'</span><span class="token punctuation">,</span> lookup_field<span class="token operator">=</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">]</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'write_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> user        <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'password'</span> <span class="token keyword">in</span> validated_data<span class="token punctuation">:</span>            password <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>            instance<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意 <code>def update(...)</code> 时，密码需要单独拿出来通过 <code>set_password()</code> 方法加密后存入数据库，而不能以明文的形式保存。</li><li>超链接字段的参数有一条 <code>lookup_field</code>，这是指定了解析超链接关系的字段。直观来说，将其配置为 <code>username</code> 后，用户详情接口的地址表示为用户名而不是主键。</li></ul><h3 id="8-2-权限、视图与路由">8.2 权限、视图与路由</h3><p>新增权限：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user_info/permissions.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> BasePermission<span class="token punctuation">,</span> SAFE_METHODS<span class="token keyword">class</span> <span class="token class-name">IsSelfOrReadOnly</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token keyword">in</span> SAFE_METHODS<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">return</span> obj <span class="token operator">==</span> request<span class="token punctuation">.</span>user    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user_info/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token punctuation">,</span> IsAuthenticatedOrReadOnly<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserRegisterSerializer<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsSelfOrReadOnly<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户管理视图    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserRegisterSerializer    lookup_field <span class="token operator">=</span> <span class="token string">'username'</span>    <span class="token keyword">def</span> <span class="token function">get_permissions</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>AllowAny<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span> IsSelfOrReadOnly<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_permissions<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注册用户的 POST 请求是允许所有人都可以操作的，但其他类型的请求（比如修改、删除）就必须是本人才行了，因此可以覆写 <code>def get_permissions(...)</code> 定义不同情况下所允许的权限。 <code>permission_classes</code> 接受列表，因此可以同时定义多个权限，权限之间是 and 关系。</li><li>注意这里的 <code>lookup_field</code> 属性，和序列化器中对应起来。</li></ul><p>修改路由：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> static<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> article <span class="token keyword">import</span> views<span class="token keyword">from</span> comment<span class="token punctuation">.</span>views <span class="token keyword">import</span> CommentViewSet<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>views <span class="token keyword">import</span> UserViewSet<span class="token keyword">from</span> rest_framework_simplejwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token punctuation">(</span>    TokenObtainPairView<span class="token punctuation">,</span>    TokenRefreshView<span class="token punctuation">,</span><span class="token punctuation">)</span>router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'article'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'category'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CategoryViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'tag'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>TagViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'avatar'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>AvatarViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'comment'</span><span class="token punctuation">,</span> CommentViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'user'</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'api/token/'</span><span class="token punctuation">,</span> TokenObtainPairView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'token_obtain_pair'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'api/token/refresh'</span><span class="token punctuation">,</span> TokenRefreshView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'token_refresh'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">if</span> settings<span class="token punctuation">.</span>DEBUG<span class="token punctuation">:</span>    urlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可用浏览器打开 <a href="http://127.0.0.1:8000/api/user/">http://127.0.0.1:8000/api/user/</a> 进行用户列表查看和创建用户测试。</p><p>可以看到详情地址不是主键值而是用户名了，这就是 <code>lookup_field</code> 发挥的作用。</p><h3 id="8-3-自定义动作">8.3 自定义动作</h3><p>视图集除了默认的增删改查外，还可以有其他的自定义动作。</p><p>为了测试，先写一个信息更加丰富的用户序列化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user_info/serializers.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">UserDescSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表中引用的嵌套用户信息    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'username'</span><span class="token punctuation">,</span>            <span class="token string">'last_login'</span><span class="token punctuation">,</span>            <span class="token string">'date_joined'</span>        <span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">UserRegisterSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户管理序列化器    """</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">'user-detail'</span><span class="token punctuation">,</span> lookup_field<span class="token operator">=</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">]</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'write_only'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> user        <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'password'</span> <span class="token keyword">in</span> validated_data<span class="token punctuation">:</span>            password <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>            instance<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'username'</span><span class="token punctuation">,</span>            <span class="token string">'first_name'</span><span class="token punctuation">,</span>            <span class="token string">'last_name'</span><span class="token punctuation">,</span>            <span class="token string">'email'</span><span class="token punctuation">,</span>            <span class="token string">'last_login'</span><span class="token punctuation">,</span>            <span class="token string">'date_joined'</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在视图集中新增自定义动作的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user_info/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token punctuation">,</span> IsAuthenticatedOrReadOnly<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserRegisterSerializer<span class="token punctuation">,</span> UserDetailSerializer<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsSelfOrReadOnly<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户管理视图    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserRegisterSerializer    lookup_field <span class="token operator">=</span> <span class="token string">'username'</span>    <span class="token keyword">def</span> <span class="token function">get_permissions</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>AllowAny<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span> IsSelfOrReadOnly<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_permissions<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token decorator annotation punctuation">@action</span><span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>        serializer <span class="token operator">=</span> UserDetailSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token decorator annotation punctuation">@action</span><span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sorted</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reqeust<span class="token punctuation">)</span><span class="token punctuation">:</span>        users <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-username'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>paginate_queryset<span class="token punctuation">(</span>users<span class="token punctuation">)</span>        <span class="token keyword">if</span> page <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>page<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_paginated_response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>users<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>魔法都在装饰器 <code>@action</code> 里，它的参数可以定义是否为详情的动作、请求类型、url 地址、url 解析名等常规需求。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http get http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/user/admin/info/HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 183Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Tue<span class="token punctuation">,</span> 28 Mar 2023 09:50:04 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: AcceptX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"email"</span>: <span class="token string">"admin@example.com"</span><span class="token punctuation">,</span>    <span class="token string">"first_name"</span>: <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>    <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T23:24:54.504055+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"last_name"</span>: <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">"username"</span>: <span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http get http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/user/sorted/HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 197Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Tue<span class="token punctuation">,</span> 28 Mar 2023 09:51:41 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: AcceptX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"count"</span>: 2<span class="token punctuation">,</span>    <span class="token string">"next"</span>: null<span class="token punctuation">,</span>    <span class="token string">"previous"</span>: null<span class="token punctuation">,</span>    <span class="token string">"results"</span>: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>            <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/user/test/"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"test"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>            <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/user/admin/"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"admin"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，方法名就是此动作的路由路径。返回的 Json 也正确显示为方法中所封装的数据。</p><blockquote><p><em>关于自定义动作详见</em><a href="https://www.django-rest-framework.org/api-guide/viewsets/#marking-extra-actions-for-routing">官方文档</a><em>。</em></p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">本文标题： Django-Vue搭建个人博客(3)：后端功能完善原文链接： https://www.dusaiphoto.com/article/112/ ~ https://www.dusaiphoto.com/article/120/原文作者： 杜赛许可协议： 署名-非商业性使用 4.0 国际许可协议本文对原始作品作了修改，转载请保留原文链接及作者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(2)：DRF的使用</title>
      <link href="/posts/8442.html"/>
      <url>/posts/8442.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-初识Django-REST-framework-DRF">1. 初识Django REST framework (DRF)</h2><h3 id="1-1-DRF开发预备">1.1 DRF开发预备</h3><p>首先在命令行创建博客文章的App：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py startapp article<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个简单的博客文章模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Django有一个非常优秀的库 <a href="https://www.django-rest-framework.org/">Django REST framework</a> (简称 <strong>DRF</strong> )，可以帮助我们封装好序列化的底层实现，让开发人员专注于业务本身。</p><p>安装 DRF 及其他依赖库：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; pip install djangorestframework=3<span class="token punctuation">.</span>14<span class="token punctuation">.</span>0<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; pip install markdown==3<span class="token punctuation">.</span>4<span class="token punctuation">.</span>3<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; pip install django-<span class="token keyword">filter</span>==23<span class="token punctuation">.</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后将App注册到列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/settings.py</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span>    <span class="token string">'article'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着添加 DRF 的登录视图，以便 DRF 自动为你的可视化接口页面生成一个用户登录的入口：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    path<span class="token punctuation">(</span><span class="token string">'api-auth/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'rest_framework.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后进行数据迁移：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py makemigrations<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>准备工作做好了。</p><h3 id="1-2-序列化与Django">1.2 序列化与Django</h3><p>前后端分离的核心思想之一是两端交互不通过模板语言，而只传输需要的数据。</p><p>在 Django 程序的运行过程中，变量都是存储在服务器的内存中，而且，后端 Django 程序存储的是 Python 变量，而前端浏览器中是 Javascript 变量，两者是无法直接通过网络进行传递和交流的，因此需要规定一个“标准格式”，前后端都根据这个标准格式，对资源进行保存、读取、传输等操作。</p><p><code>JSON</code>就是这种标准格式之一，它很轻量，表示出来就是个字符串，可以直接被几乎所有的语言读取、转换，非常方便。</p><p>举个例子，把 Python 对象转化为 JSON 的过程叫做<strong>序列化</strong>（Serialization），把 JSON 对象转化为 Python 对象的过程叫做<strong>反序列化</strong>（Deserialization）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> json<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> person <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Trump'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">82</span><span class="token punctuation">)</span>  <span class="token comment"># Python对象</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>person<span class="token punctuation">)</span>  <span class="token comment"># 序列化</span><span class="token string">'{"name": "Trump", "age": 82}'</span>  <span class="token comment"># 字符串</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json_str <span class="token operator">=</span> <span class="token string">'{"name": "Trump", "age": 82}'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span>  <span class="token comment"># 反序列化</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Trump'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">82</span><span class="token punctuation">}</span>  <span class="token comment"># Python对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之，把变量从内存中变为可存储或传输的过程称之为<strong>序列化</strong>，反过来把变量内容从序列化对象重新读到内存中称之为<strong>反序列化</strong>。</p><p>回顾 Django 传统流程对一个网络请求的处理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    articles <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'articles'</span><span class="token punctuation">:</span> articles<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>视图函数将数据作为上下文返回，通过模板引擎将上下文渲染为页面中的数据。</p><p><strong>Restful</strong> 的处理流程仅增加了一步，即对数据<strong>序列化</strong>处理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    articles <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 序列化数据</span>    serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>article<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据被序列化为 JSON 字符串，直接交由前端处理。这就是前后端分离的雏形，后端提供数据，前端专注于操作数据、渲染页面。</p><blockquote><p><em>前后端分离关联的新概念：Rest（表现层状态转化） 和 Restful。Restful 架构是指客户端和服务器之间的交互、操作符合 Rest 规范，即：每一个URI代表一种资源；客户端和服务器之间，传递资源的表现层；客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。</em></p></blockquote><h3 id="1-3-编写文章列表接口">1.3 编写文章列表接口</h3><p>按照该思路，写一个文章列表的接口：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer  <span class="token comment"># ArticleListSerializer 后面会写</span><span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    articles <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer <span class="token operator">=</span> ArticleListSerializer<span class="token punctuation">(</span>articles<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口代码一共就三行：</p><ul><li>取出所有文章的<code>QuerySet</code></li><li>根据<code>QuerySet</code>数据，创建一个序列化器</li><li>将序列化后的数据以 JSON 的形式返回</li></ul><p>因此，返回的数据不再是传统的模板数据，而是 JSON 数据。</p><p>补充<code>ArticleListSerializer</code>的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">ArticleListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表序列化类    """</span>    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>allow_blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    body <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>allow_blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>    updated <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化类看起来类似 Django 的 Form 表单类型，它指定了接口数据中各个字段的具体类型，自动对请求和响应中的数据进行序列化和反序列化转换。其底层实现逻辑已经由 DRF 框架封装好了。</p><p>接下来将各级 <code>urls.py</code> 配置好。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    path<span class="token punctuation">(</span><span class="token string">'api/article/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'article.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'article'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> article <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'article'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_list<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来创建一个管理员用户:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py createsuperuserUsername: adminEmail address: admin@example<span class="token punctuation">.</span>comPassword:Password <span class="token punctuation">(</span>again<span class="token punctuation">)</span>:Superuser created successfully<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>Artile</code>数据表注册到后台中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/admin.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Articleadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Article<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行执行<code>python manage.py runserver</code>启动服务器，并在浏览器中访问 <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a> ，登录后在后台中随意给 <code>article</code> 添加几个测试数据，并在浏览器中访问 <a href="http://127.0.0.1:8000/api/article/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%BF%94%E5%9B%9E%E7%9A%84">http://127.0.0.1:8000/api/article/，可以看到页面中返回的</a> Json 字符串如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"My first post"</span><span class="token punctuation">,</span> <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"First post body ..."</span><span class="token punctuation">,</span> <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:07:00+08:00"</span><span class="token punctuation">,</span> <span class="token property">"updated"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:09:26.036519+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Another post"</span><span class="token punctuation">,</span> <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"Another post body ..."</span><span class="token punctuation">,</span> <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">,</span> <span class="token property">"updated"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:09:52.545659+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"3rd article"</span><span class="token punctuation">,</span> <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"The 3rd article body ..."</span><span class="token punctuation">,</span> <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">,</span> <span class="token property">"updated"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:10:14.199362+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此，你已经完成了一个简单的接口。</p><h2 id="2-序列化器与视图">2. 序列化器与视图</h2><h3 id="2-1-ModelSerializer">2.1 ModelSerializer</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">ArticleListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表序列化类    """</span>    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>allow_blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    body <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>allow_blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>    updated <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文中<code>ArticleListSerializer</code>序列化器类长得跟<code>Artile</code>类模型非常像，如果可以再简化下就好了，DRF提供了<code>ModelSerializer</code>用于简化序列化器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">class</span> <span class="token class-name">ArticleListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ModelSerializer</code>的功能与<code>Serializer</code>基本一致，不同的是它还做了额外的工作：</p><ul><li>自动推断需要序列化的字段及类型</li><li>提供对字段数据的验证器的默认实现</li><li>提供了修改数据需要用到的<code>.create()</code>、<code>.update()</code>方法的默认实现</li><li>在<code>fields</code>列表中挑选出需要的数据，可减少数据的体积</li></ul><p>重新访问 <a href="http://127.0.0.1:8000/api/article/%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:8000/api/article/，页面呈现的数据如下：</a></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"My first post"</span><span class="token punctuation">,</span> <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:07:00+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Another post"</span><span class="token punctuation">,</span> <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"3rd article"</span><span class="token punctuation">,</span> <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到 JSON 数据仅包含<code>fields</code>规定的字段。</p><h3 id="2-2-APIView">2.2 APIView</h3><p>除了对序列化器的支持以外，DRF 还提供了对视图的扩展，以便视图更好的为接口服务，将文章的视图修改如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        articles <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> ArticleListSerializer<span class="token punctuation">(</span>articles<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>        <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> ArticleListSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要的变化如下：</p><ul><li><code>@api_view</code> 装饰器允许视图接收 <code>GET</code> 、<code>POST</code> 请求，以及提供如 <code>405 Method Not Allowed</code> 等默认实现，以便在不同的请求下进行正确的响应。</li><li>返回了 <code>Response</code> ，该对象由 Django 原生响应体扩展而来，它可以根据<strong>内容协商</strong>来确定返回给客户端的正确内容类型。如果数据验证有误，还可以返回适当的状态码以表示当前的情况。</li></ul><p>刷新文章列表接口，出现了可视化的接口界面：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)%EF%BC%9ADRF%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230327003942171.png" alt="可视化的接口界面"></p><p>这是因为视图中 <code>Response</code> 提供的<strong>内容协商</strong>能力，Django 后端根据客户端请求响应的内容类型不同，自动选择适合的表现形式；浏览器请求资源时，就返回可视化的 HTML 资源表示，其他形式请求时，又可以返回 Json 纯数据的形式，给开发人员带来极大的方便。</p><h3 id="2-3-测试接口">2.3 测试接口</h3><p>验证它是不是真的会返回 JSON 数据，可以从命令行使用诸如 <code>curl</code> 或<code>httpie</code>访问，如：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; curl http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"id"</span>:1<span class="token punctuation">,</span><span class="token string">"title"</span>:<span class="token string">"My first post"</span><span class="token punctuation">,</span><span class="token string">"created"</span>:<span class="token string">"2023-03-27T00:07:00+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"id"</span>:2<span class="token punctuation">,</span><span class="token string">"title"</span>:<span class="token string">"Another post"</span><span class="token punctuation">,</span><span class="token string">"created"</span>:<span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"id"</span>:3<span class="token punctuation">,</span><span class="token string">"title"</span>:<span class="token string">"3rd article"</span><span class="token punctuation">,</span><span class="token string">"created"</span>:<span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; pip install httpie<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: OPTIONS<span class="token punctuation">,</span> GET<span class="token punctuation">,</span> POSTConnection: closeContent-Length: 211Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 16:47:49 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T00:07:00+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"My first post"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"Another post"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T00:09:00+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 3<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"3rd article"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再试试新建文章：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/ title=PostByJson body=HelloWorld!HTTP/1<span class="token punctuation">.</span>1 201 CreatedAllow: OPTIONS<span class="token punctuation">,</span> GET<span class="token punctuation">,</span> POSTConnection: closeContent-Length: 74Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 16:53:33 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T00:53:33.637185+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 4<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"PostByJson"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览文章列表、新建文章接口就完成了。</p><p>推荐使用<a href="https://www.postman.com/">Postman</a>进行可视化接口测试和管理。</p><h2 id="3-基于类的视图">3. 基于类的视图</h2><h3 id="3-1-类视图">3.1 类视图</h3><p><strong>DRF</strong> 中也有<strong>基于类的视图</strong>的存在，可用于实现功能的模块化继承、封装，减少重复代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> Http404<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer<span class="token punctuation">,</span> ArticleDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleDetail</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情视图，处理文章的`get`, `put`, `delete`请求    """</span>    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Http404            <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        article <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        serializer <span class="token operator">=</span> ArticleDetailSerializer<span class="token punctuation">(</span>article<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        article <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        serializer <span class="token operator">=</span> ArticleDetailSerializer<span class="token punctuation">(</span>article<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        article <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        article<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        articles <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> ArticleListSerializer<span class="token punctuation">(</span>articles<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>        <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> ArticleListSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中提供了对文章详情的<strong>获取、修改和删除</strong>的3个方法，以及1个用户获取单个文章的辅助方法，DRF 类视图与传统的 Django 的区别是<code>.get()</code>和<code>.put()</code>多了一个将对象序列化（反序列化）的步骤，而<code>.delete()</code>方法因为不用返回实际数据，因此执行完删除动作就OK。</p><blockquote><p>从这个地方就可以看出，序列化器 <code>serializer</code> 不仅可以将数据进行序列化、反序列化，还包含数据验证、错误处理、数据库操作等能力。</p><p>序列化这个概念与具体语言无关。Python 或 JavaScript 对象转换为 Json 都称为序列化，反之为反序列化。Json 是两种语言传输信息的桥梁，一但信息到达，对方都需要将其还原为自身的数据结构。</p></blockquote><p>由于详情接口需要返回完整的数据，所以新增一个序列化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">class</span> <span class="token class-name">ArticleListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置<code>urls.py</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> article <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'article'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_list<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'&lt;int:pk&gt;/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'detail'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 测试请求文章接口</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/1/HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 70Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 17:14:50 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span><span class="token string">"body"</span>: <span class="token string">"First post body ..."</span><span class="token punctuation">,</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T00:07:00+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"My first post"</span><span class="token punctuation">,</span>    <span class="token string">"updated"</span>: <span class="token string">"2023-03-27T00:07:00+08:00"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment"># 测试修改文章接口</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http PUT http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/1/ title=somthing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> body=changed<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 133Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 17:20:06 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"body"</span>: <span class="token string">"changed..."</span><span class="token punctuation">,</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T00:07:00+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"somthing..."</span><span class="token punctuation">,</span>    <span class="token string">"updated"</span>: <span class="token string">"2023-03-27T01:20:06.079919+08:00"</span><span class="token punctuation">}</span><span class="token comment"># 测试删除文章接口</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http DELETE http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/1/HTTP/1<span class="token punctuation">.</span>1 204 No ContentAllow: GET<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 17:21:13 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-通用视图">3.2 通用视图</h3><p>对数据的增删改查是几乎每个项目的通用操作，因此可以通过 DRF 提供的 Mixin 类直接集成对应的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status<span class="token punctuation">,</span> mixins<span class="token punctuation">,</span> generics<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer<span class="token punctuation">,</span> ArticleDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleDetail</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>UpdateModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>DestroyModelMixin<span class="token punctuation">,</span> generics<span class="token punctuation">.</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情视图，处理文章的`get`, `put`, `delete`请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleDetailSerializer            <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>retrieve<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>update<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表视图，处理文章的`post`和文章列表的`get`请求    """</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        articles <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> ArticleListSerializer<span class="token punctuation">(</span>articles<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>        <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> ArticleListSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以进一步简化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer<span class="token punctuation">,</span> ArticleDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情视图，处理文章的`get`, `put`, `delete`请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleDetailSerializer    <span class="token keyword">class</span> <span class="token class-name">ArticleList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表视图，处理文章的`post`和文章列表的展示请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleListSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能和最开头那个继承 <code>APIView</code> 的视图是完全相同的。</p><blockquote><p><em>除了上述介绍的以外，框架还提供</em> <code>ListModelMixin</code><em>、</em><code>CreateModelMixin</code> <em>等混入类或通用视图，覆盖了基础的增删改查需求。</em></p></blockquote><h2 id="4-用户权限">4. 用户权限</h2><p><strong>权限</strong>是Web应用的重要组成部分，在 DRF 中可以进行权限管理。</p><h3 id="4-1-文章与用户">4.1 文章与用户</h3><p>依靠用户身份来限制权限，作者与文章是一对多的关系，需要给文章模型添加用户外键，确定每篇文章的作者。保险起见，首先删除现有的所有文章数据。</p><p>修改文章的 <strong>model</strong>，让每篇文章都对应一个作者：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"articles"</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 作者</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行迁移</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py makemigrations<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动服务后查看当前文章列表：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/                                HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 2Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 17:50:07 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-权限控制">4.2 权限控制</h3><p>DRF 内置了<code>IsAuthenticated</code>、<code>IsAdminUser</code>、<code>AllowAny</code>等权限控制类，个人博客只允许管理员发布文章。修改文章列表视图如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUser<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer<span class="token punctuation">,</span> ArticleDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情视图，处理文章的`get`, `put`, `delete`请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleDetailSerializer    <span class="token keyword">class</span> <span class="token class-name">ArticleList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表视图，处理文章的`post`和文章列表的`get`请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleListSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUser<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/   HTTP/1<span class="token punctuation">.</span>1 403 ForbiddenAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 43Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:04:30 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"detail"</span>: <span class="token string">"Authentication credentials were not provided."</span><span class="token punctuation">}</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/ title=may body=notSuccessHTTP/1<span class="token punctuation">.</span>1 403 ForbiddenAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 43Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:05:02 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"detail"</span>: <span class="token string">"Authentication credentials were not provided."</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，权限控制确实起作用了，但是目前只有管理员才能查看文章，因此可以<strong>自定义</strong>一个权限类，新建<code>article/permissions.py</code>文件，写入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/permissions.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> permissions<span class="token keyword">class</span> <span class="token class-name">IsAdminUserOrReadOnly</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    允许管理员进行修改，其他用户仅可查看    """</span>    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token keyword">in</span> permissions<span class="token punctuation">.</span>SAFE_METHODS<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">return</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义的权限类继承了 <code>BasePermission</code> 类，并实现了父类中的钩子方法 <code>def has_permission</code>。此方法在每次请求到来时被唤醒执行，里面简单判断了请求的种类是否安全（即不更改数据的请求），如果安全则直接通过，不安全则只允许管理员用户通过。</p><p>再次修改视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer<span class="token punctuation">,</span> ArticleDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情视图，处理文章的`get`, `put`, `delete`请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleDetailSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">class</span> <span class="token class-name">ArticleList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表视图，处理文章的`post`和文章列表的`get`请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleListSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用户未登录时：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\WebProject\my_blog\backend&gt;http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 2Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:17:14 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\WebProject\my_blog\backend&gt;http POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/ title=<span class="token string">"post with permission"</span> body=<span class="token string">"new test"</span>HTTP/1<span class="token punctuation">.</span>1 403 ForbiddenAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 43Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:17:23 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"detail"</span>: <span class="token string">"Authentication credentials were not provided."</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在后台中创建一个普通用户 <strong>test</strong>，用普通用户身份进行请求：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 普通用户 test，密码 test123321</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a test:test123321 http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 2Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:22:09 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt;http <span class="token operator">-</span>a test:test123321 POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/ title=<span class="token string">"post with permission"</span> body=<span class="token string">"new test"</span> HTTP/1<span class="token punctuation">.</span>1 403 ForbiddenAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 49Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:22:26 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    “detail<span class="token string">": "</span>Authentication credentials were not provided<span class="token punctuation">.</span>"<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，再用管理员用户 <strong>admin</strong> 测试：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 普通用户 admin，密码 admin</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a admin:admin http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/                 HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 2Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:24:09 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a admin:admin POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/ title=<span class="token string">"post with permission"</span> body=<span class="token string">"new test"</span>      HTTP/1<span class="token punctuation">.</span>1 201 CreatedAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 84Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:24:27 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:24:27.017416+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"post with permission"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终，任何人都可以查看资源；但是新增（CREATE）、更新（PUT）、删除（DELETE）等修改操作就只允许管理员执行。</p><h2 id="5-文章关联用户">5. 文章关联用户</h2><h3 id="5-1-提取用户信息">5.1 提取用户信息</h3><p>上文用户以外键关联到文章中，由于<code>author</code>字段允许为空，因此理论上可以发布没有作者的文章。但是，我们可以从<code>Request</code>提取用户信息，把额外的用户信息注入到已有的数据中。</p><p>修改视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># author/views.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics<span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleListSerializer<span class="token punctuation">,</span> ArticleDetailSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章详情视图，处理文章的`get`, `put`, `delete`请求    """</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleDetailSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">class</span> <span class="token class-name">ArticleList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表视图，处理文章的`post`和文章列表的`get`请求    """</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>            queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleListSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增的这个 <code>perform_create()</code> 从父类 <code>ListCreateAPIView</code> 继承而来，它在序列化数据真正保存之前调用，因此可以在这里添加额外的数据（即用户对象）。</li><li><code>serializer</code> 参数是 <code>ArticleListSerializer</code> 序列化器实例，并且已经携带着验证后的数据。它的 <code>save()</code> 方法可以接收关键字参数作为额外的需要保存的数据。</li></ul><p>在命令行测试：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http <span class="token operator">-</span>a admin:admin POST http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/ title=<span class="token string">"post with user"</span> body=<span class="token string">"new test again"</span> HTTP/1<span class="token punctuation">.</span>1 201 CreatedAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 78Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:33:54 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:33:54.420714+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"post with user"</span><span class="token punctuation">}</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/2/                             HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> PATCH<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 144Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 18:43:32 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"author"</span>: 1<span class="token punctuation">,</span>    <span class="token string">"body"</span>: <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:33:54.420714+08:00"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>    <span class="token string">"title"</span>: <span class="token string">"post with user"</span><span class="token punctuation">,</span>    <span class="token string">"updated"</span>: <span class="token string">"2023-03-27T02:33:54.420714+08:00"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是用户依然可以手动传入一个错误的 <code>author</code>，修改 <code>ArticleListSerializer</code>，序列化器允许你指定只读字段。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">class</span> <span class="token class-name">ArticleListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">]</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-显示用户信息">5.2 显示用户信息</h3><p>虽然作者外键已经出现在序列化数据中了，但是仅仅显示作者的 id 不太有用，我们更想要的是比如名字、性别等更具体的结构化信息。所以就需要将序列化数据<strong>嵌套</strong>起来。</p><p>新创建一个用户 app：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; python manage<span class="token punctuation">.</span>py startapp user_info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并将新app添加到注册列表：</p><pre class="line-numbers language-none"><code class="language-none"># backend/settings.pyINSTALLED_APPS = [    ...    'user_info',]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建<code>user_info/serializers.py</code>文件，写入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user_info/serializers.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">UserDescSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    文章列表中引用的嵌套用户信息    """</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'username'</span><span class="token punctuation">,</span>            <span class="token string">'last_login'</span><span class="token punctuation">,</span>            <span class="token string">'date_joined'</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个序列化器专门用在文章列表中，展示用户的基本信息，最后修改文章列表的序列化器，把它们嵌套到一起：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">]</span>        <span class="token comment"># 嵌套序列化器已经设置了只读</span>        <span class="token comment"># read_only_fields = ['author']</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在命令行测试一下：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/   HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 1355Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 19:03:18 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"author"</span>: null<span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:24:27.017416+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"post with permission"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"author"</span>: <span class="token punctuation">{</span>            <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>            <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"admin"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:33:54.420714+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 2<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"post with user"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"author"</span>: <span class="token punctuation">{</span>            <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>            <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"admin"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:36:12.859805+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 3<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"post with user"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"author"</span>: <span class="token punctuation">{</span>            <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>            <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"admin"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:37:48.969211+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span>: 4<span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"test body"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-超链接与分页">6. 超链接与分页</h2><h3 id="6-1-超链接">6.1 超链接</h3><p>目前文章数据看不出每篇文章的实际url地址，最好 JSON 数据直接提供每篇文件的 url，以后前端用起来就更方便了。实现超链接可以用DRF框架提供的<code>HyperlinkedIdentityField</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">"article:detail"</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>HyperlinkedIdentityField</code> 是 DRF 框架提供的超链接字段，只需要你在参数里提供路由的名称，它就自动帮你完成动态地址的映射。</li><li><code>view_name</code> 是路由的名称，也就是我们在 <code>path(... name='xxx')</code> 里的那个 name</li><li>别忘了在序列化器的 <code>fields</code> 列表里加上 <code>url</code></li></ul><p>在命令行测试：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/   HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 1355Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 19:03:18 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/1/"</span><span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"post with permission"</span><span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:24:27.017416+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"author"</span>: null    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/2/"</span><span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"post with user"</span><span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:33:54.420714+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"author"</span>: <span class="token punctuation">{</span>            <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"admin"</span><span class="token punctuation">,</span>            <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/3/"</span><span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"post with user"</span><span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:36:12.859805+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"author"</span>: <span class="token punctuation">{</span>            <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"admin"</span><span class="token punctuation">,</span>            <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/4/"</span><span class="token punctuation">,</span>        <span class="token string">"title"</span>: <span class="token string">"test body"</span><span class="token punctuation">,</span>        <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:37:48.969211+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"author"</span>: <span class="token punctuation">{</span>            <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>            <span class="token string">"username"</span>: <span class="token string">"admin"</span><span class="token punctuation">,</span>            <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>DRF 框架还提供了一个专门的超链接序列化器</em> <code>HyperlinkedModelSerializer</code><em>，大体上跟普通序列化器差不多，不同的是默认以超链接来表示关系字段。详情见</em><a href="https://www.django-rest-framework.org/api-guide/serializers/#hyperlinkedmodelserializer">官方文档</a><em>。</em></p></blockquote><h3 id="6-2-分页">6.2 分页</h3><p>DRF 框架继承了 Django 方便易用的传统，分页这种常见功能提供了默认实现。</p><p>你只需要在 <code>settings.py</code> 里配置一下就行了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/settings.py</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_PAGINATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.pagination.PageNumberPagination'</span><span class="token punctuation">,</span>    <span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在命令行测试：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> &gt; http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 478Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 19:44:49 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"count"</span>: 4<span class="token punctuation">,</span>    <span class="token string">"next"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/?page=2"</span><span class="token punctuation">,</span>    <span class="token string">"previous"</span>: null<span class="token punctuation">,</span>    <span class="token string">"results"</span>: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"author"</span>: null<span class="token punctuation">,</span>            <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:24:27.017416+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"title"</span>: <span class="token string">"post with permission"</span><span class="token punctuation">,</span>            <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/1/"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"author"</span>: <span class="token punctuation">{</span>                <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>                <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>                <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>                <span class="token string">"username"</span>: <span class="token string">"admin"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:33:54.420714+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"title"</span>: <span class="token string">"post with user"</span><span class="token punctuation">,</span>            <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/2/"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DRF 封装了分页相关的元信息：</p><ul><li>count：文章总数</li><li>next：下一页的 url</li><li>previous：上一页的 url</li><li>results：实际的数据</li></ul><p>试着获取第二页的数据：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\WebProject\my_blog\backend&gt;http http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/api/article/?page=2HTTP/1<span class="token punctuation">.</span>1 200 OKAllow: GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONSConnection: closeContent-Length: 619Content-<span class="token function">Type</span>: application/jsonCross-Origin-Opener-Policy: same-originDate: Sun<span class="token punctuation">,</span> 26 Mar 2023 19:46:41 GMTReferrer-Policy: same-originServer: WSGIServer/0<span class="token punctuation">.</span>2 CPython/3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6Vary: Accept<span class="token punctuation">,</span> CookieX-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniffX-Frame-Options: DENY<span class="token punctuation">{</span>    <span class="token string">"count"</span>: 4<span class="token punctuation">,</span>    <span class="token string">"next"</span>: null<span class="token punctuation">,</span>    <span class="token string">"previous"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/"</span><span class="token punctuation">,</span>    <span class="token string">"results"</span>: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"author"</span>: <span class="token punctuation">{</span>                <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>                <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>                <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>                <span class="token string">"username"</span>: <span class="token string">"admin"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:36:12.859805+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"title"</span>: <span class="token string">"post with user"</span><span class="token punctuation">,</span>            <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/3/"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"author"</span>: <span class="token punctuation">{</span>                <span class="token string">"date_joined"</span>: <span class="token string">"2023-03-27T02:08:41.097951+08:00"</span><span class="token punctuation">,</span>                <span class="token string">"id"</span>: 1<span class="token punctuation">,</span>                <span class="token string">"last_login"</span>: <span class="token string">"2023-03-27T02:08:50.601981+08:00"</span><span class="token punctuation">,</span>                <span class="token string">"username"</span>: <span class="token string">"admin"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"created"</span>: <span class="token string">"2023-03-27T02:37:48.969211+08:00"</span><span class="token punctuation">,</span>            <span class="token string">"title"</span>: <span class="token string">"test body"</span><span class="token punctuation">,</span>            <span class="token string">"url"</span>: <span class="token string">"http://127.0.0.1:8000/api/article/4/"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-视图集">7. 视图集</h2><p>DRF 框架提供了<strong>视图集</strong>作为更高层的抽象，可以让代码量进一步的减少。</p><p>因为大部分对接口的操作，都是在增删改查的基础上衍生出来的。既然这样，<strong>视图集</strong>就将这些通用操作集成在一起了。</p><p>将之前写的与文章有关的<strong>序列化器</strong>都注释掉，新增一个提供给视图集的新序列化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/serializers.py</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> user_info<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserDescSerializer<span class="token comment"># class ArticleListSerializer(serializers.ModelSerializer):</span><span class="token comment">#     url = serializers.HyperlinkedIdentityField(view_name="article:detail")</span><span class="token comment">#     author = UserDescSerializer(read_only=True)</span><span class="token comment">#     class Meta:</span><span class="token comment">#         model = Article</span><span class="token comment">#         fields = ['url', 'title', 'created', 'author']</span><span class="token comment"># class ArticleDetailSerializer(serializers.ModelSerializer):</span><span class="token comment">#     class Meta:</span><span class="token comment">#         model = Article</span><span class="token comment">#         fields = '__all__'</span><span class="token keyword">class</span> <span class="token class-name">ArticleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    author <span class="token operator">=</span> UserDescSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Article        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化器继承的 <code>HyperlinkedModelSerializer</code> 基本上与之前用的 <code>ModelSerializer</code> 差不多，区别是它自动提供了外键字段的超链接，并且默认不包含模型对象的 id 字段。</p><p>把之前写的文章<strong>视图</strong>也全注释掉，并新增代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/view.py</span><span class="token comment"># from rest_framework import generics</span><span class="token keyword">from</span> article<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminUserOrReadOnly<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token comment"># from article.serializers import ArticleListSerializer, ArticleDetailSerializer</span><span class="token comment"># class ArticleDetail(generics.RetrieveUpdateDestroyAPIView):</span><span class="token comment">#     """</span><span class="token comment">#     文章详情视图，处理文章的`get`, `put`, `delete`请求</span><span class="token comment">#     """</span><span class="token comment">#     queryset = Article.objects.all()</span><span class="token comment">#     serializer_class = ArticleDetailSerializer</span><span class="token comment">#     permission_classes = [IsAdminUserOrReadOnly]</span>    <span class="token comment"># class ArticleList(generics.ListCreateAPIView):</span><span class="token comment">#     """</span><span class="token comment">#     文章列表视图，处理文章的`post`和文章列表的`get`请求</span><span class="token comment">#     """</span><span class="token comment">#     def perform_create(self, serializer):</span><span class="token comment">#         serializer.save(author=self.request.user)</span><span class="token comment">#     queryset = Article.objects.all()</span><span class="token comment">#     serializer_class = ArticleListSerializer</span><span class="token comment">#     permission_classes = [IsAdminUserOrReadOnly]</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> article<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ArticleSerializer<span class="token keyword">class</span> <span class="token class-name">ArticleViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> ArticleSerializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAdminUserOrReadOnly<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视图集类把前面章节写的列表、详情等逻辑都集成到一起，并且提供了默认的增删改查的实现。<code>perform_create()</code> 跟之前一样，在创建文章前，提供了视图集无法自行推断的用户外键字段。</p><p>由于使用了视图集，使用框架提供的 <code>Router</code> 类自动处理视图和 url 的连接。</p><p>修改<strong>项目根路由</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># backend/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> article <span class="token keyword">import</span> viewsrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'article'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># article/urls.py 可以全注释掉，不需要了</span>    <span class="token comment"># path('api/article/', include('article.urls', namespace='article')),</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后为了让分页更准确，给模型类规定好查询排序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># article/models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    博客文章    """</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"articles"</span>    <span class="token punctuation">)</span>                                                     <span class="token comment"># 作者</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment"># 标题</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># 正文</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>  <span class="token comment"># 创建时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 更新时间</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-created'</span><span class="token punctuation">]</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器访问<code>http://127.0.0.1:8000/api/</code>，访问到<code>Router</code> 类送给我们的接口导航！</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)%EF%BC%9ADRF%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230327041110622.png" alt="接口导航"></p><p>顺着导航里给的链接：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)%EF%BC%9ADRF%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230327041046174.png" alt="文章列表"></p><p><strong>视图集</strong>最大程度地减少需要编写的代码量，并允许你专注于 API 提供的交互和表示形式，而不是 URL 的细节。但并不意味着用它总是比构建单独的视图更好。<strong>原因是</strong>它的抽象程度太高了。如果你对 DRF 框架的理解不深并且需要做某种定制化业务，可能让你一时间无从下手。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">本文标题： Django-Vue搭建个人博客(2)：DRF的使用原文链接： https://www.dusaiphoto.com/article/105/原文作者： 杜赛许可协议： 署名-非商业性使用 4.0 国际许可协议本文对原始作品作了修改，转载请保留原文链接及作者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(1)：搭建开发环境</title>
      <link href="/posts/39175.html"/>
      <url>/posts/39175.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-开发环境">1. 开发环境</h2><p>本教程的前端开发环境为：</p><ul><li><p><strong>Vue 3.2.47</strong></p></li><li><p><strong>Vite 4.1.4</strong></p></li><li><p><strong>npm 9.5.1</strong></p></li></ul><p>本教程的后端开发环境为：</p><ul><li><strong>Win 11（64位）</strong></li><li><strong>Python 3.10.6</strong></li><li><strong>Django 4.1.7</strong></li><li><strong>Django REST framework 3.14.0</strong></li></ul><h2 id="2-前端开发准备">2. 前端开发准备</h2><p>开发前端时会用到 <strong>npm</strong> （类似Python的包管理工具pip），这是 Node.js 官方提供的包管理工具，而 Node.js 可以使用 nvm 来进行安装和管理，所以准备工作的第一步，安装 nvm，下载地址在<a href="https://nvm.uihtm.com/">官网</a>，安装时基本就是一路 next。</p><p>完毕后打开命令行（依旧默认是 PowerShell），输入：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&gt; nvm <span class="token operator">-</span>v1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>10&gt; nvm install 19<span class="token punctuation">.</span>8<span class="token punctuation">.</span>1Downloading node<span class="token punctuation">.</span>js version 19<span class="token punctuation">.</span>8<span class="token punctuation">.</span>1 <span class="token punctuation">(</span>64-bit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Extracting node and npm<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Completenpm v9<span class="token punctuation">.</span>5<span class="token punctuation">.</span>1 installed successfully<span class="token punctuation">.</span>Installation complete<span class="token punctuation">.</span> <span class="token keyword">If</span> you want to use this version<span class="token punctuation">,</span> <span class="token function">type</span>nvm use 19<span class="token punctuation">.</span>8<span class="token punctuation">.</span>1&gt; nvm use 19<span class="token punctuation">.</span>8<span class="token punctuation">.</span>1Now <span class="token keyword">using</span> node v19<span class="token punctuation">.</span>8<span class="token punctuation">.</span>1 <span class="token punctuation">(</span>64-bit<span class="token punctuation">)</span>&gt; nvm list  <span class="token operator">*</span> 19<span class="token punctuation">.</span>8<span class="token punctuation">.</span>1 <span class="token punctuation">(</span>Currently <span class="token keyword">using</span> 64-bit executable<span class="token punctuation">)</span>  &gt; node <span class="token operator">-</span>v19<span class="token punctuation">.</span>8<span class="token punctuation">.</span>1&gt; npm <span class="token operator">-</span>v9<span class="token punctuation">.</span>5<span class="token punctuation">.</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示版号就表示安装成功了。</p><blockquote><p><em>npm 站点在国外，如果你遇到安装速度慢的问题，可以用指令</em> <code>npm config set registry https://registry.npm.taobao.org</code> <em>修改为国内镜像源。</em></p></blockquote><p>在命令行中允许一下命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&gt; npm init vue@latestNeed to install the following packages:  create-vue@3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>1Ok to proceed? <span class="token punctuation">(</span>y<span class="token punctuation">)</span> yVue<span class="token punctuation">.</span>js <span class="token operator">-</span> The Progressive JavaScript Framework<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该指令会安装并执行 <strong>create-vue</strong>，它是 Vue 官方的项目脚手架工具，你将看到一些诸如TypeScript和测试支持之类的可选功能提示：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">✔ Project name: … frontend✔ Add TypeScript? … No <span class="token operator">/</span> Yes✔ Add JSX Support? … No <span class="token operator">/</span> Yes✔ Add Vue Router <span class="token keyword">for</span> Single Page Application development? … No <span class="token operator">/</span> Yes✔ Add Pinia <span class="token keyword">for</span> state management? … No <span class="token operator">/</span> Yes✔ Add Vitest <span class="token keyword">for</span> Unit testing? … No <span class="token operator">/</span> Yes✔ Add Cypress <span class="token keyword">for</span> both Unit and <span class="token keyword">End</span><span class="token operator">-</span>to-<span class="token keyword">End</span> testing? … No <span class="token operator">/</span> Yes✔ Add ESLint <span class="token keyword">for</span> code quality? … No <span class="token operator">/</span> Yes✔ Add Prettier <span class="token keyword">for</span> code formatting? … No <span class="token operator">/</span> YesScaffolding project in <span class="token punctuation">.</span><span class="token operator">/</span>&lt;your-project-name&gt;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Done<span class="token punctuation">.</span> Now run:  cd frontend  npm install  npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不确定是否要开启某个功能，你可以直接按下回车键选择 <code>No</code>。在项目被创建后，通过以下步骤安装依赖并启动开发服务器：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&gt; cd frontend&gt; npm install <span class="token comment"># 耐心等待包安装完毕</span>&gt; npm run dev<span class="token comment"># 输出：</span>&gt; frontend@0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 dev&gt; vite  VITE v4<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1  ready in 283 ms  ➜  Local:   http:<span class="token operator">/</span><span class="token operator">/</span>localhost:5173/  ➜  Network: use <span class="token operator">--</span>host to expose  ➜  press h to show help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 Chrome 浏览器，输入http://localhost:5173/ ，即可看到 Vue 的欢迎页面了，前端项目已经正常运行了。</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20230326221239847.png" alt="Vue欢迎页面"></p><h2 id="3-后端开发准备">3. 后端开发准备</h2><p>python的安装比较简单，首先找到<a href="https://www.python.org/">Python官方网站</a>，选择 python 3.10.6 的 windows 版本，下载并安装。</p><p><strong>安装时注意勾选python到环境变量</strong>，如果没有找到，请安装完毕后自行添加python的环境变量。</p><p>安装完成后打开命令行，输入<code>python -V</code>，打印出正确的版本号则说明安装成功了：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&gt; python <span class="token operator">-</span>VPython 3<span class="token punctuation">.</span>10<span class="token punctuation">.</span>6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>python 的<strong>虚拟环境</strong>是 python 多版本管理工具，可以使每个项目环境与其他项目隔离起来，解决包冲突的问题。</p><p><strong>python3.3 版本开始就自带了虚拟环境安装指令，配置一下就可以用了。</strong></p><p>在CMD命令行中运行下面指令（poweshell上可能修改执行策略才能运行成功）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">D:\&gt; mkdir my_blog &amp;&amp; cd my_blogD:\my_blog&gt;D:\my_blog&gt; python <span class="token operator">-</span>m venv venvD:\my_blog&gt; venv\Scripts\activate<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\my_blog&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>盘符前有<code>(venv)</code>标识说明进入venv成功。</strong></p><blockquote><p><em>若上述方法不成功，则可以通过</em> <code>virtualenv</code> <em>库创建虚拟环境。</em></p></blockquote><p>在虚拟环境下，输入命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 安装Django</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\my_blog&gt; pip install django==4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7<span class="token comment"># 新建项目</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\my_blog&gt; django-admin startproject backend<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\my_blog&gt; cd backend<span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\WebProject\my_blog\backend&gt;<span class="token comment"># 启动服务</span><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> D:\WebProject\my_blog\backend&gt; python manage<span class="token punctuation">.</span>py runserverWatching <span class="token keyword">for</span> file changes with StatReloaderPerforming system checks<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Django version 4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7<span class="token punctuation">,</span> <span class="token keyword">using</span> settings <span class="token string">'backend.settings'</span>Starting development server at http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8000/Quit the server with CTRL-<span class="token keyword">BREAK</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系统打印出这些信息，说明服务器启动成功了。</p><p>查看<code>my_blog</code>文件，发现多了<code>backend</code>文件夹，其结构应该为：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">backend│  manage.py│  db.sqlite3└─backend|  __init__.py|  asgi.py    │  settings.py    │  urls.py    └─ wsgi.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 Chrome 浏览器，输入http://127.0.0.1:8000/ ，即可看到 Django 的欢迎页面了，项目已经正常运行了。</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20230326223920457.png" alt="Django欢迎页面"></p><h2 id="4-工具推荐">4. 工具推荐</h2><ul><li>代码编辑器 - 推荐使用 <a href="https://code.visualstudio.com/">VS Code</a></li><li>浏览器 - 推荐 <a href="https://www.google.com/chrome/">Chrome</a></li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">本文标题： Django-Vue搭建个人博客：前言原文链接： https://www.dusaiphoto.com/article/104/原文作者： 杜赛许可协议： 署名-非商业性使用 4.0 国际许可协议本文对原始作品作了修改，转载请保留原文链接及作者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(0)：前言</title>
      <link href="/posts/63190.html"/>
      <url>/posts/63190.html</url>
      
        <content type="html"><![CDATA[<p>本教程是一个以<strong>前后端分离</strong>模式开发个人博客的教程，目的是快速搭建现代化个人博客网站。</p><p>教程基于 Django 3 和 Vue 3。</p><blockquote><p>在 Win11 系统上开发，用Mac 或 Linux 也 OK。</p></blockquote><h2 id="1-什么是Django-Vue">1. 什么是Django/Vue</h2><p><strong>Django</strong> 是一个由 <strong>Python</strong> 写成的开源 <strong>Web</strong> 后端框架，可以帮助开发者以<strong>更高的效率、更少的代码</strong>来搭建<strong>高性能</strong>网站，本教程主要讲解 Django REST framework  — 一个用于构建 Web API 的强大且灵活的 Django 库。</p><p><strong>Vue</strong> 是一个组件化、现代化的前端框架，上手简单且功能强大，从 Vue 3 开始支持组合式 API 等重要新功能，使得 Vue 在处理从微型到大型项目都更加得心应手。</p><p>因为 Django 和 Vue 均易于学习、功能强大的优势，非常适合作为<strong>前后端分离</strong>开发的组合。</p><h2 id="2-什么是前后端分离">2. 什么是前后端分离</h2><p><strong>传统的开发协作模式</strong>：</p><ul><li>前端开发人员写好静态的HTML页面交付给后端开发人员</li><li>后端开发人员使用模板引擎去套模板，同时内嵌模板变量和逻辑</li><li>前后端开发人员集成对接，遇到问题时前后端开发人员都有返工</li><li>集成调优，直到没有出现问题</li></ul><p>其<strong>问题</strong>在于：</p><ul><li>前端开发人员调试要安装完整的后端开发工具，并且遇到问题需要后端开发人员帮忙调试</li><li>前后端耦合，甚至要求后端开发人员掌握 Javascript 等前端开发语言</li><li>前端页面里嵌入后端的代码，一旦后端换了语言，就要重做</li><li>前后端开发效率不高，职责不分明，沟通成本高</li></ul><p>而在<strong>前后端分离模式</strong>下，前后端开发人员只需要通过简单的接口（API）进行数据交流，只要约定好数据接口，可以并行开发互不影响。即使其中一个需求变更，只有接口不变，对方就不需要更改代码。</p><p>前后端分离模式摆脱了笨重的模板引擎，是当前 web 开发的大趋势之一。</p><h2 id="3-开发环境">3. 开发环境</h2><p>本教程的开发环境如下：</p><ul><li>后端：<strong>Django 4</strong></li><li>前端：<strong>Vue 3</strong></li><li>系统：<strong>Win11</strong></li></ul><p>保持<strong>大版本号</strong>相同就没太大问题，即 Django 4 和 Vue 3 即可</p><p>本教程面向人群：<strong>掌握 Django 基础和 Javascript 语法基础的入门开发者</strong></p><h2 id="4-资源列表">4. 资源列表</h2><p>学习过程中需要经常查询的文档有：</p><ul><li><a href="https://docs.djangoproject.com/zh-hans/4.1/">Django 文档</a></li><li><a href="https://www.django-rest-framework.org/">DRF 文档</a></li><li><a href="https://cn.vuejs.org/">Vue 3 文档</a></li></ul><h2 id="5-许可协议">5. 许可协议</h2><p>本教程（包括且不限于文章、代码、图片等内容）遵守 <strong>署名-非商业性使用 4.0 国际 (CC BY-NC 4.0) 协议</strong>。协议内容如下。</p><p><strong>您可以自由地：</strong></p><ul><li><strong>共享</strong> — 在任何媒介以任何形式复制、发行本作品。</li><li><strong>演绎</strong> — 修改、转换或以本作品为基础进行创作。</li></ul><p>只要你遵守许可协议条款，许可人就无法收回你的这些权利。</p><p><strong>惟须遵守下列条件：</strong></p><ul><li><strong>署名</strong> — 您必须给出<strong>适当的署名</strong>，提供指向本许可协议的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。</li><li><strong>非商业性使用</strong> — 您不得将本作品用于<strong>商业目的</strong>。</li><li><strong>没有附加限制</strong> — 您不得适用法律术语或者技术措施从而限制其他人做许可协议允许的事情。</li></ul><blockquote><p>适当的署名：您必须提供创作者和署名者的姓名或名称、版权标识、许可协议标识、免责标识和作品链接。</p><p>商业目的：主要目的为获得商业优势或金钱回报。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">本文标题： Django-Vue搭建个人博客：前言原文链接： https://www.dusaiphoto.com/article/103/原文作者： 杜赛许可协议： 署名-非商业性使用 4.0 国际许可协议本文对原始作品作了修改，转载请保留原文链接及作者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker进阶教程学习笔记</title>
      <link href="/posts/47611.html"/>
      <url>/posts/47611.html</url>
      
        <content type="html"><![CDATA[<h2 id="容器数据卷">容器数据卷</h2><h3 id="什么是容器数据卷">什么是容器数据卷</h3><p><strong>Docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像，可以快速部署在不同的平台。</p><p>问题：如果数据都在容器中，那么如果我们删除容器，数据就会丢失！</p><p>需求：数据可持续化，数据可以存储在宿主机。</p><p>引入：容器之间可以有一个数据共享的技术，Docker容器中产生的数据，同步到宿主机，这就是容器数据卷技术。</p><p>总结：将容器内的目录挂载在宿主机上，实现容器数据的持久化和同步操作，容器间的数据共享。</p><p><img src="/posts/47611/image-20221030155110222.png" alt="容器数据卷"></p><h3 id="使用数据卷">使用数据卷</h3><blockquote><p>挂载数据卷方式1：运行容器时直接使用命令 -v来挂载</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -it -v 主机目录:容器目录# 测试[root@xizou /]# cd /home/[root@xizou home]# ls[root@xizou home]# docker run -it -v /home/ceshi:/home centos /bin/bash# Ctrl +p +q退出容器[root@xizou /]# cd /home/[root@xizou home]# lsceshi# 可以通过 docker inspect 容器id 查看容器挂载信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/47611/image-20221030160156530.png" alt="双向绑定挂载数据卷"></p><p>测试文件的同步</p><p><img src="/posts/47611/image-20221030161728773.png" alt="数据卷挂载测试"></p><p>就算容器停止，宿主机上修改文件，修改后的文件也能同步到容器内。</p><h3 id="实战：安装MySQL">实战：安装MySQL</h3><p>思考：MySQL的数据持久化的问题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 获取镜像[root@xizou /]# docker pull mysql:5.7# 运行容器，需要做数据挂载，安装MySql上需要配置密码，参考Docker Hub的官方指令 docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag# docker run 命令-d 后台运行-p 端口映射-v 卷挂载-e 环境配置--name 容器名字[root@xizou /]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.74dc2e63a55e463168c39249dd4c4cdec2a1d43a1c4fa6f9045da2dd4099fa3a9# 启动成功之后，就可以使用 Navicat Premium 或任意数据库连接软件远程连接到容器内的MySQL# Navicat Premium - 连接到服务器的3310端口 -- 服务器的3310端口与容器内的3306端口映射，因此就能连接到服务器启动的容器内部的MySQL# 在Navicat Premium创建一个数据库test，可以发现服务器/home/mysql/data目录下会多一个test目录，并且容器内/var/lib/mysql目录下也会多一个test目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将容器删除，发现挂载到服务器的数据卷依旧没有丢失，这体现了容器数据持久化功能。</p><h3 id="具名挂载和匿名挂载">具名挂载和匿名挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 匿名挂载-v 容器内路径[root@xizou /]# docker run -d -P --name nginx01 -v /etc/nginx nginxe5b3b9b6b45b916a91ab149604bea917995cdea321ba3158be51503010624c90# 查看容器卷的情况[root@xizou /]# docker volume lsDRIVER    VOLUME NAMElocal     18ae53d1715fed2dd0250ae1dc8ab0a5a06bd6efcf801f7c46e9ed9bd7ffdd3d# 这种就是匿名挂载，在 -v 只写了容器内的路径，没有写容器外的路径# 具名挂载[root@xizou /]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginxdbcd1852923d857b825f9afff4429e79c29617e45402ae54e12b8861638c1c7e[root@xizou /]# docker volume lsDRIVER    VOLUME NAMElocal     18ae53d1715fed2dd0250ae1dc8ab0a5a06bd6efcf801f7c46e9ed9bd7ffdd3dlocal     juming-nginx# 通过 -v 卷名:容器内路径# 查看该卷[root@xizou /]# docker volume inspect juming-nginx[    {        "CreatedAt": "2022-10-30T16:53:03+08:00",        "Driver": "local",        "Labels": null,        "Mountpoint": "/var/lib/docker/volumes/juming-nginx/_data",        "Name": "juming-nginx",        "Options": null,        "Scope": "local"    }][root@xizou /]# cd /var/lib/docker/volumes/juming-nginx/_data/[root@xizou _data]# lsconf.d          mime.types  nginx.conf   uwsgi_paramsfastcgi_params  modules     scgi_params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的Docker容器内的卷，没有指定宿主机目录的情况下都是放在宿主机的 <code>/var/lib/docker/volumes/xxx/_data</code>下。</p><p>通过具名挂载可以方便的找到我们的一个卷，大多数情况下使用<strong>具名挂载</strong>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 如何区分具名挂载和匿名挂载-v 容器内路径    # 匿名挂载-v 卷名:容器内路径  # 具名挂载-v /宿主机路径:容器内路径  # 指定路径挂载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拓展</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 通过 -v 容器内路径，ro、rw改变读写权限ro    readonly  # 只读rw    readwrite # 可读可写docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginxdocker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx# ro说明该路径的文件只能通过宿主机来改变，容器内部无法操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始Dockerfile">初始Dockerfile</h3><p>Dockerfile是用来构建Docker镜像的构建文件。</p><blockquote><p>挂载数据卷方式2：Dockerfile文件内定义</p></blockquote><p>如，创建一个dockerfile1文件，内容为：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># 创建一个dockerfile文件，名字可以随意，建议为Dockerfile# 文件中的内容 指令(大写) 参数FROM centosVOLUME ["volume01", "volume02"]CMD echo "----end----"CMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou docker-test-volume]# docker build -f dockerfile1 -t xizou/centos:1.0 .Sending build context to Docker daemon  2.048kBStep 1/4 : FROM centos ---&gt; 5d0da3dc9764Step 2/4 : VOLUME ["volume01", "volume02"] ---&gt; Running in 6cc1bc751006Removing intermediate container 6cc1bc751006 ---&gt; f3475e56ea65Step 3/4 : CMD echo "----end----" ---&gt; Running in 3eeb578f3d3dRemoving intermediate container 3eeb578f3d3d ---&gt; 3db916284cfcStep 4/4 : CMD /bin/bash ---&gt; Running in d0b660ad310fRemoving intermediate container d0b660ad310f ---&gt; ee034a44e231Successfully built ee034a44e231Successfully tagged xizou/centos:1.0[root@xizou docker-test-volume]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED          SIZExizou/centos          1.0       ee034a44e231   27 seconds ago   231MBtomcat02              1.0       600af0d3c7c9   20 hours ago     684MBelasticsearch         8.4.3     ce2b9dc7fe85   3 weeks ago      1.26GBnginx                 latest    605c77e624dd   10 months ago    141MB# 运行容器[root@xizou docker-test-volume]# docker run -it ee034a44e231 /bin/bash[root@6d21590582da /]# ls -ltotal 56lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bindrwxr-xr-x   5 root root  360 Oct 30 09:23 devdrwxr-xr-x   1 root root 4096 Oct 30 09:23 etcdrwxr-xr-x   2 root root 4096 Nov  3  2020 homelrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/liblrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64drwx------   2 root root 4096 Sep 15  2021 lost+founddrwxr-xr-x   2 root root 4096 Nov  3  2020 mediadrwxr-xr-x   2 root root 4096 Nov  3  2020 mntdrwxr-xr-x   2 root root 4096 Nov  3  2020 optdr-xr-xr-x 130 root root    0 Oct 30 09:23 procdr-xr-x---   2 root root 4096 Sep 15  2021 rootdrwxr-xr-x  11 root root 4096 Sep 15  2021 runlrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbindrwxr-xr-x   2 root root 4096 Nov  3  2020 srvdr-xr-xr-x  13 root root    0 Oct 30 09:23 sysdrwxrwxrwt   7 root root 4096 Sep 15  2021 tmpdrwxr-xr-x  12 root root 4096 Sep 15  2021 usrdrwxr-xr-x  20 root root 4096 Sep 15  2021 vardrwxr-xr-x   2 root root 4096 Oct 30 09:23 volume01drwxr-xr-x   2 root root 4096 Oct 30 09:23 volume02# 可以看见生成挂载的两个数据卷目录 volume01和volume02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证：这个卷和外部一定有一个同步的目录</p><p>在容器的volume01内创建一个container.txt文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@09423fb0f1d5 /]# cd volume01/[root@09423fb0f1d5 volume01]# ls    [root@09423fb0f1d5 volume01]# touch container.txt[root@09423fb0f1d5 volume01]# lscontainer.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看下卷挂载的路径 docker inspect 容器id，如可以看到信息：</p><p><img src="/posts/47611/image-20221030172818939.png" alt="卷挂载路径"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# cd /var/lib/docker/volumes/6fc2791f3e981e53c16a71d17d36c8279fda6210956603e69c9f75ccc9c0669c/_data[root@xizou _data]# lscontainer.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>容器间数据共享实现多个MySQL数据同步。</p><p><img src="/posts/47611/image-20221030173514724.png" alt="数据卷容器"></p><p>启动第1个容器docker01</p><p><img src="/posts/47611/image-20221030174028615.png" alt="父容器"></p><p>启动第2个容器docker02，数据卷继承自docker01，docker01成为数据卷容器。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -it --name docker02 --volumes-from docker01 xizou/centos:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删掉容器docker01，docker02依旧可以访问数据卷。数据卷之间是拷贝的概念。</p><p>多个MySQL实现数据共享</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7[root@xizou /]# docker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结论</strong>：</p><p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦持久化到了本地，本地的数据是不会自动删除的。</p><h2 id="Dockerfile">Dockerfile</h2><h3 id="Dockerfile介绍">Dockerfile介绍</h3><p>Dockerfile是用来构建Docker镜像的文件，是一个命令参数脚本文件。</p><p><strong>构建步骤</strong>：</p><p>1、编写Dockerfile文件</p><p>2、docker build构建为一个镜像</p><p>3、docker run 运行镜像</p><p>4、docker push 发布镜像（Docker Hub、阿里云镜像仓库）</p><p>示例：CentOS7的Dockerfile文件，点击tag可跳转到Github，看到其Dockerfile文件。</p><p><img src="/posts/47611/image-20221030184828837.png" alt="Docker Hub CentOS7界面"></p><p><img src="/posts/47611/image-20221030185422824.png" alt="CentOS7的Dockerfile文件"></p><p>很多官方镜像都是基础包，很多功能没有，通常需要自己搭建自己的镜像。</p><h3 id="Dockerfile构建过程">Dockerfile构建过程</h3><p><strong>基础知识：</strong></p><p>1、每个保留关键字（指令）都必须是大写字母</p><p>2、执行从上到下顺序执行</p><p>3、#表示注释</p><p>4、每一个指令都会创建和提交一个镜像层</p><p><img src="/posts/47611/image-20221030185924855.png" alt="Docker镜像制作"></p><p>Dockerfile是面向开发的，发布项目制作镜像就需要写Dockerfile文件，Docker镜像逐渐成为企业交付的标准，必须掌握。</p><p>Dockerfile：构建文件，定义了一切的步骤，源代码，用来构建镜像。</p><p>Docker镜像：发布和运行的产品，可以通过commit指令或Dockerfile来制作。</p><p>Docker容器：镜像运行起来提供服务的服务器。</p><h3 id="Dockerfile命令">Dockerfile命令</h3><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM # 基础镜像，一切从这里开始构建MAINTAINER # 镜像是谁写的，姓名+邮箱RUN # 镜像构建时需要运行的指令ADD # 步骤，添加内容WORKDIR # 镜像的工作目录VOLUME # 挂载的目录EXPOSE # 暴露端口配置CMD # 指定这个容器启动的时候要运行的命令，只有最后一个CMD命令会生效，可被替换ENTRYPOINT # 指定这个容器启动的时候要运行的命令，可以追加命令ONBUILD # 当构建一个被继承的Dockerfile时就会运行ONBUILD的指令，触发指令COPY # 类似ADD，将文件拷贝到镜像中ENV # 构建的时候设置环境变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/47611/image-20221030190914783.png" alt="Dockerfile命令比喻"></p><h3 id="Dockerfile实战">Dockerfile实战</h3><p>Docker Hub 中大部分镜像是从基础镜像 <code>scratch</code> 开始的，然后配置需要的软件来进行构建的。</p><blockquote><p>创建自己的CentOS镜像</p></blockquote><p>CentOS镜像默认的根目录为/，且没有ifconfig</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1. 编写Dockerfile镜像[root@xizou dockerfile]# cat mydockerfile-centos FROM centos:7MAINTAINER xizou&lt;xiongbinzou@163.com&gt;ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo "---end---"CMD /bin/bash# 2. 通过这个文件构建镜像# 命令是 docker build -f dockerfile文件路径 -t 镜像名[:tag] .[root@xizou dockerfile]# docker build -f mydockerfile-centos -t centos:0.1 .# 构建成功.....Successfully built 0fc60a3f44deSuccessfully tagged mycentos:0.1[root@xizou dockerfile]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED          SIZEmycentos              0.1       0fc60a3f44de   2 minutes ago    626MB# 3. 测试运行，发现默认目录变更且ifconfig和vim指令都能够支持[root@xizou ~]# docker run -it mycentos:0.1[root@c7cad6e52fd3 local]# pwd/usr/local[root@c7cad6e52fd3 local]# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)        RX packets 8  bytes 656 (656.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        loop  txqueuelen 1000  (Local Loopback)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0[root@c7cad6e52fd3 local]# vim --helpVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec 15 2020 16:44:08)usage: vim [arguments] [file ..]       edit specified file(s)   or: vim [arguments] -               read text from stdin   or: vim [arguments] -t tag          edit file where tag is defined   or: vim [arguments] -q [errorfile]  edit file with first error   # 4. 查看指定image构建历史（先回到宿主机）[root@xizou dockerfile]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED         SIZEmycentos              0.1       0fc60a3f44de   2 hours ago     626MBxizou/centos          1.0       ee034a44e231   5 hours ago     231MBtomcat02              1.0       600af0d3c7c9   24 hours ago    684MB[root@xizou dockerfile]# docker history 0fc60a3f44deIMAGE          CREATED         CREATED BY                                      SIZE      COMMENT0fc60a3f44de   2 hours ago     /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        87d94a5cd7db   2 hours ago     /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        701f4da62eda   2 hours ago     /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        a28bd4c7b6d4   2 hours ago     /bin/sh -c #(nop)  EXPOSE 80                    0B        15d49edff70d   2 hours ago     /bin/sh -c yum -y install net-tools             183MB     565a95d30b44   2 hours ago     /bin/sh -c yum -y install vim                   238MB     1dda317404d4   2 hours ago     /bin/sh -c #(nop) WORKDIR /usr/local            0B        ca7984844f10   2 hours ago     /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B        6e566e3aace3   2 hours ago     /bin/sh -c #(nop)  MAINTAINER xizou&lt;xiongbin…   0B        eeb6ee3f44bd   13 months ago   /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B        &lt;missing&gt;      13 months ago   /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        &lt;missing&gt;      13 months ago   /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到一个镜像后，可以通过docker history 镜像id查看镜像的构建历史，分析该镜像Dockerfile文件的组成。</p><blockquote><p>CMD和ENREYPOINT的区别</p></blockquote><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD # 指定这个容器启动的时候要运行的命令，只有最后一个CMD命令会生效，可被替换ENTRYPOINT # 指定这个容器启动的时候要运行的命令，可以追加命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试 CMD 命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.进入文件[root@xizou /]# cd /home/dockerfile/# 2.创建dockerfile[root@xizou dockerfile]# cat dockerfile-cmd-testFROM centos:7CMD ["ls","-a"]# 3.构建镜像[root@xizou dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .Sending build context to Docker daemon  3.072kBStep 1/2 : FROM centos:7 ---&gt; eeb6ee3f44bdStep 2/2 : CMD ["ls","-a"] ---&gt; Running in 850c034e822aRemoving intermediate container 850c034e822a ---&gt; 0b3e53a3ddc6Successfully built 0b3e53a3ddc6Successfully tagged cmdtest:latest# 4.运行，发现 ls -a 命令生效[root@xizou dockerfile]# docker run 0b3e53a3ddc6....dockerenvanaconda-post.logbindevetchomeliblib64mediamntoptprocrootrunsbinsrvsystmpusrvar# 想追加一个命令-l，ls -al[root@xizou dockerfile]# docker run 0b3e53a3ddc6 -ldocker: Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "-l": executable file not found in $PATH: unknown.# cmd的清理下 -l 替换了CMD ["ls","-a"]命令，-l 不是命令，所以报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试 ENTRYPOINT 命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.进入文件[root@xizou /]# cd /home/dockerfile/# 2.创建dockerfile[root@xizou dockerfile]# cat dockerfile-entrypoint-testFROM centos:7ENTRYPOINT ["ls","-a"]# 3.构建镜像[root@xizou dockerfile]# docker build -f dockerfile-entrypoint-test -t entrypointtest .Sending build context to Docker daemon  4.096kBStep 1/2 : FROM centos:7 ---&gt; eeb6ee3f44bdStep 2/2 : ENTRYPOINT ["ls","-a"] ---&gt; Running in 6ebfea05232fRemoving intermediate container 6ebfea05232f ---&gt; 16b996a429deSuccessfully built 16b996a429deSuccessfully tagged entrypointtest:latest# 4.运行，发现 ls -a 命令生效[root@xizou dockerfile]# docker run 16b996a429de....dockerenvanaconda-post.logbindevetchomeliblib64mediamntoptprocrootrunsbinsrvsystmpusrvar# 想追加一个命令-l，ls -al，entrypoint没有替换命令，命令是拼接在后面[root@xizou dockerfile]# docker run 16b996a429de -ltotal 64drwxr-xr-x  1 root root  4096 Oct 30 14:21 .drwxr-xr-x  1 root root  4096 Oct 30 14:21 ..-rwxr-xr-x  1 root root     0 Oct 30 14:21 .dockerenv-rw-r--r--  1 root root 12114 Nov 13  2020 anaconda-post.loglrwxrwxrwx  1 root root     7 Nov 13  2020 bin -&gt; usr/bindrwxr-xr-x  5 root root   340 Oct 30 14:21 devdrwxr-xr-x  1 root root  4096 Oct 30 14:21 etcdrwxr-xr-x  2 root root  4096 Apr 11  2018 homelrwxrwxrwx  1 root root     7 Nov 13  2020 lib -&gt; usr/liblrwxrwxrwx  1 root root     9 Nov 13  2020 lib64 -&gt; usr/lib64drwxr-xr-x  2 root root  4096 Apr 11  2018 mediadrwxr-xr-x  2 root root  4096 Apr 11  2018 mntdrwxr-xr-x  2 root root  4096 Apr 11  2018 optdr-xr-xr-x 99 root root     0 Oct 30 14:21 procdr-xr-x---  2 root root  4096 Nov 13  2020 rootdrwxr-xr-x 11 root root  4096 Nov 13  2020 runlrwxrwxrwx  1 root root     8 Nov 13  2020 sbin -&gt; usr/sbindrwxr-xr-x  2 root root  4096 Apr 11  2018 srvdr-xr-xr-x 13 root root     0 Oct 30 09:23 sysdrwxrwxrwt  7 root root  4096 Nov 13  2020 tmpdrwxr-xr-x 13 root root  4096 Nov 13  2020 usrdrwxr-xr-x 18 root root  4096 Nov 13  2020 var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建自己的Tomcat镜像</p></blockquote><p>1、准备镜像文件 tomcat压缩包和jdk压缩包</p><p>本教程使用的是 <code>apache-tomcat-9.0.68.tar.gz</code> 和 <code>jdk-8u161-linux-x64.tar.gz</code>。需要自己本地下载，然后上传到服务器。</p><p>2、编写Dockerfile文件</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centos:7MAINTAINER xizou&lt;xiongbinzou@163.com&gt;COPY readme.txt /usr/local/readme.txtADD jdk-8u161-linux-x64.tar.gz /usr/local/ADD apache-tomcat-9.0.68.tar.gz /usr/local/RUN yum -y install vimENV MYPATH /usr/localWORKDIR $MYPATHENV JAVA_HOME /usr/local/jdk1.8.0_161ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.68ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.68ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/binEXPOSE 8080CMD /usr/local/apache-tomcat-9.0.68/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.68/bin/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、构建镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou tomcat]# docker build -t diytomcat .......Successfully built 1a0b96225372Successfully tagged diytomcat:latest[root@xizou tomcat]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED              SIZEdiytomcat             latest    1a0b96225372   About a minute ago   843MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、运行容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用自定义的tomcat镜像构建容器[root@xizou tomcat]# docker run -d -p 9090:8080 --name xizoutomcat -v /home/xizou/build/tomcat/test:/usr/local/apache-tomcat-9.0.68/webapps/test -v /home/xizou/build/tomcat/logs/:/usr/local/apache-tomcat-9.0.68/logs diytomcat3a3378620c68d7619622f4914c801bec41686d4f8caabdcdfe97ca867657b40a# 查看当前目录[root@xizou tomcat]# lsapache-tomcat-9.0.68.tar.gz  logsDockerfile                   readme.txtjdk-8u161-linux-x64.tar.gz   test# 进入容器[root@xizou tomcat]# docker exec -it 3a3378620c68 /bin/bash# 查看目录[root@3a3378620c68 local]# lsaegis                 etc      jdk1.8.0_161  libexec     shareapache-tomcat-9.0.68  games    lib           readme.txt  srcbin                   include  lib64         sbin[root@3a3378620c68 local]# cd apache-tomcat-9.0.68/[root@3a3378620c68 apache-tomcat-9.0.68]# lsBUILDING.txt     NOTICE         RUNNING.txt  lib   webappsCONTRIBUTING.md  README.md      bin          logs  workLICENSE          RELEASE-NOTES  conf         temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、访问测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# curl localhost:9090# 可以正常访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、发布项目（由于做了卷挂载，直接在本地可以发布）</p><p>进入test目录，创建WEB-INF目录和index.jsp，进入WEB-INF目录创建web.xml</p><p>index.jsp:</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;小邹同学(xiongbinzou.github.io)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;br/&gt;&lt;%System.out.println("---Welcome to my blog---");%&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开浏览器，输入 你的服务器ip地址+端口/test/ ，就能看到Hello World!</p><p><img src="/posts/47611/image-20221031003643740.png" alt="访问成功"></p><h3 id="发布自己的镜像">发布自己的镜像</h3><blockquote><p>发布到DockerHub网站</p></blockquote><p>1、在<a href="https://hub.docker.com/">DockerHub网站</a>注册自己的账号</p><p>2、确定账号可以登陆</p><p>3、在我们的服务器上提交自己的镜像到DockerHub</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou tomcat]# docker login --helpUsage:  docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username  [root@xizou tomcat]# docker login -u xizou1995Password: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、登陆完毕后</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Login Succeeded# push自己的镜像到服务器上！[root@xizou tomcat]# docker push diytomcatUsing default tag: latestThe push refers to repository [docker.io/library/diytomcat]5132fa4d71f7: Preparing 61502ae68a5a: Preparing 09ef56b9dc63: Preparing 6d92c54bcf47: Preparing 174f56854903: Preparing denied: requested access to the resource is denied # 被拒绝# 修改镜像名为 Dockerhub上你的用户名/镜像名:tag[root@xizou tomcat]# docker tag hello-world xizou1995/hello-world:1.0[root@xizou tomcat]# docker push xizou1995/hello-world:1.0The push refers to repository [docker.io/xizou1995/hello-world]e07ee1baac5f: Mounted from library/hello-world 1.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、在DockerHub网站你的页面上可以看到</p><p><img src="/posts/47611/image-20221031010328248.png" alt="Docker镜像库"></p><blockquote><p>发布到阿里云镜像服务上</p></blockquote><p>1、登陆阿里云</p><p>2、找到容器镜像服务</p><p>3、找到镜像仓库，如果没有需要自己创建个人实例，在个人实例里能找到镜像仓库</p><p>4、在个人实例里创建命名空间</p><p><img src="/posts/47611/image-20221031011109470.png" alt="创建命名空间"></p><p>5、创建镜像仓库，选择本地仓库</p><p><img src="/posts/47611/image-20221031011642998.png" alt="创建镜像仓库"></p><p>6、点击仓库名称浏览信息</p><p><img src="/posts/47611/image-20221031011754689.png" alt="阿里云镜像操作指南"></p><h3 id="小结-2">小结</h3><p><img src="/posts/47611/image-20221031013807233.png" alt="Dockerfile操作流程"></p><h2 id="Docker网络原理">Docker网络原理</h2><h3 id="理解Docker0">理解Docker0</h3><p>先清空所有的容器和镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rm -f $(docker ps -aq)docker rmi -f $(docker images -aq)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>测试</p></blockquote><p><img src="/posts/47611/image-20221031100729238.png" alt="ip addr"></p><p>三个网络</p><p>问题：Docker是如何处理容器网络访问的？比如容器内的tomcat访问容器内的mysql。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker run -d -P --name tomcat01 tomcat# 查看容器的内部网络地址 ip addr[root@xizou /]# docker exec -it tomcat ip addr# 如果执行失败，进入容器内部安装工具 apt update &amp;&amp; apt -y install iproute2，然后再退出容器1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever4: eth0@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever       # 容器启动时会得到一个 eth0@if5 ip地址，docker分配的[root@xizou /]# ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.058 ms64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.044 ms64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.046 ms64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.055 ms# linux可以ping通docker容器内部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原理</p></blockquote><p>1、每启动一个docker容器，docker就会给docker容器分配一个ip，只要安装了docker，就会有一个网卡docker0桥接技术，使用的是evth-pair技术</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 00:16:3e:06:ad:10 brd ff:ff:ff:ff:ff:ff    inet 172.20.179.171/20 brd 172.20.191.255 scope global dynamic eth0       valid_lft 315327838sec preferred_lft 315327838sec    inet6 fe80::216:3eff:fe06:ad10/64 scope link        valid_lft forever preferred_lft forever3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:46:b8:0a:f8 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:46ff:feb8:af8/64 scope link        valid_lft forever preferred_lft forever5: veth33d487b@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default     link/ether 36:f0:95:72:d4:2b brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::34f0:95ff:fe72:d42b/64 scope link        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ip地址多了一个<code>5: veth33d487b@if4</code>，是为容器内网卡对应的网卡。</p><p>发现容器带来的网卡都是成对出现的，一个在容器内部，一个在宿主机，evth-pair技术充当一个桥梁，让宿主机可以与容器内部通信。</p><p>按照相同的方式创建tomcat02容器，然后让tomcat01容器ping tomcat02容器，可以发现能够ping通。</p><p>tomcat01与tomcat02容器网络通过宿主机内的docker0连接。</p><p><img src="/posts/47611/image-20221031104809950.png" alt="tomcat01与tomcat02网络通信示意"></p><p>所有的容器在不指定网络的情况下，都是docker0路由的，docker会给容器分配一个默认的可用IP。</p><blockquote><p>结论</p></blockquote><p>Docker通过宿主机的Docker0进行桥接，Docker中所有的网络接口都是虚拟的，转发效率高。只要容器删除，虚拟网卡也会消失。</p><p><img src="/posts/47611/image-20221031105208672.png" alt="Docker桥接示意"></p><h3 id="–link">–link</h3><blockquote><p>编写一个微服务，database url=ip，项目不启动，数据库ip换掉了，可以通过名字来访问容器，实现高可用。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker exec -it tomcat02 ping tomcat01ping: tomcat01: Name or service not known# 如何解决？[root@xizou /]# docker run -d -P --name tomcat03 --link tomcat02 tomcat6a603a98a0de2fbe2504b01bfb2b40cab602feffcc9d379c5887f2364e6ff5df# 此时tomcat3可以ping通tomcat02[root@xizou /]# docker exec -it tomcat03 ping tomcat02# 如果提示ping命令不存在，请执行docker exec -it tomcat03 apt-get updatedocker exec -it tomcat03 apt install iputils-ping# tomcat02能够ping同tomcat03吗？ 不能[root@xizou /]# docker exec -it tomcat02 ping tomcat03ping: tomcat03: Name or service not known[root@xizou /]# docker network lsNETWORK ID     NAME      DRIVER    SCOPE8e9b37aaa9ce   bridge    bridge    local0673ec2aaa1c   host      host      local9ba9f05fc241   none      null      local[root@xizou /]# docker network inspect 8e9b37aaa9ce[    {        "Name": "bridge",        "Id": "8e9b37aaa9ce5bb9d88f68daa4f3eea16d1c8cbfe62a127a7e019ef931687391",        "Created": "2022-10-31T01:31:03.542724354+08:00",        "Scope": "local",        "Driver": "bridge",        "EnableIPv6": false,        "IPAM": {            "Driver": "default",            "Options": null,            "Config": [                {                    "Subnet": "172.17.0.0/16",                    "Gateway": "172.17.0.1"                }            ]        },        "Internal": false,        "Attachable": false,        "Ingress": false,        "ConfigFrom": {            "Network": ""        },        "ConfigOnly": false,        "Containers": {            "3b8af7fbc37fd2905b411a9e0a3b4bbc57c2685a555aea6482ac7948858a01aa": {                "Name": "tomcat01",                "EndpointID": "db565d8188ff9fd69be16c86d193199eed1934b9ae416cdf903a12755b20fbe4",                "MacAddress": "02:42:ac:11:00:02",                "IPv4Address": "172.17.0.2/16",                "IPv6Address": ""            },            "6a603a98a0de2fbe2504b01bfb2b40cab602feffcc9d379c5887f2364e6ff5df": {                "Name": "tomcat03",                "EndpointID": "40fb946ba46cba96573646ed6374272b1c27c490c1a1c7f14b084ddb9296f1c3",                "MacAddress": "02:42:ac:11:00:04",                "IPv4Address": "172.17.0.4/16",                "IPv6Address": ""            },            "92a91f9faa29e067d006ace0b4a1c32245b4521ab71098db1503c78f023e45c6": {                "Name": "tomcat02",                "EndpointID": "a0a96ea13aaef24383be2abd638422cfb59cfda4e670ec2a392418d7f96d4c5e",                "MacAddress": "02:42:ac:11:00:03",                "IPv4Address": "172.17.0.3/16",                "IPv6Address": ""            }        },        "Options": {            "com.docker.network.bridge.default_bridge": "true",            "com.docker.network.bridge.enable_icc": "true",            "com.docker.network.bridge.enable_ip_masquerade": "true",            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",            "com.docker.network.bridge.name": "docker0",            "com.docker.network.driver.mtu": "1500"        },        "Labels": {}    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/47611/image-20221031111104405-16671858903321.png" alt="docker network inspect 8e9b37aaa9ce"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker ps -aCONTAINER ID   IMAGE     COMMAND             CREATED             STATUS             PORTS                                         NAMES6a603a98a0de   tomcat    "catalina.sh run"   6 minutes ago       Up 6 minutes       0.0.0.0:49155-&gt;8080/tcp, :::49155-&gt;8080/tcp   tomcat0392a91f9faa29   tomcat    "catalina.sh run"   41 minutes ago      Up 41 minutes      0.0.0.0:49154-&gt;8080/tcp, :::49154-&gt;8080/tcp   tomcat023b8af7fbc37f   tomcat    "catalina.sh run"   About an hour ago   Up About an hour   0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp   tomcat01[root@xizou /]# docker inspect tomcat03# 在HostConfig的Links字段里能看到link到tomcat02，如："Links": ["/tomcat02:/tomcat03/tomcat02"],# 也可以查看/etc/hosts文件[root@xizou /]# docker exec -it tomcat03 cat /etc/hosts127.0.0.1       localhost::1     localhost ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters172.17.0.3      tomcat02 92a91f9faa29172.17.0.4      6a603a98a0de<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质：–link 就是在容器tomcat03的hosts配置在中增加了一个tomcat02的映射</p><p>不建议使用–link实现网络映射</p><h3 id="自定义网络">自定义网络</h3><blockquote><p>查看所有的docker网络</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker network lsNETWORK ID     NAME      DRIVER    SCOPE8e9b37aaa9ce   bridge    bridge    local0673ec2aaa1c   host      host      local9ba9f05fc241   none      null      local[root@xizou /]# docker network --helpUsage:  docker network COMMANDManage networksCommands:  connect     Connect a container to a network  create      Create a network  disconnect  Disconnect a container from a network  inspect     Display detailed information on one or more networks  ls          List networks  prune       Remove all unused networks  rm          Remove one or more networksRun 'docker network COMMAND --help' for more information on a command.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>网络模式</strong></p><p>bridge：桥接 docker（默认）</p><p>none：不配置网络</p><p>host：和宿主机共享网络</p><p>container：容器网络连通（不常用）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 直接启动命令 --net bridge，这个就是docker0docker run -d -P --name tomcat01 tomcat等价于docker run -d -P --name tomcat01 --net bridge tomcat# docker0的特点：默认，域名不能访问。--link可以打通# 创建一个自定义网络# --driver bridge# --subnet 192.168.0.0/16# --gateway 192.168.0.1 [root@xizou /]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet8870e01ec415be0a02e181760b6bec5040edb660762903ec3c6dac14ffd368dd[root@xizou /]# docker network lsNETWORK ID     NAME      DRIVER    SCOPE8e9b37aaa9ce   bridge    bridge    local0673ec2aaa1c   host      host      local8870e01ec415   mynet     bridge    local9ba9f05fc241   none      null      local[root@xizou /]# docker network inspect mynet[    {        "Name": "mynet",        "Id": "8870e01ec415be0a02e181760b6bec5040edb660762903ec3c6dac14ffd368dd",        "Created": "2022-10-31T11:31:39.986065834+08:00",        "Scope": "local",        "Driver": "bridge",        "EnableIPv6": false,        "IPAM": {            "Driver": "default",            "Options": {},            "Config": [                {                    "Subnet": "192.168.0.0/16",                    "Gateway": "192.168.0.1"                }            ]        },        "Internal": false,        "Attachable": false,        "Ingress": false,        "ConfigFrom": {            "Network": ""        },        "ConfigOnly": false,        "Containers": {},        "Options": {},        "Labels": {}    }]# 使用自定义网络[root@xizou /]# docker run -d -P --name tomcat01 --net mynet tomcat5a311d6ef0e2fdd71afc8595de172cd54f7b51cb500f7040aebf562efea4896f[root@xizou /]# docker run -d -P --name tomcat02 --net mynet tomcat5459203e0fb8dcf80a79d24ad6dbf07765b0d8103f879c03aef3e20ec806a4a6[root@xizou /]# docker network inspect mynet[    {        "Name": "mynet",        "Id": "8870e01ec415be0a02e181760b6bec5040edb660762903ec3c6dac14ffd368dd",        "Created": "2022-10-31T11:31:39.986065834+08:00",        "Scope": "local",        "Driver": "bridge",        "EnableIPv6": false,        "IPAM": {            "Driver": "default",            "Options": {},            "Config": [                {                    "Subnet": "192.168.0.0/16",                    "Gateway": "192.168.0.1"                }            ]        },        "Internal": false,        "Attachable": false,        "Ingress": false,        "ConfigFrom": {            "Network": ""        },        "ConfigOnly": false,        "Containers": {            "5459203e0fb8dcf80a79d24ad6dbf07765b0d8103f879c03aef3e20ec806a4a6": {                "Name": "tomcat02",                "EndpointID": "ee8fe045e89d3c7c20ee1ea48f1f6fbb6877967fa67e8ccaa69bab2b9ed29694",                "MacAddress": "02:42:c0:a8:00:03",                "IPv4Address": "192.168.0.3/16",                "IPv6Address": ""            },            "5a311d6ef0e2fdd71afc8595de172cd54f7b51cb500f7040aebf562efea4896f": {                "Name": "tomcat01",                "EndpointID": "30d69fc865bc8020da370fd3a0e810e2f7a4e51f7ecc80a88c8bc1bfe66ce541",                "MacAddress": "02:42:c0:a8:00:02",                "IPv4Address": "192.168.0.2/16",                "IPv6Address": ""            }        },        "Options": {},        "Labels": {}    }]# 再次测试ping连接，使用ip和使用容器名都可以ping成功[root@xizou ~]# docker exec -it tomcat01 ping tomcat02PING tomcat02 (192.168.0.3) 56(84) bytes of data.64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.047 ms64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.062 ms64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.042 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义网络的docker都已经维护好了对应的关系，推荐平时使用这样的网络</p><p>好处：不同的集群使用不同的网络，保证集群是安全和健康的。</p><h3 id="网络连通">网络连通</h3><p><img src="/posts/47611/image-20221031125301011.png" alt="网络连通"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou ~]# docker network connect --helpUsage:  docker network connect [OPTIONS] NETWORK CONTAINERConnect a container to a networkOptions:      --alias strings           Add network-scoped alias                                for the container      --driver-opt strings      driver options for the network      --ip string               IPv4 address (e.g.,                                172.30.100.104)      --ip6 string              IPv6 address (e.g.,                                2001:db8::33)      --link list               Add link to another container      --link-local-ip strings   Add a link-local address                                for the container<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让使用Docker0作为桥接的容器和使用自定义网络mynet作为桥接的容器连通。</p><p>假设：</p><p>使用Docker0作为桥接的容器有：tomcat01、tomcat02</p><p>使用自定义网络mynet作为桥接的容器有：tomcat-net-01、tomcat-net-02</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker network connect mynet tomcat01[root@xizou /]# docker network inspect mynet可以发现Containes字段里多了tomcat01[root@xizou /]# docker exec -it tomcat01 ping tomcat-net-01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实战：Redis集群">实战：Redis集群</h3><p><img src="/posts/47611/image-20221031130410644.png" alt="Redis集群"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建网卡docker network create redis --subnet 172.38.0.0/16# 通过脚本创建6个redis配置for port in $(seq 1 6); \do \mkdir -p /mydata/redis/node-${port}/conftouch /mydata/redis/node-${port}/conf/redis.confcat &lt;&lt; EOF &gt;/mydata/redis/node-${port}/conf/redis.confport 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1${port}cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdone# 启动dockerdocker run -p 6371:6379 -p 16371:16739 --name redis-1 -v /mydate/redis/node-1/data:/data -v /mydate/redis/node-1/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdocker run -p 6372:6379 -p 16372:16739 --name redis-2 -v /mydate/redis/node-2/data:/data -v /mydate/redis/node-2/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdocker run -p 6373:6379 -p 16373:16739 --name redis-3 -v /mydate/redis/node-3/data:/data -v /mydate/redis/node-3/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdocker run -p 6374:6379 -p 16374:16739 --name redis-4 -v /mydate/redis/node-4/data:/data -v /mydate/redis/node-4/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdocker run -p 6375:6379 -p 16375:16739 --name redis-5 -v /mydate/redis/node-5/data:/data -v /mydate/redis/node-5/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.confdocker run -p 6376:6379 -p 16376:16739 --name redis-6 -v /mydate/redis/node-6data:/data -v /mydate/redis/node-6/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf# 进入任一个容器内docker exec -it redis-1 /bin/sh# 创建集群/data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1/data # redis-cli -c127.0.0.1:6379&gt; cluster info观察发现已经创建了6个redis服务，其中3个主机，3个从机，主机的数据会同步到对应的从机，主机挂掉后，从机会替代挂掉的主机工作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实战：SpringBoot微服务打包成Docker镜像">实战：SpringBoot微服务打包成Docker镜像</h3><p><strong>步骤：</strong></p><p>1、构建SpringBoot项目</p><p>2、打包应用</p><p>3、编写Dockerfile</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM java:8MAINTAINER xizou&lt;xiongbinzou@163.com&gt;COPY *.jar /app.jarCMD ["--server.port=8080"]EXPOSE 8080ENTRYPOINT ["java", "-jar", "/app.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、构建镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t helloworld .docker imagesdocker run -d -P --name helloworld-web hellowordcurl localhost:32779<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5、发布运行</p><h2 id="扩展">扩展</h2><h3 id="什么是容器编排">什么是容器编排</h3><p><strong>问题</strong>：将应用程序打包到了Docker容器中后，如何在生产环境中运行它，如果应用程序有依赖于其他容器，如数据库、消息服务或其他后端服务容器，该怎么办？如果用户数量增加并且你需要扩展你的应用程序怎么办？如果要缩小规模减少负载该怎么做？</p><p><strong>思考</strong>：需要有一个具有一组资源和功能的底层平台，这个平台能够统筹容器之间的连接，并且根据负载可自动扩展或缩减容器。</p><p><strong>方案</strong>：这种自动部署和管理容器的整个过程称为<strong>容器编排</strong>，Docker有自己的容器编排工具，叫做Docker Swarm，但是缺少复杂应用程序所需的一些高级功能，MESOS也是一种容器编排技术，虽然支持许多高级功能，但是很难设置和上手。Kubernets是一种容器编排技术，设置和入门有点困难，提供了许多自定义部署的选项和支持复杂架构的部署，目前所有的公有云服务供应商都支持了Kubernetes。</p><p><strong>容器编排</strong>的优势：</p><ul><li><strong>应用程序高可用</strong>。硬件故障不会导致应用程序停机，因为容器编排技术使我们在不同节点上运行了应用程序的多个实例。</li><li><strong>用户流量在容器间负载均衡</strong>。</li><li><strong>需求增加时，可轻松、快速部署更多应用程序实例</strong>。</li></ul><p><img src="/posts/47611/image-20221101233701289.png" alt="容器编排"></p><p>Kubernetes是一种容器编排技术，用于编排数百个应用程序的部署和管理。</p><h3 id="Kubernetes架构">Kubernetes架构</h3><p>在设置Kubernetes集群前，先介绍一些Kubernetes的术语。</p><p><strong>节点Nodes</strong>：节点是安装了Kubernetes的物理或虚拟机器，节点是工作机器，是Kubernetes将容器启动的地方。过去也叫Minions。</p><img src="/posts/47611/image-20221102002124876.png" alt="节点Node" style="zoom: 33%;"><p><strong>集群Cluster</strong>：集群是一组组合在一起的节点，即使一个节点发生故障，依然可以从其他节点访问你的应用程序，此外节点也有助于分担负载，</p><img src="/posts/47611/image-20221102002510040.png" alt="集群Cluster" style="zoom:33%;"><p><strong>Master</strong>：Master是另一个安装了Kubernetes的节点，被配置为Master，负责监视集群中的节点并负责工作节点上容器的编排，存储着集群成员的信息。当一个节点发生故障时，Master负责将节点的工作负载转移到另一个工作节点。</p><img src="/posts/47611/image-20221102004639106.png" alt="Master" style="zoom:33%;"><p><strong>Kubernetes</strong>：在系统上安装Kubernetes时，实际上是在安装以下组件</p><ul><li><strong>API Server</strong>：充当Kubernetes的前端，包括用户、管理设备、命令行界面、从API服务器到Kubernets集群。</li><li><strong>etcd</strong>：是Kubernetes使用可靠键值来存储用于管理集群的所有数据，当集群中有多个节点和多个Master时，etcd会以分布式的方式在集群的所有节点上存储着所有这些信息。etcd负责在集群内实现锁，以确保Master之间不存在冲突。</li><li><strong>Scheduler</strong>：负责跨多个节点分发工作或容器，它查找新创建的容器并将它们分配给节点。</li><li><strong>Controller</strong>：是编排背后的大脑，它负责在节点、容器或端点出现故障时进行统通知和响应，负责决定在这种情况下启动新容器。</li><li><strong>Container Runtime</strong>：是运行容器的底层软件，如Docker。</li><li><strong>Kubelet</strong>：是在集群中每个节点上运行的代理，负责保证容器按预期在节点上运行。</li></ul><p><strong>Pod</strong>：Kubernetes不直接在工作节点上部署容器，容器封装进而成为Pod的Kubernetes对象，Pod是应用程序的单个实例，Pod是你可以在Kubernetes创建的最小对象。</p><p><img src="/posts/47611/image-20221102020138628.png" alt="POD"></p><p><img src="/posts/47611/image-20221102020313836.png" alt="Kubernetes容器编排"></p><p><strong>Pod</strong> 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。</p><p><strong>Pod</strong>（就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个）容器； 这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。</p><p>POD定义文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">appVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp        <span class="token key atrule">type</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nigix<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token comment"># kubectl create -f pod-definition.yml</span><span class="token comment"># kubectl get pods</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Replica Set</strong>：ReplicaSet 的目的是维护一组在任何时候都处于运行状态的 Pod 副本的稳定集合。 因此，它通常用来保证给定数量的、完全相同的 Pod 的可用性。ReplicaSet 是通过一组字段来定义的，包括一个用来识别可获得的 Pod 的集合的选择算符、一个用来标明应该维护的副本个数的数值、一个用来指定应该创建新 Pod 以满足副本个数条件时要使用的 Pod 模板等等。 每个 ReplicaSet 都通过根据需要创建和删除 Pod 以使得副本个数达到期望值， 进而实现其存在价值。当 ReplicaSet 需要创建新的 Pod 时，会使用所提供的 Pod 模板。</p><p>ReplicaSet 定义文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicaSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>replicaset  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp      <span class="token key atrule">type</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">metadata</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>pod        <span class="token key atrule">labels</span><span class="token punctuation">:</span>            <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp            <span class="token key atrule">type</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end        <span class="token key atrule">spec</span><span class="token punctuation">:</span>          <span class="token key atrule">containers</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container            <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end          <span class="token comment"># kubectl create -f replicaset-definition.yml</span><span class="token comment"># kubectl get replicaset</span><span class="token comment"># kubectl get pods</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Deployment</strong>：Deployment 是一个更高级的概念，它管理 ReplicaSet，并向 Pod 提供声明式的更新以及许多其他有用的功能。 因此，我们建议使用 Deployment 而不是直接使用 ReplicaSet， 除非你需要自定义更新业务流程或根本不需要更新。</p><p>你负责描述 Deployment 中的目标状态，而 Deployment控制器（Controller）以受控速率更改实际状态， 使其变为期望状态。你可以定义 Deployment 以创建新的 ReplicaSet，或删除现有 Deployment， 并通过新的 Deployment 更新其资源。</p><p>应用：</p><p>1.当你有一个需要部署在生产环境中的Web服务器，你需要运行的不是一个而是多个Web服务器实例</p><p>2.每当应用程序需要更新版本时，你需要无缝升级Docker实例，但是当你升级实例时，不希望一次升级所有实例，因为会影响正在访问你应用程序的用户，因此你希望一个接一个升级他们，这种升级称为滚动更新。</p><p>3.当你执行的升级之一导致了意外错误，并且你被要求撤销最近的更改，你希望能够回滚最近执行的更改。</p><p>4.当对环境进行多项更改，例如升级底层Web服务器版本以及扩展你的环境并修改资源等，你不想在命令运行后立即应用每个更改，而是希望暂停应用进行更改，然后恢复，以便一起推出所有更改。</p><p>Deployment定义文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp      <span class="token key atrule">type</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>pod      <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end<span class="token comment"># kubectl create -f deployment-definition.yml</span><span class="token comment"># kubectl get deployments</span><span class="token comment"># kubectl get replicaset</span><span class="token comment"># kubectl get pods</span><span class="token comment"># kubectl get all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>POD、Replica Set、Deployment关系</strong></p><p><img src="/posts/47611/image-20221102143342986.png" alt="POD、Replica Set、Deployment关系"></p><p>工作节点拥有Container Runtime、Kubelet</p><p>Master节点拥有API Server、etcd、Controller、Scheduler</p><p><img src="/posts/47611/image-20221102010926832.png" alt="Master VS Worker Nodes"></p><p><strong>Kubernetes网络设置</strong></p><p>IP地址指定给POD：</p><img src="/posts/47611/image-20221102164749931.png" alt="IP地址指定给POD" style="zoom:50%;"><p>Kubernetes网络需求：</p><ul><li>Pod 能够与所有其他节点上的 Pod 通信， 且不需要网络地址转译（NAT）</li><li>节点上的代理（比如：系统守护进程、kubelet）可以和节点上的所有 Pod 通信</li></ul><img src="/posts/47611/image-20221102170611783.png" alt="Kubernetes网络模型解决方案之一" style="zoom: 80%;"><p><strong>Kubernetes服务类型</strong></p><ul><li><strong>NodePort Server</strong></li></ul><img src="/posts/47611/image-20221102171636882.png" alt="NodePort Server" style="zoom:50%;"><img src="/posts/47611/image-20221102172918003.png" alt="NodePort Server-多个Pods" style="zoom:50%;"><img src="/posts/47611/image-20221102173055489.png" alt="NodePort Server-多个Nodes" style="zoom: 80%;"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30008</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">type</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end<span class="token comment"># kubectl create -f service-definition.yml</span><span class="token comment"># kubectl get services</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部执行指令http://192.168.1.2:30008即可以访问节点里POD应用</p><ul><li><strong>ClusterIP Server</strong></li></ul><img src="/posts/47611/image-20221102173713245.png" alt="ClusterIP Server" style="zoom:50%;"><p>为每种应用服务创建一个单独的Service，这个Service可定义提供相同应当服务节点的网络地址、端口配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> back<span class="token punctuation">-</span>end<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">type</span><span class="token punctuation">:</span> back<span class="token punctuation">-</span>end   <span class="token comment"># kubectl create -f service-definition.yml</span><span class="token comment"># kubectl get services</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>LoadBalancer Server</strong></li></ul><p><img src="/posts/47611/image-20221102175051051.png" alt="LoadBalancer Server"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30008</span>      <span class="token comment"># kubectl create -f service-definition.yml</span><span class="token comment"># kubectl search sevices</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kubectl工具">kubectl工具</h3><p>kubectl工具在Kubernetes集群上部署和管理应用程序，获取集群信息，获取集群中其他节点的状态并管理许多其他事情。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl run hello-minikube  # 在集群上部署应用程序kubectl cluster-info  # 查看集群信息kubectl get nodes  # 用于列出集群的所有节点部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>可以通过<a href="https://minikube.sigs.k8s.io/docs/start/">Minicube</a>项目体验kubernetes的部署与应用。</strong></p><h3 id="实战：Kubernetes部署投票应用">实战：Kubernetes部署投票应用</h3><p><img src="/posts/47611/image-20221102180743427.png" alt="投票应用"></p><p>解释：</p><ul><li><p>voting-app: 前端页面，用户通过该页面进行投票，python</p></li><li><p>redis：数据库，用户的投票数据暂存在内存的redis里，redis</p></li><li><p>worker：从redis里读取用户投票数据，统计计算后存入持久性数据库，.Net</p></li><li><p>postgress：数据库，持久化存储用户的投票数据跟统计结果，postgress</p></li><li><p>result-app: 前端页面，显示投票统计数据，Javascript</p></li></ul><p>部署的目标</p><p>1、运行容器</p><p>2、容器间的连通</p><p>3、外部访问</p><p><strong>解决方案1</strong>（不使用Deployment，不建议）：</p><p><img src="/posts/47611/image-20221102181935376.png" alt="投票应用解决方案1"></p><p>voting-app-pod.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app      <span class="token key atrule">image</span><span class="token punctuation">:</span> kodekcloud/examplevotingapp_vote<span class="token punctuation">:</span>v1      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result-app-pod.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>app      <span class="token key atrule">image</span><span class="token punctuation">:</span> kodekcloud/examplevotingapp_result<span class="token punctuation">:</span>v1      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis-pod.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> redis      <span class="token key atrule">image</span><span class="token punctuation">:</span> redis      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postgres-pod.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres      <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5432</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POSTGRES_USER          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"postgres"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POSTGRES_PASSWORD          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"postgres"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>worker-app-pod.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app      <span class="token key atrule">image</span><span class="token punctuation">:</span> kodekcloud/examplevotingapp_worker<span class="token punctuation">:</span>v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis-service.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> redis  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>service      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>pod    <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postgres-service.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> db  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>service      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5432</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">5432</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>pod    <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>voting-app-service.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>service  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>service      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30004</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod    <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result-app-service.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>service  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>service      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30005</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod    <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面所有文件放入voting-app文件夹下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd voting-appkubectl get pods,svckuberctl create -f voting-app-pod.yamlkuberctl create -f voting-app-service.yaml# 查看投票服务的urlminikube service voting-service --urlkuberctl create -f redis-pod.yamlkuberctl create -f redis-service.yamlkubectl get pods,svckuberctl create -f postgres-pod.yamlkuberctl create -f postgres-service.yamlkubectl get pods,svckuberctl create -f worker-app-pod.yamlkubectl get pods,svckuberctl create -f result-app-pod.yamlkuberctl create -f result-app-service.yamlkubectl get pods,svc# 查看投票结果服务的urlminikube service voting-service --url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方案2</strong>（使用Deployment）</p><p><img src="/posts/47611/image-20221102184937776.png" alt="投票应用解决方案2"></p><p>voting-app-deployment.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>deployment      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod          <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app          <span class="token key atrule">image</span><span class="token punctuation">:</span> kodekcloud/examplevotingapp_vote<span class="token punctuation">:</span>v1          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis-deployment.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>deployment      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>pod      <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>pod          <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres          <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5432</span>          <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POSTGRES_USER              <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"postgres"</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POSTGRES_PASSWORD              <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"postgres"</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postgress-deployment.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>deployment      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>pod      <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>pod          <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> redis          <span class="token key atrule">image</span><span class="token punctuation">:</span> redis          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> postgres<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>worker-deployment.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app<span class="token punctuation">-</span>deployment      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod          <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app          <span class="token key atrule">image</span><span class="token punctuation">:</span> kodekcloud/examplevotingapp_worker<span class="token punctuation">:</span>v1  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> worker<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result-app-deployment.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>app<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>app<span class="token punctuation">-</span>deployment      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod          <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> voting<span class="token punctuation">-</span>app          <span class="token key atrule">image</span><span class="token punctuation">:</span> kodekcloud/examplevotingapp_result<span class="token punctuation">:</span>v1          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> result<span class="token punctuation">-</span>app<span class="token punctuation">-</span>pod      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>voting<span class="token punctuation">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确保所有文件放入voting-app文件夹下，包括方案1的文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd voting-appkubectl get pods,svckuberctl create -f voting-app-deployment.yamlkuberctl create -f voting-app-service.yaml# 查看投票服务的urlminikube service voting-service --urlkuberctl create -f redis-deployment.yamlkuberctl create -f redis-service.yamlkubectl get deploymentskuberctl create -f postgres-deployment.yamlkuberctl create -f postgres-service.yamlkubectl get deploymentskuberctl create -f worker-app-deployment.yamlkubectl get deploymentskuberctl create -f result-app-deployment.yamlkuberctl create -f result-app-service.yamlkubectl get deployments,svc# 查看投票结果服务的urlminikube service voting-service --url# 修改投票和结果服务的集群为3kubectl scale deployment voting-app-deployment --replicas=3kubectl scale deployment result-app-deployment --replicas=3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为什么Podman比Docker更安全">为什么Podman比Docker更安全</h3><p>Docker必须由root用户启动一个守护进程才能使用<code>systemctl start docker</code>，其次，普通用户需要加入容器组，才能够运行和启动Docker，如此会存在一些安全问题，如普通用户可以通过容器进行提权。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看docker版本[root@xizou /]# docker --versionDocker version 20.10.21, build baeda1f# root用户启动docker服务进程[root@xizou /]# systemctl start docker# 查看docker服务状态[root@xizou /]# systemctl status docker● docker.service - Docker Application Container Engine   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)   Active: active (running) since Wed 2022-11-02 12:24:26 CST; 47s ago     Docs: https://docs.docker.com Main PID: 31905 (dockerd)    Tasks: 7   Memory: 27.9M   CGroup: /system.slice/docker.service           └─31905 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sockNov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.199751948+08:00" level=info m...ing"Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.431287299+08:00" level=info m...ing"Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.475634500+08:00" level=info m...ing"Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.676136067+08:00" level=info m...ess"Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.778914793+08:00" level=info m...ing"Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.891111549+08:00" level=info m...ne."Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.907790255+08:00" level=info m...0.21Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.907847502+08:00" level=info m...ion"Nov 02 12:24:26 xizou systemd[1]: Started Docker Application Container Engine.Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.924507836+08:00" level=info m...ock"Hint: Some lines were ellipsized, use -l to show in full.# 查看当前所有镜像[root@xizou /]# docker images -aREPOSITORY   TAG       IMAGE ID   CREATED   SIZE# 下载镜像[root@xizou /]# docker pull centosUsing default tag: latestlatest: Pulling from library/centosa1d0c7532777: Pull complete Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177Status: Downloaded newer image for centos:latestdocker.io/library/centos:latest[root@xizou /]# docker images -aREPOSITORY   TAG       IMAGE ID       CREATED         SIZEcentos       latest    5d0da3dc9764   13 months ago   231MB# 创建并切换用户[root@xizou /]# adduser test -G docker[root@xizou /]# su - test# 普通用户能看到root用户下载的镜像，如果使用podman则不会显示[test@xizou ~]$ docker images -aREPOSITORY   TAG       IMAGE ID       CREATED         SIZEcentos       latest    5d0da3dc9764   13 months ago   231MB# 普通用户运行centos应用的容器，挂载根目录到容器内的/host目录，并把容器内的/host目录作为容器的根目录[test@xizou ~]$ docker run -it --privileged -v /:/host centos chroot /hostsh-4.2# # 容器内能够执行命令获取原本普通用户没有权限的内容sh-4.2# head -1 /etc/shadowroot:$6$8Ufh0Fb6$tpjmUtcq0r36xLc.q9tDb.5/ECL5cS6iOmglyETI23.C0BbGO0uHLtS7c97O6YvKV.CBQvufaP7mHJ25P.J6X/:19293:0:99999:7:::sh-4.2# exitexit[test@xizou ~]$ head -1 /etc/shadowhead: cannot open ‘/etc/shadow’ for reading: Permission denied[test@xizou ~]$ exitlogout[root@xizou /]# head -1 /etc/shadowroot:$6$8Ufh0Fb6$tpjmUtcq0r36xLc.q9tDb.5/ECL5cS6iOmglyETI23.C0BbGO0uHLtS7c97O6YvKV.CBQvufaP7mHJ25P.J6X/:19293:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面例子举证了Docker造成的安全隐患，通过挂载数据卷的方式，普通用户能够在容器内获得root权限，能够随意更改文件。另外，容器内创建的用户，退出容器后居然存在于宿主机中。容器的隔离性被破坏。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 解决方案：方案1. 使用podman替代dockeralias docker=podman方案2. 限制只有root用户才能使用docker将docker.sock文件的属组改成root组[root@xizou /]# cd /var/run/[root@xizou run]# chown root:root docker.sock <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后续学习方向">后续学习方向</h2><ul><li>IDEA整合Docker</li><li>Docker Compose、yaml</li><li>Docker Swarm、Kubernetes</li><li>CI/CD Jenkins</li></ul><h2 id="参考文章-4">参考文章</h2><p>本文是笔者通过下列视频教程和文档进行Docker进阶学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.bilibili.com/video/BV1og4y1q7M4/">【B站up主-遇见狂神说】</a></p><p>2.<a href="https://kubernetes.io/zh-cn/">【kubernetes官网】</a></p><p>3.<a href="https://www.udemy.com/course/learn-kubernetes/">【Udemy学院-Kubernetes初学者教程视频】</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Docker技术 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> 进阶教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门教程学习笔记</title>
      <link href="/posts/38460.html"/>
      <url>/posts/38460.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker概述">Docker概述</h2><h3 id="Docker为什么会出现？">Docker为什么会出现？</h3><p>一款应用从开发到上线，一般会有<strong>开发环境、测试环境和生产环境</strong>。</p><p><strong>Docker</strong>的出现是<strong>为了解决不同环境中应用开发、测试和部署时配置重复且繁琐，且环境不同引发应用出现崩溃、不兼容的问题</strong>，Docker<strong>通过隔离机制，将应用运行的必要环境和应用打包在一起，可以让应用轻松、快速地部署成功</strong>。</p><h3 id="Docker历史">Docker历史</h3><p>2010年，dotCloud公司创始人Solomon Hykes发起了Docker项目，2013年，Docker项目开源。<strong>Docker使用Go语言进行开发实现，对进程进行封装隔离，是属于操作系统层面的虚拟化技术</strong>。</p><p>由于隔离的进程独立于宿主和其他的隔离的进程，因此也称其为容器。</p><h3 id="Docker为什么会流行？">Docker为什么会流行？</h3><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个<strong>轻量级、可移植的、自给自足</strong>的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack集群和其他的基础应用平台。</p><p><strong>Docker可以解决的问题：</strong></p><ul><li><strong>上线流程繁琐</strong>，需要经历开发-&gt;测试-&gt;申请资源-&gt;审批-&gt;部署-&gt;测试等环节</li><li><strong>资源利用率低</strong>，普通服务器利用率低，造成过多浪费</li><li><strong>扩容/缩容不及时</strong>，业务高峰期扩容流程繁琐，上线不及时</li><li><strong>服务环境臃肿</strong>，对维护、迁移带来困难</li><li><strong>环境不一致</strong></li></ul><p><strong>Docker常用于如下场景：</strong></p><ul><li>Web应用的自动打包和发布；</li><li>自动化测试的持续集成、发布；</li><li>在服务型环境中部署和调整数据库或其他的后台应用；</li><li>从头编译或扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS服务。</li></ul><p><strong>Docker资料</strong>：</p><ul><li>Docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></li><li>Docker文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></li><li>Docker仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li></ul><h3 id="虚拟机VS容器">虚拟机VS容器</h3><p>传统虚拟机：虚拟出一套硬件后，在其上运行一个完整的操作系统，然后在这个系统安装和运行软件。</p><p><img src="/posts/38460/image-20200603212030911.png" alt="传统虚拟化"></p><p>Docker：应用直接运行在宿主机的内核，容器没有自己的内核，也没有虚拟硬件，所以更轻量，每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响。</p><p><img src="/posts/38460/image-20200603212030936.png" alt="Docker"></p><p>所以说，新建一个容器的时候，<strong>Docker不需要像虚拟机一样需要重新加载一个操作系统的内核，避免引导</strong>。虚拟机是加载了Guest OS，而Docker是利用宿主机的操作系统，省略了这个过程。</p><p><img src="/posts/38460/image-20221101232401351.png" alt="Containers VS VM"></p><table><thead><tr><th></th><th>Docker容器</th><th>VM传统虚拟机</th></tr></thead><tbody><tr><td>虚拟化类型</td><td>操作系统虚拟化</td><td>硬件虚拟化</td></tr><tr><td>性能</td><td>=宿主机性能</td><td>5%-20%损耗</td></tr><tr><td>隔离性</td><td>NS隔离</td><td>强</td></tr><tr><td>QoS</td><td>Cgroup弱</td><td>强</td></tr><tr><td>安全性</td><td>中</td><td>强</td></tr></tbody></table><h3 id="Docker基本组成">Docker基本组成</h3><p><img src="/posts/38460/image-20200603212031036.png" alt="Docker基本组成"></p><h3 id="Docker名词">Docker名词</h3><p><strong>镜像 image</strong>：Docker镜像好比一个模板，可以通过这个模板来创建容器服务，如：tomcat镜像–&gt;docker run–&gt;tomcat01容器，通过这个镜像可以创建多个容器。</p><p><strong>容器 container</strong>：Docker利用容器技术，以镜像为模板来创建独立运行的一个或一组应用，容器有启动、停止、删除等基本命令。</p><p><strong>仓库 repository</strong>：Docker仓库是存放镜像的地方，仓库分为公有仓库和私有仓库，公有仓库有：Docker Hub（默认放在国外），阿里云代理（配置镜像加速）。</p><h2 id="Docker安装">Docker安装</h2><blockquote><p>环境准备</p></blockquote><p>1、需要会Linux基本指令</p><p>2、一台服务器（本文使用阿里云服务器，宿主机操作系统是CentOS 7）</p><p>3、连接远程服务器进行操作（本文使用的远程连接软件是SecureCRT）</p><blockquote><p>环境查看</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 系统内核是 3.10 以上的[root@xizou /]# uname -r3.10.0-1160.76.1.el7.x86_64# 系统版本[root@xizou ~]# cat /etc/os-releaseNAME="CentOS Linux"VERSION="7 (Core)"ID="centos"ID_LIKE="rhel fedora"VERSION_ID="7"PRETTY_NAME="CentOS Linux 7 (Core)"ANSI_COLOR="0;31"CPE_NAME="cpe:/o:centos:centos:7"HOME_URL="https://www.centos.org/"BUG_REPORT_URL="https://bugs.centos.org/"CENTOS_MANTISBT_PROJECT="CentOS-7"CENTOS_MANTISBT_PROJECT_VERSION="7"REDHAT_SUPPORT_PRODUCT="centos"REDHAT_SUPPORT_PRODUCT_VERSION="7"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装Docker</p></blockquote><p>帮助文档 <a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.卸载旧的版本yum remove docker \                docker-client \                docker-client-latest \                docker-common \                docker-latest \                docker-latest-logrotate \                docker-logrotate \                docker-engine          # 2.需要的安装包yum install -y yum-utils# 3.设置镜像的仓库yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo # 默认是国外的    # 推荐设置阿里云的镜像仓库yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo    # 更新软件包索引yum makecache fast# 4.安装docker docker-ce指社区版 docker-ee指企业版yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin# 5.启动dockersystemctl start docker# 6.使用docker version查看是否安装成功[root@xizou /]# docker versionClient: Docker Engine - Community Version:           20.10.21 API version:       1.41 Go version:        go1.18.7 Git commit:        baeda1f Built:             Tue Oct 25 18:04:24 2022 OS/Arch:           linux/amd64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.21  API version:      1.41 (minimum version 1.12)  Go version:       go1.18.7  Git commit:       3056208  Built:            Tue Oct 25 18:02:38 2022  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          1.6.9  GitCommit:        1c90a442489720eec95342e1789ee8a5e1b9536f runc:  Version:          1.1.4  GitCommit:        v1.1.4-0-g5fd4c4d docker-init:  Version:          0.19.0  GitCommit:        de40ad0  # 7.测试[root@xizou /]# docker run hello-worldUnable to find image 'hello-world:latest' locallylatest: Pulling from library/hello-world2db29710123e: Pull complete Digest: sha256:e18f0a777aefabe047a671ab3ec3eed05414477c951ab1a6f352a06974245fe7Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/# 8.查看镜像[root@xizou /]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEhello-world   latest    feb5d9fea6a5   13 months ago   13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/38460/image-20221029005556639.png" alt="run的运行流程图"></p><blockquote><p>卸载Docker</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.卸载依赖yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin# 2.删除资源rm -rf /var/lib/dockerrm -rf /var/lib/containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置阿里云镜像加速（前提是购买了阿里云服务器）</p></blockquote><p>登陆阿里云–&gt;阿里云控制台–&gt;搜索容器镜像服务–&gt;点击容器镜像服务–&gt;点击镜像工具的镜像加速器–&gt;按照CentOS页签下的教程在服务器里配置容器镜像加速</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://2tq3dbmj.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>底层原理</p></blockquote><p><strong>Docker是怎么工作的？</strong></p><p>Docker是一个C/S结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问，Docker Server接收到Docker Client的指令，就会执行这个指令。</p><p><img src="/posts/38460/image-20221029010008163.png" alt="Docker工作示意图"></p><h2 id="Docker命令">Docker命令</h2><h3 id="帮助命令">帮助命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker version# 显示docker的版本信息docker info# 显示docker的系统信息，包括镜像和容器的数量docker &lt;command&gt; --help    # 帮助命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>命令帮助文档地址：<a href="https://docs.docker.com/engine/reference/commandline/">https://docs.docker.com/engine/reference/commandline/</a></p></blockquote><h3 id="镜像命令">镜像命令</h3><p><strong>docker images</strong> 查看所有本地的主机上的镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEhello-world   latest    feb5d9fea6a5   13 months ago   13.3kB# 解释REPOSITORY 镜像的仓库源TAG        镜像的标签IMAGE ID   镜像的idCREATED   镜像的创建时间SIZE   镜像的大小# 可选项  -a, --all             # 显示所有的镜像  -q, --quiet           # 只显示镜像的ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker search</strong> 搜索镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker search mysqlNAME                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql                           MySQL is a widely used, open-source relation…   13400     [OK]       mariadb                         MariaDB Server is a high performing open sou…   5113      [OK]   # 可选项  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print search using a Go template      --limit int       Max number of search results (default 25)      --no-trunc        Don't truncate output# 如，通过收藏来过滤[root@xizou /]# docker search mysql --filter=STARS=300NAME         DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql        MySQL is a widely used, open-source relation…   13400     [OK]       mariadb      MariaDB Server is a high performing open sou…   5113      [OK]       phpmyadmin   phpMyAdmin - A web interface for MySQL and M…   669       [OK]       percona      Percona Server is a fork of the MySQL relati…   592       [OK] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker pull 镜像名[:tag]</strong> 下载镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker pull mysqlUsing default tag: latest  # 不写tag，默认是latestlatest: Pulling from library/mysql72a69066d2fe: Pull complete  # 分层下载，docker image的核心 联合文件系统93619dbc5b36: Pull complete 99da31dd6142: Pull complete 626033c43d70: Pull complete 37d5d7efb64e: Pull complete ac563158d721: Pull complete d2ba16033dad: Pull complete 688ba7d5c01a: Pull complete 00e060b6d11d: Pull complete 1c04857f594f: Pull complete 4d7cfa90e6ea: Pull complete e0431212d27d: Pull complete Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709 # 签名Status: Downloaded newer image for mysql:latestdocker.io/library/mysql:latest  # 真实地址# 等价于docker pull docker.io/library/mysql:latest# 指定版本下载[root@xizou /]# docker pull mysql:5.75.7: Pulling from library/mysql72a69066d2fe: Already exists  # 分层下载，已经存在的layers不会重复下载93619dbc5b36: Already exists 99da31dd6142: Already exists 626033c43d70: Already exists 37d5d7efb64e: Already exists ac563158d721: Already exists d2ba16033dad: Already exists 0ceb82207cd7: Pull complete 37f2405cae96: Pull complete e2482e017e53: Pull complete 70deed891d42: Pull complete Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94Status: Downloaded newer image for mysql:5.7docker.io/library/mysql:5.7# 查看所有镜像[root@xizou /]# docker images -aREPOSITORY    TAG       IMAGE ID       CREATED         SIZEmysql         5.7       c20987f18b13   10 months ago   448MBmysql         latest    3218b38490ce   10 months ago   516MBhello-world   latest    feb5d9fea6a5   13 months ago   13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker rmi</strong>  删除镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker rmi -f 镜像id    # 删除指定的镜像[root@xizou /]# docker rmi -f 镜像id 镜像id 镜像id    # 删除指多个指定的镜像[root@xizou /]# docker rmi -f $(docker images -aq)  # 删除所有的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="容器命令">容器命令</h3><p><strong>说明</strong>：有了镜像才能够创建容器，linux下载一个centos镜像来学习</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>docker run</strong> 新建容器并启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run [可选参数] image# 参数说明--name="Name"  容器名字，用来区分容器-d   后台方式运行-it   使用交互方式运行，进入容器查看内容-p   指定容器的端口 -p 8080:8080-p 主机端口:容器端口 (常用)-p ip:主机端口:容器端口-p 容器端口容器端口-P   随机指定端口# 测试，启动并进入容器[root@xizou /]# docker run -it centos /bin/bash[root@c2fc79886fec /]# ls# 查看容器内的centos，基础版本，很多命令不完善bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  vardev  home  lib64  media       opt  root  sbin  sys  usr[root@c2fc79886fec /]# exit     # 从容器中退回主机[root@xizou /]# lsbin   dev  home  lib64       media  opt   root  sbin  sys  usrboot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker ps</strong> 列出所有运行的容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># docker ps命令# 列出当前正在运行的容器-a  # 列出当前正在运行的容器+历史运行过的容器-n=? # 显示最近创建的容器-q  # 只显示容器的ID[root@xizou /]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES[root@xizou /]# docker ps -aCONTAINER ID   IMAGE          COMMAND       CREATED             STATUS                         PORTS     NAMESc2fc79886fec   centos         "/bin/bash"   5 minutes ago       Exited (130) 3 minutes ago               competent_gagarin3c84dcf43e4e   feb5d9fea6a5   "/hello"      About an hour ago   Exited (0) About an hour ago             peaceful_pare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>退出容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">exit  # 直接容器停止并退出Ctrl + P + Q  # 容器不停止退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>dockers rm</strong> 删除容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rm 容器id  # 删除指定的容器，不能删除正在运行的容器，强制删除为docker rm -f 容器iddocker rm -f $(docker ps -aq)  # 删除所有的容器docker ps -aq|xargs docker rm -f  # 删除所有的容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>启动和停止容器的操作</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker start 容器id    # 启动容器docker restart 容器id  # 重启容器docker stop 容器id # 停止当前正在进行的容器docker kill 容器id # 强制停止当前容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用其他命令">常用其他命令</h3><p><strong>docker run -d 镜像名</strong> 后台启动容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试[root@xizou /]# docker run -d centosc2b6244be6c43e1bd6f1e54c1cc7b5b6d0f8c5183c335bf40befafaa4319179c# 问题：输入docker ps, 发现刚刚后台运行的容器停止了# 常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止# 如启动nginx，容器启动后，发现自己没有提供服务，就会立即停止，就是没有程序了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker logs</strong> 查看日志</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 命令docker logs -tf --tail number 容器id[root@xizou /]# docker logs -tf --tail 10 d839  # 容器没有日志# 自己编写一个Shell脚本：每隔1秒打印一个xizou"while true;do echo xizou;sleep 1;done"[root@xizou /]# docker run -d centos /bin/sh -c "while true;do echo xizou;sleep 1;done"817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc[root@xizou /]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES817124ceef29   centos    "/bin/sh -c 'while t…"   12 minutes ago   Up 12 minutes             amazing_panini# 显示日志-tf   # 显示日志--tail number # 要显示日志条数[root@xizou /]# docker logs -tf --tail 10 817124ceef292022-10-29T06:33:43.399390864Z xizou2022-10-29T06:33:44.401304775Z xizou2022-10-29T06:33:45.403554366Z xizou2022-10-29T06:33:46.405484682Z xizou2022-10-29T06:33:47.407427195Z xizou2022-10-29T06:33:48.409551746Z xizou2022-10-29T06:33:49.411679644Z xizou2022-10-29T06:33:50.413887957Z xizou2022-10-29T06:33:51.415868562Z xizou2022-10-29T06:33:52.417886027Z xizou<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker top 容器id</strong> 查看容器中的进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试[root@xizou /]# docker top 817124ceef29UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                16181               16163               0                   14:18               ?                   00:00:00            /bin/sh -c while true;do echo xizou;sleep 1;doneroot                17492               16181               0                   14:38               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker inspect 容器id</strong> 查看容器的元数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试[root@xizou /]# docker ps -aCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES817124ceef29   centos    "/bin/sh -c 'while t…"   22 minutes ago   Up 22 minutes             amazing_panini[root@xizou /]# docker inspect 817124ceef29[    {        "Id": "817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc",        "Created": "2022-10-29T06:18:50.373286723Z",        "Path": "/bin/sh",        "Args": [            "-c",            "while true;do echo xizou;sleep 1;done"        ],        "State": {            "Status": "running",            "Running": true,            "Paused": false,            "Restarting": false,            "OOMKilled": false,            "Dead": false,            "Pid": 16181,            "ExitCode": 0,            "Error": "",            "StartedAt": "2022-10-29T06:18:50.580743276Z",            "FinishedAt": "0001-01-01T00:00:00Z"        },        "Image": "sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6",        "ResolvConfPath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/resolv.conf",        "HostnamePath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/hostname",        "HostsPath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/hosts",        "LogPath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc-json.log",        "Name": "/amazing_panini",        "RestartCount": 0,        "Driver": "overlay2",        "Platform": "linux",        "MountLabel": "",        "ProcessLabel": "",        "AppArmorProfile": "",        "ExecIDs": null,        "HostConfig": {            "Binds": null,            "ContainerIDFile": "",            "LogConfig": {                "Type": "json-file",                "Config": {}            },            "NetworkMode": "default",            "PortBindings": {},            "RestartPolicy": {                "Name": "no",                "MaximumRetryCount": 0            },            "AutoRemove": false,            "VolumeDriver": "",            "VolumesFrom": null,            "CapAdd": null,            "CapDrop": null,            "CgroupnsMode": "host",            "Dns": [],            "DnsOptions": [],            "DnsSearch": [],            "ExtraHosts": null,            "GroupAdd": null,            "IpcMode": "private",            "Cgroup": "",            "Links": null,            "OomScoreAdj": 0,            "PidMode": "",            "Privileged": false,            "PublishAllPorts": false,            "ReadonlyRootfs": false,            "SecurityOpt": null,            "UTSMode": "",            "UsernsMode": "",            "ShmSize": 67108864,            "Runtime": "runc",            "ConsoleSize": [                0,                0            ],            "Isolation": "",            "CpuShares": 0,            "Memory": 0,            "NanoCpus": 0,            "CgroupParent": "",            "BlkioWeight": 0,            "BlkioWeightDevice": [],            "BlkioDeviceReadBps": null,            "BlkioDeviceWriteBps": null,            "BlkioDeviceReadIOps": null,            "BlkioDeviceWriteIOps": null,            "CpuPeriod": 0,            "CpuQuota": 0,            "CpuRealtimePeriod": 0,            "CpuRealtimeRuntime": 0,            "CpusetCpus": "",            "CpusetMems": "",            "Devices": [],            "DeviceCgroupRules": null,            "DeviceRequests": null,            "KernelMemory": 0,            "KernelMemoryTCP": 0,            "MemoryReservation": 0,            "MemorySwap": 0,            "MemorySwappiness": null,            "OomKillDisable": false,            "PidsLimit": null,            "Ulimits": null,            "CpuCount": 0,            "CpuPercent": 0,            "IOMaximumIOps": 0,            "IOMaximumBandwidth": 0,            "MaskedPaths": [                "/proc/asound",                "/proc/acpi",                "/proc/kcore",                "/proc/keys",                "/proc/latency_stats",                "/proc/timer_list",                "/proc/timer_stats",                "/proc/sched_debug",                "/proc/scsi",                "/sys/firmware"            ],            "ReadonlyPaths": [                "/proc/bus",                "/proc/fs",                "/proc/irq",                "/proc/sys",                "/proc/sysrq-trigger"            ]        },        "GraphDriver": {            "Data": {                "LowerDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501-init/diff:/var/lib/docker/overlay2/01b2cb186859ddce9e097143c46cc783da485186a234c8ef6c0827b83b7c389a/diff",                "MergedDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501/merged",                "UpperDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501/diff",                "WorkDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501/work"            },            "Name": "overlay2"        },        "Mounts": [],        "Config": {            "Hostname": "817124ceef29",            "Domainname": "",            "User": "",            "AttachStdin": false,            "AttachStdout": false,            "AttachStderr": false,            "Tty": false,            "OpenStdin": false,            "StdinOnce": false,            "Env": [                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"            ],            "Cmd": [                "/bin/sh",                "-c",                "while true;do echo xizou;sleep 1;done"            ],            "Image": "centos",            "Volumes": null,            "WorkingDir": "",            "Entrypoint": null,            "OnBuild": null,            "Labels": {                "org.label-schema.build-date": "20210915",                "org.label-schema.license": "GPLv2",                "org.label-schema.name": "CentOS Base Image",                "org.label-schema.schema-version": "1.0",                "org.label-schema.vendor": "CentOS"            }        },        "NetworkSettings": {            "Bridge": "",            "SandboxID": "06aa425cd028f11073bf21ac726cd4490fa5eaee627aa9fadc7aedea8ca2644e",            "HairpinMode": false,            "LinkLocalIPv6Address": "",            "LinkLocalIPv6PrefixLen": 0,            "Ports": {},            "SandboxKey": "/var/run/docker/netns/06aa425cd028",            "SecondaryIPAddresses": null,            "SecondaryIPv6Addresses": null,            "EndpointID": "6add7586334f9a3e87d60eb62da7145029d5977a07c61cf63ba409b7407e060d",            "Gateway": "172.17.0.1",            "GlobalIPv6Address": "",            "GlobalIPv6PrefixLen": 0,            "IPAddress": "172.17.0.2",            "IPPrefixLen": 16,            "IPv6Gateway": "",            "MacAddress": "02:42:ac:11:00:02",            "Networks": {                "bridge": {                    "IPAMConfig": null,                    "Links": null,                    "Aliases": null,                    "NetworkID": "8f02c5589dd1b4b73a11b84188936b90056ca5a1d18676ffb55935132312468f",                    "EndpointID": "6add7586334f9a3e87d60eb62da7145029d5977a07c61cf63ba409b7407e060d",                    "Gateway": "172.17.0.1",                    "IPAddress": "172.17.0.2",                    "IPPrefixLen": 16,                    "IPv6Gateway": "",                    "GlobalIPv6Address": "",                    "GlobalIPv6PrefixLen": 0,                    "MacAddress": "02:42:ac:11:00:02",                    "DriverOpts": null                }            }        }    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进入当前正在运行的容器</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 通常容器都是使用后台方式运行的，需要进入容器，修改一些配置时# 命令1docker exec -it 容器id /bin/bash  # 进入正在运行的容器# 测试[root@xizou /]# docker exec -it 817124ceef29 /bin/bash[root@817124ceef29 /]# ps -efUID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 06:18 ?        00:00:00 /bin/sh -c while true;do echo xiroot      1859     0  0 06:49 pts/0    00:00:00 /bin/bashroot      1916     1  0 06:50 ?        00:00:00 /usr/bin/coreutils --coreutils-proot      1917  1859  0 06:50 pts/0    00:00:00 ps -ef# 命令2docker attach 容器id # 进入正在运行的容器# 测试[root@xizou /]# docker attach 817124ceef29xizouxizouxizouxizou# 如果是死循环导致停不掉容器，新开一个连接后执行 docker stop 容器id# docker exec    进入容器后开启一个新的终端，可以在里面操作# docker attach  进入容器正在执行的终端，不会启用新的进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker cp</strong> 从容器内拷贝文件到主机上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 测试[root@xizou /]# docker ps -aq | xargs docker rm -f817124ceef29[root@xizou /]# docker ps -aCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES# 进入到容器内(重新创建一个容器，或者使用docker attach)[root@xizou /]# docker run -it centos /bin/bash# 在容器内创建一个文件[root@736731cb9072 /]# cd /home[root@736731cb9072 home]# ls[root@736731cb9072 home]# touch test.py[root@736731cb9072 home]# exitexit[root@xizou /]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES[root@xizou /]# docker ps -aCONTAINER ID   IMAGE     COMMAND       CREATED              STATUS                     PORTS     NAMES736731cb9072   centos    "/bin/bash"   About a minute ago   Exited (0) 7 seconds ago             recursing_chatelet# 将文件拷贝到主机上[root@xizou /]# docker cp 736731cb9072:/home/test.py /home[root@xizou /]# cd /home[root@xizou home]# lstest.py# 拷贝是一个手动过程，未来我们使用 -v 卷的技术可以实现自动同步/home目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><strong>小结</strong></h3><p><img src="/posts/38460/image-20221029151114773.png" alt="Docker命令小结"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker --help# 解释指令attachAttach to a running container# 在当前shell下attach连接指定运行的容器buildBuild an image from a Dockerfile# 通过Dockerifle定制镜像commitCreate a new image from a container changes  # 提交当前容器为新的镜像cpCopy files/folders from the container filesystem to the host path# 从容器中拷贝指定文件或目录到宿主机中createCreate a new container# 创建一个新的容器，同run，但不启动容器diffInspect changes on a container's filesystem# 查看docker容器变化eventsGet real time events from the server# 从docker服务获取容器实时事件execRun a command in an existing container# 在已存在的容器上运行命令exportStream the contents of a container as a star archive# 导出容器的内容流作为一个tar归档文件[对应import]historyShow the history of an image# 展示一个镜像形成历史imagesList images# 列出系统当前镜像importCreate a new filesystem image from the contents of a barball# 从tar包中的内容创建一个新的文件系统映像[对应export]infoDisplay system-wide information# 显示系统相关信息inspectReturn low-level information on a container# 查看容器详细信息killKill a running container# kill指定docker容器loadLoad an image from a tar archive# 从一个tar包中加载一个镜像[对应save]loginRegister or login to the docker registry server# 注册或登陆一个docker源服务器logoutLog out from a docker registry server# 从当前docker源服务器退出logsFetch the logs of a container# 输出当前容器日志信息portLookup the public-facing port with is NAT-ed to PRIVATE_PORT# 查看映像端口对应的容器内部源端口pausePause all processes within a container# 暂停容器psList container# 列出容器列表pull        Pull an image or a repository from a registry# 从docker镜像源拉取指定镜像或库镜像push        Push an image or a repository to a registry# 推送指定镜像或库镜像到docker源服务器rename      Rename a container# 重命名一个容器restart     Restart one or more containers# 重启一个或多个运行的容器rm          Remove one or more containers# 移除一个或多个容器rmi         Remove one or more images# 移除一个或多个镜像run         Run a command in a new container# 创建一个新的容器并运行一个命令save        Save one or more images to a tar archive (streamed to STDOUT by default)# 保存一个镜像为一个tar包[对应load]search      Search the Docker Hub for images# 在docker hub中搜索镜像start       Start one or more stopped containers# 启动容器stats       Display a live stream of container(s) resource usage statistics# 展示活动的容器资源使用统计stop        Stop one or more running containers# 停止容器tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE# 给源中镜像打标签top         Display the running processes of a container# 查看容器中运行的进程信息unpause     Unpause all processes within one or more containers# 取消暂停容器update      Update configuration of one or more containers# 更新一个或多个容器配置version     Show the Docker version information# 查看docker版本号wait        Block until one or more containers stop, then print their exit codes# 截取容器停止时的退出状态值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作业练习"><strong>作业练习</strong></h3><blockquote><p>部署Nginx</p></blockquote><p>扩展：<a href="https://nginx.org/en/">Nginx</a>是一个高性能的Web服务器，整体功能十分强大，不单单可以用来做Web服务器，还可以用来做反向代理、负载均衡、域名重定向、动静分离、缓存、邮件代理、微服务网关等。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.搜索nginx镜像文件, 建议去docker hub网站搜索，可以看到详细信息[root@xizou /]# docker search nginxNAME                                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDnginx                                             Official build of Nginx.                        17590     [OK]       linuxserver/nginx                                 An Nginx container, brought to you by LinuxS…   179                  bitnami/nginx                                     Bitnami nginx Docker Image                      141                  [OK]ubuntu/nginx                                      Nginx, a high-performance reverse proxy &amp; we…   64                   bitnami/nginx-ingress-controller                  Bitnami Docker Image for NGINX Ingress Contr…   20                   [OK]# 2.拉取nginx镜像到主机[root@xizou /]# docker pull nginxUsing default tag: latestlatest: Pulling from library/nginxa2abf6c4d29d: Pull complete a9edb18cadd1: Pull complete 589b7251471a: Pull complete 186b1aaa4aa6: Pull complete b4df32aa5a72: Pull complete a0bcbecc962e: Pull complete Digest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31Status: Downloaded newer image for nginx:latestdocker.io/library/nginx:latest[root@xizou /]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED         SIZEnginx        latest    605c77e624dd   10 months ago   141MBcentos       latest    5d0da3dc9764   13 months ago   231MB# 3.启动后台启动，以nginx01命名容器，容器内部80端口映射到主机3344端口，使用nginx镜像文件[root@xizou /]# docker run -d --name nginx01 -p 3344:80 nginx6bbf807ce91f70a496f31850538b3f77076841195330575288e32efd225b56b0[root@xizou /]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                                   NAMES6bbf807ce91f   nginx     "/docker-entrypoint.…"   About a minute ago   Up About a minute   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01# 4.本机自测[root@xizou /]# curl localhost:3344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt;html { color-scheme: light dark; }body { width: 35em; margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;# 5.远程测试打开浏览器，输入120.77.233.13:3344测试，（注：需要配置服务器的安全组策略，放行3344端口）会看到nginx欢迎界面。# 6.进入容器[root@xizou /]# docker exec -it nginx01 /bin/bashroot@6bbf807ce91f:/# whereis nginxnginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginxroot@6bbf807ce91f:/# cd /etc/nginxroot@6bbf807ce91f:/etc/nginx# lsconf.d          mime.types  nginx.conf   uwsgi_paramsfastcgi_params  modules     scgi_paramsroot@6bbf807ce91f:/etc/nginx# exit[root@xizou /]# docker stop nginx01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/38460/image-20221029160632606.png" alt="端口暴露的概念"></p><p>思考问题：每次改动nginx配置文件都需要进入容器内部，十分的麻烦，如果在容器外部提供一个映射路径，达到在容器外部修改文件，容器内部就可以自动修改的目的  -v 数据卷技术</p><blockquote><p>部署tomcat</p></blockquote><p>扩展：<a href="https://tomcat.apache.org/">Tomcat</a>是一款Apache下面的开源的Servlet容器，实现了对Servlet和JSP规范的支持。另外 Tomcat本身内含了一个 HTTP 服务器，所以也可以被当作一个 Web 服务器来使用。但是Tomcat作为一个Web服务器，它对静态资源的处理能力要比Apache或者Nginx这类的Web服务器差很多，所以我们经常将Apache和Tomcat（或者是Nginx和Tomcat）组合使用，Apache来充当Web服务器处理静态资源的请求，Tomcat充当Servlet容器来处理动态请求。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 官方的使用docker run -it --rm tomcat:9.0# 之前的启动都是后台，停止了容器之后，容器还可以查看，而 docker run -it --rm，一般用来测试，用完即删除# 1.下载[root@xizou /]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED         SIZEnginx        latest    605c77e624dd   10 months ago   141MBcentos       latest    5d0da3dc9764   13 months ago   231MB[root@xizou /]# docker pull tomcatUsing default tag: latestlatest: Pulling from library/tomcat0e29546d541c: Pull complete 9b829c73b52b: Pull complete cb5b7ae36172: Pull complete 6494e4811622: Pull complete 668f6fcc5fa5: Pull complete dc120c3e0290: Pull complete 8f7c0eebb7b1: Pull complete 77b694f83996: Pull complete 0f611256ec3a: Pull complete 4f25def12f23: Pull complete Digest: sha256:9dee185c3b161cdfede1f5e35e8b56ebc9de88ed3a79526939701f3537a52324Status: Downloaded newer image for tomcat:latestdocker.io/library/tomcat:latest[root@xizou /]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED         SIZEnginx        latest    605c77e624dd   10 months ago   141MBtomcat       latest    fb5657adc892   10 months ago   680MBcentos       latest    5d0da3dc9764   13 months ago   231MB# 2.启动运行[root@xizou /]# docker run -d -p 3355:8080 --name tomcat01 tomcat4f66acd6a158a84bfc0793e9b1c72e9a8a4f7439b2bcf3ea70e330a2dbc2afde# 3.测试访问没有问题，但是会有404错误[root@xizou /]# curl localhost:3355&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style type="text/css"&gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class="line" /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class="line" /&gt;&lt;h3&gt;Apache Tomcat/10.0.14&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;# 4.进入容器[root@xizou /]# docker exec -it tomcat01 /bin/bashroot@4f66acd6a158:/usr/local/tomcat# llbash: ll: command not found# 发现问题：1) linux命令变少了，2) 没有webapps，因为默认是最小的镜像，所有不必要的都剔除了，保证了最小可运行的环境。# 解决方法：将webapps.dist所有文件拷贝到 webapps即可# 如果访问仍然失败，记得进入阿里云配置设置安全组策略，开放3355端口访问root@4f66acd6a158:/usr/local/tomcat# lsBUILDING.txt     NOTICE         RUNNING.txt  lib             temp          workCONTRIBUTING.md  README.md      bin          logs            webappsLICENSE          RELEASE-NOTES  conf         native-jni-lib  webapps.distroot@4f66acd6a158:/usr/local/tomcat# cd webapps.dist/root@4f66acd6a158:/usr/local/tomcat/webapps.dist# lsROOT  docs  examples  host-manager  managerroot@4f66acd6a158:/usr/local/tomcat/webapps.dist# cd ..root@4f66acd6a158:/usr/local/tomcat# cp -r webapps.dist/* webappsroot@4f66acd6a158:/usr/local/tomcat# cd webappsroot@4f66acd6a158:/usr/local/tomcat/webapps# lsROOT  docs  examples  host-manager  manager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考问题：每次部署项目，都需要进入容器内部，十分的麻烦，如果在容器外部提供一个映射路径，webapps，在容器外部放置项目，就自动同步到内部就好了  -v 数据卷技术</p><blockquote><p>部署ElasticSearch + Kibana</p></blockquote><p>扩展：</p><ul><li>ElasticSearch是一个实时的分布式存储、搜索、分析的引擎，它能很方便的使大量数据具有搜索、分析和探索的能力。</li><li>Kibana 是为 Elasticsearch设计的开源分析和可视化平台。你可以使用 Kibana 来搜索，查看存储在 Elasticsearch 索引中的数据并与之交互。你可以很容易实现高级的数据分析和可视化，以图表的形式展现出来。</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Elasticsearch 暴露的端口很多、十分的耗内存、数据一般需要放置到安全目录# --net somenetwork 网络配置# 下载启动Elasticsearchdocker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:8.4.3# 启动之后发现linux服务器非常卡  1核1G，建议1核4G# 查看docker状态  docker stats# 测试一下Elasticsearch启动成功了# 关闭后，给Elasticsearch增加内存限制，修改配置文件 -e 环境配置修改docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx256m" elasticsearch:8.4.3# 查看stats[root@xizou ~]# docker statsCONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDSe66569515371   elasticsearch02   0.16%     79.62MiB / 941.5MiB   8.46%     586B / 0B   78.4MB / 0B   15CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDSe66569515371   elasticsearch02   99.94%    83.38MiB / 941.5MiB   8.86%     586B / 0B   78.9MB / 0B   15CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDSe66569515371   elasticsearch02   99.94%    83.38MiB / 941.5MiB   8.86%     586B / 0B   78.9MB / 0B   15CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDSe66569515371   elasticsearch02   99.94%    83.38MiB / 941.5MiB   8.86%     586B / 0B   78.9MB / 0B   15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用Kibana访问ES</p></blockquote><p><img src="/posts/38460/image-20221029173040102.png" alt="使用Kibana访问ES"></p><h3 id="可视化">可视化</h3><ul><li>portainer</li><li>Rancher (CI/CD)</li><li>Openshift</li></ul><p><strong>什么是portainer</strong></p><p>portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作(包括上传下载镜像，创建容器等操作)、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载运行docker run -d -p 8088:9000 \--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer# 网站访问测试（如果访问失败，记得进入阿里云配置设置安全组策略，开放8088端口访问）http://120.77.223.13:8088/# 需要等待一段时间待界面加载完毕<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用教程 <a href="https://www.cnblogs.com/JerryMouseLi/p/15571897.html">https://www.cnblogs.com/JerryMouseLi/p/15571897.html</a></p><p><img src="/posts/38460/image-20221029174910162.png" alt="Portainer操作面板"></p><h2 id="Docker镜像">Docker镜像</h2><h3 id="镜像是什么">镜像是什么</h3><p>docker镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>所有的应用，直接打包成docker镜像，可以在docker中运行起来。</p><p>如何获得镜像：</p><ul><li>从远程仓库下载</li><li>别人分享拷贝</li><li>自己制作一个镜像DockerFile</li></ul><h3 id="Docker镜像加载原理">Docker镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>UnionFS（联合文件系统）：Union文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改，作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite serveral directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特型：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>Docker的镜像实际上是由一层一层的文件组成，这种层级的文件系统就是UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层就是bootfs。这一层与典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内核中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs(root file system)在bootfs之上，包含的就是典型Linux系统中的/dev、/proc、/bin、/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu、Centos等待。</p><blockquote><p><img src="/posts/38460/image-20221029180804154.png" alt="Docker镜像加载"></p></blockquote><p>平时我们按照进虚拟机的CentOS都是好几个G、为什么Docker才200M？</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@xizou /]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED         SIZEcentos                latest    5d0da3dc9764   13 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于一个精简的OS，rootfs可以很小，只包含最基本的命令、工具和程序库就可以了，因为底层直接用宿主机的内核，自己只要提供rootfs即可，因此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会有差别。因此不同的发行版可以共用bootfs。</p><p>虚拟机是分钟级别的，容器是秒级的。</p><blockquote><p>分层的镜像</p></blockquote><p>可以去下载一个镜像，观察下载的日志输出，可以发现是一层一层在下载。</p><p>比如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载redis[root@xizou /]# docker pull redisUsing default tag: latestlatest: Pulling from library/redisa2abf6c4d29d: Already exists c7a4e4382001: Pull complete4044b9ba67c9: Pull complete c8388a79482f: Pull complete 413c8bb60be2: Pull complete 1abfd3011519: Pull complete Digest: sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339Status: Downloaded newer image for redis:latestdocker.io/library/redis:latest# 查看镜像的元数据[root@xizou /]# docker image inspect redis:latest[    {        "Id": "sha256:7614ae9453d1d87e740a2056257a6de7135c84037c367e1fffa92ae922784631",        "RepoTags": [            "redis:latest"        ],        "RepoDigests": [            "redis@sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339"        ],        "Parent": "",        "Comment": "",        "Created": "2021-12-21T12:42:49.755107412Z",        "Container": "13d25f53410417c5220c8dfe8bd49f06abdbcd69faa62a9b877de02464bb04a3",        "ContainerConfig": {            "Hostname": "13d25f534104",            "Domainname": "",            "User": "",            "AttachStdin": false,            "AttachStdout": false,            "AttachStderr": false,            "ExposedPorts": {                "6379/tcp": {}            },            "Tty": false,            "OpenStdin": false,            "StdinOnce": false,            "Env": [                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",                "GOSU_VERSION=1.12",                "REDIS_VERSION=6.2.6",                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.2.6.tar.gz",                "REDIS_DOWNLOAD_SHA=5b2b8b7a50111ef395bf1c1d5be11e6e167ac018125055daa8b5c2317ae131ab"            ],            "Cmd": [                "/bin/sh",                "-c",                "#(nop) ",                "CMD [\"redis-server\"]"            ],            "Image": "sha256:e093f59d716c95cfce82c676f099b960cc700432ab531388fcedf79932fc81ec",            "Volumes": {                "/data": {}            },            "WorkingDir": "/data",            "Entrypoint": [                "docker-entrypoint.sh"            ],            "OnBuild": null,            "Labels": {}        },        "DockerVersion": "20.10.7",        "Author": "",        "Config": {            "Hostname": "",            "Domainname": "",            "User": "",            "AttachStdin": false,            "AttachStdout": false,            "AttachStderr": false,            "ExposedPorts": {                "6379/tcp": {}            },            "Tty": false,            "OpenStdin": false,            "StdinOnce": false,            "Env": [                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",                "GOSU_VERSION=1.12",                "REDIS_VERSION=6.2.6",                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.2.6.tar.gz",                "REDIS_DOWNLOAD_SHA=5b2b8b7a50111ef395bf1c1d5be11e6e167ac018125055daa8b5c2317ae131ab"            ],            "Cmd": [                "redis-server"            ],            "Image": "sha256:e093f59d716c95cfce82c676f099b960cc700432ab531388fcedf79932fc81ec",            "Volumes": {                "/data": {}            },            "WorkingDir": "/data",            "Entrypoint": [                "docker-entrypoint.sh"            ],            "OnBuild": null,            "Labels": null        },        "Architecture": "amd64",        "Os": "linux",        "Size": 112691373,        "VirtualSize": 112691373,        "GraphDriver": {            "Data": {                "LowerDir": "/var/lib/docker/overlay2/c972eb0db5fc093c31e9cc9313a6f37ae4c14b41d9d54c44b624efb95eea9348/diff:/var/lib/docker/overlay2/85907f4146eae6f77b7a36316676b53e254038e243a893a9d0b8804fdbfb7499/diff:/var/lib/docker/overlay2/1d2a6a063a36c936689bb84b800821d8a9d154b7cd35f950892b4dafc2286c4d/diff:/var/lib/docker/overlay2/2425fa0f80b5ebeb0675c4938fb4aa32a0073c38d36184989ca39e7bd3aa4556/diff:/var/lib/docker/overlay2/0eb7de4be3f166f2f05d9894a151610ee2952e5cf43175faf1ee2f9e1d0ff737/diff",                "MergedDir": "/var/lib/docker/overlay2/e4a684ba8173df23ed7622b4989678e85ed756b3cc7130ac7f643b1c6cc3db48/merged",                "UpperDir": "/var/lib/docker/overlay2/e4a684ba8173df23ed7622b4989678e85ed756b3cc7130ac7f643b1c6cc3db48/diff",                "WorkDir": "/var/lib/docker/overlay2/e4a684ba8173df23ed7622b4989678e85ed756b3cc7130ac7f643b1c6cc3db48/work"            },            "Name": "overlay2"        },        "RootFS": {            "Type": "layers",            "Layers": [                "sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f",                "sha256:9b24afeb7c2f21e50a686ead025823cd2c6e9730c013ca77ad5f115c079b57cb",                "sha256:4b8e2801e0f956a4220c32e2c8b0a590e6f9bd2420ec65453685246b82766ea1",                "sha256:529cdb636f61e95ab91a62a51526a84fd7314d6aab0d414040796150b4522372",                "sha256:9975392591f2777d6bf4d9919ad1b2c9afa12f9a9b4d260f45025ec3cc9b18ed",                "sha256:8e5669d8329116b8444b9bbb1663dda568ede12d3dbcce950199b582f6e94952"            ]        },        "Metadata": {            "LastTagTime": "0001-01-01T00:00:00Z"        }    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现在RootFS的Layers有分层。</p><p>分层最大的好处在于<strong>资源共享</strong>，比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需要在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p><strong>理解</strong>：</p><p>所有的Docker的镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，例如基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层，如果在该镜像中添加Python包，就会在基础镜像层上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>如下图所示，该镜像当前已经包含3个镜像层。</p><p><img src="/posts/38460/image-20221029183753214.png" alt="镜像分层01"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src="/posts/38460/image-20221029184603268.png" alt="镜像分层02"></p><p>上面中的镜像层跟之前的图中略有区别，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层的文件7是文件5的一个更新版本。</p><p><img src="/posts/38460/image-20221029184904109.png" alt="镜像分层03"></p><p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件，这样就使得文件的更新版本作为一个新的镜像层添加到镜像中。</p><p>Docker通过存储引擎（快照机制）的方式来实现镜像层的堆栈，并保持多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都是基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。</p><p>Docker在Windows仅支持Windowsfilter一种存储引擎，该引擎基于NTFS系统之上分层和CoW。</p><p>下图展示了与系统显示相同的三层镜像，所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="/posts/38460/image-20221029185525138.png" alt="镜像统一视图"></p><blockquote><p>特点</p></blockquote><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>这一层就是通常所说的容器层，容器之下的都叫镜像层。</p><p><img src="/posts/38460/image-20221029185820930.png" alt="镜像层"></p><h3 id="Commit镜像">Commit镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit  提交容器成为一个新的镜像docker commit -m="提交的描述信息" -a="作者名称" 容器id 目标镜像名:[tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实战测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1.启动一个默认的tomcat# 2.发现这个默认的tomcat是没有webapps应用的，因为官方的镜像默认webapps下面为空# 3.我们自己拷贝进去基本的文件# 4.通过commit提交为一个新的镜像[root@xizou ~]# docker commit -a="xizou" -m="add webapps app" 978a547e22ad tomcat02:1.0sha256:600af0d3c7c965fe45b24d9019b1289d24dc55241ff19935f390a36621f123ea[root@xizou ~]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED         SIZEtomcat02              1.0       600af0d3c7c9   5 seconds ago   684MBelasticsearch         8.4.3     ce2b9dc7fe85   3 weeks ago     1.26GBnginx                 latest    605c77e624dd   10 months ago   141MBtomcat                latest    fb5657adc892   10 months ago   680MBredis                 latest    7614ae9453d1   10 months ago   113MBcentos                latest    5d0da3dc9764   13 months ago   231MBportainer/portainer   latest    580c0e4e98b0   19 months ago   79.1MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当想保持容器的状态，可以通过commit来提交，获得一个镜像，就好比虚拟机的快照。</p><h2 id="参考文章-3">参考文章</h2><p>本文是笔者通过下列视频教程进行Docker入门学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.bilibili.com/video/BV1og4y1q7M4/">【B站up主-遇见狂神说】</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Docker技术 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> 入门教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-链表专题</title>
      <link href="/posts/28131.html"/>
      <url>/posts/28131.html</url>
      
        <content type="html"><![CDATA[<h2 id="6-从尾到头打印链表">6. 从尾到头打印链表</h2><h3 id="题目描述-6">题目描述</h3><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值。（用数组返回）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{1, 2, 3}Output:[3, 2, 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-6">题解</h3><p><strong>思路1（辅助数组）：</strong><br>创建辅助数组，从头到尾遍历链表，将节点的值存入辅助数组，最后将辅助数组逆序即可。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">print_list_from_tail_to_head</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print_list_from_tail_to_head<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[3, 2, 1]</code></pre><p><strong>思路2（反转链表）：</strong><br>先将链表反转，然后遍历链表，将节点的值加入数组。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">print_list_from_tail_to_head</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        cur <span class="token operator">=</span> head        pre <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            temp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> temp        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        point <span class="token operator">=</span> pre        <span class="token keyword">while</span> point<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>point<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            point <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> res            <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print_list_from_tail_to_head<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[3, 2, 1]</code></pre><h2 id="18-1-删除链表节点">18.1 删除链表节点</h2><h3 id="题目描述-7">题目描述</h3><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点，返回删除后的链表的头节点。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{2, 5, 1, 9}, 5Output:{2, 1, 9}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-7">题解</h3><p><strong>思路（穿针引线）：</strong><br>先找到要删除的元素，然后删除点，需要考虑要删除的节点为头节点的特殊情况。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">delete_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> head        <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">return</span> head<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    val <span class="token operator">=</span> <span class="token number">5</span>    cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete_node<span class="token punctuation">(</span>head<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>219</code></pre><h2 id="18-2-删除链表中重复的结点">18.2 删除链表中重复的结点</h2><h3 id="题目描述-8">题目描述</h3><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{1, 2, 3, 3, 4, 4, 5}Output:{1, 2, 5}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-8">题解</h3><p><strong>思路1（直接比较删除）：</strong><br>因为排序的链表中，重复的结点都是连在一起的，因此比较容易找到重复的结点，然后将所有连续相同的结点都跳过，连接不相同的第一个结点。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">delete_duplication</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        res <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        cur <span class="token operator">=</span> res        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                temp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val                <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> temp<span class="token punctuation">:</span>                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d    d<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> e    e<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> f    cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete_duplication<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>125</code></pre><p><strong>思路2（哈希表）：</strong><br>使用哈希表辅助统计是否重复。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">delete_duplication</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token keyword">not</span> <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                hash_map<span class="token punctuation">[</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                hash_map<span class="token punctuation">[</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                    res <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        cur <span class="token operator">=</span> res        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> hash_map<span class="token punctuation">[</span>cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d    d<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> e    e<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> f    cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete_duplication<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>125</code></pre><h2 id="22-链表中倒数第K个结点">22. 链表中倒数第K个结点</h2><h3 id="题目描述-9">题目描述</h3><p>输入一个长度为n的链表，返回链表中倒数第k个结点，如果链表长度小于k，则返回None。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{1, 2, 3, 4, 5}, 2Output:{4, 5}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-9">题解</h3><p><strong>思路（快慢指针）：</strong><br>创建快慢两个指针，首先快指针先走k步，然后快慢指针同时走，知道快指针走到链表尾部，此时，慢指针指向的就是链表的倒数第k个结点。需要注意的是链表长度小于k时的处理。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_kth_to_tail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        fast <span class="token operator">=</span> head        slow <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> fast<span class="token punctuation">:</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">while</span> fast<span class="token punctuation">:</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">return</span> slow<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d    k <span class="token operator">=</span> <span class="token number">2</span>    cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_kth_to_tail<span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>45</code></pre><h2 id="23-链表中环的入口结点">23. 链表中环的入口结点</h2><h3 id="题目描述-10">题目描述</h3><p>请判断链表是否有环，如果没有则返回None，如果有则返回该链表的环的入口结点。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{1, 6}, {3, 5, 2, 4}Output:3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-10">题解</h3><p><strong>思路（快慢指针）：</strong><br>创建快慢两个指针，快指针每次走2步，慢指针每次走1步，当快慢指针相遇且不为空时，说明链表有环。</p><p>假设快指针在环中走了n圈，慢指针在环中走了m圈才相遇，且进入环之前的距离为x，环入口到相遇点的距离为y，相遇点到环入口的距离为z，则：</p><p>快指针走过的路程=x+n(y+z)+y，慢指针走过的路程=x+m(y+z)+y,而快指针走过的路程=2倍慢指针走过的路程，得到：x=(n-2m)(y+z)-y=(n-2m-1)(y+z)+z.</p><p>此时，设置一指针从头出发，每次走一步，另一指针从相遇点出发，每次也走一步，两指针会在环的入口结点相遇。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220330/397721558_1648627978736/C56F671FC2966A5E586BD6E56E19D3E3" alt="快慢指针"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">entry_node_of_loop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        fast <span class="token operator">=</span> head        slow <span class="token operator">=</span> head        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> fast <span class="token keyword">or</span> <span class="token keyword">not</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> fast <span class="token operator">==</span> slow<span class="token punctuation">:</span>                <span class="token keyword">break</span>        fast <span class="token operator">=</span> head        <span class="token keyword">while</span> fast <span class="token operator">!=</span> slow<span class="token punctuation">:</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">return</span> slow<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d    d<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> e    e<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>entry_node_of_loop<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3</code></pre><h2 id="24-反转链表">24. 反转链表</h2><h3 id="题目描述-11">题目描述</h3><p>给定一个单链表的头结点head，长度为n，反转该链表后，返回新链表的表头。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{2, 1, 5, 3, 4}Output:{4, 3, 5, 1, 2}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-11">题解</h3><p><strong>思路1（迭代）：</strong><br>设置两个指针，一个指针指向当前结点，一个指针指向当前结点的上一个结点。设置指向上一个结点的指针初始为空。遍历原始链表，每到一个结点，将遇到的结点指针逆向。断掉当前结点向后的指针，改为向前。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20211001/397721558_1633084777359/E53A90674EDC6B8D31549D8DF4E7B38E" alt="反转链表"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        pre <span class="token operator">=</span> <span class="token boolean">None</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            temp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> temp                <span class="token keyword">return</span> pre<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d    cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reverse_list<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>43512</code></pre><h3 id="题解-12">题解</h3><p><strong>思路2（递归）：</strong><br>对于每个结点，递归向下遍历到最后的尾结点，然后往上依次逆转两个结点，将逆转后的本层结点指向None，返回最底层上来的头部结点。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        new_head <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse_list<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        temp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head                <span class="token keyword">return</span> new_head<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d    cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reverse_list<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>43512</code></pre><h2 id="25-合并两个排序的链表">25. 合并两个排序的链表</h2><h3 id="题目描述-12">题目描述</h3><p>输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的结点仍然是递增的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{1, 3, 4, 10, 18}, {2, 3, 7, 8, 9}Output:{1, 2, 3, 3, 4, 7, 8, 9, 10, 18}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-13">题解</h3><p><strong>思路1（双指针迭代）：</strong><br>定义两个指针分别指向两个链表的头部，比较两个指针指向的结点值，从中取出最小的元素，然后指向最小元素的指针向后走，直到两个指针中任一个走到尾部。最后在将另一个链表的剩余部分全部取出。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20211001/397721558_1633086591658/82953D04639BD2356F6032F90DAF845F" alt="双指针"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head1<span class="token punctuation">:</span>            <span class="token keyword">return</span> head2        <span class="token keyword">if</span> <span class="token keyword">not</span> head2<span class="token punctuation">:</span>            <span class="token keyword">return</span> head1        p <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        q <span class="token operator">=</span> p        <span class="token keyword">while</span> head1 <span class="token keyword">and</span> head2<span class="token punctuation">:</span>            <span class="token keyword">if</span> head1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> head2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head1                head1 <span class="token operator">=</span> head1<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head2                head2 <span class="token operator">=</span> head2<span class="token punctuation">.</span><span class="token builtin">next</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> head1<span class="token punctuation">:</span>            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head1        <span class="token keyword">if</span> head2<span class="token punctuation">:</span>            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head2                <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>    head1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d        head2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    g <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    head2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> e    e<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> f    f<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> g    g<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> h        cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>merge<span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>123347891018</code></pre><h3 id="题解-14">题解</h3><p><strong>思路2（双指针递归）：</strong><br>每次比较两个链表当前结点的值，然后取较小值的链表指针往后，另一个不变，两段子链表作为新的链表送入递归中，递归回来的结果加在较小值的结点的后面，当两个链表有一个为空时，递归终止。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head1<span class="token punctuation">:</span>            <span class="token keyword">return</span> head2        <span class="token keyword">if</span> <span class="token keyword">not</span> head2<span class="token punctuation">:</span>            <span class="token keyword">return</span> head1        <span class="token keyword">if</span> head1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> head2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            head1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>head1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> head2<span class="token punctuation">)</span>            <span class="token keyword">return</span> head1        <span class="token keyword">else</span><span class="token punctuation">:</span>            head2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> head2<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>    head1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> d        head2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    g <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    head2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> e    e<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> f    f<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> g    g<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> h        cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>merge<span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>123347891018</code></pre><h2 id="35-复杂链表的复制">35. 复杂链表的复制</h2><h3 id="题目描述-13">题目描述</h3><p>输入一个复杂链表（每个结点中有节点值，以及两个指针，一个指向下一个结点，另一个特殊指针random指向一个随机结点，请对此链表进行深拷贝，并返回拷贝后的头结点。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{1, 2, 3, 3, 1, 1}Output:{1, 2, 3, 3, 1, 1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-15">题解</h3><p><strong>思路（双指针）：</strong><br>先遍历链表，对每个结点新建一个拷贝结点，并插入到该结点之后，然后使用双指针再次遍历链表，两个指针每次都一共两步，一个指针遍历原始结点，另一个指针遍历拷贝结点，拷贝结点的随机指针跟随原始结点，指向原始结点随机指针的下一位。最后再次使用双指针遍历链表，每次越过后一位相连，即拆分为两个链表。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220423/397721558_1650683274480/D83430A7F5827D198AD11AAFBBF96B0C" alt="双指针"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RandomListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>random <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">clone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            clone <span class="token operator">=</span> RandomListNode<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>label<span class="token punctuation">)</span>            clone<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> clone            cur <span class="token operator">=</span> clone<span class="token punctuation">.</span><span class="token builtin">next</span>        cur <span class="token operator">=</span> head        clone <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        res <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> cur<span class="token punctuation">.</span>random<span class="token punctuation">:</span>                clone<span class="token punctuation">.</span>random <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                clone<span class="token punctuation">.</span>random <span class="token operator">=</span> cur<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token builtin">next</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> clone<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                clone <span class="token operator">=</span> clone<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>        cur <span class="token operator">=</span> head        clone <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> clone<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                clone<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> clone<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            clone <span class="token operator">=</span> clone<span class="token punctuation">.</span><span class="token builtin">next</span>                    <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> RandomListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> RandomListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> RandomListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    head<span class="token punctuation">.</span>random <span class="token operator">=</span> b    a<span class="token punctuation">.</span>random <span class="token operator">=</span> head    b<span class="token punctuation">.</span>ramdom <span class="token operator">=</span> head            p <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    cur <span class="token operator">=</span> p    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>label<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token keyword">while</span> p<span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>random<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>random<span class="token punctuation">.</span>label<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>12331</code></pre><h2 id="52-两个链表的第一个公共结点">52. 两个链表的第一个公共结点</h2><h3 id="题目描述-14">题目描述</h3><p>输入两个无环的单向链表，找出他们的第一个公共结点，如果没有公共节点则返回空。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:{1,2,3},{4,5},{6,7}Output:{6, 7}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-16">题解</h3><p><strong>思路（双指针法）：</strong><br>创建两个指针分别指向两链表的初始结点，然后让指针A遍历链表1，让指针B遍历链表2，当指针A和指针B都遍历完各自的节点后，让指针A遍历链表2，让指针B遍历链表1，直到两个指针指向的结点先相等。</p><p>时间复杂度O(m+n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_first_common_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head1 <span class="token keyword">or</span> <span class="token keyword">not</span> head2<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> head1<span class="token punctuation">,</span> head2        <span class="token keyword">while</span> p <span class="token operator">!=</span> q<span class="token punctuation">:</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> p <span class="token keyword">else</span> head2            q <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> q <span class="token keyword">else</span> head1                <span class="token keyword">return</span> p<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    head1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    head1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> a    a<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> b    head2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    head2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> c    e <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> e    e<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> f    c<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> e            cur <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_first_common_node<span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span>    <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>67</code></pre><h2 id="参考文章-7">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-双指针专题</title>
      <link href="/posts/57152.html"/>
      <url>/posts/57152.html</url>
      
        <content type="html"><![CDATA[<h2 id="57-1-和为S的两个数字">57.1 和为S的两个数字</h2><h3 id="题目描述-22">题目描述</h3><p>在有序数组中找出两个数，使得和为给定的数S。如果有多对数字的和等于S，输出两个数的乘积最小的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:[1, 2, 4, 7, 11, 15], 15Output:[4, 11]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-26">题解</h3><p><strong>思路（双指针法）：</strong><br>使用双指针，一个指针指向元素较小的值，一个指针指向元素较大的值。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220420/397721558_1650457554074/06BDB11626D2FD0CA1EBF6C2777FD95C" alt="双指针法"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_numbers_with_sum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>    target <span class="token operator">=</span> <span class="token number">15</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_numbers_with_sum<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[4, 11]</code></pre><h2 id="57-2-和为S的连续正数序列">57.2 和为S的连续正数序列</h2><h3 id="题目描述-23">题目描述</h3><p>输出所有和为S的连续整数序列，数据范围为0到100。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:9Output:[[2, 3, 4], [4, 5]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-27">题解</h3><p><strong>思路（滑动窗口）：</strong><br>区间从[1, 2]开始，两个指针分别指向区间首和尾，使用公式计算区间内子元素之和，如果等于目标数，则记录下该区间的所有数字，同时左区间指针向右，若区间内的序列和小于目标数，则右区间扩展。若区间内的序列和大于目标数，则左区间向右。</p><p>时间复杂度O(n)，空间复杂度O(sqrt(n))</p><p><img src="https://uploadfiles.nowcoder.com/images/20211203/397721558_1638516207843/20A9A4EB486B238F2B1D5DCE1BDF64B6" alt="滑动窗口"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_continuous_sequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target_sum<span class="token punctuation">)</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> <span class="token number">1</span>        r <span class="token operator">=</span> <span class="token number">2</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            total <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            <span class="token keyword">if</span> total <span class="token operator">==</span> target_sum<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> total <span class="token operator">&lt;</span> target_sum<span class="token punctuation">:</span>                r <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">return</span> res    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_continuous_sequence<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[2, 3, 4], [4, 5]]</code></pre><h2 id="58-1-翻转单词序列">58.1 翻转单词序列</h2><h3 id="题目描述-24">题目描述</h3><p>给定一个句子，翻转单词的顺序，然后输出。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:"This is a sample"Output:"sample a is This"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-28">题解</h3><p><strong>思路：</strong><br>先翻转整个句子，再翻转每个单词</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20211009/397721558_1633768032973/7269932FDD7F8BA760B50D8A119A60C0" alt="翻转单词序列"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse_sentence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>        strs <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        s <span class="token operator">=</span> strs<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    strs <span class="token operator">=</span> <span class="token string">"This is a sample"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reverse_sentence<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>sample a is This</code></pre><h2 id="左旋转字符串">左旋转字符串</h2><h3 id="题目描述-25">题目描述</h3><p>将字符串S从第K位置分隔成两个子字符串，并交换这两个子字符串的位置</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:S = "abcXYZdef"K = 3Output:"XYZdefabc"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-29">题解</h3><p><strong>思路1（三次翻转）：</strong><br>先整个字符串翻转，然后将按K分割字符串，len(字符串)-k左侧的子字符串翻转，再将len(字符串)-k右侧子字符串翻转</p><p>时间复杂度O(n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">left_rotate_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>            k <span class="token operator">=</span> k <span class="token operator">%</span> n        strs <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> strs<span class="token punctuation">[</span>n<span class="token operator">-</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    strs <span class="token operator">=</span> <span class="token string">"abcXYZdef"</span>    k <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left_rotate_string<span class="token punctuation">(</span>strs<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>XYZdefabc</code></pre><p><strong>思路2（拼接）：</strong></p><p>将字符串后面再加一个字符串，然后取K到K+len(字符串)部分即可，注意保证K要小于len(字符串)。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">left_rotate_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>            k <span class="token operator">=</span> k <span class="token operator">%</span> n        strs <span class="token operator">=</span> strs <span class="token operator">*</span> <span class="token number">2</span>        <span class="token keyword">return</span> strs<span class="token punctuation">[</span>k<span class="token punctuation">:</span>n<span class="token operator">+</span>k<span class="token punctuation">]</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    strs <span class="token operator">=</span> <span class="token string">"abcXYZdef"</span>    k <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left_rotate_string<span class="token punctuation">(</span>strs<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>XYZdefabc</code></pre><h2 id="参考文章-10">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-栈队列堆专题</title>
      <link href="/posts/275.html"/>
      <url>/posts/275.html</url>
      
        <content type="html"><![CDATA[<h2 id="9-用两个栈实现队列">9. 用两个栈实现队列</h2><h3 id="题目描述-15">题目描述</h3><p>用两个栈来实现一个队列，完成队列的push和pop操作</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:["push 1", "push 2", "pop", "pop"]Output:1, 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-17">题解</h3><p><strong>思路（双栈法）：</strong><br>元素进栈后，只能优先弹出末尾元素，但是队列每次弹出的却是最先进去的元素，如果能够将栈中元素全部取出来，才能访问到最前面的元素，因此，使用另一个栈来辅助取出。</p><p>插入与删除的时间复杂度都是O(1)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>12</code></pre><h2 id="30-包含min函数的栈">30. 包含min函数的栈</h2><h3 id="题目描述-16">题目描述</h3><p>实现一个包含min()函数的栈，该方法返回当前栈中最小的值。此栈包含的方法有：</p><p>push(value)：将value压入栈中<br>pop()：弹出栈顶元素<br>top()：获取栈顶元素<br>min()：获取栈中最小元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:["push -1", "push 2", "min", "top", "pop", "push 1", "top", "min"]Output:-1, 2, 1, -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-18">题解</h3><p><strong>思路1（双栈法）：</strong><br>初始化一个原始栈和最小值栈，最小栈存储每次跟原栈中元素比较后的最小元素。</p><p>时间复杂度O(1)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>min_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>min_stack<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> node<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">min</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-121-1</code></pre><p><strong>思路2（元组）：</strong><br>使用一个栈，栈中元素是元组，元组的第一个元素是数值，第二个元素是最小值。</p><p>时间复杂度O(1)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">min</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-121-1</code></pre><h2 id="31-栈的压入、弹出序列">31. 栈的压入、弹出序列</h2><h3 id="题目描述-17">题目描述</h3><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为栈的弹出顺序，假设压入的所有数字均不相等。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:[1, 2, 3, 4, 5], [4, 5, 3, 2, 1]Output:True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-19">题解</h3><p><strong>思路1（辅助栈）：</strong><br>使用一个辅助栈来模拟，对于入栈序列，只要栈为空，则序列依次入栈，如果遇到一个栈等于出栈序列的元素，则放弃入栈，先让该元素出来。如果按照这样的方式两个序列都访问完，则说明是可以匹配入栈出栈次序的。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220421/397721558_1650532143383/7F25B229A4900F6E066BE03E92B0492E" alt="辅助栈"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">is_pop_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> push_v<span class="token punctuation">,</span> pop_v<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        j <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>push_v<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> pop_v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>push_v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> pop_v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    push_v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    pop_v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_pop_order<span class="token punctuation">(</span>push_v<span class="token punctuation">,</span> pop_v<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><h3 id="题解-20">题解</h3><p><strong>思路2（原地栈）：</strong><br>遍历push数组时，用下标n表示栈空间，用j表示出栈序列的下标，遍历每一个待入栈的元素，加入栈顶，当栈不为空时，栈顶等于当前出栈序列，就出栈，同时减少n，最后如果栈空间大小n为0时，代表全部出栈完成，否则不匹配。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">is_pop_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> push_v<span class="token punctuation">,</span> pop_v<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token number">0</span>        j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> push_v<span class="token punctuation">:</span>            push_v<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> num            <span class="token keyword">while</span> n <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> push_v<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> pop_v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>                n <span class="token operator">-=</span> <span class="token number">1</span>            n <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    push_v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    pop_v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_pop_order<span class="token punctuation">(</span>push_v<span class="token punctuation">,</span> pop_v<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><h2 id="40-最小的k个数">40. 最小的k个数</h2><h3 id="题目描述-18">题目描述</h3><p>给定一个长度为n的可能有重复值的数组，找出其中不去重的最小的k个数。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:[4, 5, 1, 6, 2, 7, 3, 8], 4Output:[1, 2, 3, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-21">题解</h3><p><strong>思路1（堆排序）：</strong><br>要找到最小的k个元素，只需要准备k个数字，之后每次遇到一个数字能够快速的与这k个数字中最大的值进行比较，每次将最大的值替换掉，那么最后剩余的就是k个最小的数字了。优先考虑大根堆，限制堆的大小为k，那么堆顶就是k个数字的最大值，如果需要替换，则将这个最大值拿出，加入新的元素就行。</p><p>时间复杂度O(nlogk), 空间复杂度O(k)</p><p><img src="https://uploadfiles.nowcoder.com/images/20210722/397721558_1626945012109/6A105C4B5BE11C9FE59934C5B4E772BF" alt="堆排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> heapq<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_least_numbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> k <span class="token keyword">and</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            pq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> pq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    heapq<span class="token punctuation">.</span>heapreplace<span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> pq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>pq<span class="token punctuation">)</span>                <span class="token keyword">return</span> res    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>    k <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_least_numbers<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[4, 3, 2, 1]</code></pre><p><strong>思路2（sort排序法）：</strong><br>对数组按照递增顺序进行排序，取前k个元素。</p><p>时间复杂度O(nlogn), 空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_least_numbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> res        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>    k <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_least_numbers<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4]</code></pre><h2 id="41-1-数据流中的中位数">41.1 数据流中的中位数</h2><h3 id="题目描述-19">题目描述</h3><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:[5,2,3,4,1,6,7,0,8]Output:[5.00, 3.50, 3.00, 3.50, 3.00, 3.50, 4.00, 3.50, 4.00]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-22">题解</h3><p><strong>思路1（插入排序）：</strong><br>使用插入排序的思路，对每个输入的元素，遍历已经有序的数组，将其插入到属于它的位置。</p><p>插入的时间复杂度是O(n)，获取中位数的时间复杂度是O(1)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>val<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>val<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>i<span class="token punctuation">,</span> num<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">get_median</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>val<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>val<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>53.533.533.543.54</code></pre><h3 id="题解-23">题解</h3><p><strong>思路2（插入排序）：</strong><br>中位数是数组中间的数字或两个数字的均值，他是数组较小的一半元素中最大的一个，同时也是较大的一半元素中最小的一个，因此可以使用堆排序。约定奇数个元素时取大顶堆的顶部值，偶数个元素时取两堆顶的平均值。</p><p>插入的时间复杂度是O(logn)，获取中位数的时间复杂度是O(1)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> heapq<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">max</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">get_median</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1.0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5.03.53.03.53.03.54.03.54.0</code></pre><h2 id="41-2-字符流中第一个不重复的字符">41.2 字符流中第一个不重复的字符</h2><h3 id="题目描述-20">题目描述</h3><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:"google"Output:"ggg#ll"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-24">题解</h3><p><strong>思路（哈希表）：</strong><br>使用哈希表统计字符出现的次数，在insert函数中对输入的字符，加到字符串最后，然后统计出现次数。在first_appearing_once函数中遍历该字符串，对于每个字符查找哈希表，返回第一个计数为1的字符，如果遍历完字符串后都没，则返回#。</p><p>插入的时间复杂度是O(1)，查询的时间复杂度是O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>strs <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>strs <span class="token operator">+=</span> char        <span class="token keyword">if</span> char <span class="token keyword">in</span> self<span class="token punctuation">.</span>hash_map<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>hash_map<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>hash_map<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">def</span> <span class="token function">first_appearing_once</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>strs<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>hash_map<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> c                <span class="token keyword">return</span> <span class="token string">'#'</span>                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_appearing_once<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_appearing_once<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_appearing_once<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_appearing_once<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_appearing_once<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_appearing_once<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>ggg#ll</code></pre><h2 id="59-滑动窗口的最大值">59. 滑动窗口的最大值</h2><h3 id="题目描述-21">题目描述</h3><p>给定一个长度为n的数组num和滑动窗口的大小size，找出所有滑动窗口里数值的最大值。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:[2, 3, 4, 2, 6, 2, 5, 1], 3Output:[4, 4, 6, 6, 6, 5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-25">题解</h3><p><strong>思路（暴力法）：</strong><br>直接遍历数组，遍历起始位置为0，终止位置为n-size，求取该区间最大值即可</p><p>时间复杂度O(mn)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">max_in_windows</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> size <span class="token keyword">or</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> res    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    size <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max_in_windows<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[4, 4, 6, 6, 6, 5]</code></pre><h2 id="参考文章-8">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 栈队列堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-数组与矩阵专题</title>
      <link href="/posts/54318.html"/>
      <url>/posts/54318.html</url>
      
        <content type="html"><![CDATA[<h2 id="3-数组中重复的数字">3. 数组中重复的数字</h2><h3 id="题目描述">题目描述</h3><p>在一个长度为n的数组里，所有数字在0到n-1的范围内。数组中某些数字是重复的，但是不知道有几个数字重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:[2, 3, 1, 0, 2, 5]Output:2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p><strong>思路1（位置重排）：</strong><br>数组长度在0到n-1的范围内，如果数字没有重复，则这些数字排序后将会和下标一一对应。因此，可遍历数组，每次检查数字与下标是否一致，一致说明它在属于它的位置上，如果不一致则将其交换到该数字作为下标的位置上，如果交换过程中，那个位置已经出现等于它下标的数字，则出现了重复。</p><p>时间复杂度 O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220421/397721558_1650511844449/985457EF766F228F555A31DC0363FE81" alt="位置重排"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>duplicate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2</code></pre><p><strong>思路2（哈希表）：</strong><br>使用哈希表记录元素出现的次数，如果遇到元素已经在哈希表上出现过，则它就重复了。</p><p>时间复杂度 O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">is_duplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> num            <span class="token keyword">else</span><span class="token punctuation">:</span>                hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_duplicate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2</code></pre><h2 id="4-二维数组中的查找">4. 二维数组中的查找</h2><h3 id="题目描述-2">题目描述</h3><p>给定一个二维数组，其每一行从左到右递增排序，从上到下也是递增排序。给定一个数，判断这个数是否在二维数组中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:array = [  [1,2,8,9],  [2,4,9,12],  [4,7,10,13],  [6,8,11,15]]target = 7Output:True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-2">题解</h3><p><strong>思路（二分查找）：</strong><br>根据题意，二维数组的左下元素要大于它上方的元素，小于它右方的元素，而右上元素要大于它左方的元素，小于它下方的元素，利用此心智，将查找部分分成一个大区间和一个小区间。先获取数组的两个边长，判断特殊情况，然后以左下角元素为起点，若它是小于目标元素，则往右移动索引，若大于目标元素，则向上移动索引，如果移动到数组边界也没找到，则说明数组中不存在目标元素。</p><p>时间复杂度 O(m + n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20210727/397721558_1627369615572/81B83FAE4B34DCEFE9C1EB670AE1CCB0" alt="二分查找"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_target</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        row<span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> target <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                i <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    array <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span>    target <span class="token operator">=</span> <span class="token number">7</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_target<span class="token punctuation">(</span>target<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><h2 id="5-替换空格">5. 替换空格</h2><h3 id="题目描述-3">题目描述</h3><p>将一个字符串中的空格替换成"%20"</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:"We Are Happy"Output:"We%20Are%20Happy"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-3">题解</h3><p><strong>思路（字符串相加）</strong>：<br>遍历字符串，如果字符为空格，则替换成%20，如果不是，则直接复制。</p><p><img src="https://uploadfiles.nowcoder.com/images/20210929/397721558_1632892080952/E442EF47D02F00479CB49CA6A2F75337" alt="字符串相加"></p><p>时间复杂度 O(n)，空间复杂度O(n)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">replace_space</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">" "</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token string">"%20"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> ch                <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">"We Are Happy"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace_space<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>We%20Are%20Happy</code></pre><h2 id="29-顺时针打印矩阵">29. 顺时针打印矩阵</h2><h3 id="题目描述-4">题目描述</h3><p>按照顺时针的方向，从外到里打印矩阵的值。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:[  [1, 2, 3, 4],  [5, 6, 7, 8],  [9, 10, 11, 12],  [13, 14, 15, 16]]Output:[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-4">题解</h3><p><strong>思路（模拟）：</strong><br>一层一层从外到里打印，观察可知每一层打印都有相同的处理方式，唯一不同的是上下左右边界的不同。打印顺序为：从左到右打印一行-&gt;从上到下打印一行-&gt;从右到左打印一行-&gt;从下到上打印一行。</p><p>时间复杂度O(mn)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">print_matrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> r1 <span class="token operator">&lt;=</span> r2 <span class="token keyword">and</span> c1 <span class="token operator">&lt;=</span> c2<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>r1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r1 <span class="token operator">!=</span> r2<span class="token punctuation">:</span>                <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>c2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> c1 <span class="token operator">!=</span> c2<span class="token punctuation">:</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>r2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span>            r1 <span class="token operator">+=</span> <span class="token number">1</span>            r2 <span class="token operator">-=</span> <span class="token number">1</span>            c1 <span class="token operator">+=</span> <span class="token number">1</span>            c2 <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    matrix <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print_matrix<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]</code></pre><h2 id="50-第一个只出现一次的字符">50. 第一个只出现一次的字符</h2><h3 id="题目描述-5">题目描述</h3><p>在一个长为n的字符串中找到第一个只出现一次的字符，并返回它的位置，如果没有则返回-1。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Input:"google"Output:4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解-5">题解</h3><p><strong>思路（哈希表）：</strong><br>首先遍历字符串，使用哈希表对每个字符出现次数进行统计，然后再遍历字符，遇到哈希表统计次数为1的字符就是第一个只出现一次的字符。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">first_not_repeating_char</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> strs<span class="token punctuation">:</span>            <span class="token keyword">if</span> s <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                hash_map<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                hash_map<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> hash_map<span class="token punctuation">[</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    strs <span class="token operator">=</span> <span class="token string">"google"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first_not_repeating_char<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4</code></pre><h2 id="参考文章-6">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组与矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法</title>
      <link href="/posts/22092.html"/>
      <url>/posts/22092.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-选择排序">1. 选择排序</h2><p>思路：首先从序列中选择最小元素，将它与序列的第一个元素交换位置，再从序列剩下的元素中选择最小的元素，将它与序列的第二个元素交换位置，不断进行这样的操作，直到将整个序列排序。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="选择排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">=</span> i            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    idx <span class="token operator">=</span> j            <span class="token keyword">if</span> idx <span class="token operator">!=</span> i<span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>            <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>select_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="2-冒泡排序">2. 冒泡排序</h2><p>思路：从左到右不断交换序列相邻逆序的元素，在一轮的循环之后，可以让未排序的最大元素上浮到右侧，持续每次对越来越少的元素重复上面的步骤。优化：在一轮循环中，如果没有发生交换，则说明序列已经是有序的，此时可以直接退出。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="冒泡排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>  arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>                 <span class="token keyword">break</span>                <span class="token keyword">return</span> arr    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前: </span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bubble_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前: [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="3-插入排序">3. 插入排序</h2><p>思路：插入元素时，在左侧已排序序列中从后到前扫描，找到相应位置并插入，插入到左侧已经排序的序列中，使得插入之后左侧序列依旧有序。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="插入排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>insert_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="4-希尔排序">4. 希尔排序</h2><p>思路：对于大规模的序列，插入排序很慢，因为它只能交换相邻元素，每次只能将逆序数量减1。希尔排序先将整个待排序的序列分割为若干个子序列分别进行直接插入排序，通过交换不相邻的元素，每次减少的逆序数量大于1。希尔排序使用插入排序对间隔h的序列进行排序，通过不断减少h，最后令h=1，可以使整个序列有序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        h <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> h <span class="token operator">&lt;</span> n <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">:</span>            h <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">while</span> h <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">:</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            h <span class="token operator">=</span> h <span class="token operator">//</span> <span class="token number">3</span>                <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shell_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="5-归并排序">5. 归并排序</h2><p>思路：归并排序采用的是分治法，即将序列分为两部分，分别进行排序，然后归并起来。首先申请空间用来存放合并后的序列，其大小为两个已排序序列之和，然后设定两个指针，分别指向为两个已排序序列的起始位置，比较两个指针所指向的元素，选择相对较小的元素存入合并空间，并移动指针到下一个位置，重复上述操作直到某一指针到达序列尾，将另一序列剩下的所有元素直接复制到合并序列尾。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif" alt="归并排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> arr        mid_idx <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>mid_idx<span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>self<span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> left<span class="token punctuation">:</span>            result <span class="token operator">+=</span> left        <span class="token keyword">if</span> right<span class="token punctuation">:</span>            result <span class="token operator">+=</span> right                <span class="token keyword">return</span> result                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="6-快速排序">6. 快速排序</h2><p>思路：快速排序通过从数列中挑出一个元素作为基准，将序列分为两个子序列，左子序列所有元素小于等于切分元素，右子序列所有元素大于等于切分元素，然后再将这两个子序列切分排序重复上述操作，最终得到排序好的序列。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="快速排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left_idx <span class="token operator">&lt;</span> right_idx<span class="token punctuation">:</span>            partition_idx <span class="token operator">=</span> self<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> partition_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partition_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span>            <span class="token keyword">return</span> arr        <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>right_idx<span class="token punctuation">]</span>        i <span class="token operator">=</span> left_idx <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>right_idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="7-堆排序">7. 堆排序</h2><p>思路：利用堆这种数据结构所设计的一种排序算法，堆是一棵完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）其父节点，即大顶堆（小顶堆）。把最大元素和当前堆中序列的最后一个元素交换位置，并且不删除它。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif" alt="堆排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>build_max_heap<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">build_max_heap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>        right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>        largest <span class="token operator">=</span> i        <span class="token keyword">if</span> left <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>length <span class="token keyword">and</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>            largest <span class="token operator">=</span> left        <span class="token keyword">if</span> right <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>length <span class="token keyword">and</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>            largest <span class="token operator">=</span> right        <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span>heap_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="8-计数排序">8. 计数排序</h2><p>思路：核心在于将输入的数据值转化为键存储在额外开辟的数组空间，先找出待排序数组中最大和最小的元素，统计数组中每个值为i的元素出现的次数，存入数组的第i项，对所有的计数累加，反向填充目标数组，将每个元素i放在新数组的第i项，每放一个元素就将对应位置减去1。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/countingSort.gif" alt="计数排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        sort_idx <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>         <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>sort_idx<span class="token punctuation">]</span> <span class="token operator">=</span> j                sort_idx <span class="token operator">+=</span> <span class="token number">1</span>                bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">return</span> arr    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>counting_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="9-桶排序">9. 桶排序</h2><p>思路：桶排序是计数排序的升级版，利用了函数的映射关系。需要注意，在额外空间充足的情况下，尽量增大桶的数量，尽量使用映射函数能够将n个数据均匀的分配到k个桶中。</p><p>元素分布在桶中：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_1.svg_.png" alt="桶排序-a"></p><p>元素在每个桶中排序:</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_2.svg_.png" alt="桶排序-b"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        bucket <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            bucket<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                arr <span class="token operator">+=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> arr    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bucket_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="10-基数排序">10. 基数排序</h2><p>思路：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/radixSort.gif" alt="基数排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        iter_cnt <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>max_value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iter_cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>            bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> n <span class="token keyword">in</span> arr<span class="token punctuation">:</span>                idx <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">**</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>                bucket<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            arr<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> b <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>                arr <span class="token operator">+=</span> b            <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>radix_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="11-小结">11. 小结</h2><table><thead><tr><th>排序算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>选择排序</td><td>×</td><td>N^2</td><td>1</td><td></td></tr><tr><td>冒泡排序</td><td>√</td><td>N^2</td><td>1</td><td></td></tr><tr><td>插入排序</td><td>√</td><td>N^2</td><td>1</td><td>时间复杂度和初始顺序有关</td></tr><tr><td>希尔排序</td><td>×</td><td>NlogN</td><td>1</td><td>改进版插入排序</td></tr><tr><td>归并排序</td><td>√</td><td>NlogN</td><td>N</td><td></td></tr><tr><td>快速排序</td><td>×</td><td>NlogN</td><td>logN</td><td></td></tr><tr><td>堆排序</td><td>×</td><td>NlogN</td><td>1</td><td>无法利用局部性原理</td></tr><tr><td>计数排序</td><td>√</td><td>n + k</td><td>k</td><td></td></tr><tr><td>桶排序</td><td>√</td><td>n + k</td><td>n + k</td><td></td></tr><tr><td>基数排序</td><td>√</td><td>n x k</td><td>n + k</td><td></td></tr></tbody></table><h2 id="参考文章-9">参考文章</h2><p>本文是笔者通过下列网站学习排序算法的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.html">【CS-Notes】</a></li><li><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">【菜鸟教程排序算法】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令记录</title>
      <link href="/posts/13057.html"/>
      <url>/posts/13057.html</url>
      
        <content type="html"><![CDATA[<h2 id="仓库">仓库</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 在当前目录初始化一个Git代码库</span><span class="token command">$ git init</span><span class="token comment"># 新建一个目录，将其初始化为Git代码库</span><span class="token command">$ git init [project-name]</span><span class="token comment"># 从远程下载一个项目和它的整个代码历史</span><span class="token command">$ git clone [url]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置">配置</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 显示当前的Git配置</span><span class="token command">$ git config<span class="token parameter"> --list</span></span><span class="token comment"># 编辑Git配置文件</span><span class="token command">$ git config<span class="token parameter"> -e</span> [--global]</span><span class="token comment"># 设置提交代码时的用户信息</span><span class="token command">$ git config [--global] user.name </span><span class="token string">"[your_name]"</span><span class="token command">$ git config [--global] user.email </span><span class="token string">"[your_email]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加-删除文件">增加/删除文件</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 添加指定文件到暂存区</span><span class="token command">$ git add [file1] [file2] ...</span><span class="token comment"># 添加指定目录到暂存区，包括子目录</span><span class="token command">$ git add [dir]</span><span class="token comment"># 添加当前目录的所有文件到暂存区</span><span class="token command">$ git add .</span><span class="token comment"># 添加每个变化前，都会要求确认</span><span class="token comment"># 对于同一文件的多处变化，可以实现分次提交</span><span class="token command">$ git add<span class="token parameter"> -p</span></span><span class="token comment"># 删除工作区文件，并且将这次删除放入缓存区</span><span class="token command">$ git rm [file1] [file2] ...</span><span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span><span class="token command">$ git rm<span class="token parameter"> --cached</span> [file]</span><span class="token comment"># 改名文件，并将这个改名放入暂存区</span><span class="token command">$ git mv [file-original] [file-renamed]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码提交">代码提交</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 提交缓存区到仓库区</span><span class="token command">$ git commit<span class="token parameter"> -m</span> </span><span class="token string">"[message]"</span><span class="token comment"># 提交缓存区的指定文件到仓库区</span><span class="token command">$ git commit [file1] [file2] ..<span class="token parameter"> -m</span> </span><span class="token string">"[message]"</span><span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span><span class="token command">$ git commit<span class="token parameter"> -a</span></span><span class="token comment"># 提交时显示所有diff信息</span><span class="token command">$ git commit<span class="token parameter"> -v</span></span><span class="token comment"># 使用一次新的commit，提到上一次的提交</span><span class="token comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><span class="token command">$ git commit<span class="token parameter"> --amend</span><span class="token parameter"> -m</span> </span><span class="token string">"[message]"</span><span class="token comment"># 重做上一次commit，并包括指定文件的新变化</span><span class="token command">$ git commit<span class="token parameter"> --amend</span> [file1] [file2] ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支">分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 列出所有本地分支</span><span class="token command">$ git branch</span><span class="token comment"># 列出所有远程分支</span><span class="token command">$ git branch<span class="token parameter"> -r</span></span><span class="token comment"># 列出所有本地分支和远程分支</span><span class="token command">$ git branch<span class="token parameter"> -a</span></span><span class="token comment"># 新建一个分支，但依然停留在当前分支</span><span class="token command">$ git branch [branch-name]</span><span class="token comment"># 新建一个分支，并切换到该分支</span><span class="token command">$ git checkout<span class="token parameter"> -b</span> [branch]</span><span class="token comment"># 新建一个分支，指向指定commit</span><span class="token command">$ git branch [branch] [commit-id]</span><span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span><span class="token command">$ git branch<span class="token parameter"> --track</span> [branch] [remote-branch]</span><span class="token comment"># 切换到指定分支，并更新工作区</span><span class="token command">$ git checkout [branch]</span><span class="token comment"># 切换到上一个分支</span><span class="token command">$ git checkout -</span><span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span><span class="token command">$ git branch<span class="token parameter"> --set</span>-upstream [branch] [remote-branch]</span><span class="token comment"># 合并指定分支到当前分支</span><span class="token command">$ git merge [branch]</span><span class="token comment"># 选择一个commit，合并进当前分支</span><span class="token command">$ git cherry-pick [commit-id]</span><span class="token comment"># 删除分支</span><span class="token command">$ git branch<span class="token parameter"> -d</span> [branch]</span><span class="token comment"># 删除远程分支</span><span class="token command">$ git push origin<span class="token parameter"> --delete</span> [remote-branch]</span><span class="token command">$ git branch<span class="token parameter"> -dr</span> [remote-branch]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标签">标签</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 列出所有tag</span><span class="token command">$ git tag</span><span class="token comment"># 新建一个tag在当前commit</span><span class="token command">$ git tag [tag-name]</span><span class="token comment"># 新建一个tag在指定commit</span><span class="token command">$ git tag [tag-name] [commit-id]</span><span class="token comment"># 删除本地tag</span><span class="token command">$ git tag<span class="token parameter"> -d</span> [tag-name]</span><span class="token comment"># 删除远程tag</span><span class="token command">$ git push origin :refs/tags/[tag-name]</span><span class="token comment"># 查看tag信息</span><span class="token command">$ git show [tag-name]</span><span class="token comment"># 提交指定tag</span><span class="token command">$ git push [remote] [tag-name]</span><span class="token comment"># 提交所有tag</span><span class="token command">$ git push [remote]<span class="token parameter"> --tags</span></span><span class="token comment"># 新建一个分支，指向某个tag</span><span class="token command">$ git checkout<span class="token parameter"> -b</span> [branch] [tag-name]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看信息">查看信息</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 显示有变更的文件</span><span class="token command">$ git status</span><span class="token comment"># 显示当前分支的版本历史</span><span class="token command">$ git log</span><span class="token comment"># 显示commit历史，以及每次commit发生变更的文件</span><span class="token command">$ git log<span class="token parameter"> --stat</span></span><span class="token comment"># 根据关键词搜索提交历史</span><span class="token command">$ git log<span class="token parameter"> -S</span> [keyword]</span><span class="token comment"># 显示某个commit之后的所有变动，每个commit占据一行</span><span class="token command">$ git log [tag] HEAD<span class="token parameter"> --pretty</span>=format:%s</span><span class="token comment"># 显示某个commit之后的所有变动，其“提交说明”必须符合搜索条件</span><span class="token command">$ git log [tag] HEAD<span class="token parameter"> --grep</span> feature</span><span class="token comment"># 显示某个文件的版本历史，包括文件改名</span><span class="token command">$ git log<span class="token parameter"> --follow</span> [file]</span><span class="token command">$ git watchanged [file]</span><span class="token comment"># 显示指定文件相关的每一个diff</span><span class="token command">$ git log<span class="token parameter"> -p</span> [file]</span><span class="token comment"># 显示过去5次提交</span><span class="token command">$ git log<span class="token parameter"> -5</span><span class="token parameter"> --pretty</span><span class="token parameter"> --oneline</span></span><span class="token comment"># 显示所有提交过的用户，按提交次数排序</span><span class="token command">$ git shortlog<span class="token parameter"> -sn</span></span><span class="token comment"># 显示指定文件时什么人在什么时间修改过</span><span class="token command">$ git blame [file]</span><span class="token comment"># 显示暂存区和工作区的差异</span><span class="token command">$ git diff</span><span class="token comment"># 显示暂存区和上一个commit的差异</span><span class="token command">$ git diff<span class="token parameter"> --cached</span> [file]</span><span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span><span class="token command">$ git diff [first-branch]...[second-branch]</span><span class="token comment"># 显示你今天写了多少行代码</span><span class="token command">$ git diff<span class="token parameter"> --shortstate</span> </span><span class="token string">"@{0 day ago}"</span><span class="token comment"># 显示某次提交的元数据和内容变化</span><span class="token command">$ git show [commit-id]</span><span class="token comment"># 显示某次提交发生变化的文件</span><span class="token command">$ git show<span class="token parameter"> --name</span>-only [commit]</span><span class="token comment"># 显示某次提交时，某个文件的内容</span><span class="token command">$ git show [commit]:[filename]</span><span class="token comment"># 显示当前分支的最近几次提交</span><span class="token command">$ git reflog</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程同步">远程同步</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 下载远程仓库的所有变动</span><span class="token command">$ git fetch [remote]</span><span class="token comment"># 显示所有远程仓库</span><span class="token command">$ git remote<span class="token parameter"> -v</span></span><span class="token comment"># 显示某个远程仓库的信息</span><span class="token command">$ git remote show [remote]</span><span class="token comment"># 增加一个新的远程仓库，并命名</span><span class="token command">$ git remote add [name] [url]</span><span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span><span class="token command">$ git pull [remote] [branch]</span><span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span><span class="token command">$ git push [remote]<span class="token parameter"> --force</span></span><span class="token comment"># 推送所有分支到远程仓库</span><span class="token command">$ git push [remote]<span class="token parameter"> --all</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="撤销">撤销</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 恢复暂存区的指定文件到工作区</span><span class="token command">$ git checkout [file]</span><span class="token comment"># 恢复某个commit的指定文件到暂存区和工作区</span><span class="token command">$ git checkout [commit] [file]</span><span class="token comment"># 恢复暂存区的所有文件到工作区</span><span class="token command">$ git checkout .</span><span class="token comment"># 重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变</span><span class="token command">$ git reset [file]</span><span class="token comment"># 重置缓存区和工作区，与上一次commit保持一致</span><span class="token command">$ git reset<span class="token parameter"> --hard</span></span><span class="token comment"># 重置当前分支的指针为指定commit，同时重置缓存区，但工作区不变</span><span class="token command">$ git reset [commit-id]</span><span class="token comment"># 重置当前分支的指针为指定commit，同时重置缓存区和工作区，与指定comiit一致</span><span class="token command">$ git reset<span class="token parameter"> --hard</span> [commit-id]</span><span class="token comment"># 重置当前指针为指定commit，但保持暂存区和工作区不变</span><span class="token command">$ git reset<span class="token parameter"> --keep</span> [commit-id]</span><span class="token comment"># 新建一个commit，用来撤销指定commit</span><span class="token comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><span class="token command">$ git revert [commit-id]</span><span class="token comment"># 暂时将未提交的变化移除，并且保存</span><span class="token command">$ git stash save </span><span class="token string">"tag"</span><span class="token comment"># 将保存的未提交的变化移入工作区</span><span class="token command">$ git stash pop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> Git命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语言进阶学习笔记</title>
      <link href="/posts/16133.html"/>
      <url>/posts/16133.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-特性">1. 特性</h2><p><strong>特性（Attribute）是一种用于在程序运行时传递各种元素（例如类、方法、结构、枚举等）行为信息的声明性代码</strong>。使用特性可以将元数据（例如编译器指令、注释、描述、方法和类等信息）添加到程序中。<strong>.Net Framework</strong> 提供了两种类型的特性，分别是预定义特性和自定义特性。</p><p>在C#中，特性具有以下属性：</p><ul><li>使用特性可以向程序中添加元数据，元数据是指程序中各种元素的相关信息，所有.NET程序中都包含一组指定的元数据；</li><li>可以将一个或多个特性应用于整个程序、模块或者较小的程序元素（例如类或属性）中；</li><li>特性可以像方法和属性一样接收自变量；</li><li>程序可使用反射来检查自己的元数据或其他程序中的元数据</li></ul><p>定义特性的语法如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">[attribute(positional_parameters, name_parameter=value, ...)]element<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，<code>[]</code>中用来定义特性的名称和值，<code>positional_parameters</code>用来指定基本信息，<code>name_parameter</code>用来指定可选信息</p><h3 id="1-1-预定义特性">1.1 预定义特性</h3><p><strong>.Net Framework</strong>中提供了三个预定义的属性：<code>AttributeUsage</code>、<code>Conditional</code>和<code>Obsolete</code>。</p><p><strong>AttributeUsage</strong></p><p>预定义特性<code>AttributeUsage</code>用来描述如何使用自定义特性类，其中定义了可以引用特性的项目类型。其语法如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">[AttributeUsage(    validon,    AllowMultiple = allowmultiple,    Inherited = inherited)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数<code>validon</code>用来定义特性可被放置的语言元素，它是枚举器<strong>AttributeTargets</strong>的值的集合，默认是<strong>AttributeTargets.All</strong></li><li>参数<code>allowmultiple</code>（可选参数）用来为该特性的<strong>AllowMultiple</strong>属性（property）提供一个布尔值，默认为false，单用的，如果为true表示多用的</li><li>参数<code>inherited</code>（可选参数）用来对该特性的Inherited属性（property）提供一个布尔值，默认为false，不被继承的，如果为true表示可被派生类继承</li></ul><p>示例代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span>                AttributeTargets<span class="token punctuation">.</span>Constructor <span class="token operator">|</span>                 AttributeTargets<span class="token punctuation">.</span>Field <span class="token operator">|</span>                 AttributeTargets<span class="token punctuation">.</span>Method <span class="token operator">|</span>                AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">,</span>                AllowMultiple<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Conditional</strong></p><p>预定义特性<code>Conditional</code>用来定义条件方法。<code>Conditional</code>属性通过测试条件编译符号来确定适用的条件，当运行到一个条件方法调用时，是否执行该调用，要根据出现该调用时是否已定义了此符号来确定。使用<code>Conditional</code>是封闭<code>#if</code>和<code>#endif</code>内部方法的替代方法，它更整洁、别致、减少出错的机会。其语法如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">[Conditional(conditionalSymbol)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">define</span> DEBUG</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ConditionalTest</span>    <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Conditional</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DEBUG"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token string">"Func1函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Conditional</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"BUG"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token string">"Func2函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token string">"Main函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// Main函数</span>    <span class="token comment">// Func1函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Obsolete</strong></p><p>预定义特性<code>Obsolete</code>用来标记不应该被使用的程序，可以使用它来通知编译器放弃某个目标元素。例如当你需要使用一个新方法来代替类中的某个旧方法时，就可以使用该特性将旧方法标记为<code>Obsolete</code>（过时）的并输出一条信息，来提示我们应该使用新方法替代旧方法。其语法格式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">[Obsolete(message)][Obsolete(message, iserror)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>参数<code>message</code>是一个用来描述项目为什么过时以及用什么替代的字符串</li><li>参数<code>iserror</code>是一个布尔值，默认值为false，如果设置为true，则编译器会把该项目当做一个错误</li></ul><p>示例代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ObsoleteTest</span>    <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"OldMethod已弃用，请改用NewMethod"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"已弃用的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NewMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"新定义的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Main.cs(17,13): error CS0619: `Application.ObsoleteTest.OldMethod()' is obsolete: `OldMethod已弃用，请改用NewMethod'</span>        <span class="token comment">// Compilation failed: 1 error(s), 0 warnings</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-自定义特性">1.2 自定义特性</h3><p><strong>.Net Framework</strong>允许创建自定义特性，自定义特性不仅可以用于存储声明性的信息，还可以在运行时被检索。创建并使用自定义特性分为四个步骤：</p><ul><li>声明自定义特性</li><li>构建自定义特性</li><li>在目标程序上应用自定义特性</li><li>通过反射访问自定义特性</li></ul><p>最后一步涉及编写一个简单的程序来读取元数据以便查找各种符号。元数据是有关数据或用于描述其他数据信息的数据，该程序应在运行时使用反射来访问属性。</p><p><strong>声明自定义特性</strong></p><p>自定义特性应该继承System.Attribute类，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>    AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span>    AllowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    Inherited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomethingAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构建自定义特性</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomethingAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name    <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Data    <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span> data <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SomethingAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用自定义特性</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[SomethingAttribute("Amy", data = "Name is Amy")][SomethingAttribute("Tom", data = "Name is Tom")]class Test</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>访问自定义特性</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> something <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SomethingAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">SomethingAttribute</span> each <span class="token keyword">in</span> something<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Name: {0}"</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Data: {0}"</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-反射">2. 反射</h2><p>**反射（Reflection）是指程序可以访问、检查、修改它本身行为或状态的一种能力。**反射中提供了用来描述程序集、模块和类型的对象，可以使用反射动态地创建类型的实例，并将类型绑定到现有对象，或者从现有对象中获取类型，然后调用其方法或访问其字段和属性。如果代码中使用了特性，也可以利用反射来访问。</p><h3 id="2-1-反射优缺点">2.1 反射优缺点</h3><p>优点：</p><ul><li>反射提高了程序的灵活性和扩展性</li><li>降低耦合性，提高自适应能力</li><li>运行程序创建和控制任何类的对象，无需提前硬编码目标类</li></ul><p>缺点：</p><ul><li>性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和扩展性要求高的系统框架上，普通程序不建议使用</li><li>使用反射会模糊程序内部逻辑，程序希望在源代码中看到程序逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂</li></ul><h3 id="2-2-反射用途">2.2 反射用途</h3><ul><li>允许在运行时查看特性信息</li><li>允许审查集合中的各种类型，以及实例化这些类型</li><li>允许延迟绑定的方法和属性</li><li>允许在运行时创建新类型，然后使用这些类型执行一些任务</li></ul><h3 id="2-3-查看元数据">2.3 查看元数据</h3><p>使用反射可以查看特性信息，<strong>System.Reflection</strong>类的 <strong>MemberInfo</strong> 对象需要被初始化，用于发现与类相关的特性，为此可以定义目标类的一个对象：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelpAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> Url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Topic    <span class="token punctuation">{</span>        <span class="token keyword">get</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> topic<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">set</span>        <span class="token punctuation">{</span>            topic <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HelpAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>Url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> topic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HelpAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Infomation to the class MyClass"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>MemberInfo</span> info <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> attributes <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attributes<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// HelpAttribute</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-属性">3. 属性</h2><p><strong>属性（Property）是类、结构和接口的命名成员</strong>。类或结构中的成员变量或方法称为域，属性是域的扩展，且可以使用相同的语法来访问，他们使用访问器让私有域的值可被读写或操作。</p><p>属性不会确定存储位置，他们具有可读写或计算他们值的访问器。</p><p>例如，一个名为Student的类，带有age、name或code的私有域，我们不能在类的范围外直接访问这些域，但是可以拥有访问这些私有域的属性。</p><h3 id="3-1-get-set访问器">3.1 get/set访问器</h3><p>属性的访问器包括获取或写入属性的可执行语句，访问器可包含一个<strong>get访问器</strong>或一个<strong>set访问器</strong>，或者两种都包含。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Teacher</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span>             <span class="token punctuation">{</span>                <span class="token keyword">return</span> name<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 简写形式</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Name = "</span> <span class="token operator">+</span> Name <span class="token operator">+</span> <span class="token string">", Age = "</span> <span class="token operator">+</span> Age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">PropertiesTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Zhang"</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Teacher Info: {0}"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Teacher Info: {0}"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Teacher Info: Name = Zhang, Age = 26</span>            <span class="token comment">// Teacher Info: Name = Zhang, Age = 27</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-抽象属性">3.2 抽象属性</h3><p>在抽象类中可以拥有抽象属性，这些属性会在派生类中实现。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Person</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Project <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"Project = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Project</span><span class="token punctuation">}</span></span><span class="token string">, Name = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string">, Age = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Age</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">AbstractPropertiesTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Project <span class="token operator">=</span> <span class="token string">"Math"</span><span class="token punctuation">,</span>                Name <span class="token operator">=</span> <span class="token string">"Zhang"</span><span class="token punctuation">,</span>                Age <span class="token operator">=</span> <span class="token number">26</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Teacher Info: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Age<span class="token operator">++</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Teacher Info: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Teacher Info: Project = Math, Name = Zhang, Age = 26</span><span class="token comment">// Teacher Info: Project = Math, Name = Zhang, Age = 27</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-索引器">4. 索引器</h2><p><strong>索引器（Indexer）是类中的一个特殊成员，他能够让对象以类似数组的形式来操作</strong>，使程序看起来更直观、更易编写。索引器与属性类似，在定义索引器时同样会get和set访问器，不同的是，访问索引器需要提供相应的参数。</p><h3 id="4-1-索引器定义">4.1 索引器定义</h3><p>索引器允许对象使用下标的方式来访问，定义时，该类的行为会像一个虚拟数组一样，可以使用数组访问符<code>[ ]</code>来访问类的成员。</p><p>其语法为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">element-type this[int index]{    // get访问器    get    {        // 返回index指定的值    }    // set访问器    set    {        // 设置index指定的值    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-索引器用途">4.2 索引器用途</h3><p>索引器实例数据分为更小的部分，并索引每部分，获取或设置每部分。索引器定义时不带名称，但带this关键字，它指向对象实例。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IndexedNames</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span>        <span class="token punctuation">{</span>            <span class="token keyword">get</span>            <span class="token punctuation">{</span>                <span class="token class-name"><span class="token keyword">string</span></span> tmp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span> tmp <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">IndexedNames</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"BBB"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"CCC"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> IndexedNames<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// AAA</span>        <span class="token comment">// BBB</span>        <span class="token comment">// CCC</span>        <span class="token comment">// NAN</span>        <span class="token comment">// NAN</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-重载索引器">4.3 重载索引器</h3><p>索引器可以被重载，而且在声明索引器时也可以带多个参数，每个参数可以是不同的类型，另外，索引器的索引不必是整数，也可以是其他类型，例如字符串类型。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IndexedNames</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span>        <span class="token punctuation">{</span>            <span class="token keyword">get</span>            <span class="token punctuation">{</span>                <span class="token class-name"><span class="token keyword">string</span></span> tmp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span> tmp <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">]</span>        <span class="token punctuation">{</span>            <span class="token keyword">get</span>            <span class="token punctuation">{</span>                <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> name<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">return</span> index<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"BBB"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"CCC"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> IndexedNames<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"'BBB'的索引为: {0}"</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span><span class="token string">"BBB"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// AAA</span>        <span class="token comment">// BBB</span>        <span class="token comment">// CCC</span>        <span class="token comment">// NAN</span>        <span class="token comment">// NAN</span>        <span class="token comment">// 'BBB'的索引为: 1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-委托">5. 委托</h2><p>**委托（Delegate）类似于C或C++中函数的指针，是存有对某个方法的引用的一种引用类型的变量。**引用可在运行时被改变。</p><p>委托特别用于实现事件和回调方法，所有的委托都派生自<strong>System.Delegate</strong>类。</p><h3 id="5-1-声明委托">5.1 声明委托</h3><p>委托声明决定了可由委托引用的方法。委托可指向一个与其具有相同标签的方法。</p><p>声明委托的语法如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">delegate <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>return</span> <span class="token attr-name">type</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate-name</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span> <span class="token attr-name">list</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-实例化委托">5.2 实例化委托</h3><p>声明委托类型后，委托对象必须由<code>new</code>关键字来创建，且与一个特定的方法关联。当创建委托时，传递到new语句的参数就像方法调用一样书写，但是不带参数。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 声明委托</span><span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DelegateTest1</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MulNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 实例化委托</span>            <span class="token class-name">NumberChanger</span> nc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger</span> nc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>MulNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用委托对象调用方法</span>            <span class="token function">nc1</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Value of Num: {0}"</span><span class="token punctuation">,</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Value of Num: 35</span>            <span class="token function">nc2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Value of Num: {0}"</span><span class="token punctuation">,</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Value of Num: 175</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-委托多播">5.3 委托多播</h3><p>委托对象可以使用<code>+</code>运算符进行合并。一个合并委托调用它所合并的两个委托，只有同类型的委托才能被合并。<code>-</code>运算符可用于从合并的委托中移除组件委托。</p><p>使用委托合并或移除的操作，可以创建一个委托被调用时要调用的方法的调用类别，这称为委托的多播。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 声明委托</span><span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DelegateTest2</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MulNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 实例化委托</span>            <span class="token class-name">NumberChanger</span> nc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger</span> nc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>MulNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger</span> nc <span class="token operator">=</span> nc1 <span class="token operator">+</span> nc2<span class="token punctuation">;</span>            <span class="token comment">// 调用多播</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Value of Num: {0}"</span><span class="token punctuation">,</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Value of Num: 75</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-事件">6. 事件</h2><p><strong>事件（Event）基本上说是一个用户操作</strong>，例如按键、点击、鼠标移动等，或者<strong>是一些提示信息</strong>，如系统生成的通知。<strong>应用程序需要在事件发生时响应事件</strong>。C#中使用事件机制实现线程间的通信。</p><h3 id="6-1-声明事件">6.1 声明事件</h3><p>在类的内部声明事件，首先必须声明该事件的委托类型，如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LogHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，声明事件本身，使用<code>event</code>关键字：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">LogHandler</span> EventLog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码定义了一个名为<strong>EventLog</strong>的事件和一个名为<strong>LogHandler</strong>的委托，该事件在生成时会调用委托。</p><h3 id="6-2-使用事件">6.2 使用事件</h3><p>示例1：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span>    <span class="token punctuation">{</span>        <span class="token comment">// 定义一个委托</span>        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 定义一个事件</span>        <span class="token keyword">public</span> <span class="token class-name">MyDelegate</span> MyDelegateEvent<span class="token punctuation">;</span>        <span class="token comment">// 定义一个事件的触发函数</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnMyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MyDelegateEvent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// 执行事件</span>                <span class="token function">MyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">EventTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PutOutChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I was fired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PutOutChar2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            COnsole<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I was fired too"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 实例化MyEvent类</span>            <span class="token class-name">MyEvent</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 注册一个事件</span>            myEvent<span class="token punctuation">.</span>MyDelegateEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>PutOutChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            myEvent<span class="token punctuation">.</span>MyDelegateEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>PutOutChar2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 执行触发事件的函数</span>            myEvent<span class="token punctuation">.</span><span class="token function">OnMyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 解绑一个事件</span>            myEvent<span class="token punctuation">.</span>MyDelegateEvent <span class="token operator">-=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>putOutChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 再次执行触发事件的函数</span>            myEvent<span class="token punctuation">.</span><span class="token function">OnMyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// I was fired</span><span class="token comment">// I was fired too</span><span class="token comment">// I was fired too</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token comment">// 发布器</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token comment">// 定义一个委托</span>        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyDelegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 定义一个事件</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">MyDelegate</span> MyEvent<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">value</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token comment">// 触发事件</span>            <span class="token function">MyEvent</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 订阅器</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subscriber</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintF</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Publisher</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Subscriber</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>MyEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Publisher<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>PrintF<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-集合">7. 集合</h2><p><strong>集合（Collection）类是专门用于数据存储和检索的类，这些类提供了对栈（Stack）、队列（Queue）、列表（List）和哈希表（Hashtable）的支持。大多数集合类实现了相同的接口。</strong></p><p>集合类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等，这些类创建Object类的对象的集合，<strong>在C#在，Object类是所有数据类型的基类</strong>。</p><h3 id="7-1-动态数组ArrayList">7.1 动态数组ArrayList</h3><p><strong>动态数组ArrayList代表了可被单独索引的对象的有序集合</strong>，它基本上可以替代一个数组。与数组不同的是，可以使用索引在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。</p><p>下表为ArrayList类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Capacity</code></td><td>获取或设置ArrayList可包含的元素个数</td><td><code>Count</code></td><td>获取ArrayList中实际包含的元素个数</td></tr><tr><td><code>IsFixedSize</code></td><td>获取一个值，表示ArrayList是否具有固定大小</td><td><code>IsReadOnly</code></td><td>获取一个值，表示ArrayList是否只读</td></tr><tr><td><code>IsSynchronized</code></td><td>获取一个值，表示访问ArrayList是否同步（线程安全）</td><td><code>Item[Int32]</code></td><td>获取或设置指定索引处的元素</td></tr><tr><td><code>SyncRoot</code></td><td>获取一个对象用于同步访问ArrayList</td><td></td><td></td></tr></tbody></table><p>下表为ArrayList类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual int Add(object value);</code></td><td>在ArrayList的列表末尾添加一个对象</td><td><code>public virtual void AddRange(ICollection c);</code></td><td>在ArrayList的列表末尾添加ICollection的元素</td></tr><tr><td><code>public virtual void Clear();</code></td><td>在ArrayList中移除所有元素</td><td><code>public virtual bool Contains(object item);</code></td><td>判断某个元素是否存在ArrayList中</td></tr><tr><td><code>public virtual ArrayList GetRange(int index, int count);</code></td><td>返回一个ArrayList，表示源ArrayList中元素的子集</td><td><code>public virtual int IndexOf(object);</code></td><td>返回某个值在ArrayLust中第一次出现的索引，索引从零开始</td></tr><tr><td><code>public virtual void Insert(int index, object value);</code></td><td>在ArrayList指定索引处插入一个元素</td><td><code>public virtual void InsertRange(int index, ICollection c);</code></td><td>在ArrayList的指定索引处，插入某个集合的元素</td></tr><tr><td><code>public virtual void Remove(object obj);</code></td><td>从ArrayList中移除第一次出现的指定对象</td><td><code>public virtual void RemoveAt(int index);</code></td><td>移除ArrayList的指定索引处的元素</td></tr><tr><td><code>public virtual void RemoveRange(int index, int count);</code></td><td>在ArrayList中移除某个范围的元素</td><td><code>public virtual void Reverse();</code></td><td>逆转ArrayList在元素的顺序</td></tr><tr><td><code>public virtual void SetRange(int index, ICollection c);</code></td><td>复制某个集合的元素到ArrayList中某个范围的元素上</td><td><code>public virtual void Sort();</code></td><td>对ArrayList中的元素进行排序</td></tr><tr><td><code>public virtual void TrimToSize();</code></td><td>设置容量为ArrayList中元素的实际个数</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ArrayList</span> arrList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Capacity: {0}"</span><span class="token punctuation">,</span> arrList<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Capacity: 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}"</span><span class="token punctuation">,</span> arrList<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Count: 5</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> e <span class="token keyword">in</span> arrList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 42 35 55 29 7</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Sorted: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> e <span class="token keyword">in</span> arrList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Sorted: 7 29 35 42 55</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> e <span class="token keyword">in</span> arrList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Sorted: 55 42 35 29 7</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-哈希表Hashtable">7.2 哈希表Hashtable</h3><p><strong>哈希表Hashtable类代表了一系列基于键的哈希代码组织起来的键/值对</strong>。它是由键来访问集合中的元素。哈希表中的每一项都有一个键/值对，键用于访问集合中的项目。</p><p>下表为Hashtable类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Keys</code></td><td>获取一个ICollection，包含Hashtable中的键</td><td><code>Values</code></td><td>获取一个ICollection，包含Hashtable中的值</td></tr><tr><td><code>IsFixedSize</code></td><td>获取一个值，表示Hashtable是否具有固定大小</td><td><code>IsReadOnly</code></td><td>获取一个值，表示Hashtable是否只读</td></tr><tr><td><code>Count</code></td><td>获取Hashtable中实际包含的键值对个数</td><td><code>Item</code></td><td>获取或设置指定键相关的值</td></tr></tbody></table><p>下表为Hashtable类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual void Add(object key, object value)</code></td><td>向Hashtable添加一个带有指定键和值的元素</td><td><code>public  virtual void Clear()</code></td><td>从Hashtable中移除所有的元素</td></tr><tr><td><code>public virtual bool ContainsKey(object key)</code></td><td>判断Hashtable是否包含指定的键</td><td><code>public virtual bool ContainsValue(object value)</code></td><td>判断Hashtable是否包含指定的值</td></tr><tr><td><code>public virtual void Remove(object key);</code></td><td>从Hashtable移除带有指定的键的元素</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">HashtableTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Hashtable</span> hashT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span> <span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">,</span> <span class="token string">"DDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"005"</span><span class="token punctuation">,</span> <span class="token string">"EEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashT<span class="token punctuation">.</span><span class="token function">ContainsValue</span><span class="token punctuation">(</span><span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The 'BBB' is already in the table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"006"</span><span class="token punctuation">,</span> <span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取键的集合</span>            <span class="token class-name">ICollection</span> keys <span class="token operator">=</span> hashT<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> k <span class="token keyword">in</span> keys<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> hashT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 002: BBB</span><span class="token comment">// 001: AAA</span><span class="token comment">// 003: CCC</span><span class="token comment">// 004: DDD</span><span class="token comment">// 006: FFF</span><span class="token comment">// 005: EEE</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-排序列表SortedList">7.3 排序列表SortedList</h3><p><strong>排序列表SortedList类代表了一系列按照键来排序的键/值对，这些键值对可以通过键或索引来访问。</strong></p><p>排序列表是数组和哈希表的组合，包含了一个可使用键或索引访问各项的列表。如果使用索引访问各项，则它是一个动态数组，如果使用键访问各项，则它是一个哈希表。集合中的各项总是按键值排序。</p><p>下表为SortedList类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Capacity</code></td><td>获取或设置SortedList可包含的元素个数</td><td><code>Count</code></td><td>获取SortedList中实际包含的元素个数</td></tr><tr><td><code>IsFixedSize</code></td><td>获取一个值，表示SortedList是否具有固定大小</td><td><code>IsReadOnly</code></td><td>获取一个值，表示SortedList是否只读</td></tr><tr><td><code>Item</code></td><td>获取或设置SortedList中指定键相关的值</td><td><code>Keys</code></td><td>获取SortedList中的键</td></tr><tr><td><code>Values</code></td><td>获取SortedList中的值</td><td></td><td></td></tr></tbody></table><p>下表为ArrayList类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual int Add(object key, object Value);</code></td><td>向SortedList添加一个带有指定键和值的元素</td><td><code>public virtual bool ContainsKey(object key);</code></td><td>判断SortedList是否存在指定的键</td></tr><tr><td><code>public virtual void Clear();</code></td><td>在SortedList中移除所有元素</td><td><code>public virtual bool ContainsValue(object value);</code></td><td>判断SortedList是否存在指定的值</td></tr><tr><td><code>public virtual object GetByIndex(int index);</code></td><td>获取SortedList的指定索引处的值</td><td><code>public virtual object GetKey(int index);</code></td><td>获取SortedList的指定索引处的键</td></tr><tr><td><code>public virtual IList GetKeyList();</code></td><td>获取SortedList中的键</td><td><code>public virtual IList GetValueList();</code></td><td>获取SortedList中的值</td></tr><tr><td><code>public virtual void Remove(object key);</code></td><td>从SortedList中移除带有指定的键的元素</td><td><code>public virtual void RemoveAt(int index);</code></td><td>移除SortedList中指定索引处的元素</td></tr><tr><td><code>public virtual int IndexOfKey(object key);</code></td><td>返回SortedList中的指定键的索引</td><td><code>public virtual int IndexOfValue(object key);</code></td><td>返回SortedList中的指定值第一次出现的索引</td></tr><tr><td><code>public virtual void TrimToSize();</code></td><td>设置容量为SortedList中元素的实际个数</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SortedListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">SortedList</span> sortedL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span> <span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">,</span> <span class="token string">"DDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"005"</span><span class="token punctuation">,</span> <span class="token string">"EEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sortedL<span class="token punctuation">.</span><span class="token function">ContainsValue</span><span class="token punctuation">(</span><span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The 'FFF' is already in the table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"006"</span><span class="token punctuation">,</span> <span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取键的集合</span>            <span class="token class-name">ICollection</span> keys <span class="token operator">=</span> sortedL<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> k <span class="token keyword">in</span> keys<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> sortedL<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">// 001: AAA</span>            <span class="token comment">// 002: BBB</span><span class="token comment">// 003: CCC</span><span class="token comment">// 004: DDD</span><span class="token comment">// 005: EEE</span>            <span class="token comment">// 006: FFF</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-堆栈Stack">7.4 堆栈Stack</h3><p><strong>堆栈Stack代表了一个后进先出的对象集合</strong>，当需要对各项进行后进先出的访问时，则使用堆栈。当在列表中添加一项，称为推入元素，当从列表中移除一项时，称为弹出元素。</p><p>下表为Stack类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Count</code></td><td>获取Stack中包含的元素个数</td></tr></tbody></table><p>下表为Stack类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual void Clear();</code></td><td>从Stack中移除所有的元素</td><td><code>public virtual bool Contains(object obj);</code></td><td>判断某个元素是否在Stack中</td></tr><tr><td><code>public virtual object Peek();</code></td><td>返回在Stack的顶部的对象，但不移除它</td><td><code>public virtual object Pop();</code></td><td>移除并返回Stack的顶部的对象</td></tr><tr><td><code>public virtual void Push(object obj);</code></td><td>向Stack的顶部添加一个对象</td><td><code>public virtual object[] ToArray();</code></td><td>复制Stack到一个新的数组中</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StackTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Stack</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> st<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// D C B A</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'F'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The next popable value in stack: {0}"</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// The next popable value in stack: F</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> st<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// F E D C B A</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> st<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// C B A</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-队列Queue">7.5 队列Queue</h3><p><strong>队列Queue代表了一个先进先出的对象集合</strong>，当需要对各项进行先进先出的访问时，则使用队列。当在列表中添加一项，称为入队，当从列表中移除一项，称为出队。</p><p>下表为Queue类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Count</code></td><td>获取Queue中包含的元素个数</td></tr></tbody></table><p>下表为Stack类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual void Clear();</code></td><td>从Queue中移除所有的元素</td><td><code>public virtual bool Contains(object obj);</code></td><td>判断某个元素是否在Queue中</td></tr><tr><td><code>public virtual object Dequeue();</code></td><td>移除并返回在Queue的开头的对象</td><td><code>public virtual void Enqueue(object obj);</code></td><td>向Queue的末尾添加一个对象</td></tr><tr><td><code>public virtual object[] ToArray();</code></td><td>复制Queue到一个新的数组中</td><td><code>public virtual void TrimToSize();</code></td><td>设置容量为Queue中元素的实际个数</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">QueueTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Queue</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> q<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// A B C D</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'F'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> q<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// A B C D E F</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> q<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// C D E F</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-点阵列BitArray">7.6 点阵列BitArray</h3><p><strong>点阵列BitArray类管理一个紧凑型的位值数组，它是由布尔值来表示，其中true表示位是开启的，false表示位是关闭的</strong>，当你需要存储位，但是事先不知道位数时，则使用点阵列。可以使用整型索引从点阵列集合中访问各项，索引从零开始。</p><p>下表为BitArray类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Count</code></td><td>获取BitArray中包含的元素个数</td></tr><tr><td><code>IsReadyOnly</code></td><td>获取一个值，表示BitArray是否只读</td></tr><tr><td><code>Item</code></td><td>获取或设置BitArray中指定位置的位的值</td></tr><tr><td><code>Length</code></td><td>获取或设置BitArray中的元素个数</td></tr></tbody></table><p>下表为BitArray类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public BitArray And(BitArray value);</code></td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位与操作</td><td><code>public bool Get(int index);</code></td><td>获取BitArray中指定位置的位的值</td></tr><tr><td><code>public BitArray Not();</code></td><td>把当前BitArray中的位值反转，以便设置为true的元素为false，设置为false的元素为true</td><td><code>public BitArray Or(BitArray value);</code></td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位或操作</td></tr><tr><td><code>public void Set(int index, bool value);</code></td><td>把BitArray中指定位置的位设置为指定的值</td><td><code>public void SetAll(bool value);</code></td><td>把BitArray中所有位设置为指定的值</td></tr><tr><td><code>public BitArray Xor(BitArray value);</code></td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位异或操作</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BitArrayTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">BitArray</span> ba1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BitArray</span> ba2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            ba1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            ba2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"BitArray ba1: 60"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ba1<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0, -6}"</span><span class="token punctuation">,</span> ba1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// False False True True True True False False</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"BitArray ba2: 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ba2<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0, -6}"</span><span class="token punctuation">,</span> ba2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// True False True True False False False False</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BitArray</span> ba3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ba3 <span class="token operator">=</span> ba1<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>ba2<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"BitArray ba3 After And Operation: 12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ba3<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0, -6}"</span><span class="token punctuation">,</span> ba3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// False False True True False False False False</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-泛型">8. 泛型</h2><p>**泛型Generic通过数据类型的代替参数编写类或方法，允许编写一个可以与任何类型一起工作的方法或类。**当编译器遇到类的构造函数或方法的函数调用时，它会生成代码来处理指定的数据类型。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGenericArray<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> array<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyGenericArray</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span><span class="token punctuation">[</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token function">GetItem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetItem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">GenericTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 声明一个整型数组</span>            <span class="token class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                intArray<span class="token punctuation">.</span><span class="token function">SetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">GetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 0 1 4 9 16</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 声明一个字符数组</span>            <span class="token class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> charArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                charArray<span class="token punctuation">.</span><span class="token function">SetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>charArray<span class="token punctuation">.</span><span class="token function">GetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a b c d e</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-特性">8.1 特性</h3><p>使用泛型是一种增强程序功能的技术，具体表现在以下几个方面：</p><ul><li>有助于最大限度地重用代码、保护类型的安全以及提高性能</li><li>可以创建泛型集合类，使用泛型集合类来代替System.Collections中的集合类</li><li>可以创建自己的泛型接口、泛型类、泛型方法、泛型事件、泛型委托。</li><li>对泛型类进行约束以访问特定数据类型的方法</li><li>关于泛型数据类型中使用的类型的信息可运行时通过使用反射获取</li></ul><h3 id="8-2-泛型方法">8.2 泛型方法</h3><p>可以通过类型参数声明泛型方法。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">GenericTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Swap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">T</span> l<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name">T</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">T</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">=</span> l<span class="token punctuation">;</span>            l <span class="token operator">=</span> r<span class="token punctuation">;</span>            r <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token char">'M'</span><span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token char">'N'</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}, c = {2}, d = {3}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 10, b = 20, c = M, d = N</span>            <span class="token generic-method"><span class="token function">Swap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">ref</span> a<span class="token punctuation">,</span> <span class="token keyword">ref</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token generic-method"><span class="token function">Swap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Char<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">ref</span> c<span class="token punctuation">,</span> <span class="token keyword">ref</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}, c = {2}, d = {3}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 20, b = 10, c = N, d = M</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-泛型委托">8.3 泛型委托</h3><p>可以通过类型参数定义泛型委托，如<code>delegate T NumberChange&lt;T&gt;(T n);</code></p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">delegate</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">NumberChanger</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">GenericTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MultNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> nc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> nc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>MultNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">nc1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// num = 15</span>            <span class="token function">nc2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// num = 75</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-泛型约束">8.4 泛型约束</h3><p>在声明泛型方法或泛型类时，可以给泛型加上一定的约束来满足特定的一些条件</p><p>如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helper<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型限定条件：</p><ul><li>T : 结构 （类型参数必须是值类型，可以指定出Nullable以外的任何值类型）</li><li>T : 类 （类型参数必须是引用类型，包括任何类、接口、委托或数组类型）</li><li>T : new()  （类型参数必须具有无参数的公共构造函数，当与其他约束一起使用new()约束必须最后指定）</li><li>T : &lt;基类名&gt;  （类型参数必须是指定的基类或派生自指定的基类）</li><li>T : &lt;接口名称&gt;  （类型参数必须是指定的接口或实现指定的接口，可以指定多个接口约束。约束接口也可以是泛型的。</li></ul><h2 id="9-匿名方法">9. 匿名方法</h2><p><strong>匿名方法Anonymous methods提供了一种传递代码块作为委托参数的技术，匿名方法是没有名称只有主体的方法。在匿名方法中不需要指定返回类型，它是从方法主体内的return语句推断的。</strong></p><h3 id="9-1-匿名方法的语法">9.1 匿名方法的语法</h3><p>匿名方法是通过使用delegate关键字创建的委托实例来声明的。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">NumberChanger</span> nc <span class="token operator">=</span> <span class="token keyword">delegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Anonymous methods: {0}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 匿名方法的主体</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>委托可以通过匿名函数调用，也可以通过普通有名称的函数调用，只需要向委托对象中传递相应的方法参数即可。注：匿名函数主体后面要以<code>;</code>结尾。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AnonymousTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 命名函数</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"命名函数：{0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MultNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"命名函数：{0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">NumberChanger</span> nc <span class="token operator">=</span> <span class="token keyword">delegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"匿名函数：{0}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// 使用匿名函数调用委托</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 匿名函数：10</span>            <span class="token comment">// 使用命名函数实例化委托</span>            nc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 命名函数：15</span>            nc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>MultNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 命名函数：75</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-不安全代码">10. 不安全代码</h2><p>为了保持类型的安全性，默认情况下C#是不支持指针的，但是如果使用<code>unsafe</code>关键字来修饰类或类中的成员，则会被视为不安全代码。C#允许不安全代码中使用指针变量。</p><p>在公共语言运行中，不安全代码是指无法验证的代码，需要程序员来保证代码的安全性，不安全代码并不意味着一定是危险的。</p><h3 id="10-1-指针变量">10.1 指针变量</h3><p>指针也是变量，但是它的值是另一个变量的内存地址，在使用指针前需要先声明指针。</p><table><thead><tr><th>示例</th><th>说明</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>int* p</code></td><td>p是指向整数的指针</td><td><code>double* p</code></td><td>p是指向双精度数的指针</td></tr><tr><td><code>float* p</code></td><td>p是指向浮点数的指针</td><td><code>int** p</code></td><td>p是指向整数的指针的指针</td></tr><tr><td><code>int*[] p</code></td><td>p是指向整数的指针的一维数组</td><td><code>char* p</code></td><td>p是指向字符的指针</td></tr><tr><td><code>void* p</code></td><td>p是指向未知类型的指针</td><td></td><td></td></tr></tbody></table><p>与声明变量相同，我们同样可以在一行代码中同时声明多个指针，如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token operator">*</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">;</span>  <span class="token comment">// 同时定义p1、p2、p3三个整数指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：指针不能从对象中继承，并且装箱和拆箱也不支持指针，但是不同的指针类型以及指针与整型之间可以进行转换。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">unsafe</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> f <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>            <span class="token keyword">double</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>f<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"数据的内容是：{0}"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 字符串的内容是: 3.1415</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"数据在内存中的地址是：{0}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 字符串在内存中的地址是: 12569862</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在编译上述代码时需要在编译命令中添加<code>-unsafe</code>，例如<code>csc -unsafe pointerTest.cs</code></p><h3 id="10-2-使用指针检索数据的值">10.2 使用指针检索数据的值</h3><p>可以使用<code>ToString()</code>来获取指针变量所指向的数据的值，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">unsafe</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">var</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"变量var的值为：{0}"</span><span class="token punctuation">,</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 变量var的值为: 123456</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"指针p指向的值为：{0}"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指针p指向的值为: 123456</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"指针p的值为：{0}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指针p的值为: 15332624</span>                   <span class="token punctuation">}</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-将指针作为参数传递给函数">10.3 将指针作为参数传递给函数</h3><p>可以将指针变量作为参数传递给函数，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>            <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>            <span class="token operator">*</span>q <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">PointerTest</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> var1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> var2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token operator">*</span> x <span class="token operator">=</span> <span class="token operator">&amp;</span>var1<span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token operator">*</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span>var2<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用Swap函数前：var1 = {0}, var2 = {1}"</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用Swap函数前：var1 = 10, var2 = 20</span>            p<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用Swap函数后：var1 = {0}, var2 = {1}"</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用Swap函数后：var1 = 20, var2 = 10</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-使用指针访问数组元素">10.4 使用指针访问数组元素</h3><p>在C#中，数组和指向该数组且与数组名称相同的指针是不同的数据类型，例如<code>int* p</code>和<code>int[] p</code>就是不同的数据类型。可以增加指针p的值，因为它在内存中不是固定的，但数组地址在内存中是固定的，因此不能增加数组p的值，如果需要使用指针变量访问数组数据，则可以使用<code>fixed</code>关键字来固定指针。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">fixed</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"List[{0}]的内存地址为：{1}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"List[{0}]的值为：{1}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token comment">// list[0] 的内存地址为：51981272</span>            <span class="token comment">// list[0] 的值为：10</span>            <span class="token comment">// list[1] 的内存地址为：51981276</span>            <span class="token comment">// list[1] 的值为：100</span>            <span class="token comment">// list[2] 的内存地址为：51981280</span>            <span class="token comment">// list[2] 的值为：200</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-正则表达式">11. 正则表达式</h2><p><strong>正则表达式时一种匹配文本输入的模式。</strong>.Net Framework提供了允许这种匹配的正则表达式引擎。模式由一个或多个字符、运算符和结构组成。</p><h3 id="11-1-定义正则表达式">11.1 定义正则表达式</h3><p>用于定义正则表达式的各种类型的字符、运算符和结构有：</p><ul><li>字符转义，正则表达式中的反斜杠<code>\</code>用来表示它后面跟随的字符时特殊字符，具有特殊的含义。如\a、\b、\t等</li><li>字符类，字符类可以与一个字符串中的任何一个字符相匹配。如\w、[character_group]、\p{name}等</li><li>定位符，可以根据字符串出现的具体位置来判断匹配是成功还是失败。如^、$、\A等</li><li>分组结构，描述了正则表达式的子表达式，并捕获输入字符串的子字符串。如（\w)\1、\w+(?=\.)、(?&lt;double&gt;\w)\k&lt;double&gt;等</li><li>限定符，用来指定在字符串中必须存在某个元素才能匹配成功。如*、+、？等</li><li>反向引用构造，允许先前匹配的子表达式随后在相同的正则表达式中进行标志。如\number、\k&lt;name&gt;</li><li>备用构造，用于修改正则表达式以启用either/or匹配。如|、(?(expresion) yes | no)、(?(name)yes | no)</li><li>替换，替换模式中使用的正则表达式，如$number、${name}、$&amp;等</li><li>杂项构造，如(?#注释)、#[行尾]、(?imnsx-imnsx)</li></ul><h3 id="11-2-Regex类">11.2 Regex类</h3><p>Regex类用于使用一个正则表达式，下表列出来Regex类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public bool IsMatch( string input )</code></td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项</td><td><code>public bool IsMatch( string input, int startat )</code></td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项，从字符串中指定的位置开始查找</td></tr><tr><td><code>public static bool IsMatch( string input, string pattern )</code></td><td>指示指定的正则表达式是否在指定的输入字符串中找到匹配项</td><td><code>public MatchCollection Matches( string input )</code></td><td>在指定的输入字符串中搜索正则表达式的所有匹配项</td></tr><tr><td><code>public string Replace( string input, string replacement )</code></td><td>在指定的输入字符串中，把所有匹配正则表达式模式的所有匹配的字符串替换为指定的替换字符串</td><td><code>public string[] Split( string input )</code></td><td>把输入字符串分割为子字符串数组，根据在 Regex 构造函数中指定的正则表达式模式定义的位置进行分割</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">RegexTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowMatch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> expr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">MatchCollection</span> mc <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Match</span> m <span class="token keyword">in</span> mc<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">"make and then manage your maze"</span><span class="token punctuation">;</span>            <span class="token function">ShowMatch</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">@"\bm\S*e\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// make</span>            <span class="token comment">// manage</span>            <span class="token comment">// maze</span>                        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-多线程">12. 多线程</h2><p><strong>多线程就是多个线程同时工作的过程，可将线程看做程序的执行路径，每个线程定义了一个独特的控制流，用来完成特定的任务。</strong></p><p>多线程可以节省CPU资源，同时提高应用程序的执行效率。</p><h3 id="12-1-线程生命周期">12.1 线程生命周期</h3><p>线程声明周期开始于我们创建<strong>System.Theading.Thread</strong>类对象的时候，当线程被终止或完成执行时生命周期终止。</p><p>下面列出来线程生命周期中的各种状态：</p><ul><li>未启动状态：当线程实例被创建但<code>Start</code>方法未被调用时的状况；</li><li>就绪状态：当线程准备好运行并等待CPU周期时的状况；</li><li>不可运行状态：<ul><li>已经调用Sleep方法</li><li>已经调用Wait方法</li><li>通过I/O操作阻塞</li></ul></li><li>死亡状态：当线程已完成执行或已中止时的状况。</li></ul><h3 id="12-2-主线程">12.2 主线程</h3><p>在多线程中执行的第一个线程称为主线程，C#程序开始执行时，将自动创建主线程，使用Thread类创建的线程称为子线程，可以使用<strong>Thread</strong>类的<code>CurrentThread</code>属性访问线程。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Thread</span> th <span class="token operator">=</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">;</span>            th<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"主线程"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这是{0}"</span><span class="token punctuation">,</span> th<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这是主线程</span>                        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-Thread类的常用属性和方法">12.3 Thread类的常用属性和方法</h3><p>下表为Thread类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>CurrentContext</code></td><td>获取线程正在其中执行的当前上下文</td><td><code>CurrentCulture</code></td><td>获取或设置当前线程的区域性</td></tr><tr><td><code>CurrentPrincipal</code></td><td>获取或设置线程的当前负责人</td><td><code>CurrentThread</code></td><td>获取当前正在运行的线程</td></tr><tr><td><code>CurrentUICulture</code></td><td>获取或设置资源管理器使用的当前区域性以便在运行时查找区域特定的资源</td><td><code>ExecutionContext</code></td><td>获取一个ExecutionContext对象，该对象包含有关当前线程的各种上下文信息</td></tr><tr><td><code>IsAlive</code></td><td>获取一个值，该值指示当前线程的执行状态</td><td><code>IsBackground</code></td><td>获取或设置一个值，该值指示某个线程是否为后台线程</td></tr><tr><td><code>IsThreadPoolThread</code></td><td>获取一个值，该值指示线程是否属于托管线程池</td><td><code>ManagedThreadId</code></td><td>获取当前托管线程的唯一标识符</td></tr><tr><td><code>Name</code></td><td>获取或设置线程的名称</td><td><code>Priority</code></td><td>获取或设置一个值，该值指示线程的调度优先级</td></tr><tr><td><code>ThreadState</code></td><td>获取一个值，该值包含当前线程的状态</td><td></td><td></td></tr></tbody></table><p>下表为Thread类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public void Abort()</code></td><td>在调用此方法的线程上引发ThreadAbortException，以开始终止此线程的过程。调用此方法通常会终止线程</td><td><code>public static LocalDataStoreSlot AllocateDataSlot()</code></td><td>在所有线程上分配未命名的数据槽</td></tr><tr><td><code>public static LocalDataStoreSlot AllocateNamedDataSlot(string name)</code></td><td>在所有线程上分配已命名的数据槽</td><td><code>public static void BeginCriticalRegion()</code></td><td>通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理的异常的影响可能会危害应用程序域中的其他任务</td></tr><tr><td><code>public static void BeginThreadAffinity()</code></td><td>通知主机托管代码将要执行依赖于当前物理操作系统线程的标识的指令</td><td><code>public static void EndCriticalRegion()</code></td><td>通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理的异常仅影响当前任务。</td></tr><tr><td><code>public static void EndThreadAffinity()</code></td><td>通知主机托管代码已执行完依赖于当前物理操作系统线程的标识的指令</td><td><code>public static void FreeNamedDataSlot(string name)</code></td><td>为进程中的所有线程消除名称与槽之间的关联</td></tr><tr><td><code>public static Object GetData(LocalDataStoreSlot slot)</code></td><td>在当前线程的当前域中从当前线程上指定的槽中检索值</td><td><code>public static AppDomain GetDomain()</code></td><td>返回当前线程正在其中运行的当前域</td></tr><tr><td><code>public static AppDomain GetDomainID()</code></td><td>返回唯一的应用程序域标识符</td><td><code>public static LocalDataStoreSlot GetNamedDataSlot(string name)</code></td><td>查找已命名的数据槽</td></tr><tr><td><code>public void Interrupt()</code></td><td>中断处于WaitSleep.Join线程状态的线程</td><td><code>public void Join()</code></td><td>在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止为止</td></tr><tr><td><code>public static void MemoryBarrier()</code></td><td>按如下方式同步内存存取：执行当前线程的处理器在对指令重新排序时，不能采用先执行 MemoryBarrier 调用之后的内存存取，再执行 MemoryBarrier 调用之前的内存存取的方式</td><td><code>public static void ResetAbort()</code></td><td>取消为当前线程请求的Abort</td></tr><tr><td><code>public static void SetData(LocalDataStoreSlot slot, Object data)</code></td><td>在当前正在运行的线程上为此线程的当前域在指定槽中设置数据</td><td><code>public void Start()</code></td><td>开始一个线程</td></tr><tr><td><code>public static void Sleep(int millisecondsTimeout)</code></td><td>让线程暂停一段时间</td><td><code>public static void SpinWait(int iterations)</code></td><td>导致线程等待由 iterations 参数定义的时间量</td></tr><tr><td><code>public static byte VolatileRead(ref byte address)</code><br><code>public static double VolatileRead(ref double address)</code><br><code>public static int VolatileRead(ref int address)</code><br><code>public static Object VolatileRead(ref Object address)</code></td><td>读取字段值。无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值</td><td><code>public static void VolatileWrite(ref byte address, byte value)</code><br><code>public static void VolatileWrite(ref double address, double value)</code><br><code>public static void VolatileWrite(ref int address, int value)</code><br><code>public static void VolatileWrite(ref Object address, Object value)</code></td><td>立即向字段写入一个值，以使该值对计算机中的所有处理器都可见</td></tr><tr><td><code>public static bool Yield()</code></td><td>导致调用线程执行准备好在当前处理器上运行的另一个线程。由操作系统选择要执行的线程</td><td></td><td></td></tr></tbody></table><h3 id="12-4-创建线程">12.4 创建线程</h3><p>线程是通过扩展<strong>Thread</strong>类创建的，扩展的<strong>Thread</strong>类调用<code>Start()</code>方法来开始子线程的执行。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallToChildThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread starts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ThreadStart</span> childref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>CallToChildThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>childref<span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Child thread starts</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-5-管理线程">12.5 管理线程</h3><p><strong>Thread</strong>类提供了各种管理线程的方法，下面演示了<code>Sleep()</code>方法的使用，用于在一个特定的时间暂停线程。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallToChildThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread starts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sleepTime <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread paused for {0} seconds"</span><span class="token punctuation">,</span> sleepTime <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread resumes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ThreadStart</span> childref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>CallToChildThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>childref<span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Child thread starts</span>            <span class="token comment">// Child thread pasued for 5 seconds</span>            <span class="token comment">// Child thread resumes</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-6-销毁线程">12.6 销毁线程</h3><p><code>Abort()</code>方法用于销毁进行，通过抛出<code>ThreadAbortException</code>在运行时中止线程。这个异常不能被捕获，如果有<strong>finally</strong>块，控制会被送至<strong>finally</strong>块。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallToChildThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token keyword">try</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread starts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> counter <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> counter<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread resumes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThreadAbortException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Thread Abort Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Couldn't catch the Thread Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ThreadStart</span> childref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>CallToChildThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>childref<span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Child thread starts</span>            <span class="token comment">// 0</span>            <span class="token comment">// 1</span>            <span class="token comment">// 2</span>            <span class="token comment">// Thread Abort Exception</span>            <span class="token comment">// Couldn't catch the Thread Exception</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章-2">参考文章</h2><p>本文是笔者通过下列网站教程学习C#语言进阶的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/csharp/csharp-tutorial.html">【菜鸟教程C#教程】</a></p><p>2.<a href="http://c.biancheng.net/csharp/">【C语言中文网C#教程】</a></p><p>3.<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">【微软C#官方文档】</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
            <tag> C#进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语言基础学习笔记</title>
      <link href="/posts/6569.html"/>
      <url>/posts/6569.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-环境准备">0. 环境准备</h2><h3 id="0-1-简介">0.1 简介</h3><p><strong>C#<strong>又称”<strong>C Sharp</strong>“，是微软发布和维护的一个</strong>现代的</strong>、<strong>通用的</strong>、<strong>面向对象</strong>的编程语言，是专为公共语言基础结构（CLI，由可执行代码和运行时环境组成，允许在不同的计算机平台和体系结构上使用各种高级语言）设计的。</p><p>C#的优点：</p><ul><li>现代的、通用的编程语言</li><li>面向对象</li><li>类型安全</li><li>容易学习</li><li>面向组件</li><li>结构化语言</li><li>产生高效率的程序</li><li>可以在多种计算机平台上编译</li><li>.Net框架的一部分</li></ul><p>C#运行在 <strong>.Net Framework</strong> 上，可以用于开发不同类型的应用程序：</p><ul><li>桌面应用程序</li><li>网络应用程序</li><li>分布式应用程序</li><li>Web服务应用程序</li><li>数据库应用程序</li><li>Unity3D游戏程序</li></ul><p><strong>.Net Framework</strong> 是一个平台，它提供了一个跨语言的统一编程环境，而C#则是一种在 <strong>.Net Framework</strong> 平台上使用的编程语言。</p><h3 id="0-2-推荐IDE">0.2 推荐IDE</h3><ul><li><p><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio</a></p></li><li><p><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio Code</a></p></li><li><p><a href="https://www.codingrooms.com/compiler/csharp">在线IDE</a></p></li></ul><h3 id="0-3-基本语法">0.3 基本语法</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 这是单行注释</span><span class="token comment">/*这是多行注释这是多行注释*/</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span>     <span class="token punctuation">{</span>        <span class="token comment">// 成员变量</span>        <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>  <span class="token comment">// 长</span>        <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>  <span class="token comment">// 宽</span>              <span class="token comment">// 成员函数</span>        <span class="token comment">// 设置长和宽</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Acceptdetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token number">4.5</span><span class="token punctuation">;</span>              width <span class="token operator">=</span> <span class="token number">3.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 计算面积</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 显示输出</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Length: {0}"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 4.5</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Width: {0}"</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 3.5</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Area: {0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 15.75</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>     <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">Acceptdetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-数据类型">1. 数据类型</h2><p>C#语言的类型主要分为：<strong>值类型</strong>和<strong>引用类型</strong>，值类型的变量直接包含数据，而引用类型的变量存储数据的引用地址。</p><p>对于引用类型，两个变量可以引用同一对象，因此，对一个变量执行的运算可能会影响另一个变量所引用的对象。引用类型在<strong>托管堆</strong>分配空间。</p><p>对于值类型，每个变量都有自己的数据副本，对一个变量执行的操作不会影响另一个。值类型在<strong>线程栈</strong>分配空间。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 引入命名空间</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token comment">// 引用类型</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeRef</span>    <span class="token punctuation">{</span>        <span class="token comment">// 属性</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 值类型</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">SomeVal</span>    <span class="token punctuation">{</span>        <span class="token comment">// 属性</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">ValueTypeTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">SomeRef</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SomeRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在堆上分配空间</span>            <span class="token class-name">SomeVal</span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SomeVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在栈上分配空间</span>            r1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 提领指针</span>            v1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 在栈上修改</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>                        <span class="token class-name">SomeRef</span> r2 <span class="token operator">=</span> r1<span class="token punctuation">;</span>  <span class="token comment">// 只复制引用</span>            <span class="token class-name">SomeVal</span> v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token comment">// 在栈上分配并赋值成员</span>            r1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">// r1.X和r2.X都会修改</span>            v1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">// v1.X会修改，v2.X不会</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>                        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-值类型">1.1 值类型</h3><p>值类型包含<strong>简单类型</strong>、<strong>结构类型</strong>和<strong>枚举类型</strong>。</p><ul><li>简单类型<ul><li>有符号整型：sbyte、short、int、long</li><li>无符号整型：byte、ushort、unit、ulong</li><li>Unicode字符：char</li><li>IEEE浮点型：float、double</li><li>高精度小数：decimal</li><li>布尔型：bool</li></ul></li><li>结构类型<ul><li>用户自定义类型：struct</li></ul></li><li>枚举类型<ul><li>用户自定义类型：enum</li></ul></li></ul><h3 id="1-2-引用类型">1.2 引用类型</h3><p>引用类型包含<strong>类类型</strong>、<strong>接口类型</strong>、<strong>数组类型</strong>和<strong>委托类型</strong>。</p><ul><li>类类型<ul><li>所有其他类型的最终基类：object</li><li>Unicode字符串：string</li><li>用户自定义类型：class</li></ul></li><li>接口类型<ul><li>用户自定义类型：interface</li></ul></li><li>数组类型<ul><li>单维与多维数组：如int[]、int[,]</li></ul></li><li>委托类型<ul><li>用户自定义类型：delegate</li></ul></li></ul><h3 id="1-3-指针类型">1.3 指针类型</h3><p>仅在不安全代码中提供，使用<code>unsafe</code>关键词，开启不安全代码开发模式后，代码可以使用指针、分配和释放内存块，以及使用函数指针调用方法。<code>unsafe</code>代码的安全需要开发人员自行检测。</p><p>可以定义为指针的类型有</p><ul><li>sbyte、byte、short、unshort、int、uint、long、ulong、char、float、double、decimal、bool</li><li>任何枚举类型</li><li>任何指针类型</li><li>仅包含非托管类型的字段的任何用户定义的结构类型</li></ul><p><strong>装箱和拆箱</strong>操作不支持指针，但是可在不同的指针类型之间以及指针类型与整型之间进行转换。指针不能指向引用或包含引用的结构，因为无法对对象引用进行垃圾回收。</p><p>指针类型声明示例：</p><ul><li><code>int* p</code>: p是指向整数的指针</li><li><code>int** p</code>: p是指向整数的指针的指针</li><li><code>int*[] p</code>: p是指向整数的指针的一维数组</li><li><code>char* p</code>: p是指向字符的指针</li><li><code>void* p</code>: p是指向未知类型的指针</li></ul><p>对指针执行的运算符和语句</p><table><thead><tr><th>运算符/语句</th><th>使用</th><th>运算符/语句</th><th>使用</th></tr></thead><tbody><tr><td><code>*</code></td><td>执行指针间接寻址</td><td><code>-&gt;</code></td><td>通过指针访问结构的成员</td></tr><tr><td><code>[]</code></td><td>为指针建立索引</td><td><code>&amp;</code></td><td>获取变量的地址</td></tr><tr><td><code>++</code>和<code>--</code></td><td>递增和递减指针</td><td><code>+</code>和<code>-</code></td><td>执行指针算法</td></tr><tr><td><code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>和<code>&gt;=</code></td><td>比较指针</td><td><strong>stackalloc</strong></td><td>在堆栈上分配内存</td></tr><tr><td><strong>fixed</strong>语句</td><td>临时固定变量以便找到其地址</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">UnsafeTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">unsafe</span> <span class="token comment">// 开启不安全代码模式</span>            <span class="token punctuation">{</span>                <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 设置指向托管变量的指针，在执行该语句期间固定此变量</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> p<span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>                    p2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针向后移</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span>                    p2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针向后移</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 30</span>                                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>                    <span class="token operator">*</span>p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针所指向的值加1</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 11</span>                    <span class="token operator">*</span>p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针所指向的值加1</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-装箱与拆箱">1.4 装箱与拆箱</h3><p><strong>值类型转换为引用类型称为装箱</strong>，<strong>引用类型转为值类型称为拆箱</strong>。注：只有被装过箱的对象才能拆箱。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BoxingAndUnboxingTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token comment">// 装箱操作</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"obj = {0}"</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// obj = 100</span>                        <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>  <span class="token comment">// 拆箱操作</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// num = 100</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-类型转换">1.5 类型转换</h3><p>类型转换是把数据从一种类型转换为另一种类型，C#中类型转换有两种形式：</p><ul><li><strong>隐式类型转换</strong>：是C#默认的以安全的方式进行的转换，不会导致数据丢失，例如从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li><strong>显式类型转换</strong>-：即强制类型转换，需要强制转换运算符，而且强制转换会造成数据丢失。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ForceTypeConversionTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> d <span class="token operator">=</span> <span class="token number">5673.74</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">;</span>                        i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> d<span class="token punctuation">;</span>  <span class="token comment">// double强制转换为int</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5673</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表为C#内置的一些类型转换方法</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ToBoolean</code></td><td>转换为布尔型</td><td><code>ToByte</code></td><td>转换为字节类型</td></tr><tr><td><code>ToChar</code></td><td>转换为单个Unicode字符类型</td><td><code>ToDateTime</code></td><td>把整数或字符串类型转换为日期-时间结构</td></tr><tr><td><code>ToDecimal</code></td><td>把浮点型或整数型转换为十进制类型</td><td><code>ToDouble</code></td><td>转换为双精度浮点型</td></tr><tr><td><code>ToInt16</code></td><td>转换为16位整数类型</td><td><code>ToInt32</code></td><td>转换为32位整数类型</td></tr><tr><td><code>ToInt64</code></td><td>转换为64位整数类型</td><td><code>ToSbyte</code></td><td>转换为有符号字节类型</td></tr><tr><td><code>ToString</code></td><td>转换为字符串类型</td><td><code>ToType</code></td><td>转换为指定类型</td></tr><tr><td><code>ToUInt16</code></td><td>转换为16位无符号整数类型</td><td><code>ToUInt32</code></td><td>转换为32位无符号整数类型</td></tr><tr><td><code>ToUInt64</code></td><td>转换为64位无符号整数类型</td><td><code>ToSingle</code></td><td>转换为浮点数类型</td></tr></tbody></table><p>如：把不同值的类型转换为字符串类型</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StringConversionTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">float</span></span> b <span class="token operator">=</span> <span class="token number">8.005f</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> c <span class="token operator">=</span> <span class="token number">2345.6789</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> d <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// 转换为字符串类型</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2022</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8.005</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2345.6789</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// False</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-变量">2. 变量</h2><p>变量是一种通过变量名表示某个内存区域的方法，变量的值可以更改并重复使用。</p><p>C#中基础变量类型可以归纳为以下几种：</p><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>整型</td><td>sbyte、byte、short、ushort、int、unit、long、ulong、char</td></tr><tr><td>浮点型</td><td>float、doule</td></tr><tr><td>十进制类型</td><td>decimal</td></tr><tr><td>布尔型</td><td>true、false</td></tr><tr><td>空类型</td><td>可为空值的数据类型</td></tr></tbody></table><h3 id="2-1-声明">2.1 声明</h3><p>声明变量的语法格式为<code>&lt;data_type&gt; variable_list;</code></p><p>如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">char</span></span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">bool</span></span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>变量名需要遵循的规则：</p><ul><li>变量名中只可以包含英文字母<code>a-z</code>,<code>A-Z</code>、数字<code>0-9</code>和下划线<code>_</code></li><li>不能以数字开头</li><li>变量名不能是任何C#的保留字或关键字</li></ul><h3 id="2-2-初始化">2.2 初始化</h3><p>可以在声明时直接初始化，也可以在声明后另起一行进行初始化，如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">VariableTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">short</span></span> a<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">float</span></span> b<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">5.5</span><span class="token punctuation">;</span>            <span class="token comment">// 初始化变量</span>            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">20.1f</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}, c = {2}, d = {3}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 10, b = 20.1, c = 30.1000003814697, d = 5.5</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 接受用户输入的值</span>            <span class="token class-name"><span class="token keyword">int</span></span> f <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出你所输入数字</span>                            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-常量">3. 常量</h2><p><strong>常量是固定值</strong>，使用关键字<code>const</code>定义，在程序执行期间不允许修改，常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量、字符串常量、枚举常量。</p><h3 id="3-1-定义">3.1 定义</h3><p>声明常量的语法格式为<code>const &lt;data_type&gt; constant_name = value;</code>，常量在声明的同时需要赋值。</p><h3 id="3-2-使用">3.2 使用</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ConstantConversionTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">double</span></span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"半径为：{0}，圆的面积为：{1}"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 半径为：3，圆的面积为：28.26</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-运算符">4. 运算符</h2><p>运算符是一个用来告诉编辑器执行特定数字或逻辑运算的符号。</p><h3 id="4-1-算术运算符">4.1 算术运算符</h3><p>完成特定算术运算的符号：</p><table><thead><tr><th>算术运算符</th><th>描述</th><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>%</code></td><td>取余</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>++</code></td><td>自增</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>--</code></td><td>自减</td></tr><tr><td><code>/</code></td><td>除法</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArithmeticOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> c<span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a + b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a + b = 30</span>            c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a - b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a - b = -10</span>            c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a * b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a * b = 200</span>            c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a / b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a / b = 0</span>            c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a % b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a % b = 10</span>            c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, a = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 11, a = 11</span>            c <span class="token operator">=</span> <span class="token operator">--</span>a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, a = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 10, a = 10</span>            c <span class="token operator">=</span> b<span class="token operator">++</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, b = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 20, b = 21</span>            c <span class="token operator">=</span> b<span class="token operator">--</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, b = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21, b = 20</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-关系运算符">4.2 关系运算符</h3><p>比较运算符左右两边操作数的符号，结果为<strong>true</strong>或<strong>false</strong>。</p><table><thead><tr><th>关系运算符</th><th>描述</th><th>关系运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>==</code></td><td>检查是否相等</td><td><code>!=</code></td><td>检查是否不等</td></tr><tr><td><code>&gt;</code></td><td>检查左操作数是否大于右操作数</td><td><code>&lt;</code></td><td>检查左操作数是否小于右操作数</td></tr><tr><td><code>&gt;=</code></td><td>检查左操作数是否大于等于右操作数</td><td><code>&lt;=</code></td><td>检查左操作数是否小于等于右操作数</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">RelationalOperatorTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a不等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a不等于b</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于b</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a不小于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a不大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a不大于b</span>            <span class="token punctuation">}</span>            a <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于或等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于或等于b</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> a<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"b大于或等于a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// b大于或等于a</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-逻辑运算符">4.3 逻辑运算符</h3><p>进行逻辑运算的符号，结果为<strong>true</strong>或<strong>false</strong>。</p><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑与，两个操作数都为true，结果才为true</td></tr><tr><td><code>||</code></td><td>逻辑或，两个操作数有一个为true，结果就为true</td></tr><tr><td><code>!</code></td><td>逻辑非，操作数为true，结果为false，操作数为false，结果为true</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">LogicalOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">bool</span></span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 条件为真</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 条件为真</span>            <span class="token punctuation">}</span>            a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"条件为假"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 条件为假</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 条件为真  </span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-位运算符">4.4 位运算符</h3><table><thead><tr><th>位运算符</th><th>描述</th><th>位运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>按位与，均为1时，结果才为1</td><td><code>|</code></td><td>按位或，有一个为1时，结果就为1</td></tr><tr><td><code>^</code></td><td>按位异或，两个位数值不同时，结果才为1</td><td><code>~</code></td><td>按位取反，9变为1，1变为0</td></tr><tr><td><code>&lt;&lt;</code></td><td>二进制左移指定位数</td><td><code>&gt;&gt;</code></td><td>二进制右移指定位数</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BitwiseOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a &amp; b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a &amp; b = 12</span>            c <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a | b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a | b = 61</span>            c <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a ^ b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a ^ b = 49</span>            c <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"~a = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ~a = -61</span>            c <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a &lt;&lt; 2 = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a &lt;&lt; 2 = 240</span>            c <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a &gt;&gt; 2 = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a &gt;&gt; 2 = 15</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-赋值运算符">4.5 赋值运算符</h3><table><thead><tr><th>赋值运算符</th><th>描述</th><th>赋值运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>右边赋值给左边</td><td><code>+=</code></td><td>左边+右边赋值给左边</td></tr><tr><td><code>-=</code></td><td>左边-右边赋值给左边</td><td><code>*=</code></td><td>左边*右边赋值给左边</td></tr><tr><td><code>/=</code></td><td>左边/右边赋值给左边</td><td><code>%=</code></td><td>左边%右边赋值给左边</td></tr><tr><td><code>&lt;&lt;=</code></td><td>左移且赋值给左边</td><td><code>&gt;&gt;=</code></td><td>右移且赋值给左边</td></tr><tr><td><code>&amp;=</code></td><td>按位与且赋值给左边</td><td><code>^=</code></td><td>按位异或且赋值给左边</td></tr><tr><td><code>|=</code></td><td>按位或且赋值给左边</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AssignmentOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> c<span class="token punctuation">;</span>            c <span class="token operator">=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21</span>            c <span class="token operator">+=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 42</span>            c <span class="token operator">-=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21</span>            c <span class="token operator">*=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 441</span>            c <span class="token operator">/=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21</span>            c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            c <span class="token operator">%=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 11</span>            c <span class="token operator">&lt;&lt;=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 23068672</span>            c <span class="token operator">&gt;&gt;=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 11</span>            c <span class="token operator">&amp;=</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 2</span>            c <span class="token operator">^=</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 0</span>            c <span class="token operator">|=</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 2</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-其他运算符">4.6 其他运算符</h3><table><thead><tr><th>其他运算符</th><th>描述</th><th>其他运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>sizeof()</code></td><td>返回数据类型的大小</td><td><code>typeof()</code></td><td>返回class的类型</td></tr><tr><td><code>&amp;</code></td><td>返回变量的地址</td><td><code>*</code></td><td>变量的指针</td></tr><tr><td><code>is</code></td><td>判断对象是否为某一类型</td><td><code>as</code></td><td>强制转换，即使失败也不抛异常</td></tr><tr><td><code>?:</code></td><td>三元运算符</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AssignmentOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"int的大小是{0}"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int的大小是4</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"short的大小是{0}"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">short</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// short的大小是2</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"double的大小是{0}"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">double</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// double的大小是8</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token number">20</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"b的值是{0}"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// b的值是30</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-条件控制">5. 条件控制</h2><h3 id="5-1-if语句">5.1 if语句</h3><p>由一个布尔表达式后跟一个或多个语句组成。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IfStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token comment">// 使用if语句检查布尔条件，如果为真则进入if语句内</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a大于10</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 20</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-if…else语句">5.2 if…else语句</h3><p>一个<code>if</code>语句后跟一个可选的else语句，<code>else</code>语句在布尔表达式为<strong>false</strong>时执行。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IfElseStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token comment">// 使用if语句检查布尔条件，如果为真则进入if语句内，否则进入else语句内</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于或等于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于或等于10</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 5</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-if…else-if…else语句">5.3 if…else if…else语句</h3><p>一个<code>if</code>语句后可跟一个可选的<code>else if ... else</code>语句，用于测试多个条件：</p><ul><li>一个<code>if</code>后可跟零个或一个<code>else</code>，它必须在所有的<code>else if</code>之后</li><li>一个<code>if</code>后可跟两个或多个<code>else if</code>，它们必须在<code>else</code>之前</li><li>一旦某个<code>else if</code>匹配成功，其他<code>else if</code>或<code>else</code>将不会被测试</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IfElseIFElseStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a等于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于10</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 5</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-嵌套if语句">5.4 嵌套if语句</h3><p>嵌套<code>if</code>语句意味着你可以在一个<code>if</code>或<code>else if</code>语句内使用另一个<code>if</code>或<code>else if</code>语句。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NestedIfStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = 100, b = 200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 100, b = 200</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-switch语句">5.5 switch语句</h3><p>一个<code>switch</code>语句允许测试一个变量等于多个值时的情况。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SwitchStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> day <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Monday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Wednesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Thurday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Friday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Friday</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Saturday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sunday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-嵌套switch语句">5.6 嵌套switch语句</h3><p>可以在一个<code>switch</code>语句内使用另一个<code>switch</code>语句，不推荐这样做。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NestedSwitchStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">100</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 100</span>                    <span class="token keyword">switch</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">case</span> <span class="token number">200</span><span class="token punctuation">:</span>                            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"b = 200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// b = 200</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-三元运算符">5.7 三元运算符</h3><p>三元运算符又称条件运算符，可以用来代替<code>if...else</code>语句，形式如<code>Exp1 ? Exp2 : Exp3;</code>。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">TernaryOperatorTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> a <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span>            <span class="token comment">/* 等价于            int b;            if (a == 200)            {                b = 100;            }            else            {                b = 300;            }            */</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 100, b = 300</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-循环控制">6. 循环控制</h2><p>循环语句允许多次执行一个语句或语句组。</p><h3 id="6-1-while循环">6.1 while循环</h3><p>只要给定条件为真，<code>while</code>循环语句会重复执行一个目标语句，<code>while</code>循环又称为<strong>当型循环</strong>，在执行循环主体之前测试条件。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">WhileStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-for-foreach循环">6.2 for/foreach循环</h3><p><strong>for</strong></p><p><code>for</code>循环是允许编写一个执行特定次数循环的循环控制结构。</p><p>语法为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">for (init; condition; increment){    statement(s);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ForStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>foreach</strong></p><p><code>foreach</code>可以迭代数组或者一个集合对象。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ForeachStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num <span class="token keyword">in</span> array<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// num = 3</span>            <span class="token comment">// num = 4</span>            <span class="token comment">// num = 5</span>            <span class="token comment">// num = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-do…while循环">6.3 do…while循环</h3><p><code>do...while</code>循环是在尾部检查循环条件，直到给定的条件变为假为止。<code>do...while</code>又称<strong>直到型循环</strong>，会保证循环体至少执行一次。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DoWhileStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-嵌套循环">6.4 嵌套循环</h3><p><code>C#</code>允许在任何类型循环内嵌套任何类型的循环。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NestedLoopStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} * {1} = {2}\t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*1 * 1 = 11 * 2 = 2       2 * 2 = 41 * 3 = 3       2 * 3 = 6       3 * 3 = 91 * 4 = 4       2 * 4 = 8       3 * 4 = 12      4 * 4 = 161 * 5 = 5       2 * 5 = 10      3 * 5 = 15      4 * 5 = 20      5 * 5 = 251 * 6 = 6       2 * 6 = 12      3 * 6 = 18      4 * 6 = 24      5 * 6 = 30      6 * 6 = 361 * 7 = 7       2 * 7 = 14      3 * 7 = 21      4 * 7 = 28      5 * 7 = 35      6 * 7 = 42      7 * 7 = 491 * 8 = 8       2 * 8 = 16      3 * 8 = 24      4 * 8 = 32      5 * 8 = 40      6 * 8 = 48      7 * 8 = 56      8 * 8 = 641 * 9 = 9       2 * 9 = 18      3 * 9 = 27      4 * 9 = 36      5 * 9 = 45      6 * 9 = 54      7 * 9 = 63      8 * 9 = 72     9 * 9 = 81*/</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-break语句">6.5 break语句</h3><p><code>break</code>语句有两种用法：</p><ul><li>当<code>break</code>语句出现在一个循环内时，循环会立即终止，跳出当前循环体，执行下一条语句</li><li>可用于<code>switch</code>语句中终止一个<code>case</code></li></ul><p>注意，如果是嵌套循环，<code>break</code>循环只会跳出他所在的那一层循环。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BreakStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-continue语句">6.6 continue语句</h3><p><code>continue</code>语句会提前结束这次循环，开始下一次循环。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ContinueStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    a<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-数组">7. 数组</h2><p>数组是存储<strong>相同类型</strong>元素的固定大小的<strong>顺序</strong>集合，数组中某个指定元素是通过索引来访问的，所有的数组是由连续的内存位置组成，最低的地址对应第一个元素，最高的地址对应最后一个元素。</p><h3 id="7-1-声明">7.1 声明</h3><p>声明语法为<code>datatype[] arrayName;</code>，其中datatype用于指定数组内元素的类型，[]指定数组的大小，arrayName指定数组的名字，如<code>double[] balance;</code>。</p><h3 id="7-2-初始化">7.2 初始化</h3><p>声明一个数组不会在内存中初始化数组，当初始化数组遍历时，可以赋值给数组。</p><p>数组是一个引用类型，所以需要使用<code>new</code>关键字来创建数组的实例，如<code>double[] balance = new double[10];</code>。</p><h3 id="7-3-赋值">7.3 赋值</h3><p>赋值有多种形式，可以通过索引号赋值给单个的数组元素，如<code>balance[0] = 123.0;</code>。</p><p>也可以在声明的同时给数组赋值，如<code>double[] balance = {123.0, 456.0, 789.0};</code>。</p><p>还可以创建并初始化一个数组，如<code>int[] marks = new int[3]{1, 2, 3};</code>，此处可以省略数组的大小，即<code>int[] marks = new int[]{1, 2, 3};。</code></p><p>可以赋值给一个数组变量到另一个目标数组变量中，此时目标和源会指向相同的内存位置。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> marks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> marks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-4-访问数组元素">7.4 访问数组元素</h3><p>元素是通过带索引的数组名称来访问的，如<code>int a = numbers[1];</code>。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayTest1</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化</span>            <span class="token comment">// 循环赋值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 循环访问、遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0}] = {1}"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0] = 100</span>            <span class="token comment">// num[1] = 101</span>            <span class="token comment">// num[2] = 102</span>            <span class="token comment">// num[3] = 103</span>            <span class="token comment">// num[4] = 104</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了使用<code>for</code>循环来访问数组中每个元素，还可以使用<code>foreach</code>语句</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayTest2</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化</span>            <span class="token comment">// 循环赋值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 遍历</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token keyword">in</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0}] = {1}"</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0] = 100</span>            <span class="token comment">// num[1] = 101</span>            <span class="token comment">// num[2] = 102</span>            <span class="token comment">// num[3] = 103</span>            <span class="token comment">// num[4] = 104</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-多维数组">7.5 多维数组</h3><p><code>C#</code>支持多维数组，多维数组又称为矩形数组，二维数组是最简单最常用的多维数组，可以被认为是一个带有x行和y列的表格。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">TwoDArrayTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 声明初始化并赋值</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0},{1}] = {2}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0,0] = 1</span>            <span class="token comment">// num[0,1] = 2</span>            <span class="token comment">// num[1,0] = 3</span>            <span class="token comment">// num[1,1] = 4</span>            <span class="token comment">// num[2,0] = 5</span>            <span class="token comment">// num[2,1] = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-交替数组">7.6 交替数组</h3><p>交替数组是数组的数组，是一维数组。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AlternatingArrayTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 声明初始化并赋值</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0}][{1}] = {2}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">j</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0][0] = 1</span>            <span class="token comment">// num[0][1] = 2</span>            <span class="token comment">// num[1][0] = 3</span>            <span class="token comment">// num[1][1] = 4</span>            <span class="token comment">// num[2][0] = 5</span>            <span class="token comment">// num[2][1] = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-传递数组给函数">7.7 传递数组给函数</h3><p>可以传递数组作为函数的参数，可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayAndFunctionTest</span>    <span class="token punctuation">{</span>        <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetAverage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> sum <span class="token operator">/</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayAndFunctionTest</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayAndFunctionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> avg <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">GetAverage</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"avg = {0}"</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// avg = 2.5</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-8-参数数组">7.8 参数数组</h3><p>当声明一个方法时，可能无法确定传递给函数的参数数目，此时，可以使用参数数组解决该问题，参数数组通常用于传递未知数量的参数给函数。C#提供了<code>params</code>关键字，是调用数组为形参的方法时，既可以传递数组实参，又可以传递一组数组元素。其格式为<code>public 返回类型 方法名称(params 类型名称[] 数组名称)</code>。</p><p>注意：</p><ul><li>带<code>params</code>关键字的参数类型必须是一维数组，不能使用多维数组</li><li>不能和<code>ref</code>、<code>out</code>同时使用</li><li>带<code>params</code>关键字的参数必须是最后一个参数，并且只能运行一个<code>params</code>关键字</li><li>不能使用<code>params</code>来使用重载方法</li><li>没有<code>params</code>关键字的方法优先级高于有<code>params</code>关键字的方法</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayAndParamsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a + b = {0}"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a + b = 3</span>            <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 2 3 4 5</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">Test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 1 2 2</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-9-Array类">7.9 Array类</h3><p><code>Array</code>类是C#中所有数组的基类，他是在<code>System</code>命名空间定义的，<code>Array</code>类提供了各种用于数组的属性和方法。</p><p><strong>属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>IsFixedSize</code></td><td>获取一个值，该值指示数组是否带有固定大小</td></tr><tr><td><code>IsReadOnly</code></td><td>获取一个值，该值指示数组是否只读</td></tr><tr><td><code>Length</code></td><td>获取一个32位整数，该值表示所有维度的数组的元素总数</td></tr><tr><td><code>LongLength</code></td><td>获取一个64位整数，该值表示所有维度的数组的元素总数</td></tr><tr><td><code>Rank</code></td><td>获取数组的维度</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Clear</code></td><td>根据元素类型，设置数组中某个范围的元素为零、false或null</td><td><code>Copy(Array, Array, Int32)</code></td><td>从数组的第一个元素开始复制某个范围的元素到另一个数组的第一个元素位置</td></tr><tr><td><code>CopyTo(Array, Int32)</code></td><td>从当前的一维数组中复制所有元素到一个指定的一维数组的指定索引位置</td><td><code>GetLength</code></td><td>获取一个32位整数，表示指定维度的数组中的元素总和</td></tr><tr><td><code>GetLongLength</code></td><td>获取一个64位整数，表示指定维度的数组中的元素总和</td><td><code>GetLowerBound</code></td><td>获取数组中指定维度的下界</td></tr><tr><td><code>GetType</code></td><td>获取当前实例的类型</td><td><code>GetUpperBound</code></td><td>获取数组中指定维度的上界</td></tr><tr><td><code>GetValue(Int32)</code></td><td>获取一维数组中指定位置的值</td><td><code>IndexOf(Array, Object)</code></td><td>搜索指定的对象，返回整个一维数组中第一次出现的索引</td></tr><tr><td><code>Reverse(Array)</code></td><td>逆转整个一维数组中元素的顺序</td><td><code>SetValue(Object, Int32)</code></td><td>给一维数组中指定位置的元素设置值</td></tr><tr><td><code>Sort(Array)</code></td><td>使用数组的每个元素的<strong>IComparable</strong>接口实现排序</td><td><code>ToString</code></td><td>返回当前对象的字符串</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayClassTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"数组长度：{0}"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"原始数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Array<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"逆转数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Array<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"排序数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 数组长度：6</span>            <span class="token comment">// 原始数组：3 2 5 8 7 6 </span>            <span class="token comment">// 逆转数组：6 7 8 5 2 3 </span>            <span class="token comment">// 排序数组：2 3 5 6 7 8</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-10-Array、ArrayList与泛型List-T-的区别">7.10 Array、ArrayList与泛型List&lt;T&gt;的区别</h3><p><strong>Array</strong></p><p>数组<code>Array</code>是一个存储相同类型元素的固定大小的顺序集合，数组是用来存储数据的集合，通常认为数组是一个同一类型变量的集合。</p><p><code>Array</code>类是**C#**中所有数组的基类，在<code>System</code>空间定义的。</p><p>数组在内存中是连续存储的，所以优点是索引速度很快，赋值和修改元素也非常简单。</p><p>缺点是声明数组的时候必须指定数组的长度；如果数组太长会造成内存浪费，太短会造成数据溢出的错误；在数组两个数据间插入数据很麻烦。</p><p><strong>ArrayList</strong></p><p>为了解决数组的缺点，<strong>C#<strong>提供了<code>ArrayList</code>对象，<code>ArrayList</code>是在命名空间<code>System.Collections</code>下，使用该类时必须进行引用，同时继承了</strong>IList</strong>接口，提供了数据存储和检索。</p><p><code>ArrayList</code>对象的大小是按照其中存储的数据来动态扩充与收缩的，不需要再声明时指定长度。</p><p><code>ArrayList</code>的默认初始容量是0，随着元素添加到<code>ArrayList</code>中，容量会根据需要重新分配自动增加。</p><p><code>ArrayList</code>解决了前面提到的Array数组的所有缺点，但是在存储或检索值类型时通常会发生装箱和拆箱操作，带来很大性能损耗，不是类型安全的。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}, Capacity: {1}"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> list<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">PrintValues</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Count: 3, Capacity: 4</span>            <span class="token comment">// Hello World !</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintValues</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable</span> list<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} "</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>泛型List&lt;T&gt;</strong></p><p>由于<code>ArrayList</code>存在不安全类型与装箱拆箱的缺点，所以出现了<code>List</code>类，该类使用大小可按需动态增加的数组实现<strong>IList</strong>泛型接口，是类型安全的，在声明<code>List</code>集合时，必须为其<code>List</code>集合内数据声明数据类型。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}, Capacity: {1}"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> list<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> e <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Count: 3, Capacity: 4</span>            <span class="token comment">// Hello World !</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：</p><ul><li><p>数组<code>Array</code>的容量固定，而<code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>的容量可自动扩充</p></li><li><p>数组<code>Array</code>可有多个维度，而<code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>始终只有一个维度</p></li><li><p>特定类型的数组<code>Array</code>性能优于<code>ArrayList</code>的性能</p></li><li><p><code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>基本等同，如果<code>List&lt;T&gt; </code>类的类型T是引用类型，则两个类的行为是完全相同的。如果T是值类型，需要考虑装箱和拆箱造成的性能损耗，<code>List&lt;T&gt; </code>是类型安全</p></li></ul><h2 id="8-枚举">8. 枚举</h2><p>枚举是一种类型，适用于某些取值范围有限的数据，枚举类型是使用<code>enum</code>关键字声明的，默认访问权限和类一样，都是<strong>internal</strong>，枚举的每一个值都是一个整型，默认是从0开始。</p><h3 id="8-1-声明">8.1 声明</h3><p>声明的一般语法为 <code>[访问权限修饰符] enum &lt;enum_name&gt; { enumeration list }</code></p><p>其中<code>enum_name</code>为枚举的类型名称，遵循大驼峰命名法，<code>enumeration list</code>是一个用逗号分割的标识符列表，如</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Days</span><span class="token punctuation">{</span>    Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-访问">8.2 访问</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">EnumTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">enum</span> <span class="token class-name">Days</span> <span class="token punctuation">{</span>Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Days<span class="token punctuation">.</span>Sun<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Sun</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Days<span class="token punctuation">.</span>Sun<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Days<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Thu</span>            <span class="token class-name">Days</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Days<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Thu</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-字符串">9. 字符串</h2><h3 id="9-1-创建String对象">9.1 创建String对象</h3><p>使用以下方法来创建<code>String</code>对象：</p><ul><li>通过给<code>String</code>变量指定一个字符串</li><li>通过使用<code>String</code>类构造函数</li><li>通过使用字符串串联符号<code>+</code></li><li>通过检索属性或调用一个返回字符串的方法</li><li>通过格式化方法来转换一个值或对象为它的字符串表示形式</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StringCreateTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 指定一个字符串</span>            <span class="token class-name"><span class="token keyword">string</span></span> fname<span class="token punctuation">,</span> lname<span class="token punctuation">;</span>            fname <span class="token operator">=</span> <span class="token string">"Harry"</span><span class="token punctuation">;</span>            lname <span class="token operator">=</span> <span class="token string">"Peter"</span><span class="token punctuation">;</span>            <span class="token comment">// 通过+符号连接</span>            <span class="token class-name"><span class="token keyword">string</span></span> fullname <span class="token operator">=</span> fname <span class="token operator">+</span> lname<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Full Name: {0}"</span><span class="token punctuation">,</span> fullname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Full Name: HarryPeter</span>            <span class="token comment">// 使用string构造函数</span>            <span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> greetings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Greetings: {0}"</span><span class="token punctuation">,</span> greetings<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Greetings: Hello</span>            <span class="token comment">// 方法返回字符串</span>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sarray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"From"</span><span class="token punctuation">,</span> <span class="token string">"C#"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> sarray<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Message: {0}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Message: Hello from C#</span>            <span class="token comment">// 用于转化值的格式化方法</span>            <span class="token class-name">DateTime</span> waiting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> chat01 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"Message sent at {0:t} on {0:D}"</span><span class="token punctuation">,</span> waiting<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Message: {0}"</span><span class="token punctuation">,</span> chat01<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Message: Message sent at 9:01 on Monday, October 10, 2022</span>            <span class="token class-name"><span class="token keyword">string</span></span> chat02 <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Message sent at </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">waiting</span><span class="token format-string"><span class="token punctuation">:</span>t</span><span class="token punctuation">}</span></span><span class="token string"> on </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">waiting</span><span class="token format-string"><span class="token punctuation">:</span>D</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Message: {0}"</span><span class="token punctuation">,</span> chat02<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Message: Message sent at 9:01 on Monday, October 10, 2022</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-属性和方法">9.2 属性和方法</h3><p><code>String</code>类有两个属性:</p><ul><li><code>Chars</code>：在当前<code>String</code>对象中获取<code>Char</code>对象的指定位置</li><li><code>Length</code>：在当前<code>String</code>对象中获取字符数</li></ul><p><code>String</code>类的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td><code>public static int Compare(string strA, string strB)</code></td><td>比较两个指定的string对象，并返回一个表示他们在排列顺序中相对位置的整数。该方法区分大小写</td><td><code>public static int Compare(string strA, string strB, bool ignoreCase)</code></td><td>比较两个指定的string对象，并返回一个表示他们在排列顺序中相对位置的整数。该方法不区分大小写</td></tr><tr><td><code>public static string Concat(string str0, string str1)</code></td><td>连接两个string对象</td><td><code>public static string Concat(string str0, string str1, string str2)</code></td><td>连接三个string对象</td></tr><tr><td><code>public static string Concat(string str0, string str1, string str2, string str3)</code></td><td>连接四个string对象</td><td><code>public bool Contains(string value)</code></td><td>返回一个表示指定string对象是否出现在字符串中的值</td></tr><tr><td><code>public static string Copy(string str)</code></td><td>创建一个与指定字符串具有相同值的新string对象</td><td><code>public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)</code></td><td>从string对象的指定位置开始复制指定数量的字符到Unicode字符数组中的指定位置</td></tr><tr><td><code>public bool EndsWith(string value)</code></td><td>判断string对象的结尾是否匹配指定的字符串</td><td><code>public bool Equals(string value)</code></td><td>判断当前的string对象是否与指定的string对象具有相同的值</td></tr><tr><td><code>public static bool Equals(string value)</code></td><td>判断两个指定的string对象是否具有相同的值</td><td><code>public static string Format(string format, Object arg0)</code></td><td>把指定字符串中一个或多个格式项替换为指定对象的字符串表示形式</td></tr><tr><td><code>public int IndexOf(char value)</code></td><td>返回指定Unicode字符在当前字符串中第一次出现的索引，索引从0开始</td><td><code>public int IndexOf(string value)</code></td><td>返回指定字符串在该实例中第一次出现的索引，索引从0开始</td></tr><tr><td><code>public int IndexOf(char value, int startIndex)</code></td><td>返回指定Unicode字符在当前字符串中指定字符位置开始搜索第一次出现的索引，索引从0开始</td><td><code>public int IndexOf(string value, int startIndex)</code></td><td>返回指定字符串在当前字符串中指定字符位置开始搜索第一次出现的索引，索引从0开始</td></tr><tr><td><code>public int IndexOfAny(char[] anyOf)</code></td><td>返回某一个指定的Unicode字符数组中任意字符在该实例中第一次出现的索引，索引从0开始</td><td><code>public int IndexOfAny(char[] anyOf, int startIndex)</code></td><td>返回某一个指定的Unicode字符数组从任意字符指定字符位置开始搜索第一次出现的索引，索引从0开始</td></tr><tr><td><code>public string Insert(int startIndex, string value)</code></td><td>返回一个新的字符串，其中，指定的字符串被插入在当前string对象的指定索引位置</td><td><code>public static bool IsNullOrEmpty(string value)</code></td><td>指示指定的字符串是否为null或者是否为一个空的字符串</td></tr><tr><td><code>public static string Join(string separator, string[] value)</code></td><td>连接一个字符串数组中的所有元素，使用指定的分隔符分割每个元素</td><td><code>public static string Join(string separator, string[] value, int startIndex, int count)</code></td><td>连接一个字符串数组中从指定位置开始的元素，使用指定的分隔符分割每个元素</td></tr><tr><td><code>public int LastIndexOf(char value)</code></td><td>返回指定Unicode字符在当前string对象中最后一次出现的索引位置，索引从0开始</td><td><code>public int LastIndexOf(string value)</code></td><td>返回指定字符串在当前string对象中最后一次出现的索引位置，索引从0开始</td></tr><tr><td><code>public string Remove(int startIndex)</code></td><td>移除当前实例中的所有字符，从指定位置开始，一直到最后一个位置为止，并返回字符串</td><td><code>public string Remove(int startIndex, int count)</code></td><td>从当前字符串的指定位置开始移除指定数量的字符，并返回字符串</td></tr><tr><td><code>public string Replace(char oldChar, char newChar)</code></td><td>把当前string对象中，所有指定的Unicode字符替换为另一个Unicode字符，并返回新的字符串</td><td><code>public string Replace(string oldValue, string newValue)</code></td><td>把当前string对象中，所有指定的字符串替换为另一个指定的字符串，并返回新的字符串</td></tr><tr><td><code>public string[] Split(params char[] separator)</code></td><td>返回一个字符串数组，包含当前的string对象中的子字符串，子字符串是按照指定的Unicode字符数组中的元素进行分隔的</td><td><code>public string[] Split(char[] separator, int count)</code></td><td>返回一个字符串数组，包含当前的string对象中的子字符串，子字符串是按照指定的Unicode字符数组中的元素进行分隔的,count指定要返回的子字符串最大数目</td></tr><tr><td><code>public bool StartsWith(string value)</code></td><td>判断字符串实例的开头是否匹配指定的字符串</td><td><code>public char[] ToCharArray()</code></td><td>返回一个带有当前string对象中所有字符的Unicode字符数组</td></tr><tr><td><code>public char[] ToCharArray(int startIndex, int length)</code></td><td>返回一个带有当前string对象中所有字符的Unicode字符数组，从指定索引开始，直到到达指定的长度为止</td><td><code>public string ToLower()</code></td><td>把字符串转换为小写并返回</td></tr><tr><td><code>public string ToUpper()</code></td><td>把字符串转换为大写并返回</td><td><code>public string Trim()</code></td><td>移除当前string对象中前后所有的空白字符</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StringMethodsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> <span class="token string">"This is text"</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> <span class="token string">"This is test"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">" are equal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">" are not equal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// This is text and This is test are not equal.</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The sequence 'text' was found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// The sequence 'text' was found.</span>            <span class="token punctuation">}</span>            <span class="token class-name"><span class="token keyword">string</span></span> substr <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// text</span>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> strarray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token string">"Hello world"</span><span class="token punctuation">,</span> <span class="token string">"Hello Csharp"</span><span class="token punctuation">,</span> <span class="token string">"Hello Sunday"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> strarray<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Hello world</span>            <span class="token comment">// Hello Csharp</span>            <span class="token comment">// Hello Sunday</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-命名空间">10. 命名空间</h2><p>命名空间的设计目的是提供一种让一组名称与其他名称分隔的方式，可以使一个命名空间中声明的类名与另一个命名空间中声明的同类名不冲突。举个例子，一个文件夹中可以包含多个文件夹，每一个文件夹中不能有相同的文件名，但是不同文件夹中的文件可以重名。</p><h3 id="10-1-定义">10.1 定义</h3><p>以关键字<code>namespace</code>开始，后跟命名空间的名字</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">FirstSpace</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ClassA</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside FirstSpace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token namespace">SecondSpace</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ClassA</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside SecondSpace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">FirstSpace<span class="token punctuation">.</span>ClassA</span> fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FirstSpace<span class="token punctuation">.</span>ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecondSpace<span class="token punctuation">.</span>ClassA</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SecondSpace<span class="token punctuation">.</span>ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fc<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside FirstSpace</span>        sc<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside SecondSpace</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-using的用法">10.2 using的用法</h3><ul><li><code>using指令</code>：可以引入命名空间，如：</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>using static指令</code>：无需指定类型名称即可访问其静态成员的类型。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Math</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token operator">=</span> PI<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>起别名</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token class-name">Project</span> <span class="token operator">=</span> <span class="token class-name">PC<span class="token punctuation">.</span>MyCompany<span class="token punctuation">.</span>Project</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>using语句</code>：将实例与代码绑定。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Font</span> font3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">10.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              font4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">10.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// Use font3 and font4.</span><span class="token punctuation">}</span><span class="token comment">// 代码段结束时，自动调用font3和font4的Dispose方法，释放实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-嵌套命名空间">10.3 嵌套命名空间</h3><p>命名空间可以被嵌套，即可以在一个命名空间内部定义另一个命名空间，使用点运算符访问嵌套命名空间的成员。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">SomeNameSpace</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">SomeNameSpace<span class="token punctuation">.</span>Nested</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">SomeNameSpace</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside SomeNameSpace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside SomeNameSpace</span>            Nested<span class="token punctuation">.</span>ClassB<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside Nested</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 内嵌命名空间</span>    <span class="token keyword">namespace</span> <span class="token namespace">Nested</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassB</span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside Nested"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-类">11. 类</h2><p>类是对象的蓝图，对象是类的实例，构成类的方法和变量称为类的成员。</p><h3 id="11-1-定义">11.1 定义</h3><p>类的定义是以关键字<code>class</code>开始的，后跟类的名称，类的主体包含在一对花括号里面，主体的组成可能包括构造函数、析构函数、成员变量、成员函数，如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access</span> <span class="token attr-name">specifier</span><span class="token punctuation">&gt;</span></span> class class_name{    // member variables    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access</span> <span class="token attr-name">specifier</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">type</span><span class="token punctuation">&gt;</span></span> variable1;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access</span> <span class="token attr-name">specifier</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">type</span><span class="token punctuation">&gt;</span></span> variable2;    // member methods    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access</span> <span class="token attr-name">specifier</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>return</span> <span class="token attr-name">type</span><span class="token punctuation">&gt;</span></span> method1(parameter_list)    {        // method body    }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access</span> <span class="token attr-name">specifier</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>return</span> <span class="token attr-name">type</span><span class="token punctuation">&gt;</span></span> method2(parameter_list)    {        // method body    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问标识符<code>&lt;access specifier&gt;</code>指定了对类及其成员的访问权限，如果没有指定，则使用默认的访问标志符，类的默认访问标识符是<code>internal</code>，成员的默认访问标识符是<code>private</code>。</li><li>数据类型<code>&lt;data type&gt;</code>指定了变量的类型，返回类型<code>&lt;return type&gt;</code>指定了方法返回的数据类型</li><li>如果要访问类的成员，使用<code>.</code>运算符，其链接了对象的名称和成员的名称。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BoxApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> height<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Boxtest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">6.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">7.0</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">11.0</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">12.0</span><span class="token punctuation">;</span>            volume <span class="token operator">=</span> box1<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box1的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box1的体积：210</span>            volume <span class="token operator">=</span> box2<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box2的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box2的体积：1320</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-成员函数和封装">11.2 成员函数和封装</h3><p>类的成员函数是在类内部定义的函数，能在类的任何对象上操作，其能访问该对象的所有成员。</p><p>类的成员变量是对象的属性，且保持私有来实现封装，这些变量只能使用公共成员函数来访问。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BoxApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> height<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            height <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Boxtest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">11.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">12.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            volume <span class="token operator">=</span> box1<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box1的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box1的体积：210</span>            volume <span class="token operator">=</span> box2<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box2的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box2的体积：1320</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-构造函数">11.3 构造函数</h3><p>类的构造函数是类的一个特殊的成员函数，当创建类的新对象时执行。</p><p>构造函数的名称与类的名称完全相同，他没有任何返回类型。</p><p>默认的构造函数没有任何参数，但是可以定义一个带参数的构造函数来给对象赋初值。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">LineApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Line</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token comment">// 构造函数</span>        <span class="token keyword">public</span> <span class="token function">Line</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"对象已经创建，length = {0}"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Line</span> line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Line</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对象已经创建，length = 10</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线条的长度：{0}"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线条的长度：10</span>            line<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线条的长度：{0}"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线条的长度：6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-析构函数">11.4 析构函数</h3><p>类的析构函数是类的一个特殊的成员函数，当类的对象超出范围时执行。</p><p>析构函数的名称是在类的名称前加一个<code>~</code>符号，没有返回值也不接收任何参数。</p><p>析构函数用于在结束程序（如关闭文件、释放内存等）之前释放资源。</p><p>析构函数不能继承或重载。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">LineApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Line</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token comment">// 构造函数</span>        <span class="token keyword">public</span> <span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"对象已创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">~</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"对象已删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Line</span> line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对象已创建</span>            line<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线条的长度：{0}"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线条的长度：6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对象已删除</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-5-静态成员">11.5 静态成员</h3><p>使用关键字<code>static</code>可以把类成员定义为静态的，当声明一个类成员为静态时，意味着只有一个该静态成员的副本。</p><p>关键字<code>static</code>意味着类中只有一个该成员的实例，静态变量用于定义常量，因为他们的值可以通过直接调用类而不需要创建类的实例来获取。</p><p>静态变量可在成员函数或类定义外部进行初始化，也可以在内部初始化。</p><p>将类成员函数声明为<code>public static</code>无需实例化类即可调用类成员函数。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StaticApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StaticVar</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">StaticTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">StaticVar</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StaticVar</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s1<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s2<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s1<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"变量num: {0}"</span><span class="token punctuation">,</span> StaticVar<span class="token punctuation">.</span><span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 变量num: 3</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-结构体">12. 结构体</h2><p>结构体是值类型的数据结构，用来代表一个记录，可为单一变量存储各种数据类型的相关数据。</p><h3 id="12-1-定义">12.1 定义</h3><p>使用<code>struct</code>关键字来创建结构体，<code>struct</code>语句为程序定义了一个带有多个成员的结构体。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token comment">// 定义结构体</span><span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> title<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StructureTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Books</span> book1<span class="token punctuation">;</span>        <span class="token class-name">Books</span> book2<span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C#"</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token string">"Microsoft"</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token string">"C# Programing Guider"</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">49.5</span><span class="token punctuation">;</span>                book2<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Harry Peter"</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token string">"Lolly"</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token string">"Death Cup"</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">88.9</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book1 title: {0}"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book1 title: C#</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book1 price: {0}"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book1 price: 49.5</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book2 author: {0}"</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book2 author: Lolly</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book2 subject: {0}"</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book2 subject: Death Cup</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-2-特点">12.2 特点</h3><ul><li>结构体可带方法、字段、索引、属性、运算符方法和事件</li><li>结构体可定义带参数的构造函数，不能定义析构函数</li><li>结构体不能继承其他的结构或类</li><li>结构体不能作为其他结构或类的基础</li><li>结构可实现一个或多个接口</li><li>结构体成员不能指定为<code>abstract</code>、<code>virtual</code>或<code>protected</code></li><li>使用<code>New</code>操作符创建一个结构对象时，会调用适当的构造函数来创建结构体，结构体可以不使用<code>New</code>操作符即可被实例化</li><li>不使用<code>New</code>操作符，只有在所有的字段都被初始化之后，字段才能被赋值，对象才可用</li></ul><h3 id="12-3-类与结构体的区别">12.3 类与结构体的区别</h3><ul><li>类是引用类型，在堆中分配空间，栈中保存的只是引用，结构体是值类型，在栈中分配空间</li><li>结构体不支持继承</li><li>结构体不能声明默认的构造函数</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token comment">// 定义结构体</span><span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> title<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> SetValues <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> t<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        title <span class="token operator">=</span> t<span class="token punctuation">;</span>        author <span class="token operator">=</span> a<span class="token punctuation">;</span>        subject <span class="token operator">=</span> s<span class="token punctuation">;</span>        price <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"title: {0}"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"author: {0}"</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"subject: {0}"</span><span class="token punctuation">,</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"price: {0}"</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StructureTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Books</span> book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Books</span> book2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span><span class="token function">SetValues</span><span class="token punctuation">(</span><span class="token string">"C#"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft"</span><span class="token punctuation">,</span> <span class="token string">"C# Programing Guider"</span><span class="token punctuation">,</span> <span class="token number">49.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span><span class="token function">SetValues</span><span class="token punctuation">(</span><span class="token string">"Harry Peter"</span><span class="token punctuation">,</span> <span class="token string">"Lolly"</span><span class="token punctuation">,</span> <span class="token string">"Death Cup"</span><span class="token punctuation">,</span> <span class="token number">88.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// title: C#</span>        <span class="token comment">// author: Microsoft</span>        <span class="token comment">// subject: C# Programing Guider</span>        <span class="token comment">// price: 49.5</span>        book2<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// title: Harry Peter</span>        <span class="token comment">// author: Lolly</span>        <span class="token comment">// subject: Death Cup</span>        <span class="token comment">// price: 88.9</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-接口">13. 接口</h2><p>接口定义了所有类继承接口时应该遵循的语法合同，接口定义了语法合同“是什么”部分，派生类定义了语法合同”怎么做“部分。</p><p>接口定义了属性、方法和事件成员，接口只包含成员的声明，成员的定义是派生类的责任。</p><p>接口使得实现接口的类或结构在形式上保持一致。</p><p>抽象类在某种程度上与接口类似，但是他们只是用在当只有少数方法由基类声明，由派生类实现时。</p><p>抽象类不能直接实例化，但允许派生出具体的、具有实际功能的类。接口本身是不实现任何功能。</p><p>注意：</p><ul><li>接口方法不能用<code>public</code>、<code>private</code>、<code>abstarct</code>等访问修饰符修饰，接口内不能有字段变量、构造函数</li><li>接口内可以定义属性</li><li>实现接口时，必须和接口的格式一致</li><li>必须实现接口的所有方法</li><li>接口是解决C#的单继承问题，使类可以同时继承多个基类</li></ul><h3 id="13-1-定义">13.1 定义</h3><p>使用关键字<code>interface</code>声明，默认是<code>public</code>的，接口名通常以<code>I</code>字母开头，如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 定义接口</span><span class="token keyword">interface</span> <span class="token class-name">IMyInterface</span><span class="token punctuation">{</span>    <span class="token comment">// 接口成员，只有声明，无具体实现</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InterfaceImplementer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMyIterface</span></span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">InterfaceImplementer</span> iImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InterfaceImplementer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iImp<span class="token punctuation">.</span><span class="token function">MethodImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello My Iterface</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello My Iterface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-继承">13.2 继承</h3><p>如果一个接口继承其他接口，那么实现类或结构需要实现所有接口的成员。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IParentInterface</span><span class="token punctuation">{</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ParentInterfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IMyInterface</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IParentInterface</span></span><span class="token punctuation">{</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodToImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InterfaceImplementer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMyInterface</span></span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">InterfaceImplementer</span> iImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InterfaceImplementer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iImp<span class="token punctuation">.</span><span class="token function">MethodToImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// MethodToImplement() called</span>        iImp<span class="token punctuation">.</span><span class="token function">ParentInterfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ParentInterfaceMethod() called</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodToImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"MethodToImplement() called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ParentInterfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ParentInterfaceMethod() called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-方法">14. 方法</h2><p>C#中的方法（也称为函数）是一段具有签名（由函数名、参数类型和参数修饰符组成的函数信息）的代码块，用来实现特定的功能，一般组成：</p><ul><li>访问权限修饰符：用于指定函数对一个类的可见性</li><li>返回值类型：用于指定函数返回值的数据类型</li><li>函数名称：用于进行函数调用的唯一名称</li><li>参数列表：在调用函数时需要传递给函数的参数，参数列表是可选的，可为空</li><li>函数主体：其中包含了实现函数功能的若干代码</li></ul><h3 id="14-1-方法声明">14.1 方法声明</h3><p>方法声明语法如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access_specifier</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>return_type</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method_name</span><span class="token punctuation">&gt;</span></span>(parameter_list){    method_body;    return statement;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>&lt;access_specifier&gt;</code>为访问修饰符，<code>&lt;return_type&gt;</code>为返回值类型，<code>&lt;method_name&gt;</code>为方法名称，<code>paramater_list</code>为参数列表，<code>method_body</code>为方法主体，<code>return statement</code>为返回语句。访问权限修饰符、参数列表和返回语句是可选的。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MethodTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetMax</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>        result <span class="token operator">=</span> num1 <span class="token operator">&gt;</span> <span class="token class-name">num2 <span class="token punctuation">?</span></span> num1 <span class="token punctuation">:</span> num2<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-2-方法调用">14.2 方法调用</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MethodTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetMax</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>            result <span class="token operator">=</span> num1 <span class="token operator">&gt;</span> <span class="token class-name">num2 <span class="token punctuation">?</span></span> num1 <span class="token punctuation">:</span> num2<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res<span class="token punctuation">;</span>            <span class="token class-name">MethodTest</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MethodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">GetMax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"最大值是: {0}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 最大值是: 200</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3-递归调用">14.3 递归调用</h3><p>递归调用是方法自己调用自己。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> res<span class="token punctuation">;</span>            res <span class="token operator">=</span> num <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"5! = {0}"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5! = 120</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"7! = {0}"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7! = 5040</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-4-参数传递">14.4 参数传递</h3><p>不带参数的方法声明时<code>return_type</code>为<code>void</code>，当调用带有参数的方法时，需要向方法传递参数。C#有三种参数传递方式：</p><table><thead><tr><th>方式</th><th>描述</th></tr></thead><tbody><tr><td>值参数</td><td>这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。形参的值改变不会影响到实参的值，可以保证实参数据安全</td></tr><tr><td>引用参数</td><td>这种方法复制参数的内存位置引用给形式参数，意味着形参值的改变也会改变实参的值，使用<code>ref</code>关键字声明引用参数</td></tr><tr><td>输出参数</td><td>这个方式可以返回多个值，使用<code>out</code>关键字声明输出参数，可以不用return语句从函数中返回多个值</td></tr></tbody></table><h3 id="14-5-按值传递参数">14.5 按值传递参数</h3><p>参数默认的传递参数，这种方式实参和形参使用的是两个不同内存中的值。形参的值改变不会影响到实参的值，可以保证实参数据安全。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token comment">// 交换两个参数的值</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num2 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之前，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之后，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用方法之前，a = 100, b = 200</span>            <span class="token comment">// 调用方法之后，a = 100, b = 200</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-6-按引用传递参数">14.6 按引用传递参数</h3><p>引用参数是一个对变量的内存位置的引用，引用参数表示与提供给方法的实际参数具有相同的内存位置，因此，引用参数值的改变也会改变实际参数的值，需要使用<code>ref</code>关键字声明引用参数。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token comment">// 交换两个参数的值</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num2 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之前，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> a<span class="token punctuation">,</span> <span class="token keyword">ref</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之后，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用方法之前，a = 100, b = 200</span>            <span class="token comment">// 调用方法之后，a = 200, b = 100</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-7-按输出传递参数">14.7 按输出传递参数</h3><p><code>return</code>语句可用于只从函数中返回一个值，但是，可以使用输出参数来从函数中返回多个值，输出参数会把方法输出的数据赋给自己，提供给输出参数的变量不需要赋值。当需要从一个参数没有指定初始值的方法中返回值时，输出参数特别有用，需要使用<code>out</code>关键字声明引用参数。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token comment">// 交换两个参数的值</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>            y <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">out</span> a<span class="token punctuation">,</span> <span class="token keyword">out</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 13, b = 14</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-封装">15. 封装</h2><p>封装指把一个或多个项目封装在一个物理或逻辑的包中，封装是为了防止对实现细节的访问。</p><p>根据封装的具体需要，可以通过<strong>访问修饰符</strong>来设置使用者的访问权限。</p><ul><li><code>public</code> : 任何公有成员都可以被外部的类访问</li><li><code>private</code> : 只有同一个类中的函数可以访问他的私有成员</li><li><code>protected</code>：该类内部和继承类中可以访问</li><li><code>internal</code> : 同一个程序集的对象可以访问</li><li><code>protected internal</code> : <code>protected</code>和<code>internal</code>的并集，符合任意一条都可以访问</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">RectangelApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span>    <span class="token punctuation">{</span>        <span class="token comment">// 成员变量</span>        <span class="token keyword">internal</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">internal</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4.0</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 面积：20</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-继承">16. 继承</h2><p>继承是面向对象程序的特征之一，继承允许根据一个类来定义另一个类，有助于维护和创建程序，从而利于重用代码节省开发时间。</p><p>创建一个新类时，新类允许继承一个已有的类，通过继承可以创建新类时重用、扩展和修改被继承类中定义的成员，被继承的类称为“基类”，继承基类的类称为“派生类”。</p><p>注意，C#只支持单继承，派生类只能继承一个基类，但是继承是可以传递的。</p><h3 id="16-1-基类与派生类">16.1 基类与派生类</h3><p>派生类继承了基类的成员变量和成员方法。因此父类对象应在子类对象创建之前被创建。您可以在成员初始化列表中进行父类的初始化。</p><p>创建派生类的语法：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;访问修饰符&gt; class &lt;基类&gt;{    ...}class &lt;派生类&gt; : &lt;基类&gt;{    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"长度：{0}"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"宽度：{0}"</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">TableTop</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Rectangle</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">TableTop</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> cost<span class="token punctuation">;</span>            cost <span class="token operator">=</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> price<span class="token punctuation">;</span>            <span class="token keyword">return</span> cost<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"成本：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">TableTop</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TableTop</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 长度：4</span>        <span class="token comment">// 宽度：5</span>        <span class="token comment">// 面积：20</span>        <span class="token comment">// 成本：140</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-2-接口多重继承">16.2 接口多重继承</h3><p>多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。</p><p>C# 不支持多重继承，但可以使用接口来实现多重继承。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"> <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token comment">// 基类</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Area</span>  <span class="token comment">// 接口</span>    <span class="token punctuation">{</span>        <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span><span class="token punctuation">,</span> <span class="token class-name">Area</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"长度：{0}"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"宽度：{0}"</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 长度：4</span>        <span class="token comment">// 宽度：5</span>        <span class="token comment">// 面积：20</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-3-抽象类与接口区别">16.3 抽象类与接口区别</h3><ul><li>接口支持多继承，抽象类不能实现多继承</li><li>接口只能定义抽象规则，抽象类既能定义规则，还能提供已实现的成员</li><li>接口是一组行为规范，抽象类是一个不完全的类</li><li>接口可以用于支持回调，抽象类不能实现回调，因为继承不支持</li><li>接口只包含方法、属性、索引器、事件的签名，但不能定义字段和包含实现的方法，抽象类可以定义字段、属性、包含有实现的方法</li><li>接口可以作用于值类型和引用类型，抽象类只能作用于引用类型。例如<code>struct</code>就可以继承接口，而不能继承类。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span>  <span class="token comment">// 抽象类</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抽象方法</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span>  <span class="token comment">// 接口</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">;</span>  <span class="token comment">// 不能给字段赋值，写成public int a = 0;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 接口方法，继承接口的派生类必须实现此方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-多态性">17. 多态性</h2><p>多态性是指同一个行为具有多个不同表现形式或形态的能力，在面向对象编程中表现为"一个接口，多个功能"。</p><p>多态性可以分为<strong>编译时多态</strong>或者<strong>运行时多态</strong>，编译时多态（也称静态多态性）是编译时发生的函数响应，C# 提供了两种技术来实现编译时多态，分为函数重载和运算符重载。而运行时多态（也称动态多态性）是运行时发生的函数响应。</p><p>多态就是同一个接口使用不同实例而执行不同的操作。</p><h3 id="17-1-编译时多态">17.1 编译时多态</h3><p><strong>函数重载</strong></p><p>在同一范围内对相同函数名有多个定义，可以是参数类型或参数个数的不同，返回值类型除外。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReloadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> c<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输出整型：{0}"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> f<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输出浮点型型：{0}"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ReloadTest</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReloadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> add1 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> add2 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"add1 = {0}"</span><span class="token punctuation">,</span> add1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// add1 = 3</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"add2 = {0}"</span><span class="token punctuation">,</span> add2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// add2 = 6</span>            data<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出整型：1</span>            data<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出浮点型：1.23</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运算符重载</strong></p><p>见18. 运算符重载</p><h3 id="17-2-运行时多态">17.2 运行时多态</h3><p><strong>抽象类</strong></p><p>C#允许使用关键字<code>abstract</code>创建抽象类，用于提供接口的部分类的实现，当一个派生类继承自该抽象类时，实现即完成。抽象类包含抽象方法，抽象方法可由派生类实现。</p><p>注意：</p><ul><li>不能创建一个抽象类的实例</li><li>不能在一个抽象类外部声明一个抽象方法</li><li>通过关键字<code>sealed</code>可将类声明为密封类，该类不能被继承，抽象类不能被声明为密封类</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token comment">// 抽象类</span>    <span class="token punctuation">{</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抽象方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>  <span class="token comment">// 构造函数</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 重写抽象方法</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 面积：70</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚方法</strong></p><p>当有一个定义在类中的方法需要在继承类中实现时，可以使用关键字<code>virtual</code>声明虚方法，虚方法可以在不同的基础类中有不同的实现。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token comment">// 抽象类</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">,</span> width<span class="token punctuation">;</span>  <span class="token comment">// 成员变量</span>        <span class="token keyword">public</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>  <span class="token comment">// 构造函数</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 纯虚方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 具体实现</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Rectangle类的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> width <span class="token operator">*</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 具体实现</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Triangle类的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> width <span class="token operator">*</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Caller</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallArea</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Caller</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Triangle</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Triangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">CallArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Rectangle类的面积：20</span>            c<span class="token punctuation">.</span><span class="token function">CallArea</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Triangle类的面积：25</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-运算符重载">18. 运算符重载</h2><h3 id="18-1-定义">18.1 定义</h3><p>C#内置的运算符可以被重定义或重载，因此可以使用用户自定义类型的运算符。重载运算符是具有特殊名称的函数，是通过关键字<code>operator</code>后跟运算符符号来定义的，其余跟其他函数一样，有返回类型和参数列表。如定义一个实现Box类加法运算符重载方法，实现两个Box对象对应属性相加，并返回。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> Box <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">,</span> <span class="token class-name">Box</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span>length <span class="token operator">=</span> b<span class="token punctuation">.</span>length <span class="token operator">+</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    box<span class="token punctuation">.</span>width <span class="token operator">=</span> b<span class="token punctuation">.</span>width <span class="token operator">+</span> c<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    box<span class="token punctuation">.</span>height <span class="token operator">=</span> b<span class="token punctuation">.</span>height <span class="token operator">+</span> c<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">return</span> box<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-2-实现">18.2 实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>   <span class="token keyword">class</span> <span class="token class-name">Box</span>   <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>  <span class="token comment">// 长度</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>  <span class="token comment">// 宽度</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> height<span class="token punctuation">;</span>  <span class="token comment">// 高度</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token keyword">return</span> length <span class="token operator">*</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         length <span class="token operator">=</span> l<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         width <span class="token operator">=</span> w<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         height <span class="token operator">=</span> h<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 重载 + 运算符来把两个 Box 对象相加</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Box <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">,</span> <span class="token class-name">Box</span> c<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         box<span class="token punctuation">.</span>length <span class="token operator">=</span> b<span class="token punctuation">.</span>length <span class="token operator">+</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         box<span class="token punctuation">.</span>width <span class="token operator">=</span> b<span class="token punctuation">.</span>width <span class="token operator">+</span> c<span class="token punctuation">.</span>width<span class="token punctuation">;</span>         box<span class="token punctuation">.</span>height <span class="token operator">=</span> b<span class="token punctuation">.</span>height <span class="token operator">+</span> c<span class="token punctuation">.</span>height<span class="token punctuation">;</span>         <span class="token keyword">return</span> box<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">Test</span>   <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token class-name">Box</span> Box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 声明 Box1，类型为 Box</span>         <span class="token class-name">Box</span> Box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 声明 Box2，类型为 Box</span>         <span class="token class-name">Box</span> Box3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 声明 Box3，类型为 Box</span>         <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>          <span class="token comment">// 体积</span>         <span class="token comment">// Box1 详述</span>         Box1<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box1<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box1<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Box2 详述</span>         Box2<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">12.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box2<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">13.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box2<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Box1 的体积</span>         volume <span class="token operator">=</span> Box1<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box1 的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box1的体积：210</span>         <span class="token comment">// Box2 的体积</span>         volume <span class="token operator">=</span> Box2<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box2 的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box2的体积：1560</span>         <span class="token comment">// 把两个对象相加</span>         Box3 <span class="token operator">=</span> Box1 <span class="token operator">+</span> Box2<span class="token punctuation">;</span>         <span class="token comment">// Box3 的体积</span>         volume <span class="token operator">=</span> Box3<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box3 的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box3的体积：5400</span>         Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-3-可重载与不可重载运算符">18.3 可重载与不可重载运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code>, <code>-</code>, <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code></td><td>一元运算符只有一个操作数，且可以被重载</td></tr><tr><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td>二元运算符带有两个操作数，且可以被重载</td></tr><tr><td><code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td><td>比较运算符可以被重载</td></tr><tr><td><code>&amp;&amp;</code>, <code>||</code></td><td>条件运算符不能被直接重载</td></tr><tr><td><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></td><td>赋值运算符不能被重载</td></tr><tr><td><code>=</code>, <code>.</code>, <code>?:</code>, <code>-&gt;</code>, <code>new</code>, <code>is</code>, <code>sizeof</code>, <code>typeof</code></td><td>这些运算符不能被重载</td></tr></tbody></table><h2 id="19-文件读写">19. 文件读写</h2><p>文件是存储在磁盘中的具有特定名称和目录路径的数据集合，当使用程序对文件进行读写时，程序会将文件以数据流的形式读入内存中。因此流可以看作是通过通信路径传递的字节序列。</p><p>流分为输入流和输出流，输入流主要用来从文件读取数据，输出流主要用于向文件写入数据。</p><h3 id="19-1-I-O类">19.1 I/O类</h3><p><code>System.IO</code>命名空间中包含了各种作用于文件操作的类，例如文件创建、删除、读取、写入等。</p><table><thead><tr><th>I/O类</th><th>描述</th><th>I/O类</th><th>描述</th></tr></thead><tbody><tr><td><code>BinaryReader</code></td><td>从二进制流中读取原始数据</td><td><code>BinaryWriter</code></td><td>以二进制格式写入原始数据</td></tr><tr><td><code>BufferedStream</code></td><td>临时存储字节流</td><td><code>Directory</code></td><td>对目录进行复制、移动、重命名、创建和删除等</td></tr><tr><td><code>DirectoryInfo</code></td><td>用于对目录执行操作</td><td><code>DriveInfo</code></td><td>获取驱动器信息</td></tr><tr><td><code>File</code></td><td>对文件进行操作</td><td><code>FileInfo</code></td><td>用于对文件执行操作</td></tr><tr><td><code>FileStream</code></td><td>用于文件中任何位置的读写</td><td><code>MomoryStream</code></td><td>用于随机访问存储在内存中的数据流</td></tr><tr><td><code>Path</code></td><td>对路径信息执行操作</td><td><code>StreamReader</code></td><td>用于从字节流中读取字符</td></tr><tr><td><code>StringReader</code></td><td>用于从字符串缓冲区读取数据</td><td><code>StringWriter</code></td><td>用于向字符串缓冲区写入数据</td></tr></tbody></table><h3 id="19-2-FileStream类">19.2 FileStream类</h3><p><code>FileStream</code>类在<code>System.IO</code>命名空间下，使用它可读取、写入和关闭文件。创建<code>FileStream</code>类对象的语法格式如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">FileStream <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object_name</span><span class="token punctuation">&gt;</span></span> = new FileStram(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file_name</span><span class="token punctuation">&gt;</span></span>, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileMode</span> <span class="token attr-name">Enumerator</span><span class="token punctuation">&gt;</span></span>, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileAccess</span> <span class="token attr-name">Enumerator</span><span class="token punctuation">&gt;</span></span>, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileShare</span> <span class="token attr-name">Enumerator</span><span class="token punctuation">&gt;</span></span>);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>FileStream</code>类中常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Close()</code></td><td>释放内存，关闭文件</td><td><code>CopyTo(Stream)</code></td><td>当前流读取字节并写入另一个流</td></tr><tr><td><code>Dispose()</code></td><td>是否流使用的所有资源</td><td><code>Equals(Object)</code></td><td>判断指定对象是否等于当前对象</td></tr><tr><td><code>Finalize()</code></td><td>确保资源回收和清理完成</td><td><code>Flush()</code></td><td>清除流的缓冲区，所有数据写入文件</td></tr><tr><td><code>GetHashCode()</code></td><td>获取哈希函数</td><td><code>GetType()</code></td><td>获取当前实例的Type</td></tr><tr><td><code>Lock(Int64, Int64)</code></td><td>防止其他进程读取或写入FileStream</td><td><code>Read(Byte[], Int32, Int32)</code></td><td>读取字节块并写入缓冲区</td></tr><tr><td><code>ReadByte()</code></td><td>读取单个字节</td><td><code>ToString()</code></td><td>返回当前对象的字符串</td></tr><tr><td><code>Unlock(Int64, Int64)</code></td><td>允许其他进程访问FileStream</td><td><code>Write(Byte[], Int32, Int32)</code></td><td>将字节块写入文件流</td></tr><tr><td><code>WriteByte(Byte)</code></td><td>写入单个字节到文件流当前位置</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">FileStream</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义文件流</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                file<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 写入字节</span>            <span class="token punctuation">}</span>            file<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 将读取位置重设为文件开头</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取字节</span>            <span class="token punctuation">}</span>            <span class="token comment">// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 </span>            file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭文件流</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-3-高级文件操作">19.3 高级文件操作</h3><p>其他高级的I/O文件操作，如文本文件的读写，二进制文件的读写，Windows文件系统的操作等详见<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">官方文档</a>。</p><h2 id="20-预处理器">20. 预处理器</h2><p>预处理器指令指导编译器在实际编译开始之前对信息进行预处理。</p><p>所有的预处理器指令都是以<code>#</code>开始的，一个预处理器指令必须是该行上唯一的指令。</p><table><thead><tr><th>预处理器指令</th><th>描述</th><th>预处理器指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义一系列称为符号的字符</td><td><code>#undef</code></td><td>取消定义的字符</td></tr><tr><td><code>#if</code></td><td>测试符号是否为真</td><td><code>#else</code></td><td>创建符合条件指令，与#if一起使用</td></tr><tr><td><code>#elif</code></td><td>创建符合条件指令，与#if一起使用</td><td><code>#endif</code></td><td>指定一个条件指令的结束</td></tr><tr><td><code>#line</code></td><td>可修改编辑器的行数以及删除错误和警告的文件名</td><td><code>#error</code></td><td>从代码指定位置生成一个错误</td></tr><tr><td><code>#warning</code></td><td>从代码指定位置生成一个警告</td><td><code>#region</code></td><td>指定可折叠代码块的起始</td></tr><tr><td><code>#endregion</code></td><td>#region块的结束</td><td><code>#pragma</code></td><td>抑制或还原指定的编译警告</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">define</span> DEBUG</span><span class="token preprocessor property">#<span class="token directive keyword">define</span> RELEASE</span><span class="token preprocessor property">#<span class="token directive keyword">pragma</span> warning disable 168 </span><span class="token comment">// 取消编号168的警告</span><span class="token preprocessor property">#<span class="token directive keyword">pragma</span> warning restore 168 </span><span class="token comment">// 还原编号168的警告 </span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">if</span> (DEBUG &amp;&amp; !RELEASE)</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DEBUG is defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">elif</span> (!DEBUG &amp;&amp; RELEASE)</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"RELEASE is defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">elif</span> (DEBUG &amp;&amp; RELEASE)</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DEBUG and RELEASE are defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// DEBUG and RELEASE are defined</span>        <span class="token preprocessor property">#<span class="token directive keyword">else</span> </span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DEBUG and RELEASE are not defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#</span><span class="token return-type class-name">endif</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-异常处理">21. 异常处理</h2><p>异常是在程序执行期间出现的问题，C#中的异常是对程序运行时出现的特殊情况的一种响应，比如尝试除以零。</p><p>异常提供了一种把程序控制权从某个部分转移到另一个部分的方式。</p><h3 id="21-1-语法">21.1 语法</h3><p>C#异常处理是建立在<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>四个关键词之上的。</p><ul><li><code>try</code>：一个try块标识了一个将被激活的特定的异常代码块，后跟一个或多个<code>catch</code>块</li><li><code>catch</code>：程序通过异常处理程序捕获异常，<code>catch</code>关键字表示异常的捕获</li><li><code>finally</code>：用于执行给定的语句，不管异常是否被抛出都会执行</li><li><code>throw</code>：当出现问题时，程序抛出一个异常，使用该关键字来完成</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment">// 可能引起异常的语句</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionName</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 错误处理代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionName</span> e2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 错误处理代码</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment">// 无论是否抛出异常，都会执行的语句</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-2-异常类">21.2 异常类</h3><p>C#异常是用类来表示的，异常类主要是直接或间接派生自<code>System.Exception</code>类。<code>System.ApplicationException</code>类支持由应用程序生成的异常，自定义类都应派生自该类。</p><p><code>System.SystemException</code>类是所有预定义的系统异常的基类。</p><table><thead><tr><th>异常类</th><th>描述</th><th>异常类</th><th>描述</th></tr></thead><tbody><tr><td><code>System.IO.IOException</code></td><td>处理I/O错误</td><td><code>System.IndexOutOfRangeException</code></td><td>处理数组索引超范围错误</td></tr><tr><td><code>System.ArrayTypeMismatchException</code></td><td>处理数组类型不匹配错误</td><td><code>System.NullReferenceException</code></td><td>处理当依次空对象时错误</td></tr><tr><td><code>System.DivideByZeroException</code></td><td>处理当除以零时错误</td><td><code>System.InvalidCastException</code></td><td>处理类型转换期间错误</td></tr><tr><td><code>System.OutOfMemoryException</code></td><td>处理空间内存不足错误</td><td><code>System.StackOverflowException</code></td><td>处理栈溢出错误</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ErrorHandleApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DivNumbers</span>    <span class="token punctuation">{</span>        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>        <span class="token function">DivNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">division</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                result <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DivideByZeroException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Exception caugth: {0}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Result: {0}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">DivNumbers</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DivNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d<span class="token punctuation">.</span><span class="token function">division</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* Exception caugth: System.DivideByZeroException: Attempted to divide by zero.  at ErrorHandleApplication.DivNumbers.division (System.Int32 num1, System.Int32 num2) [0x00000] in &lt;c41f6dc696cc46ac9b099084f035765f&gt;:0 Result: 0*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-3-自定义异常">21.3 自定义异常</h3><p>用户可以创建自定义异常，派生自<code>ApplicationException</code>类。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 自定义异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TempIsZeroException</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ApplicationException</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">TempIsZeroException</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Temperature</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token keyword">int</span></span> temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temperature <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 抛出异常</span>            <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TempIsZeroException</span><span class="token punctuation">(</span><span class="token string">"Zero temperature"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Temperature: {0}"</span><span class="token punctuation">,</span> temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token namespace">UserDefineExecption</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">TempTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Temperature</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Temperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">ShowTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TempIsZeroException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"TempIsZeroException: {0}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// TempIsZeroException：Zero temperature</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章">参考文章</h2><p>本文是笔者通过下列网站教程学习C#基础的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/csharp/csharp-tutorial.html">【菜鸟教程C#教程】</a></p><p>2.<a href="http://c.biancheng.net/csharp/">【C语言中文网C#教程】</a></p><p>3.<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">【微软C#官方文档】</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境的使用</title>
      <link href="/posts/19904.html"/>
      <url>/posts/19904.html</url>
      
        <content type="html"><![CDATA[<p>python虚拟环境的主要目的是为Python项目创建一个隔离的环境，意味着每个环境都可以拥有自己的依赖项。</p><h2 id="1-安装virtualenv">1.安装virtualenv</h2><p><code>pip install virtualenv</code></p><h2 id="2-创建虚拟环境并指定Python版本">2.创建虚拟环境并指定Python版本</h2><p><code>virtualenv venv --python=python3.8</code></p><h2 id="3-进入虚拟环境">3.进入虚拟环境</h2><p><code>source bin/active</code></p><h2 id="4-退出虚拟环境">4.退出虚拟环境</h2><p><code>deactive</code></p><h2 id="5-删除虚拟环境">5.删除虚拟环境</h2><p><code>rm -r venv</code></p><h2 id="6-生成requirements-txt文件">6.生成requirements.txt文件</h2><p><strong>方法一:</strong></p><p><code>pip freeze &gt; requirements.txt</code></p><p><strong>方法二:</strong></p><p><code>pip install pipreqs</code></p><p><code>pipreqs ./ --encoding=utf-8 --force</code></p><h2 id="7-使用requirements-txt文件">7.使用requirements.txt文件</h2><p><code>pip install -r requirements.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> 使用记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua语言学习笔记</title>
      <link href="/posts/5067.html"/>
      <url>/posts/5067.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-环境准备-2">0. 环境准备</h2><h3 id="0-1-简介-2">0.1 简介</h3><p><strong>Lua</strong>是由标准C编写而成的脚本语言，诞生于1993年，具有<strong>高效性</strong>、<strong>可移植性</strong>、<strong>可嵌入性</strong>、<strong>简单强大</strong>、<strong>小巧轻便</strong>、<strong>免费开源</strong>等诸多优点，主要应用场景包括做为嵌入脚本、做为独立脚本、用于应用程序的动态配置、游戏开发以及Web应用脚本等。</p><h3 id="0-2-Windows下载与安装Lua">0.2 Windows下载与安装Lua</h3><ol><li>选择合适版本的Lua语言开发包<a href="http://joedf.ahkscript.org/LuaBuilds/">下载</a></li><li>解压下载好的Lua压缩包到合适的路径</li><li>将Lua的解压路径添加到环境变量<code>Path</code>中</li><li>打开Windows命令行工具，输入指令<code>lua</code>，命令行输出Lua版本信息，安装成功</li></ol><h3 id="0-3-CentOS下载与安装Lua">0.3 CentOS下载与安装Lua</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz  # 拉取合适的Lua包tar -C /usr/local -zxvf lua-5.4.4.tar.gz  # 解压到合适的目录下cd /usr/local/lua-5.4.4/  # 进入Lua包解压路径make all test  # 开始安装ln -s /usr/local/lua-5.4.4/src/lua /usr/bin/lua  # 建立连接（可选步骤）lua -v  # 查看版本，输出Lua版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0-4-推荐IDE">0.4 推荐IDE</h3><ol><li>VSCode(微软出品) + Lua扩展插件(Tencent出品)</li><li>在线IDE  <a href="https://replit.com/languages/lua">https://replit.com/languages/lua</a></li></ol><h2 id="1-基本数据类型">1. 基本数据类型</h2><h3 id="1-1-table">1.1 table</h3><p><strong>table类型</strong>是一个"关联数组"，需要注意：</p><ol><li>table的索引可以是数字或者是字符串，所有索引值都需要用<code>[</code>和<code>]</code>括起来，如果是字符串，还可以去掉引号和中括号</li><li>table的默认初始索引一般以1开始，如果不写索引，则索引会被认为是数字，并按顺序自动从1往后排</li><li>table变量只是一个地址引用，对table操作不会产生数据影响</li><li>table不固定长度大小，有新数据插入时长度会自动增长</li><li>table里保存数据可以是任何类型，包括<code>function</code>和<code>table</code></li><li>table所有元素之间用逗号<code>,</code>隔开</li></ol><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 初始化</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 指定值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"lua"</span>mytable<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"table"</span><span class="token comment">-- 修改值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token comment">-- 获取值</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 输出：Lua</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">-- 输出：table</span><span class="token comment">-- 移除引用</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-string">1.2 string</h3><p><strong>string类型</strong>可以使用双引号<code>""</code>或单引号<code>''</code>声明，如果是块字符串，可以以<code>[[</code>开始，以<code>]]</code>结尾。<br>字符串不可修改值，可以通过<code>string.gsub</code>函数来替换字符串中的子串。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token string">'1024'</span>b <span class="token operator">=</span> <span class="token string">'3.14159'</span>c <span class="token operator">=</span> <span class="token string">"Hello"</span>d <span class="token operator">=</span> <span class="token string">"2022"</span>e <span class="token operator">=</span> <span class="token string">[[&lt;html&gt;&lt;head /&gt;&lt;body&gt;&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment">-- 输出：1024   3.14159 Hello  2022</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">--[[ 输出：&lt;html&gt;&lt;head /&gt;&lt;body&gt;&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-number">1.3 number</h3><p><strong>number类型</strong>只有一种，即<strong>双精度浮点double类型</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">1024</span>b <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1024    number</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：3.14159 number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-boolean">1.4 boolean</h3><p><strong>boolean类型</strong>只有两个可选值：<strong>true</strong>（真）和 <strong>false</strong>（假）。<strong>判断时false和nil都是假，其他都为真</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token keyword">true</span>b <span class="token operator">=</span> <span class="token keyword">false</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：true    boolean</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：false   boolean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-nil">1.5 nil</h3><p><strong>nil类型</strong>表示一个无效值，只有值<code>nil</code>，如果打印没有赋值的变量，则会输出nil。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"first: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：first:  nil</span>a <span class="token operator">=</span> <span class="token number">1024</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"second: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：second:   1024</span>a <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"third: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：third:  nil</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"nil"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a is nil"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a is not nil"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 输出：a is nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：要判断变量是否为 nil 的时候，需要使用 type 获取变量的类型，然后与字符串的 nil 进行比较</p><h3 id="1-6-function">1.6 function</h3><p><strong>function类型</strong>是由C或Lua编写的完成某一功能的程序指令的集合，称为函数，可分为<strong>自定义函数</strong>和<strong>系统函数</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">end</span>result1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result1 = %d, result2 = %d"</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：result1 = 300, result2 = 1123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-thread">1.7 thread</h3><p><strong>thread类型</strong>表示执行的独立线路，用于执行协同程序。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">end</span>cor <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>cor<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>cor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：thread: 0x13691f0   thread--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8-userdata">1.8 userdata</h3><p><strong>userdata类型</strong>是一种用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型，可以将任意C/C++的任意数据类型的数据存储在Lua变量中调用。</p><p>userdata可分为<strong>full userdata</strong>和<strong>light userdata</strong>。</p><table><thead><tr><th></th><th>full userdata</th><th>light userdata</th></tr></thead><tbody><tr><td>定义</td><td>用户自定义数据</td><td>一种表示C指针的值，不用创建</td></tr><tr><td>使用</td><td>需要显示的创建一块内存，该段内存有Lua垃圾回收器管理，不需要使用者关心</td><td>存储在栈上，使用者需要关心内存使用</td></tr><tr><td>创建</td><td>没有进行参数合法性检查<br><code>void *lua_newuserdata(lua State *L, size_t size);</code><br>有进行参数合法性检查<br><code>void *lua_checkudata(lua State *L, int arg, const char *tname);</code></td><td><code>void lua_pushlightuserdata(lua_State *L, void *p);</code></td></tr><tr><td>其他</td><td>可以指定其<strong>metatable</strong>和<strong>metamethods</strong></td><td>不可以指定其<strong>metatable</strong>和<strong>metamethods</strong></td></tr></tbody></table><h2 id="2-注释">2. 注释</h2><h3 id="2-1-单行注释">2.1 单行注释</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 这是行注释</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">)</span><span class="token comment">-- 这是行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-多行注释">2.2 多行注释</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--[[这是块注释，块注释可以注释多行内容--]]</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-变量">3. 变量</h2><p>变量相当于内存中一个数据存储空间的表示，通过变量名可以访问到变量的具体的值。</p><p>Lua的变量在定义时不需要指定明确的类型，而是会根据赋的默认值来断定变量的类型。</p><h3 id="3-1-变量赋值">3.1 变量赋值</h3><p>赋值是给已经定义的变量重新设置值的过程。</p><p>同时为多个变量赋值时：</p><ul><li><p>当变量个数 &gt; 值的个数时，按变量个数补足nil</p></li><li><p>当变量个数 &lt; 值的个数时，多余的值会被忽略</p></li></ul><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token keyword">true</span>c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token number">2022</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address <span class="token operator">=</span> <span class="token string">"Xiaoming"</span><span class="token punctuation">,</span> <span class="token number">18</span>day<span class="token punctuation">,</span> week <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"星期四"</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">-- 输出：1   true</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token comment">-- 输出：Hello  2022</span><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token comment">-- 输出：XiaoMing   18   nil</span><span class="token function">print</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> week<span class="token punctuation">)</span><span class="token comment">-- 输出：30  星期四</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-全局变量和局部变量">3.2 全局变量和局部变量</h3><p>变量根据作用域可分为全局变量和局部变量，且用<code>local</code>显式声明的变量为局部变量，其余全部为全局变量。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pi <span class="token operator">=</span> <span class="token number">3.14159</span>    <span class="token keyword">local</span> name <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token keyword">end</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"pi = "</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token comment">-- 输出：a =    1024   pi =   3.14159</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name = "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment">-- 输出：name =  nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-类型转换">3.3 类型转换</h3><p>Lua中，除了table类型，其他任何类型的变量都可以通过<code>tostring</code>函数转化为字符串类型。</p><p>能表示数字的字符串类型的变量可以通过<code>tonumber</code>函数转化为数字类型。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token keyword">true</span>sa <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>sb <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"sa = "</span><span class="token punctuation">,</span> sa<span class="token punctuation">,</span> <span class="token string">"type(sa) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sa =    100 type(sa) =  string</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"sb = "</span><span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token string">"type(sb) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sb =    true    type(sb) =  string</span>sc <span class="token operator">=</span> <span class="token string">"3.14"</span>sd <span class="token operator">=</span> <span class="token string">"0XA"</span>c <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"type(c) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：c =    3.14    type(c) =  number</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"type(d) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：d =    10    type(d) =  number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-获取输入">3.4 获取输入</h3><p>使用<code>io.read</code>函数获取用户输入。</p><p>可选参数：</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>“*n”</td><td>读取一个数字</td></tr><tr><td>“*a”</td><td>从当前位置读取剩余的全部内容</td></tr><tr><td>"*l”</td><td>读取下一行内容</td></tr><tr><td>10</td><td>读取指定数字的长度</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> name <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name = "</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"type(name) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 用户输入：Lua</span><span class="token comment">-- 输出：name =   lua type(name) =   string</span><span class="token keyword">local</span> num <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"*n"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num = "</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token string">"type(num) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 用户输入：1024</span><span class="token comment">-- 输出：name =   1024 type(name) =   number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-格式化输出">3.5 格式化输出</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">name <span class="token operator">=</span> <span class="token string">"lua"</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"name = %s, age = %d"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：name = lua, age = 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-循环控制">4. 循环控制</h2><p>循环控制就是让程序满足一定的条件就一直循环的去执行，直到条件不满足，则跳出循环继续执行循环以外的语句。</p><h3 id="4-1-while">4.1 while</h3><p><strong>while循环</strong>，<strong>当型循环</strong>，先判断条件，满足则执行循环，否则不进入循环。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token keyword">local</span> j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token keyword">do</span>        io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = % -6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">end</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-repeat-…-until">4.2 repeat … until</h3><p><strong>repeat until循环</strong>，<strong>直到型循环</strong>，后判断条件，满足则跳出循环，不满足则进入循环，<strong>循环至少会执行1次</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">repeat</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">until</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">repeat</span>    <span class="token keyword">local</span> j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">repeat</span>        io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %-6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">until</span> j <span class="token operator">&gt;</span> i  i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">until</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-for">4.3 for</h3><p>如果循环的语句是<code>for i = 1, 9, 1 do ...</code>，表示从1开始，大于9结束，每次步进1。如果是步进1，最后1可以省略，变为<code>for i = 1, 9 do ...</code>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> num<span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token keyword">do</span>  <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token keyword">do</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %-6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span class="token comment">-- 遍历table</span>weekdays <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sunday"</span><span class="token punctuation">,</span><span class="token string">"Monday"</span><span class="token punctuation">,</span><span class="token string">"Tuesday"</span><span class="token punctuation">,</span><span class="token string">"Wednesday"</span><span class="token punctuation">,</span><span class="token string">"Thursday"</span><span class="token punctuation">,</span><span class="token string">"Friday"</span><span class="token punctuation">,</span><span class="token string">"Saturday"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>weekdays<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s --&gt; %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 --&gt; Sunday2 --&gt; Monday3 --&gt; Tuesday4 --&gt; Wednesday5 --&gt; Thursday6 --&gt; Friday7 --&gt; Saturday--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-break">4.4 break</h3><p>终止循环的继续运行，如果有多层循环，只能终止当层循环，无法终止外层循环。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            <span class="token keyword">break</span>        <span class="token keyword">end</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d, j = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0, j = 0i = 0, j = 1i = 1, j = 0i = 1, j = 1--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Lua中没有continue语句</strong>，但是可以借助for循环以及repeat until循环实现continue功能。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span>    <span class="token keyword">repeat</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">then</span>            <span class="token keyword">break</span>        <span class="token keyword">end</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">until</span> <span class="token keyword">true</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0i = 1i = 3i = 4--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-return">4.5 return</h3><p>使用<strong>return语句</strong>，终止循环、函数的执行。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0i = 1i = 2--]]</span><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"value &lt;= 0"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"value &gt; 0"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：value &gt; 0value &lt;= 0--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-goto">4.6 goto</h3><p>允许将控制流程无条件地转到被标记的语句处，<strong>仅lua5.2以上版本支持</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">::</span>label<span class="token punctuation">::</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-- goto label --"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">then</span>    <span class="token keyword">goto</span> label<span class="token keyword">end</span><span class="token comment">--[[ 输出：-- goto label ---- goto label ----]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-pairs和ipairs">4.7 pairs和ipairs</h3><p><strong>pairs和iparis</strong>都是能遍历集合（表、数组），但是<strong>iparis</strong>仅仅遍历值，按照索引升序遍历，索引中断停止遍历，即不能返回nil，只能返回数字0，如果遇到nil则退出。只能遍历到集合中出现的第一个不是整数的key。<strong>pairs</strong>能遍历集合的所有元素。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"t"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   A2   B5   yest   no1   A2   B--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-分支控制">5. 分支控制</h2><p>分支控制就是让程序有选择的执行，主要分为：<strong>单分支</strong>、<strong>双分支</strong>和<strong>多分支</strong>形式。</p><h3 id="5-1-if">5.1 if</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a &gt; bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-else">5.2 else</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:Out If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-elseif">5.3 elseif</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a == b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a == bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-条件嵌套">5.4 条件嵌套</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a == b"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a == bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-函数">6. 函数</h2><p>在程序中，编写函数的<strong>主要目的</strong>是将一个需要很多行代码的复杂问题分解为一系列简单的任务来解决，而且，同一个函数可以被多次调用，有助于代码重用。</p><h3 id="6-1-function">6.1 function</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">end</span>result1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result1 = %d, result2 = %d"</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--输出：result1 = 300, result2 = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-多返回值">6.2 多返回值</h3><p>Lua中的函数可以不返回任何值，也可以返回一个值，也支持返回多个值。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">check_user</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>    <span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">85</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token keyword">true</span>    <span class="token keyword">elseif</span> score <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token keyword">true</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token keyword">false</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> level1<span class="token punctuation">,</span> isOk <span class="token operator">=</span> <span class="token function">check_user</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token keyword">local</span> level2<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">check_user</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"level1 = %s, level2 = %s"</span><span class="token punctuation">,</span> level1<span class="token punctuation">,</span> level2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：level1 = A, level2 = C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-可变参数">6.3 可变参数</h3><p>函数参数的个数可以是任意的，可变参数使用<code>...</code>来表示，若想要获取用户传入的所有的参数，可以使用<code>arg</code>变量。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">local</span> arg <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">iparis</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">do</span>        result <span class="token operator">=</span> result <span class="token operator">+</span> v    <span class="token keyword">end</span>    <span class="token keyword">return</span> result<span class="token keyword">end</span>result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：result = 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-匿名函数">6.4 匿名函数</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">test_func</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> fun<span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>tab <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"val1"</span><span class="token punctuation">,</span> key2 <span class="token operator">=</span> <span class="token string">"val2"</span><span class="token punctuation">}</span><span class="token function">test_func</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> key <span class="token operator">..</span> <span class="token string">" = "</span> <span class="token operator">..</span> val <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：key1 = val1key2 = val2--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-闭包">6.5 闭包</h3><p>闭包的主要作用：</p><ul><li>简洁，不需要在不使用时生成对象，也不需要函数名</li><li>可以捕获外部变量形成不同的调用环境</li></ul><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> index    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> inner1 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1   2</span><span class="token keyword">local</span> inner2 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1   2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-运算符">7. 运算符</h2><h3 id="7-1-算术运算符">7.1 算术运算符</h3><p><strong>算术运算符</strong>是对数值类型的变量进行运算的。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-4</td><td>-3</td></tr><tr><td>+</td><td>加法运算</td><td>5 + 5</td><td>10</td></tr><tr><td>-</td><td>减法运算</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘法运算</td><td>5 * 2</td><td>10</td></tr><tr><td>/</td><td>除法运算</td><td>10  / 3</td><td>3.3</td></tr><tr><td>%</td><td>取余运算</td><td>10 % 3</td><td>1</td></tr><tr><td>^</td><td>幂运算</td><td>2^3</td><td>8</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token keyword">local</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">local</span> d <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token keyword">local</span> e <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token keyword">local</span> f <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token keyword">local</span> g <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token keyword">local</span> h <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"c = %d, d = %d, e = %d, f = %f, g = %d, h = %d"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：c = -17, d = -23, e = -60, f = -6.666667, g = 1, h = -8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-关系运算符">7.2 关系运算符</h3><p><strong>关系运算符</strong>结果要么是真，要么是假。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等</td><td>4 == 3</td><td>false</td></tr><tr><td>~=</td><td>不等于</td><td>4 ~= 3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 3</td><td>true</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">local</span> c <span class="token operator">=</span> a <span class="token operator">==</span> b<span class="token keyword">local</span> d <span class="token operator">=</span> a <span class="token operator">~=</span> b<span class="token keyword">local</span> e <span class="token operator">=</span> a <span class="token operator">&gt;</span> b<span class="token keyword">local</span> f <span class="token operator">=</span> a <span class="token operator">&lt;</span> b<span class="token keyword">local</span> g <span class="token operator">=</span> a <span class="token operator">&gt;=</span> b<span class="token keyword">local</span> h <span class="token operator">=</span> a <span class="token operator">&lt;=</span> b<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"e = "</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token string">"f = "</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"g = "</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token string">"h = "</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token comment">-- 输出：c =     false   d =     true    e =     true    f =     false   g =     true    h =     false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-逻辑运算符">7.3 逻辑运算符</h3><p><strong>逻辑运算符</strong>用来连接多个条件，最终返回是true或false，使用逻辑运算符可以模拟三目运算符。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>A and B，如果A的值为假，则不会再计算B的值</td></tr><tr><td>or</td><td>逻辑或</td><td>A or B，如果A的值为真，则不会再计算B的值</td></tr><tr><td>not</td><td>逻辑非</td><td>not A</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> age <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">local</span> b <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">and</span> age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token keyword">local</span> c <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token keyword">or</span> age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token keyword">local</span> d <span class="token operator">=</span> <span class="token keyword">not</span> age<span class="token keyword">local</span> e <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token keyword">nil</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token number">0</span><span class="token keyword">local</span> g <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">and</span> age <span class="token keyword">or</span> <span class="token number">30</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b = "</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"e = "</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token string">"f = "</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"g = "</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token comment">-- 输出：b =     true    c =     false   d =     false   e =     true   f =     false   g = 40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-其他运算符">7.4 其他运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>…</td><td>连接运算符</td><td>str1…str2</td></tr><tr><td>#</td><td>获取字符串长度</td><td>#str1</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">local</span> str2 <span class="token operator">=</span> <span class="token string">"lua"</span><span class="token keyword">local</span> str3 <span class="token operator">=</span> str1<span class="token operator">..</span>str2<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str3 = %s, #str3 = %d"</span><span class="token punctuation">,</span> str3<span class="token punctuation">,</span> <span class="token operator">#</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str3 = hellolua, #str3 = 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-字符串">8. 字符串</h2><h3 id="8-1-字符串函数">8.1 字符串函数</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>upper(arg)</td><td>字符串全部转为大写字母</td></tr><tr><td>lower(arg)</td><td>字符串全部转为小写字母</td></tr><tr><td>sub(s, i, [,j])</td><td>截取字符串</td></tr><tr><td>gsub(mainString, findString, replaceString, num)</td><td>在字符串中替换</td></tr><tr><td>dump(function)</td><td>把函数序列化为字符串来保存</td></tr><tr><td>find(str, substr, [init, [end]])</td><td>在字符串中查找，存在返回具体位置，不存在返回nil</td></tr><tr><td>reverse(arg)</td><td>字符串反转</td></tr><tr><td>format(…)</td><td>返回一个格式化字符串</td></tr><tr><td>char(arg)</td><td>将整型数字转化为字符并连接</td></tr><tr><td>byte[arg[int,]]</td><td>byte转换字符为整数值</td></tr><tr><td>len(arg)</td><td>计算字符串长度</td></tr><tr><td>rep(string, n)</td><td>返回字符串string的n个拷贝</td></tr><tr><td>…</td><td>连接两个字符串</td></tr><tr><td>gmatch(str, pattern)</td><td>迭代器函数，每次调用返回一个查找到的子串</td></tr><tr><td>match(str, pattern, init)</td><td>查找第一个配对的子串</td></tr></tbody></table><h3 id="8-1-大小写转换">8.1 大小写转换</h3><p><code>string.upper(s)</code> 用于将字符串中所有字母转化为大写。</p><p><code>string.lower(s)</code> 用于将字符串中所有字母转化为小写。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">upper</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello Lua, str2 = HELLO LUA, str3 = hello lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-字符串截取">8.2 字符串截取</h3><p><code>string.sub(s, i [, j])</code> 用于字符串截取，返回字符串s从第i个字符到第j个字符的子串。注意，字符串的第1个字符索引是1。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello Lua, str2 = Hello, str3 = Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-字符串替换">8.3 字符串替换</h3><p><code>string.gsub(mainString, findString, replaceString, num)</code> 用于字符串替换，num指定替换字符串的次数，默认全部替换。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello world, Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Nihao"</span><span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Nihao"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello world, Hello Lua, str2 = Nihao world, Nihao Lua, str3 = Nihao world, Hello Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-序列化与加载">8.4 序列化与加载</h3><p><code>string.dump(function)</code> 用于将函数序列化为字符串，便于函数的保存与传输<code>loadstring(str)</code> 用于将序列化后的函数字符串反序列化加载为函数。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span>str <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token function">loadstring</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：uaQ 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-字符串查找">8.5 字符串查找</h3><p><code>string.find(str, substr, [init, [end]])</code> 用于在一个指定的目标字符串中搜素指定的内容，返回其具体位置，不存在返回nil，也支持使用正则匹配查找。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>index1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"Lua"</span><span class="token punctuation">)</span>index2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>index3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"%s%u%a."</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"index1 = "</span><span class="token punctuation">,</span> index1<span class="token punctuation">,</span> <span class="token string">"index2 = "</span><span class="token punctuation">,</span> index2<span class="token punctuation">,</span> <span class="token string">"index3 = "</span><span class="token punctuation">,</span> index3<span class="token punctuation">)</span><span class="token comment">-- 输出：index1 =   7   index2 =   nil   index3 =   6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-6-字符串反转">8.6 字符串反转</h3><p><code>string.reverse(arg)</code> 用于反转字符串。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str <span class="token operator">=</span> <span class="token string">"Hello Lua"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s, res = %s"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str = Hello Lua, res = auL olleH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-7-格式化字符串">8.7 格式化字符串</h3><table><thead><tr><th>格式</th><th>描述</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>接收数字，转化为字符</td><td>%d,%i</td><td>接收数字，转化为有符号整数</td></tr><tr><td>%o</td><td>接收数字，转化为八进制数</td><td>%u</td><td>接收数字，转化为无符号整数</td></tr><tr><td>%x</td><td>接收数字，转化为十六进制数，使用小写字母</td><td>%X</td><td>接收数字，转化为十六进制数，使用大写字母</td></tr><tr><td>%e</td><td>接收数字，转化为科学计数法，使用小写字母e</td><td>%E</td><td>接收数字，转化为科学计数法，使用大写字母E</td></tr><tr><td>%f</td><td>接收数字，转化为浮点数</td><td>%g,%G</td><td>接收数字，转化为%e,%f中较短格式</td></tr><tr><td>%q</td><td>接收字符串，转化为可安全被Lua编译器读入的格式</td><td>%s</td><td>接收字符串，按给定参数格式化字符串</td></tr><tr><td>%+</td><td>表示其后的数字转义符将让正数显示正号</td><td>%占位符</td><td>在后面指定了字串宽度时占位用</td></tr><tr><td>%对齐标识</td><td>在指定了字串宽度时, 默认为右对齐, 增加 - 号改为左对齐</td><td>%宽度数值</td><td>占位宽度</td></tr><tr><td>%小数位数/字串裁切</td><td>数字保留位数，字符串做裁切</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%+d"</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：A+1700017--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-数字与字符的转换">8.8 数字与字符的转换</h3><p><code>string.char(arg)</code> 用于将整数转化为字符并连接。</p><p><code>string.byte(arg[,int])</code> 用于将字符转化为整数并连接，int表示要转换的字符。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">char</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：abc67--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-9-字符串长度">8.9 字符串长度</h3><p><code>string.len()</code>用于获取字符串长度，另外<code>#</code>也可以获取字符串长度。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"ABC"</span>str2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1's len = %d, str2's len = %d"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">#</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1's len = 3, str2's len = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-10-字符串拷贝">8.10 字符串拷贝</h3><p><code>string.rep(string, n)</code> 用于将字符串拷贝n次。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">rep</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str = ABCDABCD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-11-字符串连接">8.11 字符串连接</h3><p>字符串可以使用<code>..</code>连接。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"hello"</span>str2 <span class="token operator">=</span> <span class="token string">"lua"</span>res <span class="token operator">=</span> str1 <span class="token operator">..</span> <span class="token string">" "</span> <span class="token operator">..</span> str2<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"res = %s"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：hello lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-12-字符串匹配">8.12 字符串匹配</h3><p><code>string.gmatch(str, pattern)</code> 是一个迭代器函数，每调用一次，返回一个在字符串str查找到的符合pattern描述的子串，如果没找到返回nil，也支持正则匹配。</p><p><code>string.match(str, pattern, init)</code> 只找寻str中第一个配对，搜索起点可配置，也支持正则匹配。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> word <span class="token keyword">in</span> string<span class="token punctuation">.</span><span class="token function">gmatch</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"%a+"</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"I have 2 questions for you."</span><span class="token punctuation">,</span> <span class="token string">"%d+ %a+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：HelloLua2 questions--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-13-转义字符">8.13 转义字符</h3><table><thead><tr><th>转义字符</th><th>意义</th><th>转义字符</th><th>意义</th></tr></thead><tbody><tr><td>\a</td><td>响铃</td><td>\b</td><td>退格，将当前位置移到前一列</td></tr><tr><td>\f</td><td>换页，将当前位置移到下页开头</td><td>\n</td><td>换行，将当前位置移到下一行开头</td></tr><tr><td>\r</td><td>回车，将当前位置移到本行开头</td><td>\t</td><td>水平制表，跳到下一个Tab位置</td></tr><tr><td>\v</td><td>垂直制表</td><td>\</td><td>代表一个反斜线字符</td></tr><tr><td>’</td><td>代表一个单引号字符</td><td>"</td><td>代表一个双引号字符</td></tr><tr><td>\0</td><td>空字符</td><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td></tr><tr><td>\xhh</td><td>1到2位十六进制数所代表的任意字符</td><td></td><td></td></tr></tbody></table><h2 id="9-Table">9. Table</h2><p><strong>数组与表的类型都为table</strong>。</p><p>数组的语法为<code>arrName = {element1, element2, ....}</code>，数组保存的一组数据类型可以不一致，数组的索引值是以1为起始的，也可以人为指定为0开始，如<code>arrName = {[0]=element1, element2, ....}</code>。</p><p>表是一个 “关联数组”，表的索引可以是数字或者是字符串，所有索引值都需要用 <code>[</code> 和 <code>]</code> 括起来；如果没有 [] 括起，则认为是字符串索引，可以认为，数组是索引为以0或1开始的连续数字的一种特殊的表，因此，表的一些增删改查行为函数也适用于数组。</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>concat</td><td>连接</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>maxn</td><td>最大key</td></tr><tr><td>remove</td><td>移除</td></tr><tr><td>sort</td><td>升序排序</td></tr></tbody></table><h3 id="9-1-定义">9.1 定义</h3><p><code>#</code>后面直接加数组名可以获取数组的长度，如果设置了索引从0开始，则获取到的数组长度会比实际的长度少1。</p><p><code>#</code>后面直接加表名无法准确获取数组的长度，会在索引中断的地方停止计数，应该用循环遍历来获取正确长度。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 数组</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>letters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span>letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"B"</span>letters<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C"</span>letters<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"D"</span>letters<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"E"</span>days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">}</span>numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">}</span>all <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Len: letters = %d, days = %d, numbers = %d, all = %d"</span><span class="token punctuation">,</span> <span class="token operator">#</span>letters<span class="token punctuation">,</span> <span class="token operator">#</span>days<span class="token punctuation">,</span> <span class="token operator">#</span>numbers<span class="token punctuation">,</span> <span class="token operator">#</span>all<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Len: letters = 5, days = 6, numbers = 3, all = 4</span><span class="token comment">-- 表</span>mytable1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>mytable2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Len: mytable1 = %d, mytable2 = %d"</span><span class="token punctuation">,</span> <span class="token operator">#</span>mytable1<span class="token punctuation">,</span> <span class="token operator">#</span>mytable2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Len: mytable1 = 1, mytable2 = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-遍历">9.2 遍历</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 数组</span>days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">#</span>days <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"days[%d] = %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：days[0] = Mondaydays[1] = Tuesdaydays[2] = Wednesdaydays[3] = Thursdaydays[4] = Fridaydays[5] = Saturdaydays[6] = Sunday--]]</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"letters[%d] = %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：letters[1] = Aletters[2] = Bletters[3] = Cletters[4] = Dletters[5] = E--]]</span><span class="token comment">-- 表</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   Lua3   Countgreet   Hello--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-连接">9.3 连接</h3><p><code>table.concat(table [, sep [, start [, end]]])</code> 函数列出参数中指定table的数组部分从start位置到end位置的所有元素，元素键以指定分隔符sep隔开，start默认为1。注：该函数只处理table下标为数字的数据，且下标是连续的才能被处理，断开就结束了。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：orange, apple, banana</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>letters<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：B, C, D, E</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-插入">9.4 插入</h3><p><code>table.insert(table [pos,] value)</code> 函数在table指定位置pos插入一个value元素，pos默认为数组部分末尾，即连续下标元素的最后。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"watermelon"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   orange2   apple3   watermelon4   banana--]]</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>letters<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"W"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span>， <span class="token operator">#</span>letters <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：0   A1   B2   C3   W4   D5   E--]]</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Table"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">#</span>mytable<span class="token punctuation">)</span><span class="token comment">--[[ 输出：1   Lua2   Table3   Countgreet   Hello3--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-5-最大值">9.5 最大值</h3><p><code>table.maxn(table)</code> 函数返回table的最大正数索引，如果没有正数索引返回0。Lua5.2之后的版本已移除该函数。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">)</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：343--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-6-删除">9.6 删除</h3><p><code>table.remove(table [,pos])</code> 函数删除指定pos位置的元素，pos默认为table长度。即连续索引的最大值。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span>remove1 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>remove2 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"remove1 = %s, remove2 = %s"</span><span class="token punctuation">,</span> remove1<span class="token punctuation">,</span> remove2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：remove1 = banana, remove2 = orange</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>remove <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"remove = %s"</span><span class="token punctuation">,</span> remove<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：remove = Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-7-排序">9.7 排序</h3><p><code>table.sort(table [,comp])</code> 函数用于对给定的table进行升序排序，还支持传入排序规则。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> test0 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span> <span class="token keyword">do</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>v<span class="token operator">..</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> test1 <span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"deng"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"luo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"yang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"ma"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"wu"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token keyword">do</span>   <span class="token function">print</span><span class="token punctuation">(</span>test1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> test1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 2 3 4 6 7 8 91   deng2   yang5   wu8   ma9   luo--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-元素metatable">10. 元素metatable</h2><h3 id="10-1-定义-2">10.1 定义</h3><p>Lua的table中可以访问对应的key来得到value值，但是却无法对两个table进行操作。元表允许改变table的行为，每个行为关联了对应的元方法。如两个table相加操作<code>a+b</code>，当Lua尝试对两个表相加时，先检查两者之一是否有元表，之后检查<code>__add</code>字段是否存在，如果操作，则调用相应的值。<code>__add</code>等即时字段其对应的值就是元方法。</p><p>有两个重要的函数处理元表：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>setmetatable(table, metatable)</td><td>对指定的table设置元表，如果元表中存在<code>__metatable</code>键值，则setmetatable会失败</td></tr><tr><td>getmetatable(table)</td><td>返回对象的元表</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token comment">-- 普通表</span>mymetatable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 元表</span><span class="token function">setmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> mymetatable<span class="token punctuation">)</span> <span class="token comment">-- 设置元表</span><span class="token function">getmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token comment">-- 返回元表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-index元方法">10.2 __index元方法</h3><p><code>__index</code>元方法用来对表访问。</p><p>Lua查找一个表元素时的规则：</p><p>1 在表中查找，如果找到，返回该元素，找不到继续</p><p>2 判断该表是否有元表，如果没有元表，返回nil，有元表则继续</p><p>3 判断该表有没有<code>__index</code>方法，如果<code>__index</code>方法为nil，则返回nil，如果<code>__index</code>方法是一个表，则重复1、2、3步；如果<code>__index</code>方法是一个函数，则返回该函数的返回值</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">"key2"</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"metatablevalue"</span>        <span class="token keyword">else</span>           <span class="token keyword">return</span> <span class="token keyword">nil</span>        <span class="token keyword">end</span>     <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"key1 = %s, key2 = %s"</span><span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：key1 = value1, key2 = metatablevalue</span><span class="token comment">-- 等价于</span>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> <span class="token punctuation">{</span>key2 <span class="token operator">=</span> <span class="token string">"metatablevalue"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token comment">-- 输出：value1    metatablevalue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-newindex元方法">10.3 __newindex元方法</h3><p><code>__newindex</code>元方法用来对表更新。</p><p>当给表的一个缺少的索引赋值，解释器会查找<code>__newindex</code>元方法，如果存在，则调用这个函数而不进行赋值操作。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    __newindex <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token function">rawset</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token operator">..</span>value<span class="token operator">..</span><span class="token string">"\""</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>mytable<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">"new value"</span>mytable<span class="token punctuation">.</span>key2 <span class="token operator">=</span> <span class="token number">4</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">foramt</span><span class="token punctuation">(</span><span class="token string">"key1 = %s, key2 = %s"</span><span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：key1 = new value, key2 = "4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-call元方法">10.4 __call元方法</h3><p><code>__call</code>元方法可以让table当做一个函数来使用。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> mt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>mt<span class="token punctuation">.</span>__call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span> <span class="token keyword">do</span>        <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">setmetatable</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：123--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-5-tostring元方法">10.5 __tostring元方法</h3><p><code>__tostring</code>元方法用于修改表的输出行为。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__tostring <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> v        <span class="token keyword">end</span>    <span class="token keyword">return</span> <span class="token string">"sum = "</span> <span class="token operator">..</span>sum    <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-6-为表添加操作符">10.6 为表添加操作符</h3><table><thead><tr><th>模式</th><th>等价于运算符</th><th>模式</th><th>等价于运算符</th></tr></thead><tbody><tr><td>__add</td><td>+</td><td>__sub</td><td>-</td></tr><tr><td>__mul</td><td>*</td><td>__div</td><td>/</td></tr><tr><td>__mod</td><td>%</td><td>__unm</td><td>-</td></tr><tr><td>__concat</td><td>…</td><td>__eq</td><td>==</td></tr><tr><td>__lt</td><td>&lt;</td><td>__le</td><td>&lt;=</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">local</span> mn <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> mn <span class="token operator">&lt;</span> k <span class="token keyword">then</span>            mn <span class="token operator">=</span> k        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> mn<span class="token keyword">end</span><span class="token comment">-- 两表相加</span>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    __add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> newtable<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>newtable<span class="token punctuation">)</span> <span class="token keyword">do</span>            table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> newtable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">end</span>        <span class="token keyword">return</span> mytable   <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>secondtable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>mytable <span class="token operator">=</span> mytable <span class="token operator">+</span> secondtable<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   12   23   34   45   56   6--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-模块与包">11. 模块与包</h2><h3 id="11-1-模块定义">11.1 模块定义</h3><p>模块类似于一个封装库，是由变量、函数等已知元素组成的table，因此创建模块就是创建一个table，然后把需要导出的常量、函数放入其中，最后返回这个table即可。如下创建自定义模块module。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 文件名 module.lua</span><span class="token comment">-- 定义一个名为module的模块</span>module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 定义一个常量</span>module<span class="token punctuation">.</span>constant <span class="token operator">=</span> <span class="token string">"this is constant"</span><span class="token comment">-- 定义一个函数</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"This is a public function\n"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"This is a private function"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-require函数">11.2 require函数</h3><p><code>require("模块名")</code>用来加载模块，执行require后会返回一个由模块常量或函数组成的table，并且还会定义一个包含该table的全局变量。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token comment">-- 别名变量 m</span><span class="token keyword">local</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>constant<span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：this is constantThis is a private function--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>require函数会尝试从Lua文件或C程序中加载模块，require用于搜索Lua文件的路径存放在全局变量package_path中，当Lua启动后，会以环境变量LUA_PATH的值来初始化这个环境变量，如果找不到该环境变量，则使用一个编译时定义的默认路径来初始化。</p><p>可以自定义设置路况，在当前用户跟目录下打开.profile文件（没有则创建，打开.bashrc文件也可以），例如把"~/lua/"路径加入LUA_PATH环境变量里。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#LUA_PATHexport LAU_PATH="~/lua/?.lua;;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件路径以";“号分割，最后两个”;;"表示新加的路径后面加上原来的默认路径。</p><p>接着执行指令<code>source ~/.profile</code>更新变量参数使之生效。</p><p>如果找到目标文件，则会调用<code>package.loadfile</code>来加载模块，否则就会找C程序库。</p><p>搜索的文件路径是从全局变量 package.cpath 获取，而这个变量则是通过环境变量 LUA_CPATH 来初始。</p><p>搜索的策略跟上面的一样，只不过现在换成搜索的是 so 或 dll 类型的文件。如果找得到，那么 require 就会通过 package.loadlib 来加载它。</p><h3 id="11-3-module函数">11.3 module函数</h3><p><code>module()</code>函数调用时会创建表并将其赋予给全局变量和loaded table，最后还会将这个表设置为主程序块的环境。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 在模块文件在使用module函数</span>module <span class="token string">"module_name"</span><span class="token comment">--[[等同语法--]]</span><span class="token comment">-- 定义模块名</span><span class="token keyword">local</span> moduleName <span class="token operator">=</span> <span class="token string">"module_name"</span><span class="token comment">-- 定义用于返回的模块表</span><span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 将模块表加入到全局变量</span>_G<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token comment">-- 将模块表加入到package.loaded中防止多次加载</span>package<span class="token punctuation">.</span>loaded<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token comment">-- 将模块表设置为函数的环境表，使得模块中的所有操作都是在模块表中，这样定义函数就直接定义在模块表中</span><span class="token function">setfenv</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> M<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-调用C语言包">11.4 调用C语言包</h3><p>Lua和C语言很容易结合，可以使用C语言为Lua写包，C语言包使用前必须先加载并连接，大多数系统是通过动态连接库机制。</p><p>Lua在一个加loadlib的函数内提供了所有的动态连接功能。这个函数的两个参数：库的绝对路径和初始化函数，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> path <span class="token operator">=</span> <span class="token string">"/usr/local/lua/lib/libluasocket.so"</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">loadlib</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"luaopen_socket"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>loadlib函数加载指定的库并连接到Lua，然而并没有调用初始化函数，而是返回初始化函数作为Lua的一个函数。</p><p>如果加载动态库或者查找初始化函数出错，loadlib将返回nil和错误信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> path <span class="token operator">=</span> <span class="token string">"C:\\windows\\luasocket.dll"</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">loadlib</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"luaopen_socket"</span><span class="token punctuation">)</span><span class="token comment">-- 真正打开库</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下我们期望二进制的发布库包含一个与前面代码段相似的 stub 文件，安装二进制库的时候可以随便放在某个目录，只需要修改 stub 文件对应二进制库的实际路径即可。</p><p>将 stub 文件所在的目录加入到 LUA_PATH，这样设定后就可以使用 require 函数加载 C 库了。</p><h2 id="12-协程">12. 协程</h2><h3 id="12-1-定义-2">12.1 定义</h3><p>协程与线程比较类似，拥有独立的堆栈、独立的局部变量、独立的指令，同时又与其他协同程序共享全局变量和其他大部分东西。</p><p>一个具有多线程的程序可以同时运行几个线程，而协程却需要彼此写作运行，在任一指定时刻只有一个协程在运行，并且这个正在运行的协同程序只有在明确的被要求挂起时才会被挂起。</p><p>协程有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协程。</p><h3 id="12-2-用法">12.2 用法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>coroutine.create()</td><td>创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用时唤醒函数调用</td></tr><tr><td>coroutine.resume()</td><td>重启coroutine，和create配合使用</td></tr><tr><td>coroutine.yield()</td><td>挂起coroutine，将coroutine设置为挂起状态，和resume配合使用能够有很多效果</td></tr><tr><td>coroutine.status()</td><td>查看coroutine的状态，有dead、suspened、running三种状态</td></tr><tr><td>coroutine.wrap()</td><td>创建coroutine，返回一个函数，一旦调用这个函数，就进入croutine，和create功能重复</td></tr><tr><td>coroutine.running()</td><td>返回正在运行的coroutine，一个coroutine就是一个新村，返回一个coroutine的线程号</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"foo函数输出"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">return</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token keyword">end</span>co <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>     <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次协同程序执行输出"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        <span class="token keyword">local</span> r <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二次协同程序执行输出"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">local</span> r<span class="token punctuation">,</span> s <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第三次协同程序执行输出"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token string">"结束协同程序"</span>   <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：第一次协同程序执行输出 1 10foo 函数输出 2main true 4--分割线--第二次协同程序执行输出 rmain true 11 -9--分割线--第三次协同程序执行输出 x ymain true 10 结束协同程序--分割线--main false 10 cannot resume dead coroutine--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-生产者-消费者问题">12.3 生产者-消费者问题</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> newProductor<span class="token keyword">function</span> <span class="token function">productor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>        <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> status<span class="token punctuation">,</span> value <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>newProductor<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">end</span>newProductor <span class="token operator">=</span> coutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>productor<span class="token punctuation">)</span><span class="token function">cosumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：1234567...--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-文件IO">13. 文件IO</h2><p>Lua文件IO库用于读取和处理文件，分为<strong>简单模式</strong>和<strong>完全模式</strong>：</p><ul><li>简单模式：拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作，适合做一些简单的文件操作</li><li>完全模式：使用外部的文件句柄来实现，以一种面向对象的形式，将所有的文件操作定义为文件句柄的方法，适合做一些高级的文件操作，如同时读取多个文件</li></ul><h3 id="13-1-简单模式">13.1 简单模式</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>io.input([file])</td><td>设置默认的输入文件，file为文件名，返回文件句柄</td></tr><tr><td>io.output([file])</td><td>设置默认的输出文件，file为文件名</td></tr><tr><td>io.close([file])</td><td>关闭文件，不带参数的默认文件</td></tr><tr><td>io.read(formats)</td><td>读取默认文件，formats取值为<code>a*</code>-全读、<code>*n</code>-按数字读入、<code>*l</code>-按行读入，<code>n</code>-读取n个字符</td></tr><tr><td>io.lines([fn])</td><td>fn文件名，如无文件，取默认文件，返回一个迭代器</td></tr><tr><td>io.write(value)</td><td>向默认文件写入内容</td></tr><tr><td>io.flush()</td><td>把文件缓存里的操作立即作用到默认输出文件</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 设置默认输入文件</span>io<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 输出文件第一行</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"read file: [%s]"</span><span class="token punctuation">,</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭文件</span>io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 以附加的方式打开只写文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment">-- 设置默认输出文件</span>io<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 在文件最后一行写入</span>io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"File content in test.lua"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"file write success"</span><span class="token punctuation">)</span><span class="token comment">-- 关闭文件</span>io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-完全模式">13.2 完全模式</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 输出文件第一行</span><span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 以附加的方式打开只写文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment">-- 在文件最后一行写入</span>file<span class="token punctuation">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"--test"</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 定位到文件倒数第25个位置</span>file<span class="token punctuation">::</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token comment">-- 从当前（倒数第25个位置）读取整个文件</span><span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"*a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-错误处理">14. 错误处理</h2><p>错误类型分为<strong>语法错误</strong>和<strong>运行错误</strong>。</p><p>语法错误通常是对程序的组件使用不当引起，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 输出：lua: main.lua:2: 'do' expected near 'print'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行错误时程序可以正常运行，但是会输出报错信息，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:2: attempt to perform arithmetic on local 'b' (a nil value)stack traceback:    main.lua:2: in function 'add'    main.lua:4: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-1-assert">14.1 assert</h3><p><code>assert(express, message)</code> 断言函数会判断给定express表达式是否成立，成立的话不做任何事情，不成立则以message作为错误信息抛出。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"a not a number"</span><span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"b not a number"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:3: b not a numberstack traceback:    [C]: in function 'assert'    main.lua:3: in function 'add'    main.lua:6: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-2-error">14.2 error</h3><p><code>error(message [,level])</code> 函数终止正在执行的函数，并返回message的内容作为错误信息，level参数指示获得错误的位置，level=1指出调用error位置，level=2指出调用error函数的函数吗，level=0不添加错误位置信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"a not a number"</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"b not a number"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:10: b not a numberstack traceback:    [C]: in function 'error'    main.lua:6: in function 'add'    main.lua:10: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3-pcall">14.3 pcall</h3><p>可以使用<code>pcall</code>函数包装需要执行的代码，<code>pcall</code>函数接收一个函数和要传递给后者的参数，并执行该函数，无错误返回true，有错误返回false和错误信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a<span class="token punctuation">,</span> errorinfo <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> errorinfo<span class="token punctuation">)</span><span class="token comment">--[[ 输出：27true nil--]]</span>b<span class="token punctuation">,</span> errorinfo <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error..'</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> errorinfo<span class="token punctuation">)</span><span class="token comment">--[[ 输出：27false main.lua1: error..--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-4-xpcall">14.4 xpcall</h3><p><code>xpcall</code>函数相比<code>pcall</code>函数会返回更多的错误调试信息，并执行该函数，无错误返回true，有错误返回false和错误信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">myfunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token keyword">nil</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">myerrorhandler</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ERROR:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">end</span>status <span class="token operator">=</span> <span class="token function">xpcall</span><span class="token punctuation">(</span>myfunction<span class="token punctuation">,</span> myerrorhandler<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token comment">--[[ 输出：ERROR:  main.lua:2: attempt to perform arithmetic on global 'n' (a nil value)false--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-垃圾回收">15. 垃圾回收</h2><h3 id="15-1-机制">15.1 机制</h3><p>Lua运行了一个垃圾收集器收集所有死对象来完成自动内存管理的工作。</p><p>Lua实现了一个增量标记-扫描收集器，使用垃圾收集器间歇率和垃圾收集器步进倍率来控制垃圾收集循环。</p><p>垃圾收集器间歇率控制着收集器需要在开启新的循环前要等待多久。</p><p>垃圾收集器步进倍率控制收集器运作速度相对与内存分配速度的倍率，默认值是200%，即运作速度2倍于内存分配速率。</p><h3 id="15-2-垃圾回收器函数">15.2 垃圾回收器函数</h3><p>Lua提供一下函数<code>collectgarbage([opt [,arg]])</code>来控制自动内存管理。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>collectgarbage(“collect”)</td><td>做一次完整的垃圾收集循环</td></tr><tr><td>collectgarbage(“count”)</td><td>以K字节数为单位返回Lua使用的总内存数</td></tr><tr><td>collectgarbage(“restart”)</td><td>重启垃圾收集器的自动运行</td></tr><tr><td>collectgarbage(“setpause”)</td><td>将arg设为收集器的间歇率，返回间歇率的前一个值</td></tr><tr><td>collectgarbage(“setstepmul”)</td><td>返回步进倍率的前一个值</td></tr><tr><td>collectgarbage(“step”)</td><td>单步运行垃圾收集器，步长由arg控制</td></tr><tr><td>collectgarbage(“stop”)</td><td>停止垃圾收集器的运行</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"collect"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：27.639648437527.6767578125026.623046875--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-面向对象">16. 面向对象</h2><h3 id="16-1-面向对象特征">16.1 面向对象特征</h3><ul><li><p>封装：能够把一个实体的信息、功能、响应都装入一个单独的对象中的特征。</p></li><li><p>继承：基础的方法允许在不改动原程序的基础上对其进行扩充，使得原功能得以保存，新功能也得以扩展，有利于减少重复代码，提高开发效率。</p></li><li><p>多态：同一操作作用于不同的对象，产生不同的执行结果，可以通过指向基类的指针，来调用实现派生类的方法。</p></li><li><p>抽象：简化复杂问题的方法，可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。</p></li></ul><h3 id="16-2-类封装">16.2 类封装</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 元类</span>Shape <span class="token operator">=</span> <span class="token punctuation">{</span> area <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment">-- 基础类方法 new</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    size <span class="token operator">=</span> size <span class="token keyword">or</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>area <span class="token operator">=</span> size <span class="token operator">*</span> size    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 基础类方法 printArea</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">pirntArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myshape <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>myshape<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The area = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-3-继承与多态">16.3 继承与多态</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 元类</span>Shape <span class="token operator">=</span> <span class="token punctuation">{</span> area <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment">-- 基础类方法 new</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    size <span class="token operator">=</span> size <span class="token keyword">or</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>area <span class="token operator">=</span> size <span class="token operator">*</span> size    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 基础类方法 printArea</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">pirntArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myshape <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>myshape<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The area = 100</span><span class="token comment">-- 继承1</span>Square <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 派生类方法 new</span><span class="token keyword">function</span> Square<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 派生类方法 printArea</span><span class="token keyword">function</span> Square<span class="token punctuation">:</span><span class="token function">printArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The Square area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>mysquare <span class="token operator">=</span> Square<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>mysquare<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The Square area = 100</span><span class="token comment">-- 继承2</span>Rectangle <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 派生类方法 new</span><span class="token keyword">function</span> Rectangle<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> length<span class="token punctuation">,</span> breadth<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    self<span class="token punctuation">.</span>area <span class="token operator">=</span> length <span class="token operator">*</span> breadth    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 派生类方法 printArea</span><span class="token keyword">function</span> Rectangle<span class="token punctuation">:</span><span class="token function">printArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The Rectangle area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myrectangle <span class="token operator">=</span> Rectangle<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>myrectangle<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The Rectangle area = 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章-5">参考文章</h2><p>本文是笔者通过下列网站教程学习Lua的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/lua/lua-tutorial.html">【菜鸟教程Lua教程】</a></p><p>2.<a href="https://haicoder.net/lua/lua-tutorial.html">【嗨客网Lua教程】</a></p>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
            <tag> Lua基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
