<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode刷题-0003-无重复字符的最长子串</title>
      <link href="/leetcode-shua-ti-0003-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/"/>
      <url>/leetcode-shua-ti-0003-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters">无重复字符的最长子串</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个字符串，请你找出其中不含重复字符的最长子串的长度。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "abcabcbb"输出: 3解释: 无重复字符的最长子串是"abc"，所以其长度为3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "bbbbbbb"输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>滑动窗口的右边界不断地右移，只要没有重复的字符，就持续向右扩大窗口边界。一旦出现了重复字符，就需要缩小左边界，直到重复的字符移出了左边界，然后继续移动滑动窗口的右边界。</p><p>每次移动需要计算当前长度，并判断是否需要更新最大长度。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: (2-&gt;4-&gt;3) + (5-&gt;6-&gt;4)输出: 7-&gt;0-&gt;8解释：342+465=807<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答-1"><a href="#2-解答-1" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="进位"><a href="#进位" class="headerlink" title="进位"></a>进位</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        tmp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>                right <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0002-两数相加</title>
      <link href="/leetcode-shua-ti-0002-liang-shu-xiang-jia/"/>
      <url>/leetcode-shua-ti-0002-liang-shu-xiang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a><a href="https://leetcode.com/problems/add-two-numbers/">两数相加</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给出两个非空的链表用来表示两个非负整数，其中，它们各自的位数是按照<strong>逆序</strong>的方式存储的，并且每个节点只能存储一位数字，将这两个数相加起来，返回一个新的逆序链表来表示他们的和。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: (2-&gt;4-&gt;3) + (5-&gt;6-&gt;4)输出: 7-&gt;0-&gt;8解释：342+465=807<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="进位"><a href="#进位" class="headerlink" title="进位"></a>进位</h3><p>复杂度 时间O(N)+空间O(1)</p><ul><li>利用链表数据结构的特点</li><li>使用变量来记录进位，每次相加后更新该变量，用于下一位计算</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> l2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> q <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> l1 <span class="token keyword">or</span> l2 <span class="token keyword">or</span> flag<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">:</span>                l1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">:</span>                l2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> flag<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> flag<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0021-合并两个有序链表</title>
      <link href="/leetcode-shua-ti-0021-he-bing-liang-ge-you-xu-lian-biao/"/>
      <url>/leetcode-shua-ti-0021-he-bing-liang-ge-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">LeetCode链接</a></p><p>将两个升序链表合并为一个新的升序链表并返回，新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: l1 = [1, 2, 4], l2 = [1, 3, 4]输出: [1, 1, 2, 3, 4, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: l1 = [], l2 = []输出: []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：迭代法"><a href="#方法一：迭代法" class="headerlink" title="方法一：迭代法"></a>方法一：迭代法</h3><p>复杂度 时间O(N+M)+空间O(1)</p><p>当两个链表都不为空时，判断两个链表中哪一个链表的头节点的值更小，将较小值的节点添加到结果里，当一个节点被添加到结果里之后，将对应链表中的节点后移一位。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        pNode <span class="token operator">=</span> pHead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> l1 <span class="token keyword">and</span> l2<span class="token punctuation">:</span>            <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> l1<span class="token punctuation">:</span>            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1        <span class="token keyword">if</span> l2<span class="token punctuation">:</span>            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2        <span class="token keyword">return</span> pHead<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ListNode {    public int val;    public ListNode next;    public ListNode(int val=0, ListNode next=null) {        this.val = val;        this.next = next;    }}public class Solution {    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {        ListNode pHead = ListNode(-1);        ListNode pNode = pHead;        while (l1 &amp;&amp; l2) {            if (l1.val &gt; l2.val) {                pNode.next = l2;                l2 = l2.next;            } else {                pNode.next = l1;                l1 = l1.next;            }            pNode = pNode.next;        }        if (l1) {            pNode.next = l1;        }        if (l2) {            pNode.next = l2;        }        return pHead.next;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归法"><a href="#方法二：递归法" class="headerlink" title="方法二：递归法"></a>方法二：递归法</h3><p>复杂度 时间O(N+M)+空间O(N+M)</p><p>如果两个链表中的一个一开始就是空链表，则返回那个非空链表，否则，需要判断两个链表的头节点的值谁更小，然后递归地决定下一个添加到结果里的节点，如果两个链表有一个为空，递归结束。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">:</span>            <span class="token keyword">return</span> l2        <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">:</span>            <span class="token keyword">return</span> l1        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> l2        <span class="token keyword">else</span><span class="token punctuation">:</span>            l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span>        <span class="token keyword">return</span> l1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ListNode {    public int val;    public ListNode next;    public ListNode(int val=0, ListNode next=null) {        this.val = val;        this.next = next;    }}public class Solution {    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {        if (l1 == null) {            return l2;        } else if (l2 == null) {            return l1;        } else if (l1.val &lt; l2.val) {            l1.next = MergeTwoLists(l1.next, l2);            return l1;        } else {            l2.next = MergeTwoLists(l1, l2.next);            return l2;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0020-有效的括号</title>
      <link href="/leetcode-shua-ti-0020-you-xiao-de-gua-hao/"/>
      <url>/leetcode-shua-ti-0020-you-xiao-de-gua-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个只包括<code>(</code>，<code>)</code>，<code>{</code>，<code>}</code>，<code>[</code>，<code>]</code>的字符串<code>s</code>，判断字符串是否有效。注意空字符串可被认为是有效字符串。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "()"输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "(])"输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：栈"><a href="#方法一：栈" class="headerlink" title="方法一：栈"></a>方法一：栈</h3><p>复杂度 时间O(N)+空间O(N)</p><p>使用栈，遍历输入字符串，如果当前字符为左半边字符，则将其压入栈中，如果遇到右半边符号，分类讨论：</p><ol><li>如果栈不为空，取出栈顶元素，如果栈顶元素是其对应的左半边括号，则取出栈顶元素继续循环</li><li>如果栈为空，直接返回False</li><li>如果栈顶元素不是其对应的左半边括号，返回False</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        _map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"{"</span><span class="token punctuation">:</span> <span class="token string">"}"</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">:</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">:</span> <span class="token string">")"</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token keyword">in</span> _map<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>_map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> stack<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> x <span class="token operator">!=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token keyword">not</span> stack <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Solution {    public bool IsValid(string s) {        Stack&lt;char&gt; con = new Stack&lt;char&gt;();        for (int i = 0; i &lt; s.Length; i++) {            if (s[i] == '(' || s[i] == '[' || s[i] == '{') {                con.Push(s[i]);            } else {                if (con.Count &lt;= 0) {                    return False;                }                var tmp = con.Pop();                bool ok = false;                if (s[i] == ']' &amp;&amp; temp == '['                  || s[i] == ')' &amp;&amp; temp == '('                  || s[i] == '}' &amp;&amp; temp == '{'){                    ok = true;                }                if (!ok) {                    return false;                }            }        }        return con.Count == 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：正则匹配"><a href="#方法二：正则匹配" class="headerlink" title="方法二：正则匹配"></a>方法二：正则匹配</h3><p>复杂度 取决于正则引擎的实现</p><p>通过不断消除‘[]’, ‘()’, ‘{}’，最终判断剩下的是否为空串即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token string">'[]'</span> <span class="token keyword">in</span> s <span class="token keyword">or</span> <span class="token string">'()'</span> <span class="token keyword">in</span> s <span class="token keyword">or</span> <span class="token string">'{}'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>            s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'()'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'{}'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-001-两数之和①</title>
      <link href="/leetcode-shua-ti-0001-liang-shu-zhi-he/"/>
      <url>/leetcode-shua-ti-0001-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和①"><a href="#两数之和①" class="headerlink" title="两数之和①"></a><a href="https://leetcode-cn.com/problems/two-sum/">两数之和①</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组<code>nums</code>和一个整数目标值<code>target</code>，请你在该整数数组<code>nums</code>中找出和为目标值<code>target</code>的那两个整数，并返回他们的数组下标。</p><p>假设每种输入只会对应一个答案，数组中同一个元素在答案里不能重复出现，你可以按任意顺序返回答案。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [2,7,11,15], target=9输出: [0, 1] 或 [1, 0]解释：2 + 7 = 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3,2,4], target=6输出: [1, 2] 或 [2, 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力枚举"><a href="#方法一：暴力枚举" class="headerlink" title="方法一：暴力枚举"></a>方法一：暴力枚举</h3><p>复杂度 时间O(N^2)+空间O(1)</p><p>枚举数组中的每一个数<code>x</code>，遍历寻找数组中是否存在<code>target - x</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：哈希表法"><a href="#方法二：哈希表法" class="headerlink" title="方法二：哈希表法"></a>方法二：哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>哈希表是从算法的角度讲，采用“哈希”这种算法维护的表。“哈希”是将任意长度的数据映射到有限长度的域上，哈希结果称为哈希值，哈希表在index为哈希值的存储单元存储对应的原始数据。把哈希值和原始数据看成一对（key, value），可以看到哈希表实现了字典。</p><p>创建一个哈希表，对于每一个<code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p>关键点：</p><ul><li>求和转换为求差</li><li>借助哈希结构将数组中每个元素及其索引相互对应</li><li>以空间换时间，将查找时间从O(N)减低到O(1)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0007-整数反转</title>
      <link href="/leetcode-shua-ti-0007-zheng-shu-fan-zhuan/"/>
      <url>/leetcode-shua-ti-0007-zheng-shu-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<h1 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个32位的有符号整数<code>x</code>，返回将<code>x</code>中的数字部分反转后的结果。</p><p>如果反转后整数超过32位的有符号整数的范围[-2^31, 2^31-1]，就返回0。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = 123输出: 321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = -123输出: -321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>将数字转为字符串后进行倒置，最终再转换为int</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        sign <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        tmp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> sign        <span class="token keyword">return</span> res <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">&lt;=</span> res <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：算数解法"><a href="#方法二：算数解法" class="headerlink" title="方法二：算数解法"></a>方法二：算数解法</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0009-回文数</title>
      <link href="/leetcode-shua-ti-0009-hui-wen-shu/"/>
      <url>/leetcode-shua-ti-0009-hui-wen-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个整数<code>x</code>，如果<code>x</code>是一个回文整数，返回<code>true</code>；否则，返回<code>false</code>。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = 121输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = -123输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>将数字转为字符串后，比较字符串与反转字符串是否相等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法二：算数解法"><a href="#方法二：算数解法" class="headerlink" title="方法二：算数解法"></a>方法二：算数解法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        ret <span class="token operator">=</span> <span class="token number">0</span>        orig_x <span class="token operator">=</span> x        <span class="token keyword">while</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> ret <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> tmp        <span class="token keyword">if</span> orig_x <span class="token operator">==</span> ret<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0014-最长公共前缀</title>
      <link href="/leetcode-shua-ti-0014-zui-chang-gong-gong-qian-zhui/"/>
      <url>/leetcode-shua-ti-0014-zui-chang-gong-gong-qian-zhui/</url>
      
        <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>编写一个函数来查找字符串数组的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: strs = ["flower", "flow", "flight"]输出: "fl"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: strs = ["dog", "rececar", "car"]输出: ""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>复杂度 时间O(N^2) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> res            res <span class="token operator">+=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：分析规律"><a href="#方法二：分析规律" class="headerlink" title="方法二：分析规律"></a>方法二：分析规律</h3><p>数组中的字符串按字母排列后，比较最大字符串和最小字符串即可找到公共前缀</p><p>复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span>        s1 <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        s2 <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">!=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> s2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0013-罗马数字转整数</title>
      <link href="/leetcode-shua-ti-0013-luo-ma-shu-zi-zhuan-zheng-shu/"/>
      <url>/leetcode-shua-ti-0013-luo-ma-shu-zi-zhuan-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a><a href="https://leetcode-cn.com/problems/integer-to-roman/">罗马数字转整数</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>罗马数字包含以下七种字符: <code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code>和<code>M</code></p><table><thead><tr><th align="center">字符</th><th align="center">I</th><th align="center">V</th><th align="center">X</th><th align="center">L</th><th align="center">C</th><th align="center">D</th><th align="center">M</th></tr></thead><tbody><tr><td align="center">数值</td><td align="center">1</td><td align="center">5</td><td align="center">10</td><td align="center">50</td><td align="center">100</td><td align="center">500</td><td align="center">1000</td></tr></tbody></table><p>例如，罗马数字<strong>2</strong>写成<code>II</code>，即两个并列的<strong>1</strong>，<strong>27</strong>写作<code>XXVII</code>，即<code>XX+V+II</code></p><p>存在六种特殊情况：</p><ul><li><code>I</code>可以放在<code>V</code>和<code>X</code>的左边，来表示<strong>4</strong>和<strong>9</strong></li><li><code>X</code>可以放在<code>L</code>和<code>C</code>的左边，来表示<strong>40</strong>和<strong>90</strong></li><li><code>C</code>可以放在<code>D</code>和<code>M</code>的左边，来表示<strong>400</strong>和<strong>900</strong></li></ul><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "III"输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "IV"输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例3：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "LVIII"输出: 58<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>复杂度 时间O(N) + 空间O(1)</p><p>根据提示，特殊处理字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        rel_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"I"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span>        res <span class="token operator">=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">2</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">20</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">200</span>            res <span class="token operator">+=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：归纳"><a href="#方法二：归纳" class="headerlink" title="方法二：归纳"></a>方法二：归纳</h3><p>进一步归纳得出，如果当前字符小于后一个字符，减去当前字符代表的值，否则加上</p><p>复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        rel_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"I"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">and</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                res <span class="token operator">-=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0026-删除有序数组中的重复项</title>
      <link href="/leetcode-shua-ti-0026-shan-chu-you-xu-shu-zu-zhong-de-chong-fu-xiang/"/>
      <url>/leetcode-shua-ti-0026-shan-chu-you-xu-shu-zu-zhong-de-chong-fu-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个有序数字，请原地删除重复出现的元素，使得每个元素只出现一次，返回删除后数组的长度，不需要额外的数组空间，必须在原地修改输入数组在使用O(1)额外空间的条件下完成。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [1, 1, 2]输出: 2, nums = [1, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]输出: 5, nums = [0, 1, 2, 3, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>用快慢指针来记录遍历的坐标</p><ul><li>开始时两个指针都指向第一个数字</li><li>如果两个指针指的数字相同，则快指针向前一步</li><li>如果不同，则两个指针都向前一步</li><li>当快指针走完整个数组后，慢指针当前的坐标加1就是数组中不同数字的个数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        slow <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> fast <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">:</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>         <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0053-最大子序和</title>
      <link href="/leetcode-shua-ti-0053-zui-da-zi-xu-he/"/>
      <url>/leetcode-shua-ti-0053-zui-da-zi-xu-he/</url>
      
        <content type="html"><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组<code>nums</code>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]输出: 6解释：连续子数组[4, -1, 2, 1]的和最大，为6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力解"><a href="#方法一：暴力解" class="headerlink" title="方法一：暴力解"></a>方法一：暴力解</h3><p>算法复杂度  时间O(N^3) +空间O(1)</p><p>列举所有组合子序列首尾位置的组合，求解最大的子序列和</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                maxSum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> maxSum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：优化暴力解"><a href="#方法二：优化暴力解" class="headerlink" title="方法二：优化暴力解"></a>方法二：优化暴力解</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>优化暴力解，可以预先处理，得到前缀和。</p><p>定义函数<code>S(i)</code>，表示计算以<code>0</code>开始到<code>i</code>的累和，那么<code>S(j) - s(i-1)</code>表示从<code>i</code>开始到<code>j</code>的累和。因此，只需要遍历一遍计算出所有的<code>S(i)</code>，然后再减去之前的<code>S(k)</code>在的最小值即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        minSum <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            maxSum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> <span class="token builtin">sum</span> <span class="token operator">-</span> minSum<span class="token punctuation">)</span>            minSum <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>minSum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> maxSum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三：分治法"><a href="#方法三：分治法" class="headerlink" title="方法三：分治法"></a>方法三：分治法</h3><p>算法复杂度 时间O(NlogN) + 空间O(logN)</p><p>把数组<code>nums</code>以中间位置<code>m</code>分为左<code>left</code>、右<code>right</code>两部分，那么就有<code>left=nums[0]...nums[m-1]</code>和<code>right=nums[m+1]...nums[n-1]</code></p><p>最大子序列和的位置有以下三种情况：</p><ol><li>考虑中间元素，跨越左右两部分，从中间元素开始，往左求出后缀最大，往右求出前缀足底啊，保持连续性。</li><li>不考虑中间元素，最大子序列和出现在左半部分，递归求解左边部分最大子序列和。</li><li>不考虑中间元素，最大子序列和出现在右半部分，递归求解右边部分最大子序列和</li></ol><p>分别求出上述三种情况的最大子序，三者中最大值即为最大子序和</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l <span class="token operator">&gt;</span> r<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        left <span class="token operator">=</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        right <span class="token operator">=</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        left_suffix_max_sum <span class="token operator">=</span> right_prefix_max_sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            left_suffix_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left_suffix_max_sum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            right_prefix_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>right_prefix_max_sum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        cross_max_man <span class="token operator">=</span> left_suffix_max_sum <span class="token operator">+</span> right_prefix_max_sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cross_max_man<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法四：动态规划"><a href="#方法四：动态规划" class="headerlink" title="方法四：动态规划"></a>方法四：动态规划</h3><p>动态规划的难点在于找到动态转移方程，<code>dp[i]</code>-表示当前位置<code>i</code>的最大子序和，状态转移方程为<code>dp[i]=max(dp[i-1] + nums[i], nums[i])</code>，初始化<code>dp[0] = nums[0]</code>，从状态转移方程中，只需要关注一个状态的值，不需要开一个数组记录位置所有子序列和，只需要两个变量<code>curMaxSum</code> - 累计最大和到当前位置，<code>maxSum</code> - 全局最大子序和</p><p><code>currMaxSum = max(currMaxSum + nums[i], nums[i])</code></p><p><code>maxSum = max(currMaxSum, maxSum)</code></p><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        max_sum <span class="token operator">=</span> curr_max_sum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            curr_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>curr_max_sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>curr_max_sum<span class="token punctuation">,</span> max_sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> max_sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0066-加一</title>
      <link href="/leetcode-shua-ti-0066-jia-yi/"/>
      <url>/leetcode-shua-ti-0066-jia-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一</p><p>最高位数组存放在数组的首位，数组中每个元素只存储单个数字</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: digits = [1, 2, 3]输出: [1, 2, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: digits = [4, 3, 2, 1]输出: [4, 3, 2, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="反向遍历数组"><a href="#反向遍历数组" class="headerlink" title="反向遍历数组"></a>反向遍历数组</h3><p>算法复杂度  时间O(N) +空间O(1)</p><p>两条链表先遍历其中一个，将其所有节点存入哈希表，然后遍历另一个链表，检查节点是否在哈希表中，第一个存在的节点就是相交节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span>        digits<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span>                <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    digits<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    digits<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> digits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0088-合并两个有序数组</title>
      <link href="/leetcode-shua-ti-0088-he-bing-liang-ge-you-xu-shu-zu/"/>
      <url>/leetcode-shua-ti-0088-he-bing-liang-ge-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定两个按非递减顺序排列的整数数组<code>nums1</code>和<code>nums2</code>，另有两个整数<code>m</code>和<code>n</code>，分别表示<code>nums1</code>和<code>nums2</code>中的元素数目。请合并<code>nums2</code>到<code>nums1</code>中，使得合并后的数组同样按非递减顺序排列</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组<code>nums1</code>中，为了应当此种情况，<code>nums1</code>的初始长度为<code>m+n</code>，其中前<code>m</code>个元素表示应合并的元素，后<code>n</code>个元素为<code>0</code>。<code>nums2</code>的长度为<code>n</code>。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1 = [1,2,3,0,0,0], m=3, nums2=[2,5,6], n=3输出: [1,2,2,3,5,6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1=[1], m=1, nums2=[], n=0输出：[1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="三指针法"><a href="#三指针法" class="headerlink" title="三指针法"></a>三指针法</h3><p>算法复杂度 时间O(M+N) + 空间O(1)</p><p>写指针记录当前填补的那个位置，m指针用于记录nums1处理的那个元素，n指针用于记录nums2处理的那个元素。从后往前比较，并从后往前插入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        pos <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> m <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                n <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                m <span class="token operator">-=</span> <span class="token number">1</span>            pos <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            n <span class="token operator">-=</span> <span class="token number">1</span>            pos <span class="token operator">-=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0101-对称二叉树</title>
      <link href="/leetcode-shua-ti-0101-dui-cheng-er-cha-shu/"/>
      <url>/leetcode-shua-ti-0101-dui-cheng-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，检查它是否是镜像对称的</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1, 2, 2, 3, 4, 4, 3]输出: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1, 2, 2, null, 3, null, 3]输出: False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root1 <span class="token keyword">and</span> <span class="token keyword">not</span> root2            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root1 <span class="token keyword">or</span> <span class="token keyword">not</span> root2<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> root1<span class="token punctuation">.</span>val <span class="token operator">!=</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0104-二叉树的最大深度</title>
      <link href="/leetcode-shua-ti-0104-er-cha-shu-de-zui-da-shen-du/"/>
      <url>/leetcode-shua-ti-0104-er-cha-shu-de-zui-da-shen-du/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，找出其最大深度，二叉树的深度为根节点到最远子节点的最长路径上的节点数</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [3, 9, 20, null, null, 15, 7]输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>由于数是一种递归的数据结构，因此使用递归去解决比较容易。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left <span class="token keyword">and</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：迭代法"><a href="#方法二：迭代法" class="headerlink" title="方法二：迭代法"></a>方法二：迭代法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>使用树的层次遍历（BFS)</p><p>关键点：</p><ul><li><p>队列</p></li><li><p>队列中用None来划分每层，或者在对每层进行迭代之前保存当前队列元素的个数</p></li><li><p>树的基本操作-遍历-层次遍历</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        q<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            node <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>           <span class="token keyword">elif</span> q<span class="token punctuation">:</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>                depth <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> depth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0108-将有序数组转换为二叉搜索树</title>
      <link href="/leetcode-shua-ti-0108-jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-suo-shu/"/>
      <url>/leetcode-shua-ti-0108-jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-suo-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="将有序数组转换为二叉搜索树"><a href="#将有序数组转换为二叉搜索树" class="headerlink" title="将有序数组转换为二叉搜索树"></a>将有序数组转换为二叉搜索树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个升序的整数数组，将其转换为一颗高度平衡二叉搜索树</p><p>高度平衡二叉树是一颗满足每个节点的左右两个子树的高度差的绝对值不超过1的二叉树</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[-10,-3,0,5,9]输出: [0,-3,9,-10,null,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>算法复杂度 时间O(N) + 空间O(N^2)</p><p>找中点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>sortedArrayToBST<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>sortedArrayToBST<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：改进的递归法"><a href="#方法二：改进的递归法" class="headerlink" title="方法二：改进的递归法"></a>方法二：改进的递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>每次递归不用开辟新的空间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">reBuild</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left <span class="token operator">&gt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">return</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0122-买卖股票的最佳时机②</title>
      <link href="/leetcode-shua-ti-0122-mai-mai-gu-piao-de-zui-jia-shi-ji/"/>
      <url>/leetcode-shua-ti-0122-mai-mai-gu-piao-de-zui-jia-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机②"><a href="#买卖股票的最佳时机②" class="headerlink" title="买卖股票的最佳时机②"></a>买卖股票的最佳时机②</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>prices</code>，它的第<code>i</code>个元素<code>prices[i]</code>表示给定股票第<code>i</code>天的价格。</p><p>设计一个算法来计算你能获得的最大利润并返回。可以多次买卖一支股票，但是必须在再次购买前出售掉之前的股票</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,1,5,3,6,4]输出: 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,6,4,3,1]输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="遍历求最大值"><a href="#遍历求最大值" class="headerlink" title="遍历求最大值"></a>遍历求最大值</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prices<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0121-买卖股票的最佳时机①</title>
      <link href="/leetcode-shua-ti-0121-mai-mai-gu-piao-de-zui-jia-shi-ji/"/>
      <url>/leetcode-shua-ti-0121-mai-mai-gu-piao-de-zui-jia-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机①"><a href="#买卖股票的最佳时机①" class="headerlink" title="买卖股票的最佳时机①"></a>买卖股票的最佳时机①</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>prices</code>，它的第<code>i</code>个元素<code>prices[i]</code>表示给定股票第<code>i</code>天的价格。</p><p>你只能选择某一天买入这只股票，并选择在未来的某一个不同的日子卖出这支股票。设计一个算法来计算你能获得的最大利润并返回。如果不能获得任何利润，返回<code>0</code></p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,1,5,3,6,4]输出: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,6,4,3,1]输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="遍历求最大值"><a href="#遍历求最大值" class="headerlink" title="遍历求最大值"></a>遍历求最大值</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prices<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        min_price <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        max_profit <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> price <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            <span class="token keyword">if</span> price <span class="token operator">&lt;</span> min_price<span class="token punctuation">:</span>                min_price <span class="token operator">=</span> price            <span class="token keyword">elif</span> max_profit <span class="token operator">&lt;</span> price <span class="token operator">-</span> min_price<span class="token punctuation">:</span>                max_profit <span class="token operator">=</span> price <span class="token operator">-</span> min_price        <span class="token keyword">return</span> max_profit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0125-验证回文串</title>
      <link href="/leetcode-shua-ti-0125-yan-zheng-hui-wen-chuan/"/>
      <url>/leetcode-shua-ti-0125-yan-zheng-hui-wen-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="验证回文串"><a href="#验证回文串" class="headerlink" title="验证回文串"></a>验证回文串</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "A man, a plan, a canal: Panama"输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "race a car"输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><ul><li>使用头尾双指针，如果两个指针的元素不相同，直接返回false</li><li>如果两个指针的元素相同，更新头尾指针，循环直到头尾指针相遇</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">continue</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用python语言特征</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> s <span class="token keyword">if</span> i<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0136-只出现一次的数字</title>
      <link href="/leetcode-shua-ti-0136-zhi-chu-xian-yi-ci-de-shu-zi/"/>
      <url>/leetcode-shua-ti-0136-zhi-chu-xian-yi-ci-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个非空整数数组，除了某个元素只出现一次外，其余元素均出现两次，找出那个只出现一次的元素，要求线性时间复杂度且不使用额外空间</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,2,1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [4,1,2,1,2]输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="异或法"><a href="#异或法" class="headerlink" title="异或法"></a>异或法</h3><p>利用二进制异或的性质，将所有数字异或即可得唯一出现一次的数字</p><p>关键点：</p><ul><li>异或的性质 两个数字异或的结果<code>a^b</code>的二进制每一位进行运算，得出数字，运算的逻辑是，如果同一位数字相同则为0，不同则为1</li><li>任何数异或本身为0</li><li>任何数和0异或是本身</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            res <span class="token operator">^</span><span class="token operator">=</span> num        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0155-最小栈</title>
      <link href="/leetcode-shua-ti-0155-zui-xiao-zhan/"/>
      <url>/leetcode-shua-ti-0155-zui-xiao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h1><p><a href="https://leetcode-cn.com/problems/min-stack/">https://leetcode-cn.com/problems/min-stack/</a></p><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>设计一个支持<code>push</code>,<code>pop</code>,<code>top</code>操作，并能在常数时间内检测到最小元素的栈。</p><ul><li><code>push(x)</code>——将元素<code>x</code>推入栈中</li><li><code>pop(x)</code>——删除栈顶元素</li><li><code>top()</code>——获取栈顶元素</li><li><code>getMin()</code>——检索栈中的最小元素</li></ul><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: ["MinStack","push","push","push","getMin","pop","top","getMin"][[],[-2],[0],[-3],[],[],[],[]]输出: [null,null,null,null,-3,null,0,-2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：两个栈"><a href="#方法一：两个栈" class="headerlink" title="方法一：两个栈"></a>方法一：两个栈</h3><p>算法复杂度 时间O(1) + 空间O(1)</p><ul><li>一个栈存放全部的元素，<code>push</code>和<code>pop</code>都是正常操作</li><li>另一个栈存放最小栈，每次<code>push</code>，如果比最小栈的栈顶元素小，则<code>push</code>进最小栈</li><li>每次<code>pop</code>的时候判断是否和最小栈栈顶元素相同，如果相同则<code>pop</code>掉最小栈栈顶元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>minStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>minStack <span class="token keyword">or</span> val <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：一个栈"><a href="#方法二：一个栈" class="headerlink" title="方法二：一个栈"></a>方法二：一个栈</h3><p>算法复杂度 时间O(1) + 空间O(1)</p><ul><li>最小栈存储的不是真实值，而是真实值与min的差值</li><li>top的时候涉及到对数据的还原，这里千万注意是上一个最小值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>minV <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val <span class="token operator">-</span> self<span class="token punctuation">.</span>minV<span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>minV<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minV <span class="token operator">=</span> val                <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            <span class="token keyword">return</span>        tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minV <span class="token operator">-=</span> tmp            <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            <span class="token keyword">return</span>       tmp <span class="token operator">=</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV <span class="token operator">+</span> tmp            <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0167-两数之和②-输入有序数组</title>
      <link href="/leetcode-shua-ti-0167-liang-shu-zhi-he-shu-ru-you-xu-shu-zu/"/>
      <url>/leetcode-shua-ti-0167-liang-shu-zhi-he-shu-ru-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和②-输入有序数组"><a href="#两数之和②-输入有序数组" class="headerlink" title="两数之和②-输入有序数组"></a>两数之和②-输入有序数组</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个非递减顺序排列的整数数组<code>nums</code>和一个整数目标值<code>target</code>，从该整数数组<code>nums</code>中找出和为目标值<code>target</code>的那两个整数，并返回他们的数组下标。下标从<code>1</code>开始计数</p><p>假设每种输入只会对应一个答案，数组中同一个元素在答案里不能重复出现，可以按任意顺序返回答案。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [2,7,11,15], target=9输出: [1, 2]解释：2 + 7 = 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3,2,4], target=6输出: [2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希表法"><a href="#方法一：哈希表法" class="headerlink" title="方法一：哈希表法"></a>方法一：哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>创建一个哈希表，对于每一个<code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p>关键点：</p><ul><li>求和转换为求差</li><li>借助哈希结构将数组中每个元素及其索引相互对应</li><li>以空间换时间，将查找时间从O(N)减低到O(1)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p>复杂度 时间O(N)+空间O(1)</p><p>因为数组是有序的，所以使用双指针法。一个<code>left</code>指针，一个<code>right</code>指针，如果<code>left+right</code>的值大于<code>target</code>，则<code>right</code>减1，否则<code>left</code>加1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>           <span class="token keyword">elif</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0160-相交链表</title>
      <link href="/leetcode-shua-ti-0160-xiang-jiao-lian-biao/"/>
      <url>/leetcode-shua-ti-0160-xiang-jiao-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>编写一个程序，找到两个单链表相交的起始节点</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: intersectVal=8, listA=[4, 1, 8, 4, 5], listB = [5, 0, 1, 8, 4, 5], skipA= 2, skipB = 3输出: Intersected at '8'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: intersectVal=2, listA=[0, 9, 1, 2, 4], listB = [3, 2, 4], skipA= 3, skipB = 1输出: Intersected at '2'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希法"><a href="#方法一：哈希法" class="headerlink" title="方法一：哈希法"></a>方法一：哈希法</h3><p>算法复杂度  时间O(N) +空间O(N)</p><p>两条链表先遍历其中一个，将其所有节点存入哈希表，然后遍历另一个链表，检查节点是否在哈希表中，第一个存在的节点就是相交节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        data <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> headA<span class="token punctuation">:</span>            data<span class="token punctuation">.</span>add<span class="token punctuation">(</span>headA<span class="token punctuation">)</span>            headA <span class="token operator">=</span> headA<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> headB<span class="token punctuation">:</span>            <span class="token keyword">if</span> headB <span class="token keyword">in</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span> headB            headB <span class="token operator">=</span> headB<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>使用a,b两个指针分别指向A, B两条链表，两个指针以相同的速度向后移动</p><p>当a到达链表的尾部时，重定位到链表B的头结点</p><p>当b到达链表的尾部时，重定位到链表A的头结点</p><p>a, b指针相遇的点为相交的起始节点，否则没有相交点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        pA<span class="token punctuation">,</span> pB <span class="token operator">=</span> pheadA<span class="token punctuation">,</span> pheadB        <span class="token keyword">while</span> pA <span class="token operator">!=</span> pB<span class="token punctuation">:</span>            pA <span class="token operator">=</span> pA<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pA <span class="token keyword">else</span> pheadB            pB <span class="token operator">=</span> pB<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pB <span class="token keyword">else</span> pheadA        <span class="token keyword">return</span> pA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0169-多数元素</title>
      <link href="/leetcode-shua-ti-0169-duo-shu-yuan-su/"/>
      <url>/leetcode-shua-ti-0169-duo-shu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个大小为<code>n</code>的数组，找到其中的多数元素。多数元素指在数组中出现次数大于<code>[n/2]</code>的元素</p><p>假设数组是非空的，并且给定的数组总是存在多数元素。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [3,2,3]输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,2,1,1,1,2,2]输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="投票算法"><a href="#投票算法" class="headerlink" title="投票算法"></a>投票算法</h3><p>算法复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        count<span class="token punctuation">,</span> major <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                major <span class="token operator">=</span> num            <span class="token keyword">if</span> num <span class="token operator">==</span> major<span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                count <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> major<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0191-位1的个数</title>
      <link href="/leetcode-shua-ti-0191-wei-1-de-ge-shu/"/>
      <url>/leetcode-shua-ti-0191-wei-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="位1的个数"><a href="#位1的个数" class="headerlink" title="位1的个数"></a>位1的个数</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>输入一个无符号整数，返回其二进制表达式中数字位数为<code>1</code>的个数</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 00000000000000000000000000001011输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 00000000000000000000000010000000输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><code>n&amp;(n-1)</code>可以消除<code>n</code>的最后一个1</p><p>复杂度 时间O(logN)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n<span class="token punctuation">:</span>            n <span class="token operator">&amp;</span><span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python语言特征法"><a href="#Python语言特征法" class="headerlink" title="Python语言特征法"></a>Python语言特征法</h3><p>转成二进制，然后count计算1的个数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0198-打家劫舍</title>
      <link href="/leetcode-shua-ti-0198-da-jia-jie-she/"/>
      <url>/leetcode-shua-ti-0198-da-jia-jie-she/</url>
      
        <content type="html"><![CDATA[<h1 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>假设你是一个专业的小偷，计划偷窃沿街的房屋，每个房屋内有一定的现金，相邻的房屋装有相连的防盗系统，如果相邻的房屋同一晚上被小偷闯入，系统会子动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算不出动报警装置的情况下，一夜之内能够偷到的最高金额。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1,2,3,1]输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,7,9,3,1]输出: 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ul><li>状态定义：设动态规划列表<code>dp</code>，<code>dp[i]</code>代表前<code>i</code>个房子在满足条件下能够偷窃到的最高金额</li><li>转移方程：<code>dp[n+1] = max(dp[n], dp[n-1] + num)</code></li><li>简化空间复杂度：<code>dp[n]</code>只与<code>dp[n-1]</code>和<code>dp[n-2]</code>有关系，因此可以设两个变量<code>cur</code>和<code>prev</code>交替记录，将空间复杂度降到O(1)</li></ul><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            prev <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            cur <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>prev <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">,</span> cur        <span class="token keyword">return</span> cur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更简的写法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        cur<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            cur<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>prev <span class="token operator">+</span> num<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">,</span> cur        <span class="token keyword">return</span> cur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0190-颠倒二进制位</title>
      <link href="/leetcode-shua-ti-0190-dian-dao-er-jin-zhi-wei/"/>
      <url>/leetcode-shua-ti-0190-dian-dao-er-jin-zhi-wei/</url>
      
        <content type="html"><![CDATA[<h1 id="颠倒二进制位"><a href="#颠倒二进制位" class="headerlink" title="颠倒二进制位"></a>颠倒二进制位</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>颠倒给定的32位无符号整数二进制位</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 00000010100101000001111010011100输出: 964176192 (00111001011110000010100101000000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 11111111111111111111111111111101输出: 3221225471 (10111111111111111111111111111111)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><code>&lt;&lt;</code>左移运算符：运算数的各二进制全部左移若干位，高位丢弃，低位补0</p><p><code>&gt;&gt;</code>右移运算符：运算数的各二进制全部右移若干位</p><p><code>|</code>按位或运算符：只有对应二个二进制有一个为1时，结果位为1</p><p>复杂度 时间O(logN)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            n <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python语言特征法"><a href="#Python语言特征法" class="headerlink" title="Python语言特征法"></a>Python语言特征法</h3><p>先转成二进制，然后将前面的<code>0b</code>替换为完整的全零前缀，再倒置后转成整数返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        bin_n <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        tmp_n <span class="token operator">=</span> bin_n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp_n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0172-阶乘后的零</title>
      <link href="/leetcode-shua-ti-0172-jie-cheng-hou-de-ling/"/>
      <url>/leetcode-shua-ti-0172-jie-cheng-hou-de-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="阶乘后的零"><a href="#阶乘后的零" class="headerlink" title="阶乘后的零"></a>阶乘后的零</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数<code>n</code>，返回<code>n!</code>结果尾数中零的数量，要求时间复杂度为O(logN)</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 3输出: 0解释: 3!=6，尾数中没有零<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 5输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><p>发现结尾如果是零，必须分解质因素后，<code>2</code>和<code>5</code>相乘才行，而<code>5</code>的数量要远小于<code>2</code>，因此只需求解这<code>n</code>分解质因数后一共有多少个<code>5</code>即可。发现规律得到式子：<code>f(n)=n/5+n/5^2+n/5^3+n/5^4+...</code></p><p>复杂度 时间O(logN)+空间O(1)</p><p>迭代写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">5</span>            count <span class="token operator">+=</span> n        <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> n <span class="token operator">//</span> <span class="token number">5</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>trailingZeroes<span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0203-移除链表元素</title>
      <link href="/leetcode-shua-ti-0203-yi-chu-lian-biao-yuan-su/"/>
      <url>/leetcode-shua-ti-0203-yi-chu-lian-biao-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个链表的头节点<code>head</code>和一个整数<code>val</code>，请你删除链表中所有满足<code>Node.val == val</code>的节点，并返回新的头节点。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head = [1,2,6,3,4,5,6], val=6输出: [1,2,3,4,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head = [7,7,7,7,7,7], val=7输出: []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="链表的基本操作"><a href="#链表的基本操作" class="headerlink" title="链表的基本操作"></a>链表的基本操作</h3><p>注意头尾节点的处理 + 指针循环引用</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        prev <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        cur <span class="token operator">=</span> prev        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0206-反转链表</title>
      <link href="/leetcode-shua-ti-0206-fan-zhuan-lian-biao/"/>
      <url>/leetcode-shua-ti-0206-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你单链表的头节点<code>head</code>, 请你反转链表，并返回反转后的链表</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head = [1,2,3,4,5]输出: [5,4,3,2,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head=[1,2]输出: [2,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="链表的基本操作"><a href="#链表的基本操作" class="headerlink" title="链表的基本操作"></a>链表的基本操作</h3><p>使用一个变量记录前驱<code>pre</code>，一个变量记录后继<code>next</code>，不断更新<code>current.next=pre</code></p><p>注意头尾节点的处理 + 指针循环引用</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        prev <span class="token operator">=</span> <span class="token boolean">None</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev            prev <span class="token operator">=</span> cur            cur <span class="token operator">=</span> <span class="token builtin">next</span>        <span class="token keyword">return</span> prev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0219-存在重复元素②</title>
      <link href="/leetcode-shua-ti-0219-cun-zai-chong-fu-yuan-su/"/>
      <url>/leetcode-shua-ti-0219-cun-zai-chong-fu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="存在重复元素②"><a href="#存在重复元素②" class="headerlink" title="存在重复元素②"></a>存在重复元素②</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组和一个整数<code>k</code>，判断数组中是否存在两个不同的索引<code>i</code>和<code>j</code>，使得<code>nums[i]=nums[j]</code>，并且i和j的差的绝对值至多为<code>k</code>。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,2,3,1], k=3输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,0,1,1], k=1输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h3><p>用一个哈希表存储已经访问过的数字，键是数字，值是位置，每次访问都查看哈希表中是否有这个元素，有的话拿索引进行对比，是否满足条件，如果满足则返回true即可</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token keyword">in</span> hash_map <span class="token keyword">and</span> i <span class="token operator">-</span> hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0226-翻转二叉树</title>
      <link href="/leetcode-shua-ti-0226-fan-zhuan-er-cha-shu/"/>
      <url>/leetcode-shua-ti-0226-fan-zhuan-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>翻转一颗二叉树</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,2,3,1], k=3输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,0,1,1], k=1输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>递归简化操作</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right        <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left        self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：栈"><a href="#方法二：栈" class="headerlink" title="方法二：栈"></a>方法二：栈</h3><p>如果树很高，建议使用栈来代替递归</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right        <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node<span class="token punctuation">.</span>left            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0232-用栈实现队列</title>
      <link href="/leetcode-shua-ti-0232-yong-zhan-shi-xian-dui-lie/"/>
      <url>/leetcode-shua-ti-0232-yong-zhan-shi-xian-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>仅使用两个栈实现先入先出队列，队列应当支持一般队列支持的所有操作(<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>)</p><p>实现<code>MyQueue</code>类:</p><ul><li><code>void push(int x)</code>将元素<code>x</code>推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回<code>true</code>，否则，返回<code>false</code></li></ul><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：["MyQueue", "push", "push", "peek", "pop", "empty"][[], [1], [2], [], [], []]输出：[null, null, null, 1, 1, false]解释：MyQueue myQueue = new MyQueue();myQueue.push(1); // queue is: [1]myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)myQueue.peek(); // return 1myQueue.pop(); // return 1, queue is [2]myQueue.empty(); // return false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h3><ul><li>在<code>push</code>的时候利用双栈</li></ul><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        """</span>        self<span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Push element x to the back of queue.        """</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Removes the element from in front of queue and returns that element.        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the front element.        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Returns whether the queue is empty.        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment"># Your MyQueue object will be instantiated and called as such:</span><span class="token comment"># obj = MyQueue()</span><span class="token comment"># obj.push(x)</span><span class="token comment"># param_2 = obj.pop()</span><span class="token comment"># param_3 = obj.peek()</span><span class="token comment"># param_4 = obj.empty()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0263-丑数</title>
      <link href="/leetcode-shua-ti-0263-chou-shu/"/>
      <url>/leetcode-shua-ti-0263-chou-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>判断给定的数是否为丑数，丑数是只包含因数2，3，5的正整数</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 6输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 8输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：非递归法"><a href="#方法一：非递归法" class="headerlink" title="方法一：非递归法"></a>方法一：非递归法</h3><ul><li>数论</li><li>因数分解</li></ul><p>复杂度 时间O(logN)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                n <span class="token operator">/=</span> i        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归法"><a href="#方法二：递归法" class="headerlink" title="方法二：递归法"></a>方法二：递归法</h3><p>复杂度 时间O(logN)+空间O(logN)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>       <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>isUgly<span class="token punctuation">(</span>n <span class="token operator">/</span> i<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0342-4的幂</title>
      <link href="/leetcode-shua-ti-0342-4-de-mi/"/>
      <url>/leetcode-shua-ti-0342-4-de-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="4的幂"><a href="#4的幂" class="headerlink" title="4的幂"></a>4的幂</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数，判断它是否是4的幂次方，不使用循环或递归完成。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 16输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 5输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：归纳法1"><a href="#方法一：归纳法1" class="headerlink" title="方法一：归纳法1"></a>方法一：归纳法1</h3><p>如果一个数字是4的幂次方，满足：</p><ol><li>是2的幂次方，最低位之外，其他位置有且仅有一个1   —&gt;  n&amp;(n-1) = 0</li><li>这个1不在偶数位，一定在奇数位  —&gt;  n &amp; 0x55555555 = n</li></ol><p>复杂度 时间O(1)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&amp;</span> <span class="token number">0x55555555</span> <span class="token operator">==</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法二：归纳法2"><a href="#方法二：归纳法2" class="headerlink" title="方法二：归纳法2"></a>方法二：归纳法2</h3><p>如果一个数字是4的幂次方，满足：</p><ol><li>是2的幂次方，最低位之外，其他位置有且仅有一个1   —&gt;  n&amp;(n-1) = 0</li><li>减去1是3的幂次方   —&gt; (n-1) % 3 = 0</li></ol><p>复杂度 时间O(1)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法三：python语言特征"><a href="#方法三：python语言特征" class="headerlink" title="方法三：python语言特征"></a>方法三：python语言特征</h3><p>复杂度 时间O(1)+空间O(1)</p><p>转数字为二进制表示的字符串，利用字符串相关操作进行判断</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        bin_n <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> bin_n<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bin_n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0283-移动零</title>
      <link href="/leetcode-shua-ti-0283-yi-dong-ling/"/>
      <url>/leetcode-shua-ti-0283-yi-dong-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>nums</code>，请将所有0移到数组的末尾，同时保持非零元素的相对顺序，必须在原数组上操作，不能拷贝额外的数组，尽量减少操作次数。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [0,1,0,3,12]输出: [1,3,12,0,0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>使用一个慢指针表示写指针，快指针表示读指针。</p><p>读指针不断往后移动，遇到非0，则将读到的值写入写指针，触发写指针移动，读指针走到算法结束。</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> fast <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>            fast <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0349-两个数组的交集</title>
      <link href="/leetcode-shua-ti-0349-liang-ge-shu-zu-de-jiao-ji/"/>
      <url>/leetcode-shua-ti-0349-liang-ge-shu-zu-de-jiao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定两个数组，编写一个函数来计算他们的交集。输出结果中的每个元素一定是唯一的。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1 = [1,2,2,1], nums2 = [2,2]输出: [2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出: [9,4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希表法"><a href="#方法一：哈希表法" class="headerlink" title="方法一：哈希表法"></a>方法一：哈希表法</h3><p>先遍历第一个数组，将其存在hashtable在，然后遍历第二个数组，如果在hashtable中，就push到ret，然后清空hashtable，最后返回ret即可。</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map<span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums1<span class="token punctuation">:</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> num        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                hash_map<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>num<span class="token punctuation">)</span>         <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：Python语言特征"><a href="#方法二：Python语言特征" class="headerlink" title="方法二：Python语言特征"></a>方法二：Python语言特征</h3><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0371-两整数之和</title>
      <link href="/leetcode-shua-ti-0371-liang-zheng-shu-zhi-he/"/>
      <url>/leetcode-shua-ti-0371-liang-zheng-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="两整数之和"><a href="#两整数之和" class="headerlink" title="两整数之和"></a>两整数之和</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>不使用运算符<code>+</code>和<code>-</code>计算两整数<code>a</code>、<code>b</code>之和。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: a = 1, b = 2输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: a = -2, b = 3输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><ul><li>异或是一种不进位的加减法</li><li>求与之后左移以为来表示进位</li></ul><p>复杂度 时间O(1)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        a <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>        b <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>        <span class="token keyword">while</span> b<span class="token punctuation">:</span>            carry <span class="token operator">=</span> a <span class="token operator">&amp;</span> b            a <span class="token operator">=</span> a <span class="token operator">^</span> b            b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>        <span class="token keyword">return</span> a <span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">0x80000000</span> <span class="token keyword">else</span> <span class="token operator">~</span><span class="token punctuation">(</span>a <span class="token operator">^</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0401-二进制手表</title>
      <link href="/leetcode-shua-ti-0401-er-jin-zhi-shou-biao/"/>
      <url>/leetcode-shua-ti-0401-er-jin-zhi-shou-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制手表"><a href="#二进制手表" class="headerlink" title="二进制手表"></a>二进制手表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>二进制手表顶部有4个LED代表小时（0-11），底部6个LED代表分钟（0-59），每个LED代表一个0或1，最低位在右侧</p><p>给定一个非负整数<code>num</code>代当前LED亮着的数量，返回所有可能的时间。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: num = 1输出: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: num = 9输出：[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：笛卡尔积"><a href="#方法一：笛卡尔积" class="headerlink" title="方法一：笛卡尔积"></a>方法一：笛卡尔积</h3><p>给定一个数字<code>num</code>，将其分为两部分，一部分<code>a</code>给小时，另一部分<code>num-a</code>给分钟，最终结果就是<code>a</code>能表示的所有小时的集合和<code>num-a</code>所能表示的分的集合的笛卡尔积，枚举所有<code>(a, num-a)</code>的集合即可。</p><p>复杂度 时间O(N^2)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">readBinaryWatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">possible_number</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> minute<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">,</span> combinations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">,</span> combinations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> a <span class="token keyword">in</span> posible_number<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> b <span class="token keyword">in</span> posible_number<span class="token punctuation">(</span>num<span class="token operator">-</span>i<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：二进制"><a href="#方法二：二进制" class="headerlink" title="方法二：二进制"></a>方法二：二进制</h3><p>进一步抽象，实际要找的就是<code>a</code>和<code>b</code>相加等于<code>num</code>，并且<code>a</code>和<code>b</code>就是二进制表示中1的个数</p><p>复杂度 时间O(N^2)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">readBinaryWatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">==</span> num<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0437-路径总和③</title>
      <link href="/leetcode-shua-ti-0437-lu-jing-zong-he/"/>
      <url>/leetcode-shua-ti-0437-lu-jing-zong-he/</url>
      
        <content type="html"><![CDATA[<h1 id="路径总和③"><a href="#路径总和③" class="headerlink" title="路径总和③"></a>路径总和③</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，他的每个节点都存放着一个整数值，找出路径和等于给定数值的路径总数。</p><p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方法必须向下的。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8输出: 3分析：和等于8的路径有3条：5-&gt;3,5-&gt;2-&gt;1,-3-&gt;11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> targetSum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            node<span class="token punctuation">,</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            res <span class="token operator">+=</span> temp<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span>            temp <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                arr <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">]</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                arr <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">]</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> targetSum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sumList<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            sumList <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token operator">+</span> root<span class="token punctuation">.</span>val <span class="token keyword">for</span> num <span class="token keyword">in</span> sumList<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span>            <span class="token keyword">return</span> sumList<span class="token punctuation">.</span>count<span class="token punctuation">(</span>targetSum<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sumList<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>right<span class="token punctuation">,</span> sumList<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0455-分发饼干</title>
      <link href="/leetcode-shua-ti-0455-fen-fa-bing-gan/"/>
      <url>/leetcode-shua-ti-0455-fen-fa-bing-gan/</url>
      
        <content type="html"><![CDATA[<h1 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>每个孩子最多得到一块饼干，对每个孩子<code>i</code>，都有一个胃口值<code>g[i]</code>，每块饼干<code>s[j]</code>尺寸。如果<code>s[j] &gt;= g[i]</code>，将这饼干<code>j</code>分给孩子<code>i</code>，这个孩子能够满足，目前是尽可能满足越多数量的孩子，并输出最大值。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: g = [1,2,3], s = [1,1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: g = [1,2], s = [1,2,3]输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>给一个孩子的饼干应该尽量小并且能满足孩子，大的留来满足胃口大的孩子。</p><ul><li>将需求因子<code>g</code>和<code>s</code>分别从小到大进行排序</li><li>使用贪心思想，配合两个指针，每个饼干只尝试一次，成功则换下一个孩子来尝试，不成功则换下一个饼干来尝试</li></ul><p>复杂度 时间O(NlogN)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> g<span class="token punctuation">:</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        g<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span>                ans <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0504-七进制数</title>
      <link href="/leetcode-shua-ti-0504-qi-jin-zhi-shu/"/>
      <url>/leetcode-shua-ti-0504-qi-jin-zhi-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="七进制数"><a href="#七进制数" class="headerlink" title="七进制数"></a>七进制数</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数，将其转化为7进制，并以字符串形式输出。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：100输出："202"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：-7输出："-10"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>给一个孩子的饼干应该尽量小并且能满足孩子，大的留来满足胃口大的孩子。</p><p>10进制转任意进制的思路都是<strong>除x取余</strong>，其中x为进制数。</p><ul><li>除x取余并逆序输出</li></ul><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>复杂度 时间O(N)+空间O(h)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"-"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>convertToBase7<span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>convertToBase7<span class="token punctuation">(</span>num <span class="token operator">//</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：迭代法"><a href="#方法二：迭代法" class="headerlink" title="方法二：迭代法"></a>方法二：迭代法</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"0"</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        is_negative <span class="token operator">=</span> num <span class="token operator">&lt;</span> <span class="token number">0</span>        num <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            num<span class="token punctuation">,</span> remain <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">7</span><span class="token punctuation">,</span> num <span class="token operator">%</span> <span class="token number">7</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>remain<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span>_1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> is_negative <span class="token keyword">else</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0575-分糖果</title>
      <link href="/leetcode-shua-ti-0575-fen-tang-guo/"/>
      <url>/leetcode-shua-ti-0575-fen-tang-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="分糖果"><a href="#分糖果" class="headerlink" title="分糖果"></a>分糖果</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果，你需要把这些糖果均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：candies = [1,1,2,2,3,3]输出：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：candies = [1,1,2,3]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="逻辑分析法"><a href="#逻辑分析法" class="headerlink" title="逻辑分析法"></a>逻辑分析法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>由于糖果是偶数，并且只需要做到两个人糖果数量一样即可。考虑两种情况：</p><ul><li>如果糖果种类大于n/2，妹妹最多可以获得的糖果种类应该是n/2</li><li>如果糖果种类小于n/2，妹妹最多可以获得的糖果种类是糖果种类本身。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candies<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>candies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candies<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0665-非递减数列</title>
      <link href="/leetcode-shua-ti-0665-fei-di-jian-shu-lie/"/>
      <url>/leetcode-shua-ti-0665-fei-di-jian-shu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="非递减数列"><a href="#非递减数列" class="headerlink" title="非递减数列"></a>非递减数列</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个长度为<code>n</code>的整数数字，请判断在最多改变<code>1</code>个元素的情况下，该数据能够变成一个非递减数列。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：nums = [4,2,3]输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：nums = [4, 2, 1]输出：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h3><p>复杂度 时间O(N)+空间O(1)</p><ul><li>考虑边界情况，贪心改变数组的值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkPossibility</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token keyword">and</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0821-字符的最短距离</title>
      <link href="/leetcode-shua-ti-0821-zi-fu-de-zui-duan-ju-chi/"/>
      <url>/leetcode-shua-ti-0821-zi-fu-de-zui-duan-ju-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="字符的最短距离"><a href="#字符的最短距离" class="headerlink" title="字符的最短距离"></a>字符的最短距离</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个字符串<code>S</code>和一个字符<code>C</code>。返回一个代表字符串<code>S</code>中每个字符到字符串<code>S</code>中的字符<code>C</code>的最短距离的数组。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：S = "loveleetcode", c = 'e'输出：[3,2,1,0,1,0,0,1,2,2,1,0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：数组的遍历"><a href="#方法一：数组的遍历" class="headerlink" title="方法一：数组的遍历"></a>方法一：数组的遍历</h3><p>复杂度 时间O(N^2)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shotestToChar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> C<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            l <span class="token operator">=</span> r <span class="token operator">=</span> i            <span class="token keyword">while</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> S<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span> <span class="token keyword">break</span>                    l <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">while</span> r <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> S<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span> <span class="token keyword">break</span>                    r <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span>            <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">:</span> r <span class="token operator">=</span> <span class="token number">10000</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>r<span class="token operator">-</span>i<span class="token punctuation">,</span> i<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：单调栈"><a href="#方法二：单调栈" class="headerlink" title="方法二：单调栈"></a>方法二：单调栈</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shotestToChar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> C<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         pre <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span>                pre <span class="token operator">=</span> i            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">-</span> pre<span class="token punctuation">)</span>        pre <span class="token operator">=</span> <span class="token number">20000</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span>                pre <span class="token operator">=</span> i            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pre <span class="token operator">-</span> i<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0874-模拟行走机器人</title>
      <link href="/leetcode-shua-ti-0874-mo-ni-xing-zou-ji-qi-ren/"/>
      <url>/leetcode-shua-ti-0874-mo-ni-xing-zou-ji-qi-ren/</url>
      
        <content type="html"><![CDATA[<h1 id="模拟行走机器人"><a href="#模拟行走机器人" class="headerlink" title="模拟行走机器人"></a>模拟行走机器人</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>机器人在一个无限大小的网格上行走，从点<code>(0, 0)</code>处开始出发，面向北方。该机器人可以接收以下三种类型的命令：</p><p>-2：向左转 90 度</p><p>-1：向右转 90 度</p><p>1 &lt;= x &lt;= 9：向前移动 x 个单位长度</p><p>在网格上有一些格子被视为障碍物。</p><p>第 i 个障碍物位于网格点 <code>(obstacles[i][0], obstacles[i][1])</code></p><p>如果机器人试图走到障碍物上方，那么它将停留在障碍物的前一个网格方块上，但仍然可以继续该路线的其余部分。</p><p>返回从原点到机器人的最大欧式距离的平方。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：commands = [4,-1,3], obstacles = []输出：25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：commands = [4,-1,4, -2, 4], obstacles = [[2, 4]]输出：65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h3><ul><li>理解题意</li><li>建立坐标系</li><li>空间换时间</li></ul><p>复杂度 时间O(N*M)+空间O(obstacles)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">robotSim</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> commands<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obstacles<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        pos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        deg <span class="token operator">=</span> <span class="token number">90</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        obstaclesSet <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">,</span> obstacles<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> command <span class="token keyword">in</span> commands<span class="token punctuation">:</span>            <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                deg <span class="token operator">=</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">360</span>            <span class="token keyword">elif</span> command <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>                deg <span class="token operator">=</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">360</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">90</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">180</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">270</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-1128-等价多米诺骨牌对的数量</title>
      <link href="/leetcode-shua-ti-1128-deng-jie-duo-mi-nuo-gu-pai-dui-de-shu-liang/"/>
      <url>/leetcode-shua-ti-1128-deng-jie-duo-mi-nuo-gu-pai-dui-de-shu-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="等价多米诺骨牌对的数量"><a href="#等价多米诺骨牌对的数量" class="headerlink" title="等价多米诺骨牌对的数量"></a>等价多米诺骨牌对的数量</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个由一些多米诺骨牌组成的列表 dominoes。</p><p>如果其中某一张多米诺骨牌可以通过旋转 0 度或 180 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。</p><p>形式上，<code>dominoes[i] = [a, b]</code> 和 <code>dominoes[j] = [c, d]</code> 等价的前提是 a==c 且 b==d，或是 a==d 且 b==c。</p><p>在 <code>0 &lt;= i &lt; j &lt; dominoes.length</code> 的前提下，找出满足 <code>dominoes[i]</code> 和 <code>dominoes[j] </code>等价的骨牌对 (i, j) 的数量。其中<code>1 &lt;= dominoes[i][j] &lt;= 9</code></p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：dominoes = [[1,2],[2,1],[3,4],[5,6]]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：”排序”-计数"><a href="#方法一：”排序”-计数" class="headerlink" title="方法一：”排序” + 计数"></a>方法一：”排序” + 计数</h3><p>用一个哈希表存储所有的[a,b]对的计数信息</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dominoes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>         n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dominoes<span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        cntMapper <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> dominoes<span class="token punctuation">:</span>            k <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token keyword">else</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>            cntMapper<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> cntMapper<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> cntMapper<span class="token punctuation">:</span>            v <span class="token operator">=</span> cntMapper<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> v <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>                cnt <span class="token operator">+=</span> <span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：状态压缩-一次遍历"><a href="#方法二：状态压缩-一次遍历" class="headerlink" title="方法二：状态压缩+一次遍历"></a>方法二：状态压缩+一次遍历</h3><p>考虑到数字的数据范围为<code>1 &lt;= dominoes[i][j] &lt;= 9</code>，因此使用10bit表示a,b。</p><p>复杂度 时间O(N)+空间O(1024)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dominoes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>         count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1024</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> dominoes<span class="token punctuation">:</span>            <span class="token keyword">if</span> a <span class="token operator">&gt;=</span> b<span class="token punctuation">:</span>                v <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token operator">|</span> b            <span class="token keyword">else</span><span class="token punctuation">:</span>                v <span class="token operator">=</span> b <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token operator">|</span> a            ans <span class="token operator">+=</span> counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span>            counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三：状态压缩优化"><a href="#方法三：状态压缩优化" class="headerlink" title="方法三：状态压缩优化"></a>方法三：状态压缩优化</h3><p>考虑到数字的数据范围为<code>1 &lt;= dominoes[i][j] &lt;= 9</code>，用9进制来存。</p><p>复杂度 时间O(N)+空间O(81)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dominoes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>         count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1024</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> dominoes<span class="token punctuation">:</span>            v <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ans <span class="token operator">+=</span> counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span>            counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-1260-二维网关迁移</title>
      <link href="/leetcode-shua-ti-1260-er-wei-wang-guan-qian-yi/"/>
      <url>/leetcode-shua-ti-1260-er-wei-wang-guan-qian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="二维网关迁移"><a href="#二维网关迁移" class="headerlink" title="二维网关迁移"></a>二维网关迁移</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个 n 行 m 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。</p><p>每次「迁移」操作将会引发下述活动：</p><p>位于<code>grid[i][j]</code>的元素将会移动到<code> grid[i][j + 1]</code>。</p><p>位于<code>grid[i][m - 1] </code>的元素将会移动到 <code>grid[i + 1][0]</code>。</p><p>位于<code>grid[n - 1][m - 1] </code>的元素将会移动到<code> grid[0][0]</code>。</p><p>请你返回 k 次迁移操作后最终得到的 二维网格。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1输出：[[9,1,2],[3,4,5],[6,7,8]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：commands = [4,-1,4, -2, 4], obstacles = [[2, 4]]输出：65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="转化为一维矩阵处理"><a href="#转化为一维矩阵处理" class="headerlink" title="转化为一维矩阵处理"></a>转化为一维矩阵处理</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shiftGrid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 二维转为一维</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 取模，缩小k的范围</span>        k <span class="token operator">%=</span> m <span class="token operator">*</span> n        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 首尾交换法</span>        <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>                t <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> t                l <span class="token operator">+=</span> <span class="token number">1</span>                r <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment"># 三次旋转</span>        reverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">*</span> n <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        reverse<span class="token punctuation">(</span>m <span class="token operator">*</span> n <span class="token operator">-</span> k<span class="token punctuation">,</span> m <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        reverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 一维到二维</span>        row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">%</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-1332-删除回文子序列</title>
      <link href="/leetcode-shua-ti-1332-shan-chu-hui-wen-zi-xu-lie/"/>
      <url>/leetcode-shua-ti-1332-shan-chu-hui-wen-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="删除回文子序列"><a href="#删除回文子序列" class="headerlink" title="删除回文子序列"></a>删除回文子序列</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个字符串 s，它仅由字母 ‘a’ 和 ‘b’ 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。</p><p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p><p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p><p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：s = "ababa"输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：s = "baabb"输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="判断回文"><a href="#判断回文" class="headerlink" title="判断回文"></a>判断回文</h3><ul><li><p>如果 s 是回文，则我们需要一次消除，否则需要两次</p></li><li><p> 对于空字符串，我们需要 0 次</p></li></ul><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removePalindromeSub</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> s <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removePalindromeSub</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            l <span class="token operator">=</span> <span class="token number">0</span>            r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> l <span class="token operator">&lt;</span>r<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                l <span class="token operator">+=</span> <span class="token number">1</span>                r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> isPalindrome<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0027-移除元素</title>
      <link href="/leetcode-shua-ti-0027-yi-chu-yuan-su/"/>
      <url>/leetcode-shua-ti-0027-yi-chu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/">移除元素</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个数组<code>nums</code>和一个值<code>val</code>，请原地删除所有数值等于<code>val</code>的元素，返回删除后数组的长度，不需要额外的数组空间，必须在原地修改输入数组在使用O(1)额外空间的条件下完成。</p><p>元素的顺序可以改变，不必考虑数组在超出新长度后面的元素。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3, 2, 2, 3], val = 3输出: 2, nums = [2, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [0, 1, 2, 2, 3, 0, 4, 2], val = 2输出: 5, nums = [0, 1, 3, 3, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：双指针法"><a href="#方法一：双指针法" class="headerlink" title="方法一：双指针法"></a>方法一：双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>用快慢指针来记录遍历的坐标</p><ul><li>开始时两个指针都指向第一个数字</li><li>如果快指针指的数字与<code>val</code>相同，则快指针向前一步</li><li>如果不同，则将指针所指值赋给慢指针，然后两个指针都向前一步</li><li>当快指针走完整个数组后，慢指针当前的坐标就是新数组的数字个数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        slow <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> fast <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> slow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：Python特性"><a href="#方法二：Python特性" class="headerlink" title="方法二：Python特性"></a>方法二：Python特性</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> val <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
