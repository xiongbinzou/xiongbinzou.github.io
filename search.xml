<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lua语言学习笔记</title>
      <link href="/lua-yu-yan-xue-xi-bi-ji/"/>
      <url>/lua-yu-yan-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Lua语言学习笔记"><a href="#Lua语言学习笔记" class="headerlink" title="Lua语言学习笔记"></a>Lua语言学习笔记</h1><p>[TOC]</p><h2 id="0-环境准备"><a href="#0-环境准备" class="headerlink" title="0. 环境准备"></a>0. 环境准备</h2><h3 id="0-1-简介"><a href="#0-1-简介" class="headerlink" title="0.1 简介"></a>0.1 简介</h3><p>Lua是由标准C编写而成的脚本语言，诞生于1993年，具有高效性、可移植性、可嵌入性、简单强大、小巧轻便、免费开源等诸多优点，主要应用场景包括做为嵌入脚本、做为独立脚本、用于应用程序的动态配置、游戏开发以及Web应用脚本等</p><h3 id="0-2-Windows下载与安装Lua"><a href="#0-2-Windows下载与安装Lua" class="headerlink" title="0.2 Windows下载与安装Lua"></a>0.2 Windows下载与安装Lua</h3><ol><li>选择合适版本的Lua语言开发包<a href="http://joedf.ahkscript.org/LuaBuilds/">下载</a></li><li>解压下载好的Lua压缩包到合适的路径</li><li>将Lua的解压路径添加到环境变量<code>Path</code>中</li><li>打开Windows命令行工具，输入指令<code>lua</code>，命令行输出Lua版本信息，安装成功。</li></ol><h3 id="0-3-CentOS下载与安装Lua"><a href="#0-3-CentOS下载与安装Lua" class="headerlink" title="0.3 CentOS下载与安装Lua"></a>0.3 CentOS下载与安装Lua</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz  # 拉取合适的Lua包tar -C /usr/local -zxvf lua-5.4.4.tar.gz  # 解压到合适的目录下cd /usr/local/lua-5.4.4/  # 进入Lua包解压路径make all test  # 开始安装ln -s /usr/local/lua-5.4.4/src/lua /usr/bin/lua  # 建立连接（可选步骤）lua -v  # 查看版本，输出Lua版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0-4-推荐IDE"><a href="#0-4-推荐IDE" class="headerlink" title="0.4 推荐IDE"></a>0.4 推荐IDE</h3><ol><li>VSCode + Lua扩展插件(Tencent出品)</li><li>在线IDE  <a href="https://replit.com/languages/lua">https://replit.com/languages/lua</a></li></ol><h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h2><h3 id="1-1-table"><a href="#1-1-table" class="headerlink" title="1.1 table"></a>1.1 table</h3><p>table类型是一个”关联数组”，需要注意：</p><ol><li>table的索引可以是数字或者是字符串，所有索引值都需要用<code>[</code>和<code>]</code>括起来，如果是字符串，还可以去掉引号和中括号</li><li>table的默认初始索引一般以1开始，如果不写索引，则索引会被认为是数字，并按顺序自动从1往后排</li><li>table变量只是一个地址引用，对table操作不会产生数据影响</li><li>table不固定长度大小，有新数据插入时长度会自动增长</li><li>table里保存数据可以是任何类型，包括function和table</li><li>table所有元素之间用逗号<code>,</code>隔开</li></ol><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 初始化</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 指定值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"lua"</span>mytable<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"table"</span><span class="token comment">-- 修改值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token comment">-- 获取值</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- Lua</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">-- table</span><span class="token comment">-- 移除引用</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-string"><a href="#1-2-string" class="headerlink" title="1.2 string"></a>1.2 string</h3><p>string类型可以使用双引号<code>""</code>或单引号<code>''</code>声明，如果是块字符串，可以以<code>[[</code>开始，以<code>]]</code>结尾<br>字符串不可修改值，可以通过<code>string.gsub</code>函数来替换字符串中的子串</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token string">'1024'</span>b <span class="token operator">=</span> <span class="token string">'3.14159'</span>c <span class="token operator">=</span> <span class="token string">"Hello"</span>d <span class="token operator">=</span> <span class="token string">"2022"</span>e <span class="token operator">=</span> <span class="token string">[[&lt;html&gt;&lt;head /&gt;&lt;body&gt;&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment">-- 输出：1024   3.14159 Hello  2022</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">--[[ 输出：&lt;html&gt;&lt;head /&gt;&lt;body&gt;&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-number"><a href="#1-3-number" class="headerlink" title="1.3 number"></a>1.3 number</h3><p>number类型只有一种，即双精度浮点double类型</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">1024</span>b <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1024    number</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：3.14159 number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-boolean"><a href="#1-4-boolean" class="headerlink" title="1.4 boolean"></a>1.4 boolean</h3><p>boolean类型只有两个可选值：true（真）和 false（假）。判断时false和nil都是假，其他都为真</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token keyword">true</span>b <span class="token operator">=</span> <span class="token keyword">false</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：true    boolean</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：false   boolean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-nil"><a href="#1-5-nil" class="headerlink" title="1.5 nil"></a>1.5 nil</h3><p>nil类型表示一个无效值，只有值 nil，如果打印没有赋值的变量，则会输出nil</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"first: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：first:  nil</span>a <span class="token operator">=</span> <span class="token number">1024</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"second: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：second:   1024</span>a <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"third: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：third:  nil</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"nil"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a is nil"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a is not nil"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 输出：a is nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：要判断变量是否为 nil 的时候，需要使用 type 获取变量的类型，然后与字符串的 nil 进行比较</p><h3 id="1-6-function"><a href="#1-6-function" class="headerlink" title="1.6 function"></a>1.6 function</h3><p>function类型是由C或Lua编写的完成某一功能的程序指令的集合，称为函数，可分为自定义函数和系统函数。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">end</span>result1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result1 = %d, result2 = %d"</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：result1 = 300, result2 = 1123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-thread"><a href="#1-7-thread" class="headerlink" title="1.7 thread"></a>1.7 thread</h3><p>thread类型表示执行的独立线路，用于执行协同程序</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">end</span>cor <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>cor<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>cor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：thread: 0x13691f0   thread</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8-userdata"><a href="#1-8-userdata" class="headerlink" title="1.8 userdata"></a>1.8 userdata</h3><p>userdata是一种用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型，可以将任意C/C++的任意数据类型的数据存储在Lua变量中调用</p><p>userdata可分为full userdata和light userdata</p><table><thead><tr><th></th><th>full userdata</th><th>light userdata</th></tr></thead><tbody><tr><td>定义</td><td>用户自定义数据</td><td>一种表示C指针的值，不用创建</td></tr><tr><td>使用</td><td>需要显示的创建一块内存，该段内存有Lua垃圾回收器管理，不需要使用者关心</td><td>存储在栈上，使用者需要关心内存使用</td></tr><tr><td>创建</td><td>没有进行参数合法性检查<br>void *lua_newuserdata(lua State *L, size_t size);<br>有进行参数合法性检查<br>void *lua_checkudata(lua State *L, int arg, const char *tname);</td><td>void lua_pushlightuserdata(lua_State *L, void *p);</td></tr><tr><td>其他</td><td>可以指定其metatable和metamethods</td><td>不可以指定其metatable和metamethods</td></tr></tbody></table><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h2><h3 id="2-1-单行注释"><a href="#2-1-单行注释" class="headerlink" title="2.1 单行注释"></a>2.1 单行注释</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 这是行注释</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">)</span><span class="token comment">-- 这是行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-多行注释"><a href="#2-2-多行注释" class="headerlink" title="2.2 多行注释"></a>2.2 多行注释</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--[[这是块注释，块注释可以注释多行内容--]]</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><p>变量相当于内存中一个数据存储空间的表示，通过变量名可以访问到变量的具体的值</p><p>Lua的变量在定义时不需要指定明确的类型，而是会根据赋的默认值来断定变量的类型</p><h3 id="3-1-变量赋值"><a href="#3-1-变量赋值" class="headerlink" title="3.1 变量赋值"></a>3.1 变量赋值</h3><p>赋值是给已经定义的变量重新设置值的过程</p><p>同时为多个变量赋值时：</p><p>当变量个数 &gt; 值的个数时，按变量个数补足nil</p><p>当变量个数 &lt; 值的个数时，多余的值会被忽略</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token keyword">true</span>c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token number">2022</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address <span class="token operator">=</span> <span class="token string">"Xiaoming"</span><span class="token punctuation">,</span> <span class="token number">18</span>day<span class="token punctuation">,</span> week <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"星期四"</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">-- 输出：1   true</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token comment">-- 输出：Hello  2022</span><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token comment">-- 输出：XiaoMing   18   nil</span><span class="token function">print</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> week<span class="token punctuation">)</span><span class="token comment">-- 输出：30  星期四</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-全局变量和局部变量"><a href="#3-2-全局变量和局部变量" class="headerlink" title="3.2 全局变量和局部变量"></a>3.2 全局变量和局部变量</h3><p>变量根据作用域可分为全局变量和局部变量，且用<code>local</code>显式声明的变量为局部变量，其余全部为全局变量</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pi <span class="token operator">=</span> <span class="token number">3.14159</span>    <span class="token keyword">local</span> name <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token keyword">end</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"pi = "</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token comment">-- 输出：a =    1024   pi =   3.14159</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name = "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment">-- 输出：name =  nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-类型转换"><a href="#3-3-类型转换" class="headerlink" title="3.3 类型转换"></a>3.3 类型转换</h3><p>Lua中，除了table类型，其他任何类型的变量都可以通过<code>tostring</code>函数转化为字符串类型</p><p>能表示数字的字符串类型的变量可以通过<code>tonumber</code>函数转化为数字类型</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token keyword">true</span>sa <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>sb <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"sa = "</span><span class="token punctuation">,</span> sa<span class="token punctuation">,</span> <span class="token string">"type(sa) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sa =    100 type(sa) =  string</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"sb = "</span><span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token string">"type(sb) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sb =    true    type(sb) =  string</span>sc <span class="token operator">=</span> <span class="token string">"3.14"</span>sd <span class="token operator">=</span> <span class="token string">"0XA"</span>c <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"type(c) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：c =    3.14    type(c) =  number</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"type(d) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：d =    10    type(d) =  number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-获取输入"><a href="#3-4-获取输入" class="headerlink" title="3.4 获取输入"></a>3.4 获取输入</h3><p>使用<code>io.read</code>函数获取用户输入</p><p>可选参数</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>“*n”</td><td>读取一个数字</td></tr><tr><td>“*a”</td><td>从当前位置读取剩余的全部内容</td></tr><tr><td>“*l”</td><td>读取下一行内容</td></tr><tr><td>10</td><td>读取指定数字的长度</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> name <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name = "</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"type(name) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 用户输入：Lua</span><span class="token comment">-- 输出：name =   lua type(name) =   string</span><span class="token keyword">local</span> num <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"*n"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num = "</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token string">"type(num) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 用户输入：1024</span><span class="token comment">-- 输出：name =   1024 type(name) =   number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-格式化输出"><a href="#3-5-格式化输出" class="headerlink" title="3.5 格式化输出"></a>3.5 格式化输出</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">name <span class="token operator">=</span> <span class="token string">"lua"</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"name = %s, age = %d"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：name = lua, age = 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-循环控制"><a href="#4-循环控制" class="headerlink" title="4. 循环控制"></a>4. 循环控制</h2><p>循环控制就是让程序满足一定的条件就一直循环的去执行，直到条件不满足，则跳出循环继续执行循环以外的语句</p><h3 id="4-1-while"><a href="#4-1-while" class="headerlink" title="4.1 while"></a>4.1 while</h3><p>while循环，先判断条件，满足则执行循环，否则不进入循环</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token keyword">local</span> j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token keyword">do</span>        io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = % -6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">end</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-repeat-…-until"><a href="#4-2-repeat-…-until" class="headerlink" title="4.2 repeat … until"></a>4.2 repeat … until</h3><p>repeat until循环，直到型循环，先执行一次循环，然后判断条件，满足则跳出循环，不满足则进入循环，循环至少会执行1次</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">repeat</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">until</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">repeat</span>    <span class="token keyword">local</span> j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">repeat</span>        io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %-6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">until</span> j <span class="token operator">&gt;</span> i  i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">until</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-for"><a href="#4-3-for" class="headerlink" title="4.3 for"></a>4.3 for</h3><p>如果循环的语句是<code>for i = 1, 9, 1 do ...</code>，表示从1开始，大于9结束，每次步进1。如果是步进1，最后1可以省略，变为<code>for i = 1, 9 do ...</code></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> num<span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token keyword">do</span>  <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token keyword">do</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %-6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span class="token comment">-- 遍历table</span>weekdays <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sunday"</span><span class="token punctuation">,</span><span class="token string">"Monday"</span><span class="token punctuation">,</span><span class="token string">"Tuesday"</span><span class="token punctuation">,</span><span class="token string">"Wednesday"</span><span class="token punctuation">,</span><span class="token string">"Thursday"</span><span class="token punctuation">,</span><span class="token string">"Friday"</span><span class="token punctuation">,</span><span class="token string">"Saturday"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>weekdays<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s --&gt; %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 --&gt; Sunday2 --&gt; Monday3 --&gt; Tuesday4 --&gt; Wednesday5 --&gt; Thursday6 --&gt; Friday7 --&gt; Saturday--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-break"><a href="#4-4-break" class="headerlink" title="4.4 break"></a>4.4 break</h3><p>终止循环的继续运行，如果有多层循环，只能终止当层循环，无法终止外层循环</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            <span class="token keyword">break</span>        <span class="token keyword">end</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d, j = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0, j = 0i = 0, j = 1i = 1, j = 0i = 1, j = 1--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lua中没有continue语句，但是可以借助for循环以及repeat until循环实现continue功能</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span>    <span class="token keyword">repeat</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">then</span>            <span class="token keyword">break</span>        <span class="token keyword">end</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">until</span> <span class="token keyword">true</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0i = 1i = 3i = 4--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-return"><a href="#4-5-return" class="headerlink" title="4.5 return"></a>4.5 return</h3><p>使用return语句，终止循环、函数的执行</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0i = 1i = 2--]]</span><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"value &lt;= 0"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"value &gt; 0"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：value &gt; 0value &lt;= 0--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-goto"><a href="#4-6-goto" class="headerlink" title="4.6 goto"></a>4.6 goto</h3><p>允许将控制流程无条件地转到被标记的语句处，仅lua5.2以上版本支持</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">::</span>label<span class="token punctuation">::</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-- goto label --"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">then</span>    <span class="token keyword">goto</span> label<span class="token keyword">end</span><span class="token comment">--[[ 输出：-- goto label ---- goto label ----]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-pairs和ipairs"><a href="#4-7-pairs和ipairs" class="headerlink" title="4.7 pairs和ipairs"></a>4.7 pairs和ipairs</h3><p>pairs和iparis都是能遍历集合（表、数组），但是iparis仅仅遍历值，按照索引升序遍历，索引中断停止遍历，即不能返回nil，只能返回数字0，如果遇到nil则退出。只能遍历到集合中出现的第一个不是整数的key。pairs能遍历集合的所有元素。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"t"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   A2   B5   yest   no1   A2   B--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-分支控制"><a href="#5-分支控制" class="headerlink" title="5. 分支控制"></a>5. 分支控制</h2><p>分支控制就是让程序有选择的执行，主要分为：单分支、双分支和多分支形式。</p><h3 id="5-1-if"><a href="#5-1-if" class="headerlink" title="5.1 if"></a>5.1 if</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a &gt; bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-else"><a href="#5-2-else" class="headerlink" title="5.2 else"></a>5.2 else</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:Out If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-elseif"><a href="#5-3-elseif" class="headerlink" title="5.3 elseif"></a>5.3 elseif</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a == b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a == bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-条件嵌套"><a href="#5-4-条件嵌套" class="headerlink" title="5.4 条件嵌套"></a>5.4 条件嵌套</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a == b"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a == bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><p>在程序中，编写函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的任务来解决，而且，同一个函数可以被多次调用，有助于代码重用。</p><h3 id="6-1-function"><a href="#6-1-function" class="headerlink" title="6.1 function"></a>6.1 function</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">end</span>result1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result1 = %d, result2 = %d"</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--输出：result1 = 300, result2 = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-多返回值"><a href="#6-2-多返回值" class="headerlink" title="6.2 多返回值"></a>6.2 多返回值</h3><p>Lua中的函数可以不返回任何值，也可以返回一个值，也支持返回多个值</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">check_user</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>    <span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">85</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token keyword">true</span>    <span class="token keyword">elseif</span> score <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token keyword">true</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token keyword">false</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> level1<span class="token punctuation">,</span> isOk <span class="token operator">=</span> <span class="token function">check_user</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token keyword">local</span> level2<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">check_user</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"level1 = %s, level2 = %s"</span><span class="token punctuation">,</span> level1<span class="token punctuation">,</span> level2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：level1 = A, level2 = C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-可变参数"><a href="#6-3-可变参数" class="headerlink" title="6.3 可变参数"></a>6.3 可变参数</h3><p>函数参数的个数可以是任意的，可变参数使用<code>...</code>来表示，若想要获取用户传入的所有的参数，可以使用<code>arg</code>变量</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">local</span> arg <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">iparis</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">do</span>        result <span class="token operator">=</span> result <span class="token operator">+</span> v    <span class="token keyword">end</span>    <span class="token keyword">return</span> result<span class="token keyword">end</span>result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：result = 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-匿名函数"><a href="#6-4-匿名函数" class="headerlink" title="6.4 匿名函数"></a>6.4 匿名函数</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">test_func</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> fun<span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>tab <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"val1"</span><span class="token punctuation">,</span> key2 <span class="token operator">=</span> <span class="token string">"val2"</span><span class="token punctuation">}</span><span class="token function">test_func</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> key <span class="token operator">..</span> <span class="token string">" = "</span> <span class="token operator">..</span> val <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：key1 = val1key2 = val2--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-闭包"><a href="#6-5-闭包" class="headerlink" title="6.5 闭包"></a>6.5 闭包</h3><p>闭包的主要作用：1. 简洁，不需要在不使用时生成对象，也不需要函数名；2. 可以捕获外部变量行成不同的调用环境</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> index    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> inner1 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1   2</span><span class="token keyword">local</span> inner2 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1   2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-运算符"><a href="#7-运算符" class="headerlink" title="7. 运算符"></a>7. 运算符</h2><h3 id="7-1-算术运算符"><a href="#7-1-算术运算符" class="headerlink" title="7.1 算术运算符"></a>7.1 算术运算符</h3><p>算术运算符是对数值类型的变量进行运算的</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-4</td><td>-3</td></tr><tr><td>+</td><td>加法运算</td><td>5 + 5</td><td>10</td></tr><tr><td>-</td><td>减法运算</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘法运算</td><td>5 * 2</td><td>10</td></tr><tr><td>/</td><td>除法运算</td><td>10  / 3</td><td>3.3</td></tr><tr><td>%</td><td>取余运算</td><td>10 % 3</td><td>1</td></tr><tr><td>^</td><td>幂运算</td><td>2^3</td><td>8</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token keyword">local</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">local</span> d <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token keyword">local</span> e <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token keyword">local</span> f <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token keyword">local</span> g <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token keyword">local</span> h <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"c = %d, d = %d, e = %d, f = %f, g = %d, h = %d"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：c = -17, d = -23, e = -60, f = -6.666667, g = 1, h = -8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-关系运算符"><a href="#7-2-关系运算符" class="headerlink" title="7.2 关系运算符"></a>7.2 关系运算符</h3><p>关系运算符结果要么是真，要么是假</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等</td><td>4 == 3</td><td>false</td></tr><tr><td>~=</td><td>不等于</td><td>4 ~= 3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 3</td><td>true</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">local</span> c <span class="token operator">=</span> a <span class="token operator">==</span> b<span class="token keyword">local</span> d <span class="token operator">=</span> a <span class="token operator">~=</span> b<span class="token keyword">local</span> e <span class="token operator">=</span> a <span class="token operator">&gt;</span> b<span class="token keyword">local</span> f <span class="token operator">=</span> a <span class="token operator">&lt;</span> b<span class="token keyword">local</span> g <span class="token operator">=</span> a <span class="token operator">&gt;=</span> b<span class="token keyword">local</span> h <span class="token operator">=</span> a <span class="token operator">&lt;=</span> b<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"e = "</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token string">"f = "</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"g = "</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token string">"h = "</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token comment">-- 输出：c =     false   d =     true    e =     true    f =     false   g =     true    h =     false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-逻辑运算符"><a href="#7-3-逻辑运算符" class="headerlink" title="7.3 逻辑运算符"></a>7.3 逻辑运算符</h3><p>逻辑运算符用来连接多个条件，最终返回是true或false，使用逻辑运算符可以模拟三目运算符</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>A and B，如果A的值为假，则不会再计算B的值</td></tr><tr><td>or</td><td>逻辑或</td><td>A or B，如果A的值为真，则不会再计算B的值</td></tr><tr><td>not</td><td>逻辑非</td><td>nor A</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> age <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">local</span> b <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">and</span> age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token keyword">local</span> c <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token keyword">or</span> age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token keyword">local</span> d <span class="token operator">=</span> <span class="token keyword">not</span> age<span class="token keyword">local</span> e <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token keyword">nil</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token number">0</span><span class="token keyword">local</span> g <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">and</span> age <span class="token keyword">or</span> <span class="token number">30</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b = "</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"e = "</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token string">"f = "</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"g = "</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token comment">-- 输出：b =     true    c =     false   d =     false   e =     true   f =     false   g = 40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-其他运算符"><a href="#7-4-其他运算符" class="headerlink" title="7.4 其他运算符"></a>7.4 其他运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>..</td><td>连接运算符</td><td>str1…str2</td></tr><tr><td>#</td><td>获取字符串长度</td><td>#str1</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">local</span> str2 <span class="token operator">=</span> <span class="token string">"lua"</span><span class="token keyword">local</span> str3 <span class="token operator">=</span> str1<span class="token operator">..</span>str2<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str3 = %s, #str3 = %d"</span><span class="token punctuation">,</span> str3<span class="token punctuation">,</span> <span class="token operator">#</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str3 = hellolua, #str3 = 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-字符串"><a href="#8-字符串" class="headerlink" title="8. 字符串"></a>8. 字符串</h2><h3 id="8-1-字符串函数"><a href="#8-1-字符串函数" class="headerlink" title="8.1 字符串函数"></a>8.1 字符串函数</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>upper(arg)</td><td>字符串全部转为大写字母</td></tr><tr><td>lower(arg)</td><td>字符串全部转为小写字母</td></tr><tr><td>sub(s, i, [,j])</td><td>截取字符串</td></tr><tr><td>gsub(mainString, findString, replaceString, num)</td><td>在字符串中替换</td></tr><tr><td>dump(function)</td><td>把函数序列化为字符串来保存</td></tr><tr><td>find(str, substr, [init, [end]])</td><td>在字符串中查找，存在返回具体位置，不存在返回nil</td></tr><tr><td>reverse(arg)</td><td>字符串反转</td></tr><tr><td>format(…)</td><td>返回一个格式化字符串</td></tr><tr><td>char(arg)</td><td>将整型数字转化为字符并连接</td></tr><tr><td>byte[arg[int,]]</td><td>byte转换字符为整数值</td></tr><tr><td>len(arg)</td><td>计算字符串长度</td></tr><tr><td>rep(string, n)</td><td>返回字符串string的n个拷贝</td></tr><tr><td>..</td><td>连接两个字符串</td></tr><tr><td>gmatch(str, pattern)</td><td>迭代器函数，每次调用返回一个查找到的子串</td></tr><tr><td>match(str, pattern, init)</td><td>查找第一个配对的子串</td></tr></tbody></table><h3 id="8-1-大小写转换"><a href="#8-1-大小写转换" class="headerlink" title="8.1 大小写转换"></a>8.1 大小写转换</h3><p><code>string.upper(s)</code> 用于将字符串中所有字母转化为大写</p><p><code>string.lower(s)</code> 用于将字符串中所有字母转化为小写</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">upper</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello Lua, str2 = HELLO LUA, str3 = hello lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-字符串截取"><a href="#8-2-字符串截取" class="headerlink" title="8.2 字符串截取"></a>8.2 字符串截取</h3><p><code>string.sub(s, i [, j])</code> 用于字符串截取，返回字符串s从第i个字符到第j个字符的子串。注意，字符串的第1个字符索引是1</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello Lua, str2 = Hello, str3 = Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-字符串替换"><a href="#8-3-字符串替换" class="headerlink" title="8.3 字符串替换"></a>8.3 字符串替换</h3><p><code>string.gsub(mainString, findString, replaceString, num)</code> 用于字符串替换，num指定替换字符串的次数，默认全部替换</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello world, Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Nihao"</span><span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Nihao"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello world, Hello Lua, str2 = Nihao world, Nihao Lua, str3 = Nihao world, Hello Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-序列化与加载"><a href="#8-4-序列化与加载" class="headerlink" title="8.4 序列化与加载"></a>8.4 序列化与加载</h3><p><code>string.dump(function)</code> 用于将函数序列化为字符串，便于函数的保存与传输<code>loadstring(str)</code> 用于将序列化后的函数字符串反序列化加载为函数</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span>str <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token function">loadstring</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：uaQ 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-字符串查找"><a href="#8-5-字符串查找" class="headerlink" title="8.5 字符串查找"></a>8.5 字符串查找</h3><p><code>string.find(str, substr, [init, [end]])</code> 用于在一个指定的目标字符串中搜素指定的内容，返回其具体位置，不存在返回nil，也支持使用正则匹配查找</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>index1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"Lua"</span><span class="token punctuation">)</span>index2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>index3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"%s%u%a."</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"index1 = "</span><span class="token punctuation">,</span> index1<span class="token punctuation">,</span> <span class="token string">"index2 = "</span><span class="token punctuation">,</span> index2<span class="token punctuation">,</span> <span class="token string">"index3 = "</span><span class="token punctuation">,</span> index3<span class="token punctuation">)</span><span class="token comment">-- 输出：index1 =   7   index2 =   nil   index3 =   6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-6-字符串反转"><a href="#8-6-字符串反转" class="headerlink" title="8.6 字符串反转"></a>8.6 字符串反转</h3><p><code>string.reverse(arg)</code> 用于反转字符串</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str <span class="token operator">=</span> <span class="token string">"Hello Lua"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s, res = %s"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str = Hello Lua, res = auL olleH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-7-格式化字符串"><a href="#8-7-格式化字符串" class="headerlink" title="8.7 格式化字符串"></a>8.7 格式化字符串</h3><table><thead><tr><th>格式</th><th>描述</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>接收数字，转化为字符</td><td>%d,%i</td><td>接收数字，转化为有符号整数</td></tr><tr><td>%o</td><td>接收数字，转化为八进制数</td><td>%u</td><td>接收数字，转化为无符号整数</td></tr><tr><td>%x</td><td>接收数字，转化为十六进制数，使用小写字母</td><td>%X</td><td>接收数字，转化为十六进制数，使用大写字母</td></tr><tr><td>%e</td><td>接收数字，转化为科学计数法，使用小写字母e</td><td>%E</td><td>接收数字，转化为科学计数法，使用大写字母E</td></tr><tr><td>%f</td><td>接收数字，转化为浮点数</td><td>%g,%G</td><td>接收数字，转化为%e,%f中较短格式</td></tr><tr><td>%q</td><td>接收字符串，转化为可安全被Lua编译器读入的格式</td><td>%s</td><td>接收字符串，按给定参数格式化字符串</td></tr><tr><td>%+</td><td>表示其后的数字转义符将让正数显示正号</td><td>%占位符</td><td>在后面指定了字串宽度时占位用</td></tr><tr><td>%对齐标识</td><td>在指定了字串宽度时, 默认为右对齐, 增加 - 号改为左对齐</td><td>%宽度数值</td><td>占位宽度</td></tr><tr><td>%小数位数/字串裁切</td><td>数字保留位数，字符串做裁切</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%+d"</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：A+1700017--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-数字与字符的转换"><a href="#8-8-数字与字符的转换" class="headerlink" title="8.8 数字与字符的转换"></a>8.8 数字与字符的转换</h3><p><code>string.char(arg)</code> 用于将整数转化为字符并连接</p><p><code>string.byte(arg[,int])</code> 用于将字符转化为整数并连接，int表示要转换的字符</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">char</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：abc67--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-9-字符串长度"><a href="#8-9-字符串长度" class="headerlink" title="8.9 字符串长度"></a>8.9 字符串长度</h3><p><code>string.len()</code>用于获取字符串长度，另外<code>#</code>也可以获取字符串长度</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"ABC"</span>str2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1's len = %d, str2's len = %d"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">#</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1's len = 3, str2's len = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-10-字符串拷贝"><a href="#8-10-字符串拷贝" class="headerlink" title="8.10 字符串拷贝"></a>8.10 字符串拷贝</h3><p><code>string.rep(string, n)</code> 用于将字符串拷贝n次</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">rep</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str = ABCDABCD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-11-字符串连接"><a href="#8-11-字符串连接" class="headerlink" title="8.11 字符串连接"></a>8.11 字符串连接</h3><p>字符串可以使用<code>..</code>连接</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"hello"</span>str2 <span class="token operator">=</span> <span class="token string">"lua"</span>res <span class="token operator">=</span> str1 <span class="token operator">..</span> <span class="token string">" "</span> <span class="token operator">..</span> str2<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"res = %s"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：hello lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-12-字符串匹配"><a href="#8-12-字符串匹配" class="headerlink" title="8.12 字符串匹配"></a>8.12 字符串匹配</h3><p><code>string.gmatch(str, pattern)</code> 是一个迭代器函数，每调用一次，返回一个在字符串str查找到的符合pattern描述的子串，如果没找到返回nil，也支持正则匹配。</p><p><code>string.match(str, pattern, init)</code> 只找寻str中第一个配对，搜索起点可配置，也支持正则匹配。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> word <span class="token keyword">in</span> string<span class="token punctuation">.</span><span class="token function">gmatch</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"%a+"</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"I have 2 questions for you."</span><span class="token punctuation">,</span> <span class="token string">"%d+ %a+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：HelloLua2 questions--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-13-转义字符"><a href="#8-13-转义字符" class="headerlink" title="8.13 转义字符"></a>8.13 转义字符</h3><table><thead><tr><th>转义字符</th><th>意义</th><th>转义字符</th><th>意义</th></tr></thead><tbody><tr><td>\a</td><td>响铃</td><td>\b</td><td>退格，将当前位置移到前一列</td></tr><tr><td>\f</td><td>换页，将当前位置移到下页开头</td><td>\n</td><td>换行，将当前位置移到下一行开头</td></tr><tr><td>\r</td><td>回车，将当前位置移到本行开头</td><td>\t</td><td>水平制表，跳到下一个Tab位置</td></tr><tr><td>\v</td><td>垂直制表</td><td>\</td><td>代表一个反斜线字符</td></tr><tr><td>‘</td><td>代表一个单引号字符</td><td>“</td><td>代表一个双引号字符</td></tr><tr><td>\0</td><td>空字符</td><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td></tr><tr><td>\xhh</td><td>1到2位十六进制数所代表的任意字符</td><td></td><td></td></tr></tbody></table><h2 id="9-Table"><a href="#9-Table" class="headerlink" title="9. Table"></a>9. Table</h2><p>数组与表的类型都为table</p><p>数组的语法为<code>arrName = {element1, element2, ....}</code>，数组保存的一组数据类型可以不一致，数组的索引值是以1为起始的，也可以人为指定为0开始，如<code>arrName = {[0]=element1, element2, ....}</code></p><p>表是一个 “关联数组”，表的索引可以是数字或者是字符串，所有索引值都需要用 <code>[</code> 和 <code>]</code> 括起来；如果没有 [] 括起，则认为是字符串索引，可以认为，数组是索引为以0或1开始的连续数字的一种特殊的表，因此，表的一些增删改查行为函数也适用于数组。</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>concat</td><td>连接</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>maxn</td><td>最大key</td></tr><tr><td>remove</td><td>移除</td></tr><tr><td>sort</td><td>升序排序</td></tr></tbody></table><h3 id="9-1-定义"><a href="#9-1-定义" class="headerlink" title="9.1 定义"></a>9.1 定义</h3><p><code>#</code>后面直接加数组名可以获取数组的长度，如果设置了索引从0开始，则获取到的数组长度会比实际的长度少1</p><p><code>#</code>后面直接加表名无法准确获取数组的长度，会在索引中断的地方停止计数，应该用循环遍历来获取正确长度</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 数组</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>letters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span>letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"B"</span>letters<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C"</span>letters<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"D"</span>letters<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"E"</span>days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">}</span>numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">}</span>all <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Len: letters = %d, days = %d, numbers = %d, all = %d"</span><span class="token punctuation">,</span> <span class="token operator">#</span>letters<span class="token punctuation">,</span> <span class="token operator">#</span>days<span class="token punctuation">,</span> <span class="token operator">#</span>numbers<span class="token punctuation">,</span> <span class="token operator">#</span>all<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Len: letters = 5, days = 6, numbers = 3, all = 4</span><span class="token comment">-- 表</span>mytable1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>mytable2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Len: mytable1 = %d, mytable2 = %d"</span><span class="token punctuation">,</span> <span class="token operator">#</span>mytable1<span class="token punctuation">,</span> <span class="token operator">#</span>mytable2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Len: mytable1 = 1, mytable2 = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-遍历"><a href="#9-2-遍历" class="headerlink" title="9.2 遍历"></a>9.2 遍历</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 数组</span>days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">#</span>days <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"days[%d] = %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：days[0] = Mondaydays[1] = Tuesdaydays[2] = Wednesdaydays[3] = Thursdaydays[4] = Fridaydays[5] = Saturdaydays[6] = Sunday--]]</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"letters[%d] = %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：letters[1] = Aletters[2] = Bletters[3] = Cletters[4] = Dletters[5] = E--]]</span><span class="token comment">-- 表</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   Lua3   Countgreet   Hello--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-连接"><a href="#9-3-连接" class="headerlink" title="9.3 连接"></a>9.3 连接</h3><p><code>table.concat(table [, sep [, start [, end]]])</code> 函数列出参数中指定table的数组部分从start位置到end位置的所有元素，元素键以指定分隔符sep隔开，start默认为1。注：该函数只处理table下标为数字的数据，且下标是连续的才能被处理，断开就结束了</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：orange, apple, banana</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>letters<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：B, C, D, E</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-插入"><a href="#9-4-插入" class="headerlink" title="9.4 插入"></a>9.4 插入</h3><p><code>table.insert(table [pos,] value)</code> 函数在table指定位置pos插入一个value元素，pos默认为数组部分末尾，即连续下标元素的最后</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"watermelon"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   orange2   apple3   watermelon4   banana--]]</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>letters<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"W"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span>， <span class="token operator">#</span>letters <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：0   A1   B2   C3   W4   D5   E--]]</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Table"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">#</span>mytable<span class="token punctuation">)</span><span class="token comment">--[[ 输出：1   Lua2   Table3   Countgreet   Hello3--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-5-最大值"><a href="#9-5-最大值" class="headerlink" title="9.5 最大值"></a>9.5 最大值</h3><p><code>table.maxn(table)</code> 函数返回table的最大正数索引，如果没有正数索引返回0。Lua5.2之后的版本已移除该函数。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">)</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：343--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-6-删除"><a href="#9-6-删除" class="headerlink" title="9.6 删除"></a>9.6 删除</h3><p><code>table.remove(table [,pos])</code> 函数删除指定pos位置的元素，pos默认为table长度。即连续索引的最大值</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span>remove1 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>remove2 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"remove1 = %s, remove2 = %s"</span><span class="token punctuation">,</span> remove1<span class="token punctuation">,</span> remove2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：remove1 = banana, remove2 = orange</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>remove <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"remove = %s"</span><span class="token punctuation">,</span> remove<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：remove = Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-7-排序"><a href="#9-7-排序" class="headerlink" title="9.7 排序"></a>9.7 排序</h3><p><code>table.sort(table [,comp])</code> 函数用于对给定的table进行升序排序，还支持传入排序规则</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> test0 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span> <span class="token keyword">do</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>v<span class="token operator">..</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> test1 <span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"deng"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"luo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"yang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"ma"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"wu"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token keyword">do</span>   <span class="token function">print</span><span class="token punctuation">(</span>test1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> test1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 2 3 4 6 7 8 91   deng2   yang5   wu8   ma9   luo--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-元素metatable"><a href="#10-元素metatable" class="headerlink" title="10. 元素metatable"></a>10. 元素metatable</h2><h3 id="10-1-定义"><a href="#10-1-定义" class="headerlink" title="10.1 定义"></a>10.1 定义</h3><p>Lua的table中可以访问对应的key来得到value值，但是却无法对两个table进行操作。元表允许改变table的行为，每个行为关联了对应的元方法。如两个table相加操作<code>a+b</code>，当Lua尝试对两个表相加时，先检查两者之一是否有元表，之后检查<code>__add</code>字段是否存在，如果操作，则调用相应的值。<code>__add</code>等即时字段其对应的值就是元方法。</p><p>有两个重要的函数处理元表</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>setmetatable(table, metatable)</td><td>对指定的table设置元表，如果元表中存在<code>__metatable</code>键值，则setmetatable会失败</td></tr><tr><td>getmetatable(table)</td><td>返回对象的元表</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token comment">-- 普通表</span>mymetatable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 元表</span><span class="token function">setmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> mymetatable<span class="token punctuation">)</span> <span class="token comment">-- 设置元表</span><span class="token function">getmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token comment">-- 返回元表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-index元方法"><a href="#10-2-index元方法" class="headerlink" title="10.2 __index元方法"></a>10.2 __index元方法</h3><p><code>__index</code>元方法用来对表访问</p><p>Lua查找一个表元素时的规则：</p><p>1 在表中查找，如果找到，返回该元素，找不到继续</p><p>2 判断该表是否有元表，如果没有元表，返回nil，有元表则继续</p><p>3 判断该表有没有<code>__index</code>方法，如果<code>__index</code>方法为nil，则返回nil，如果<code>__index</code>方法是一个表，则重复1、2、3步；如果<code>__index</code>方法是一个函数，则返回该函数的返回值</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">"key2"</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"metatablevalue"</span>        <span class="token keyword">else</span>           <span class="token keyword">return</span> <span class="token keyword">nil</span>        <span class="token keyword">end</span>     <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"key1 = %s, key2 = %s"</span><span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：key1 = value1, key2 = metatablevalue</span><span class="token comment">-- 等价于</span>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> <span class="token punctuation">{</span>key2 <span class="token operator">=</span> <span class="token string">"metatablevalue"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token comment">-- 输出：value1    metatablevalue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-newindex元方法"><a href="#10-3-newindex元方法" class="headerlink" title="10.3 __newindex元方法"></a>10.3 __newindex元方法</h3><p><code>__newindex</code>元方法用来对表更新</p><p>当给表的一个缺少的索引赋值，解释器会查找<code>__newindex</code>元方法，如果存在，则调用这个函数而不进行赋值操作</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    __newindex <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token function">rawset</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token operator">..</span>value<span class="token operator">..</span><span class="token string">"\""</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>mytable<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">"new value"</span>mytable<span class="token punctuation">.</span>key2 <span class="token operator">=</span> <span class="token number">4</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">foramt</span><span class="token punctuation">(</span><span class="token string">"key1 = %s, key2 = %s"</span><span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：key1 = new value, key2 = "4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-call元方法"><a href="#10-4-call元方法" class="headerlink" title="10.4 __call元方法"></a>10.4 __call元方法</h3><p><code>__call</code>元方法可以让table当做一个函数来使用</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> mt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>mt<span class="token punctuation">.</span>__call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span> <span class="token keyword">do</span>        <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">setmetatable</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：123--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-5-tostring元方法"><a href="#10-5-tostring元方法" class="headerlink" title="10.5 __tostring元方法"></a>10.5 __tostring元方法</h3><p><code>__tostring</code>元方法用于修改表的输出行为</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__tostring <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> v        <span class="token keyword">end</span>    <span class="token keyword">return</span> <span class="token string">"sum = "</span> <span class="token operator">..</span>sum    <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-6-为表添加操作符"><a href="#10-6-为表添加操作符" class="headerlink" title="10.6 为表添加操作符"></a>10.6 为表添加操作符</h3><table><thead><tr><th>模式</th><th>等价于运算符</th><th>模式</th><th>等价于运算符</th></tr></thead><tbody><tr><td>__add</td><td>+</td><td>__sub</td><td>-</td></tr><tr><td>__mul</td><td>*</td><td>__div</td><td>/</td></tr><tr><td>__mod</td><td>%</td><td>__unm</td><td>-</td></tr><tr><td>__concat</td><td>..</td><td>__eq</td><td>==</td></tr><tr><td>__lt</td><td>&lt;</td><td>__le</td><td>&lt;=</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">local</span> mn <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> mn <span class="token operator">&lt;</span> k <span class="token keyword">then</span>            mn <span class="token operator">=</span> k        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> mn<span class="token keyword">end</span><span class="token comment">-- 两表相加</span>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    __add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> newtable<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>newtable<span class="token punctuation">)</span> <span class="token keyword">do</span>            table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> newtable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">end</span>        <span class="token keyword">return</span> mytable   <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>secondtable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>mytable <span class="token operator">=</span> mytable <span class="token operator">+</span> secondtable<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   12   23   34   45   56   6--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-模块与包"><a href="#11-模块与包" class="headerlink" title="11. 模块与包"></a>11. 模块与包</h2><h3 id="11-1-模块定义"><a href="#11-1-模块定义" class="headerlink" title="11.1 模块定义"></a>11.1 模块定义</h3><p>模块类似于一个封装库，是由变量、函数等已知元素组成的table，因此创建模块就是创建一个table，然后把需要导出的常量、函数放入其中，最后返回这个table即可。如下创建自定义模块module</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 文件名 module.lua</span><span class="token comment">-- 定义一个名为module的模块</span>module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 定义一个常量</span>module<span class="token punctuation">.</span>constant <span class="token operator">=</span> <span class="token string">"this is constant"</span><span class="token comment">-- 定义一个函数</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"This is a public function\n"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"This is a private function"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-require函数"><a href="#11-2-require函数" class="headerlink" title="11.2 require函数"></a>11.2 require函数</h3><p><code>require("模块名")</code>用来加载模块，执行require后会返回一个由模块常量或函数组成的table，并且还会定义一个包含该table的全局变量</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token comment">-- 别名变量 m</span><span class="token keyword">local</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>constant<span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：this is constantThis is a private function--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>require函数会尝试从Lua文件或C程序中加载模块，require用于搜索Lua文件的路径存放在全局变量package_path中，当Lua启动后，会以环境变量LUA_PATH的值来初始化这个环境变量，如果找不到该环境变量，则使用一个编译时定义的默认路径来初始化</p><p>可以自定义设置路况，在当前用户跟目录下打开.profile文件（没有则创建，打开.bashrc文件也可以），例如把”~/lua/“路径加入LUA_PATH环境变量里</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#LUA_PATHexport LAU_PATH="~/lua/?.lua;;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件路径以”;”号分割，最后两个”;;”表示新加的路径后面加上原来的默认路径</p><p>接着执行指令<code>source ~/.profile</code>更新变量参数使之生效</p><p>如果找到目标文件，则会调用<code>package.loadfile</code>来加载模块，否则就会找C程序库</p><p>搜索的文件路径是从全局变量 package.cpath 获取，而这个变量则是通过环境变量 LUA_CPATH 来初始。</p><p>搜索的策略跟上面的一样，只不过现在换成搜索的是 so 或 dll 类型的文件。如果找得到，那么 require 就会通过 package.loadlib 来加载它。</p><h3 id="11-3-module函数"><a href="#11-3-module函数" class="headerlink" title="11.3 module函数"></a>11.3 module函数</h3><p><code>module()</code>函数调用时会创建表并将其赋予给全局变量和loaded table，最后还会将这个表设置为主程序块的环境</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 在模块文件在使用module函数</span>module <span class="token string">"module_name"</span><span class="token comment">--[[等同语法--]]</span><span class="token comment">-- 定义模块名</span><span class="token keyword">local</span> moduleName <span class="token operator">=</span> <span class="token string">"module_name"</span><span class="token comment">-- 定义用于返回的模块表</span><span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 将模块表加入到全局变量</span>_G<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token comment">-- 将模块表加入到package.loaded中防止多次加载</span>package<span class="token punctuation">.</span>loaded<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token comment">-- 将模块表设置为函数的环境表，使得模块中的所有操作都是在模块表中，这样定义函数就直接定义在模块表中</span><span class="token function">setfenv</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> M<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-调用C语言包"><a href="#11-4-调用C语言包" class="headerlink" title="11.4 调用C语言包"></a>11.4 调用C语言包</h3><p>Lua和C语言很容易结合，可以使用C语言为Lua写包，C语言包使用前必须先加载并连接，大多数系统是通过动态连接库机制</p><p>Lua在一个加loadlib的函数内提供了所有的动态连接功能。这个函数的两个参数：库的绝对路径和初始化函数，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> path <span class="token operator">=</span> <span class="token string">"/usr/local/lua/lib/libluasocket.so"</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">loadlib</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"luaopen_socket"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>loadlib函数加载指定的库并连接到Lua，然而并没有调用初始化函数，而是返回初始化函数作为Lua的一个函数</p><p>如果加载动态库或者查找初始化函数出错，loadlib将返回nil和错误信息</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> path <span class="token operator">=</span> <span class="token string">"C:\\windows\\luasocket.dll"</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">loadlib</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"luaopen_socket"</span><span class="token punctuation">)</span><span class="token comment">-- 真正打开库</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下我们期望二进制的发布库包含一个与前面代码段相似的 stub 文件，安装二进制库的时候可以随便放在某个目录，只需要修改 stub 文件对应二进制库的实际路径即可。</p><p>将 stub 文件所在的目录加入到 LUA_PATH，这样设定后就可以使用 require 函数加载 C 库了。</p><h2 id="12-协程"><a href="#12-协程" class="headerlink" title="12. 协程"></a>12. 协程</h2><h3 id="12-1-定义"><a href="#12-1-定义" class="headerlink" title="12.1 定义"></a>12.1 定义</h3><p>协程与线程比较类似，拥有独立的堆栈、独立的局部变量、独立的指令，同时又与其他协同程序共享全局变量和其他大部分东西。</p><p>一个具有多线程的程序可以同时运行几个线程，而协程却需要彼此写作运行，在任一指定时刻只有一个协程在运行，并且这个正在运行的协同程序只有在明确的被要求挂起时才会被挂起</p><p>协程有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协程</p><h3 id="12-2-用法"><a href="#12-2-用法" class="headerlink" title="12.2 用法"></a>12.2 用法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>coroutine.create()</td><td>创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用时唤醒函数调用</td></tr><tr><td>coroutine.resume()</td><td>重启coroutine，和create配合使用</td></tr><tr><td>coroutine.yield()</td><td>挂起coroutine，将coroutine设置为挂起状态，和resume配合使用能够有很多效果</td></tr><tr><td>coroutine.status()</td><td>查看coroutine的状态，有dead、suspened、running三种状态</td></tr><tr><td>coroutine.wrap()</td><td>创建coroutine，返回一个函数，一旦调用这个函数，就进入croutine，和create功能重复</td></tr><tr><td>coroutine.running()</td><td>返回正在运行的coroutine，一个coroutine就是一个新村，返回一个coroutine的线程号</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"foo函数输出"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">return</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token keyword">end</span>co <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>     <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次协同程序执行输出"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        <span class="token keyword">local</span> r <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二次协同程序执行输出"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">local</span> r<span class="token punctuation">,</span> s <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第三次协同程序执行输出"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token string">"结束协同程序"</span>   <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：第一次协同程序执行输出 1 10foo 函数输出 2main true 4--分割线--第二次协同程序执行输出 rmain true 11 -9--分割线--第三次协同程序执行输出 x ymain true 10 结束协同程序--分割线--main false 10 cannot resume dead coroutine--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-生产者-消费者问题"><a href="#12-3-生产者-消费者问题" class="headerlink" title="12.3 生产者-消费者问题"></a>12.3 生产者-消费者问题</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> newProductor<span class="token keyword">function</span> <span class="token function">productor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>        <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> status<span class="token punctuation">,</span> value <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>newProductor<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">end</span>newProductor <span class="token operator">=</span> coutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>productor<span class="token punctuation">)</span><span class="token function">cosumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：1234567...--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-文件IO"><a href="#13-文件IO" class="headerlink" title="13. 文件IO"></a>13. 文件IO</h2><p>Lua文件IO库用于读取和处理文件，分为简单模式和完全模式</p><ul><li>简单模式：拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作，适合做一些简单的文件操作</li><li>完全模式：使用外部的文件句柄来实现，以一种面向对象的形式，将所有的文件操作定义为文件句柄的方法，适合做一些高级的文件操作，如同时读取多个文件</li></ul><h3 id="13-1-简单模式"><a href="#13-1-简单模式" class="headerlink" title="13.1 简单模式"></a>13.1 简单模式</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>io.input([file])</td><td>设置默认的输入文件，file为文件名，返回文件句柄</td></tr><tr><td>io.output([file])</td><td>设置默认的输出文件，file为文件名</td></tr><tr><td>io.close([file])</td><td>关闭文件，不带参数的默认文件</td></tr><tr><td>io.read(formats)</td><td>读取默认文件，formats取值为<code>a*</code>-全读、<code>*n</code>-按数字读入、<code>*l</code>-按行读入，<code>n</code>-读取n个字符</td></tr><tr><td>io.lines([fn])</td><td>fn文件名，如无文件，取默认文件，返回一个迭代器</td></tr><tr><td>io.write(value)</td><td>向默认文件写入内容</td></tr><tr><td>io.flush()</td><td>把文件缓存里的操作立即作用到默认输出文件</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 设置默认输入文件</span>io<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 输出文件第一行</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"read file: [%s]"</span><span class="token punctuation">,</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭文件</span>io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 以附加的方式打开只写文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment">-- 设置默认输出文件</span>io<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 在文件最后一行写入</span>io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"File content in test.lua"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"file write success"</span><span class="token punctuation">)</span><span class="token comment">-- 关闭文件</span>io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-完全模式"><a href="#13-2-完全模式" class="headerlink" title="13.2 完全模式"></a>13.2 完全模式</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 输出文件第一行</span><span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 以附加的方式打开只写文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment">-- 在文件最后一行写入</span>file<span class="token punctuation">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"--test"</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 定位到文件倒数第25个位置</span>file<span class="token punctuation">::</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token comment">-- 从当前（倒数第25个位置）读取整个文件</span><span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"*a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-错误处理"><a href="#14-错误处理" class="headerlink" title="14. 错误处理"></a>14. 错误处理</h2><p>错误类型分为语法错误和运行错误</p><p>语法错误通常是对程序的组件使用不当引起，如</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 输出：lua: main.lua:2: 'do' expected near 'print'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行错误时程序可以正常运行，但是会输出报错信息，如</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:2: attempt to perform arithmetic on local 'b' (a nil value)stack traceback:    main.lua:2: in function 'add'    main.lua:4: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-1-assert"><a href="#14-1-assert" class="headerlink" title="14.1 assert"></a>14.1 assert</h3><p><code>assert(express, message)</code> 断言函数会判断给定express表达式是否成立，成立的话不做任何事情，不成立则以message作为错误信息抛出</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"a not a number"</span><span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"b not a number"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:3: b not a numberstack traceback:    [C]: in function 'assert'    main.lua:3: in function 'add'    main.lua:6: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-2-error"><a href="#14-2-error" class="headerlink" title="14.2 error"></a>14.2 error</h3><p><code>error(message [,level])</code> 函数终止正在执行的函数，并返回message的内容作为错误信息，level参数指示获得错误的位置，level=1指出调用error位置，level=2指出调用error函数的函数吗，level=0不添加错误位置信息</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"a not a number"</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"b not a number"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:10: b not a numberstack traceback:    [C]: in function 'error'    main.lua:6: in function 'add'    main.lua:10: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3-pcall"><a href="#14-3-pcall" class="headerlink" title="14.3 pcall"></a>14.3 pcall</h3><p>可以使用<code>pcall</code>函数包装需要执行的代码，<code>pcall</code>函数接收一个函数和要传递给后者的参数，并执行该函数，无错误返回true，有错误返回false和错误信息</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a<span class="token punctuation">,</span> errorinfo <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> errorinfo<span class="token punctuation">)</span><span class="token comment">--[[ 输出：27true nil--]]</span>b<span class="token punctuation">,</span> errorinfo <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error..'</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> errorinfo<span class="token punctuation">)</span><span class="token comment">--[[ 输出：27false main.lua1: error..--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-4-xpcall"><a href="#14-4-xpcall" class="headerlink" title="14.4 xpcall"></a>14.4 xpcall</h3><p><code>xpcall</code>函数相比<code>pcall</code>函数会返回更多的错误调试信息，并执行该函数，无错误返回true，有错误返回false和错误信息</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">myfunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token keyword">nil</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">myerrorhandler</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ERROR:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">end</span>status <span class="token operator">=</span> <span class="token function">xpcall</span><span class="token punctuation">(</span>myfunction<span class="token punctuation">,</span> myerrorhandler<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token comment">--[[ 输出：ERROR:  main.lua:2: attempt to perform arithmetic on global 'n' (a nil value)false--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-垃圾回收"><a href="#15-垃圾回收" class="headerlink" title="15. 垃圾回收"></a>15. 垃圾回收</h2><h3 id="15-1-机制"><a href="#15-1-机制" class="headerlink" title="15.1 机制"></a>15.1 机制</h3><p>Lua运行了一个垃圾收集器收集所有死对象来完成自动内存管理的工作。</p><p>Lua实现了一个增量标记-扫描收集器，使用垃圾收集器间歇率和垃圾收集器步进倍率来控制垃圾收集循环。</p><p>垃圾收集器间歇率控制着收集器需要在开启新的循环前要等待多久。</p><p>垃圾收集器步进倍率控制收集器运作速度相对与内存分配速度的倍率，默认值是200%，即运作速度2倍于内存分配速率</p><h3 id="15-2-垃圾回收器函数"><a href="#15-2-垃圾回收器函数" class="headerlink" title="15.2 垃圾回收器函数"></a>15.2 垃圾回收器函数</h3><p>Lua提供一下函数<code>collectgarbage([opt [,arg]])</code>来控制自动内存管理</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>collectgarbage(“collect”)</td><td>做一次完整的垃圾收集循环</td></tr><tr><td>collectgarbage(“count”)</td><td>以K字节数为单位返回Lua使用的总内存数</td></tr><tr><td>collectgarbage(“restart”)</td><td>重启垃圾收集器的自动运行</td></tr><tr><td>collectgarbage(“setpause”)</td><td>将arg设为收集器的间歇率，返回间歇率的前一个值</td></tr><tr><td>collectgarbage(“setstepmul”)</td><td>返回步进倍率的前一个值</td></tr><tr><td>collectgarbage(“step”)</td><td>单步运行垃圾收集器，步长由arg控制</td></tr><tr><td>collectgarbage(“stop”)</td><td>停止垃圾收集器的运行</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"collect"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：27.639648437527.6767578125026.623046875--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-面向对象"><a href="#16-面向对象" class="headerlink" title="16. 面向对象"></a>16. 面向对象</h2><h3 id="16-1-面向对象特征"><a href="#16-1-面向对象特征" class="headerlink" title="16.1 面向对象特征"></a>16.1 面向对象特征</h3><p>1）封装：能够把一个实体的信息、功能、响应都装入一个单独的对象中的特征</p><p>2）继承：基础的方法允许在不改动原程序的基础上对其进行扩充，使得原功能得以保存，新功能也得以扩展，有利于减少重复代码，提高开发效率</p><p>3）多态：同一操作作用于不同的对象，产生不同的执行结果，可以通过指向基类的指针，来调用实现派生类的方法</p><p>4）抽象：简化复杂问题的方法，可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题</p><h3 id="16-2-类封装"><a href="#16-2-类封装" class="headerlink" title="16.2 类封装"></a>16.2 类封装</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 元类</span>Shape <span class="token operator">=</span> <span class="token punctuation">{</span> area <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment">-- 基础类方法 new</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    side <span class="token operator">=</span> side <span class="token keyword">or</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>area <span class="token operator">=</span> side <span class="token operator">*</span> side    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 基础类方法 printArea</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">pirntArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myshape <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>myshape<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The area = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-3-继承与多态"><a href="#16-3-继承与多态" class="headerlink" title="16.3 继承与多态"></a>16.3 继承与多态</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 元类</span>Shape <span class="token operator">=</span> <span class="token punctuation">{</span> area <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment">-- 基础类方法 new</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    side <span class="token operator">=</span> side <span class="token keyword">or</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>area <span class="token operator">=</span> side <span class="token operator">*</span> side    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 基础类方法 printArea</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">pirntArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myshape <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>myshape<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The area = 100</span><span class="token comment">-- 继承1</span>Square <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 派生类方法 new</span><span class="token keyword">function</span> Square<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 派生类方法 printArea</span><span class="token keyword">function</span> Square<span class="token punctuation">:</span><span class="token function">printArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The Square area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>mysquare <span class="token operator">=</span> Square<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>mysquare<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The Square area = 100</span><span class="token comment">-- 继承2</span>Rectangle <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 派生类方法 new</span><span class="token keyword">function</span> Rectangle<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> length<span class="token punctuation">,</span> breadth<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    self<span class="token punctuation">.</span>area <span class="token operator">=</span> length <span class="token operator">*</span> breadth    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 派生类方法 printArea</span><span class="token keyword">function</span> Rectangle<span class="token punctuation">:</span><span class="token function">printArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The Rectangle area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myrectangle <span class="token operator">=</span> Rectangle<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>myrectangle<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The Rectangle area = 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1.<a href="https://www.runoob.com/lua/lua-tutorial.html">【菜鸟教程Lua教程】</a></p><p>2.<a href="https://haicoder.net/lua/lua-tutorial.html">【嗨客网Lua教程】</a></p>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0003-无重复字符的最长子串</title>
      <link href="/leetcode-shua-ti-0003-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/"/>
      <url>/leetcode-shua-ti-0003-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters">无重复字符的最长子串</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个字符串，请你找出其中不含重复字符的最长子串的长度。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "abcabcbb"输出: 3解释: 无重复字符的最长子串是"abc"，所以其长度为3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "bbbbbbb"输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>滑动窗口的右边界不断地右移，只要没有重复的字符，就持续向右扩大窗口边界。一旦出现了重复字符，就需要缩小左边界，直到重复的字符移出了左边界，然后继续移动滑动窗口的右边界。</p><p>每次移动需要计算当前长度，并判断是否需要更新最大长度。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: (2-&gt;4-&gt;3) + (5-&gt;6-&gt;4)输出: 7-&gt;0-&gt;8解释：342+465=807<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答-1"><a href="#2-解答-1" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="进位"><a href="#进位" class="headerlink" title="进位"></a>进位</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        tmp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>                right <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0002-两数相加</title>
      <link href="/leetcode-shua-ti-0002-liang-shu-xiang-jia/"/>
      <url>/leetcode-shua-ti-0002-liang-shu-xiang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a><a href="https://leetcode.com/problems/add-two-numbers/">两数相加</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给出两个非空的链表用来表示两个非负整数，其中，它们各自的位数是按照<strong>逆序</strong>的方式存储的，并且每个节点只能存储一位数字，将这两个数相加起来，返回一个新的逆序链表来表示他们的和。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: (2-&gt;4-&gt;3) + (5-&gt;6-&gt;4)输出: 7-&gt;0-&gt;8解释：342+465=807<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="进位"><a href="#进位" class="headerlink" title="进位"></a>进位</h3><p>复杂度 时间O(N)+空间O(1)</p><ul><li>利用链表数据结构的特点</li><li>使用变量来记录进位，每次相加后更新该变量，用于下一位计算</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> l2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> q <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> l1 <span class="token keyword">or</span> l2 <span class="token keyword">or</span> flag<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">:</span>                l1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">:</span>                l2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> flag<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> flag<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0021-合并两个有序链表</title>
      <link href="/leetcode-shua-ti-0021-he-bing-liang-ge-you-xu-lian-biao/"/>
      <url>/leetcode-shua-ti-0021-he-bing-liang-ge-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">LeetCode链接</a></p><p>将两个升序链表合并为一个新的升序链表并返回，新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: l1 = [1, 2, 4], l2 = [1, 3, 4]输出: [1, 1, 2, 3, 4, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: l1 = [], l2 = []输出: []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：迭代法"><a href="#方法一：迭代法" class="headerlink" title="方法一：迭代法"></a>方法一：迭代法</h3><p>复杂度 时间O(N+M)+空间O(1)</p><p>当两个链表都不为空时，判断两个链表中哪一个链表的头节点的值更小，将较小值的节点添加到结果里，当一个节点被添加到结果里之后，将对应链表中的节点后移一位。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        pNode <span class="token operator">=</span> pHead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> l1 <span class="token keyword">and</span> l2<span class="token punctuation">:</span>            <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> l1<span class="token punctuation">:</span>            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1        <span class="token keyword">if</span> l2<span class="token punctuation">:</span>            pNode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2        <span class="token keyword">return</span> pHead<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ListNode {    public int val;    public ListNode next;    public ListNode(int val=0, ListNode next=null) {        this.val = val;        this.next = next;    }}public class Solution {    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {        ListNode pHead = ListNode(-1);        ListNode pNode = pHead;        while (l1 &amp;&amp; l2) {            if (l1.val &gt; l2.val) {                pNode.next = l2;                l2 = l2.next;            } else {                pNode.next = l1;                l1 = l1.next;            }            pNode = pNode.next;        }        if (l1) {            pNode.next = l1;        }        if (l2) {            pNode.next = l2;        }        return pHead.next;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归法"><a href="#方法二：递归法" class="headerlink" title="方法二：递归法"></a>方法二：递归法</h3><p>复杂度 时间O(N+M)+空间O(N+M)</p><p>如果两个链表中的一个一开始就是空链表，则返回那个非空链表，否则，需要判断两个链表的头节点的值谁更小，然后递归地决定下一个添加到结果里的节点，如果两个链表有一个为空，递归结束。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">:</span>            <span class="token keyword">return</span> l2        <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">:</span>            <span class="token keyword">return</span> l1        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> l2        <span class="token keyword">else</span><span class="token punctuation">:</span>            l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span>        <span class="token keyword">return</span> l1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ListNode {    public int val;    public ListNode next;    public ListNode(int val=0, ListNode next=null) {        this.val = val;        this.next = next;    }}public class Solution {    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {        if (l1 == null) {            return l2;        } else if (l2 == null) {            return l1;        } else if (l1.val &lt; l2.val) {            l1.next = MergeTwoLists(l1.next, l2);            return l1;        } else {            l2.next = MergeTwoLists(l1, l2.next);            return l2;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0020-有效的括号</title>
      <link href="/leetcode-shua-ti-0020-you-xiao-de-gua-hao/"/>
      <url>/leetcode-shua-ti-0020-you-xiao-de-gua-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个只包括<code>(</code>，<code>)</code>，<code>{</code>，<code>}</code>，<code>[</code>，<code>]</code>的字符串<code>s</code>，判断字符串是否有效。注意空字符串可被认为是有效字符串。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "()"输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "(])"输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：栈"><a href="#方法一：栈" class="headerlink" title="方法一：栈"></a>方法一：栈</h3><p>复杂度 时间O(N)+空间O(N)</p><p>使用栈，遍历输入字符串，如果当前字符为左半边字符，则将其压入栈中，如果遇到右半边符号，分类讨论：</p><ol><li>如果栈不为空，取出栈顶元素，如果栈顶元素是其对应的左半边括号，则取出栈顶元素继续循环</li><li>如果栈为空，直接返回False</li><li>如果栈顶元素不是其对应的左半边括号，返回False</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        _map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"{"</span><span class="token punctuation">:</span> <span class="token string">"}"</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">:</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">:</span> <span class="token string">")"</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token keyword">in</span> _map<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>_map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> stack<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> x <span class="token operator">!=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token keyword">not</span> stack <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Solution {    public bool IsValid(string s) {        Stack&lt;char&gt; con = new Stack&lt;char&gt;();        for (int i = 0; i &lt; s.Length; i++) {            if (s[i] == '(' || s[i] == '[' || s[i] == '{') {                con.Push(s[i]);            } else {                if (con.Count &lt;= 0) {                    return False;                }                var tmp = con.Pop();                bool ok = false;                if (s[i] == ']' &amp;&amp; temp == '['                  || s[i] == ')' &amp;&amp; temp == '('                  || s[i] == '}' &amp;&amp; temp == '{'){                    ok = true;                }                if (!ok) {                    return false;                }            }        }        return con.Count == 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：正则匹配"><a href="#方法二：正则匹配" class="headerlink" title="方法二：正则匹配"></a>方法二：正则匹配</h3><p>复杂度 取决于正则引擎的实现</p><p>通过不断消除‘[]’, ‘()’, ‘{}’，最终判断剩下的是否为空串即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token string">'[]'</span> <span class="token keyword">in</span> s <span class="token keyword">or</span> <span class="token string">'()'</span> <span class="token keyword">in</span> s <span class="token keyword">or</span> <span class="token string">'{}'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>            s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'[]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'()'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'{}'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-001-两数之和①</title>
      <link href="/leetcode-shua-ti-0001-liang-shu-zhi-he/"/>
      <url>/leetcode-shua-ti-0001-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和①"><a href="#两数之和①" class="headerlink" title="两数之和①"></a><a href="https://leetcode-cn.com/problems/two-sum/">两数之和①</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组<code>nums</code>和一个整数目标值<code>target</code>，请你在该整数数组<code>nums</code>中找出和为目标值<code>target</code>的那两个整数，并返回他们的数组下标。</p><p>假设每种输入只会对应一个答案，数组中同一个元素在答案里不能重复出现，你可以按任意顺序返回答案。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [2,7,11,15], target=9输出: [0, 1] 或 [1, 0]解释：2 + 7 = 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3,2,4], target=6输出: [1, 2] 或 [2, 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力枚举"><a href="#方法一：暴力枚举" class="headerlink" title="方法一：暴力枚举"></a>方法一：暴力枚举</h3><p>复杂度 时间O(N^2)+空间O(1)</p><p>枚举数组中的每一个数<code>x</code>，遍历寻找数组中是否存在<code>target - x</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：哈希表法"><a href="#方法二：哈希表法" class="headerlink" title="方法二：哈希表法"></a>方法二：哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>哈希表是从算法的角度讲，采用“哈希”这种算法维护的表。“哈希”是将任意长度的数据映射到有限长度的域上，哈希结果称为哈希值，哈希表在index为哈希值的存储单元存储对应的原始数据。把哈希值和原始数据看成一对（key, value），可以看到哈希表实现了字典。</p><p>创建一个哈希表，对于每一个<code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p>关键点：</p><ul><li>求和转换为求差</li><li>借助哈希结构将数组中每个元素及其索引相互对应</li><li>以空间换时间，将查找时间从O(N)减低到O(1)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0007-整数反转</title>
      <link href="/leetcode-shua-ti-0007-zheng-shu-fan-zhuan/"/>
      <url>/leetcode-shua-ti-0007-zheng-shu-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<h1 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个32位的有符号整数<code>x</code>，返回将<code>x</code>中的数字部分反转后的结果。</p><p>如果反转后整数超过32位的有符号整数的范围[-2^31, 2^31-1]，就返回0。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = 123输出: 321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = -123输出: -321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>将数字转为字符串后进行倒置，最终再转换为int</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        sign <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        tmp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> sign        <span class="token keyword">return</span> res <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">&lt;=</span> res <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：算数解法"><a href="#方法二：算数解法" class="headerlink" title="方法二：算数解法"></a>方法二：算数解法</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0009-回文数</title>
      <link href="/leetcode-shua-ti-0009-hui-wen-shu/"/>
      <url>/leetcode-shua-ti-0009-hui-wen-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个整数<code>x</code>，如果<code>x</code>是一个回文整数，返回<code>true</code>；否则，返回<code>false</code>。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = 121输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: x = -123输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>将数字转为字符串后，比较字符串与反转字符串是否相等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法二：算数解法"><a href="#方法二：算数解法" class="headerlink" title="方法二：算数解法"></a>方法二：算数解法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        ret <span class="token operator">=</span> <span class="token number">0</span>        orig_x <span class="token operator">=</span> x        <span class="token keyword">while</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> ret <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> tmp        <span class="token keyword">if</span> orig_x <span class="token operator">==</span> ret<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0014-最长公共前缀</title>
      <link href="/leetcode-shua-ti-0014-zui-chang-gong-gong-qian-zhui/"/>
      <url>/leetcode-shua-ti-0014-zui-chang-gong-gong-qian-zhui/</url>
      
        <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>编写一个函数来查找字符串数组的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: strs = ["flower", "flow", "flight"]输出: "fl"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: strs = ["dog", "rececar", "car"]输出: ""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>复杂度 时间O(N^2) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> res            res <span class="token operator">+=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：分析规律"><a href="#方法二：分析规律" class="headerlink" title="方法二：分析规律"></a>方法二：分析规律</h3><p>数组中的字符串按字母排列后，比较最大字符串和最小字符串即可找到公共前缀</p><p>复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span>        s1 <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        s2 <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">!=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> s2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0013-罗马数字转整数</title>
      <link href="/leetcode-shua-ti-0013-luo-ma-shu-zi-zhuan-zheng-shu/"/>
      <url>/leetcode-shua-ti-0013-luo-ma-shu-zi-zhuan-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a><a href="https://leetcode-cn.com/problems/integer-to-roman/">罗马数字转整数</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>罗马数字包含以下七种字符: <code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code>和<code>M</code></p><table><thead><tr><th align="center">字符</th><th align="center">I</th><th align="center">V</th><th align="center">X</th><th align="center">L</th><th align="center">C</th><th align="center">D</th><th align="center">M</th></tr></thead><tbody><tr><td align="center">数值</td><td align="center">1</td><td align="center">5</td><td align="center">10</td><td align="center">50</td><td align="center">100</td><td align="center">500</td><td align="center">1000</td></tr></tbody></table><p>例如，罗马数字<strong>2</strong>写成<code>II</code>，即两个并列的<strong>1</strong>，<strong>27</strong>写作<code>XXVII</code>，即<code>XX+V+II</code></p><p>存在六种特殊情况：</p><ul><li><code>I</code>可以放在<code>V</code>和<code>X</code>的左边，来表示<strong>4</strong>和<strong>9</strong></li><li><code>X</code>可以放在<code>L</code>和<code>C</code>的左边，来表示<strong>40</strong>和<strong>90</strong></li><li><code>C</code>可以放在<code>D</code>和<code>M</code>的左边，来表示<strong>400</strong>和<strong>900</strong></li></ul><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "III"输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "IV"输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例3：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: s = "LVIII"输出: 58<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>复杂度 时间O(N) + 空间O(1)</p><p>根据提示，特殊处理字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        rel_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"I"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span>        res <span class="token operator">=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">2</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">20</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">200</span>            res <span class="token operator">+=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：归纳"><a href="#方法二：归纳" class="headerlink" title="方法二：归纳"></a>方法二：归纳</h3><p>进一步归纳得出，如果当前字符小于后一个字符，减去当前字符代表的值，否则加上</p><p>复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        rel_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"I"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">and</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                res <span class="token operator">-=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> rel_dict<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0026-删除有序数组中的重复项</title>
      <link href="/leetcode-shua-ti-0026-shan-chu-you-xu-shu-zu-zhong-de-chong-fu-xiang/"/>
      <url>/leetcode-shua-ti-0026-shan-chu-you-xu-shu-zu-zhong-de-chong-fu-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个有序数字，请原地删除重复出现的元素，使得每个元素只出现一次，返回删除后数组的长度，不需要额外的数组空间，必须在原地修改输入数组在使用O(1)额外空间的条件下完成。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [1, 1, 2]输出: 2, nums = [1, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]输出: 5, nums = [0, 1, 2, 3, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>用快慢指针来记录遍历的坐标</p><ul><li>开始时两个指针都指向第一个数字</li><li>如果两个指针指的数字相同，则快指针向前一步</li><li>如果不同，则两个指针都向前一步</li><li>当快指针走完整个数组后，慢指针当前的坐标加1就是数组中不同数字的个数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        slow <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> fast <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">:</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>         <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0053-最大子序和</title>
      <link href="/leetcode-shua-ti-0053-zui-da-zi-xu-he/"/>
      <url>/leetcode-shua-ti-0053-zui-da-zi-xu-he/</url>
      
        <content type="html"><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组<code>nums</code>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]输出: 6解释：连续子数组[4, -1, 2, 1]的和最大，为6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：暴力解"><a href="#方法一：暴力解" class="headerlink" title="方法一：暴力解"></a>方法一：暴力解</h3><p>算法复杂度  时间O(N^3) +空间O(1)</p><p>列举所有组合子序列首尾位置的组合，求解最大的子序列和</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                maxSum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> maxSum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：优化暴力解"><a href="#方法二：优化暴力解" class="headerlink" title="方法二：优化暴力解"></a>方法二：优化暴力解</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>优化暴力解，可以预先处理，得到前缀和。</p><p>定义函数<code>S(i)</code>，表示计算以<code>0</code>开始到<code>i</code>的累和，那么<code>S(j) - s(i-1)</code>表示从<code>i</code>开始到<code>j</code>的累和。因此，只需要遍历一遍计算出所有的<code>S(i)</code>，然后再减去之前的<code>S(k)</code>在的最小值即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        minSum <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            maxSum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> <span class="token builtin">sum</span> <span class="token operator">-</span> minSum<span class="token punctuation">)</span>            minSum <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>minSum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> maxSum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三：分治法"><a href="#方法三：分治法" class="headerlink" title="方法三：分治法"></a>方法三：分治法</h3><p>算法复杂度 时间O(NlogN) + 空间O(logN)</p><p>把数组<code>nums</code>以中间位置<code>m</code>分为左<code>left</code>、右<code>right</code>两部分，那么就有<code>left=nums[0]...nums[m-1]</code>和<code>right=nums[m+1]...nums[n-1]</code></p><p>最大子序列和的位置有以下三种情况：</p><ol><li>考虑中间元素，跨越左右两部分，从中间元素开始，往左求出后缀最大，往右求出前缀足底啊，保持连续性。</li><li>不考虑中间元素，最大子序列和出现在左半部分，递归求解左边部分最大子序列和。</li><li>不考虑中间元素，最大子序列和出现在右半部分，递归求解右边部分最大子序列和</li></ol><p>分别求出上述三种情况的最大子序，三者中最大值即为最大子序和</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l <span class="token operator">&gt;</span> r<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        left <span class="token operator">=</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        right <span class="token operator">=</span> self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        left_suffix_max_sum <span class="token operator">=</span> right_prefix_max_sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            left_suffix_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left_suffix_max_sum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            right_prefix_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>right_prefix_max_sum<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        cross_max_man <span class="token operator">=</span> left_suffix_max_sum <span class="token operator">+</span> right_prefix_max_sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cross_max_man<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法四：动态规划"><a href="#方法四：动态规划" class="headerlink" title="方法四：动态规划"></a>方法四：动态规划</h3><p>动态规划的难点在于找到动态转移方程，<code>dp[i]</code>-表示当前位置<code>i</code>的最大子序和，状态转移方程为<code>dp[i]=max(dp[i-1] + nums[i], nums[i])</code>，初始化<code>dp[0] = nums[0]</code>，从状态转移方程中，只需要关注一个状态的值，不需要开一个数组记录位置所有子序列和，只需要两个变量<code>curMaxSum</code> - 累计最大和到当前位置，<code>maxSum</code> - 全局最大子序和</p><p><code>currMaxSum = max(currMaxSum + nums[i], nums[i])</code></p><p><code>maxSum = max(currMaxSum, maxSum)</code></p><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        max_sum <span class="token operator">=</span> curr_max_sum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            curr_max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>curr_max_sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            max_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>curr_max_sum<span class="token punctuation">,</span> max_sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> max_sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0066-加一</title>
      <link href="/leetcode-shua-ti-0066-jia-yi/"/>
      <url>/leetcode-shua-ti-0066-jia-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一</p><p>最高位数组存放在数组的首位，数组中每个元素只存储单个数字</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: digits = [1, 2, 3]输出: [1, 2, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: digits = [4, 3, 2, 1]输出: [4, 3, 2, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="反向遍历数组"><a href="#反向遍历数组" class="headerlink" title="反向遍历数组"></a>反向遍历数组</h3><p>算法复杂度  时间O(N) +空间O(1)</p><p>两条链表先遍历其中一个，将其所有节点存入哈希表，然后遍历另一个链表，检查节点是否在哈希表中，第一个存在的节点就是相交节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span>        digits<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span>                <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    digits<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    digits<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> digits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0088-合并两个有序数组</title>
      <link href="/leetcode-shua-ti-0088-he-bing-liang-ge-you-xu-shu-zu/"/>
      <url>/leetcode-shua-ti-0088-he-bing-liang-ge-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定两个按非递减顺序排列的整数数组<code>nums1</code>和<code>nums2</code>，另有两个整数<code>m</code>和<code>n</code>，分别表示<code>nums1</code>和<code>nums2</code>中的元素数目。请合并<code>nums2</code>到<code>nums1</code>中，使得合并后的数组同样按非递减顺序排列</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组<code>nums1</code>中，为了应当此种情况，<code>nums1</code>的初始长度为<code>m+n</code>，其中前<code>m</code>个元素表示应合并的元素，后<code>n</code>个元素为<code>0</code>。<code>nums2</code>的长度为<code>n</code>。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1 = [1,2,3,0,0,0], m=3, nums2=[2,5,6], n=3输出: [1,2,2,3,5,6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1=[1], m=1, nums2=[], n=0输出：[1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="三指针法"><a href="#三指针法" class="headerlink" title="三指针法"></a>三指针法</h3><p>算法复杂度 时间O(M+N) + 空间O(1)</p><p>写指针记录当前填补的那个位置，m指针用于记录nums1处理的那个元素，n指针用于记录nums2处理的那个元素。从后往前比较，并从后往前插入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        pos <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> m <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                n <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                m <span class="token operator">-=</span> <span class="token number">1</span>            pos <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            nums1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            n <span class="token operator">-=</span> <span class="token number">1</span>            pos <span class="token operator">-=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0101-对称二叉树</title>
      <link href="/leetcode-shua-ti-0101-dui-cheng-er-cha-shu/"/>
      <url>/leetcode-shua-ti-0101-dui-cheng-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，检查它是否是镜像对称的</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1, 2, 2, 3, 4, 4, 3]输出: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1, 2, 2, null, 3, null, 3]输出: False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root1 <span class="token keyword">and</span> <span class="token keyword">not</span> root2            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root1 <span class="token keyword">or</span> <span class="token keyword">not</span> root2<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> root1<span class="token punctuation">.</span>val <span class="token operator">!=</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0104-二叉树的最大深度</title>
      <link href="/leetcode-shua-ti-0104-er-cha-shu-de-zui-da-shen-du/"/>
      <url>/leetcode-shua-ti-0104-er-cha-shu-de-zui-da-shen-du/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，找出其最大深度，二叉树的深度为根节点到最远子节点的最长路径上的节点数</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [3, 9, 20, null, null, 15, 7]输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>由于数是一种递归的数据结构，因此使用递归去解决比较容易。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left <span class="token keyword">and</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：迭代法"><a href="#方法二：迭代法" class="headerlink" title="方法二：迭代法"></a>方法二：迭代法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>使用树的层次遍历（BFS)</p><p>关键点：</p><ul><li><p>队列</p></li><li><p>队列中用None来划分每层，或者在对每层进行迭代之前保存当前队列元素的个数</p></li><li><p>树的基本操作-遍历-层次遍历</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        q<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            node <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>           <span class="token keyword">elif</span> q<span class="token punctuation">:</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>                depth <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> depth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0108-将有序数组转换为二叉搜索树</title>
      <link href="/leetcode-shua-ti-0108-jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-suo-shu/"/>
      <url>/leetcode-shua-ti-0108-jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-suo-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="将有序数组转换为二叉搜索树"><a href="#将有序数组转换为二叉搜索树" class="headerlink" title="将有序数组转换为二叉搜索树"></a>将有序数组转换为二叉搜索树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个升序的整数数组，将其转换为一颗高度平衡二叉搜索树</p><p>高度平衡二叉树是一颗满足每个节点的左右两个子树的高度差的绝对值不超过1的二叉树</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[-10,-3,0,5,9]输出: [0,-3,9,-10,null,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>算法复杂度 时间O(N) + 空间O(N^2)</p><p>找中点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>sortedArrayToBST<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>sortedArrayToBST<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：改进的递归法"><a href="#方法二：改进的递归法" class="headerlink" title="方法二：改进的递归法"></a>方法二：改进的递归法</h3><p>算法复杂度 时间O(N) + 空间O(N)</p><p>每次递归不用开辟新的空间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">reBuild</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left <span class="token operator">&gt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">return</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>reBuild<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0122-买卖股票的最佳时机②</title>
      <link href="/leetcode-shua-ti-0122-mai-mai-gu-piao-de-zui-jia-shi-ji/"/>
      <url>/leetcode-shua-ti-0122-mai-mai-gu-piao-de-zui-jia-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机②"><a href="#买卖股票的最佳时机②" class="headerlink" title="买卖股票的最佳时机②"></a>买卖股票的最佳时机②</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>prices</code>，它的第<code>i</code>个元素<code>prices[i]</code>表示给定股票第<code>i</code>天的价格。</p><p>设计一个算法来计算你能获得的最大利润并返回。可以多次买卖一支股票，但是必须在再次购买前出售掉之前的股票</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,1,5,3,6,4]输出: 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,6,4,3,1]输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="遍历求最大值"><a href="#遍历求最大值" class="headerlink" title="遍历求最大值"></a>遍历求最大值</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prices<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0121-买卖股票的最佳时机①</title>
      <link href="/leetcode-shua-ti-0121-mai-mai-gu-piao-de-zui-jia-shi-ji/"/>
      <url>/leetcode-shua-ti-0121-mai-mai-gu-piao-de-zui-jia-shi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机①"><a href="#买卖股票的最佳时机①" class="headerlink" title="买卖股票的最佳时机①"></a>买卖股票的最佳时机①</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>prices</code>，它的第<code>i</code>个元素<code>prices[i]</code>表示给定股票第<code>i</code>天的价格。</p><p>你只能选择某一天买入这只股票，并选择在未来的某一个不同的日子卖出这支股票。设计一个算法来计算你能获得的最大利润并返回。如果不能获得任何利润，返回<code>0</code></p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,1,5,3,6,4]输出: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[7,6,4,3,1]输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="遍历求最大值"><a href="#遍历求最大值" class="headerlink" title="遍历求最大值"></a>遍历求最大值</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prices<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        min_price <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        max_profit <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> price <span class="token keyword">in</span> prices<span class="token punctuation">:</span>            <span class="token keyword">if</span> price <span class="token operator">&lt;</span> min_price<span class="token punctuation">:</span>                min_price <span class="token operator">=</span> price            <span class="token keyword">elif</span> max_profit <span class="token operator">&lt;</span> price <span class="token operator">-</span> min_price<span class="token punctuation">:</span>                max_profit <span class="token operator">=</span> price <span class="token operator">-</span> min_price        <span class="token keyword">return</span> max_profit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0125-验证回文串</title>
      <link href="/leetcode-shua-ti-0125-yan-zheng-hui-wen-chuan/"/>
      <url>/leetcode-shua-ti-0125-yan-zheng-hui-wen-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="验证回文串"><a href="#验证回文串" class="headerlink" title="验证回文串"></a>验证回文串</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "A man, a plan, a canal: Panama"输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: "race a car"输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><ul><li>使用头尾双指针，如果两个指针的元素不相同，直接返回false</li><li>如果两个指针的元素相同，更新头尾指针，循环直到头尾指针相遇</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">continue</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用python语言特征</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> s <span class="token keyword">if</span> i<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0136-只出现一次的数字</title>
      <link href="/leetcode-shua-ti-0136-zhi-chu-xian-yi-ci-de-shu-zi/"/>
      <url>/leetcode-shua-ti-0136-zhi-chu-xian-yi-ci-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个非空整数数组，除了某个元素只出现一次外，其余元素均出现两次，找出那个只出现一次的元素，要求线性时间复杂度且不使用额外空间</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,2,1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [4,1,2,1,2]输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="异或法"><a href="#异或法" class="headerlink" title="异或法"></a>异或法</h3><p>利用二进制异或的性质，将所有数字异或即可得唯一出现一次的数字</p><p>关键点：</p><ul><li>异或的性质 两个数字异或的结果<code>a^b</code>的二进制每一位进行运算，得出数字，运算的逻辑是，如果同一位数字相同则为0，不同则为1</li><li>任何数异或本身为0</li><li>任何数和0异或是本身</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            res <span class="token operator">^</span><span class="token operator">=</span> num        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0155-最小栈</title>
      <link href="/leetcode-shua-ti-0155-zui-xiao-zhan/"/>
      <url>/leetcode-shua-ti-0155-zui-xiao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h1><p><a href="https://leetcode-cn.com/problems/min-stack/">https://leetcode-cn.com/problems/min-stack/</a></p><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>设计一个支持<code>push</code>,<code>pop</code>,<code>top</code>操作，并能在常数时间内检测到最小元素的栈。</p><ul><li><code>push(x)</code>——将元素<code>x</code>推入栈中</li><li><code>pop(x)</code>——删除栈顶元素</li><li><code>top()</code>——获取栈顶元素</li><li><code>getMin()</code>——检索栈中的最小元素</li></ul><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: ["MinStack","push","push","push","getMin","pop","top","getMin"][[],[-2],[0],[-3],[],[],[],[]]输出: [null,null,null,null,-3,null,0,-2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：两个栈"><a href="#方法一：两个栈" class="headerlink" title="方法一：两个栈"></a>方法一：两个栈</h3><p>算法复杂度 时间O(1) + 空间O(1)</p><ul><li>一个栈存放全部的元素，<code>push</code>和<code>pop</code>都是正常操作</li><li>另一个栈存放最小栈，每次<code>push</code>，如果比最小栈的栈顶元素小，则<code>push</code>进最小栈</li><li>每次<code>pop</code>的时候判断是否和最小栈栈顶元素相同，如果相同则<code>pop</code>掉最小栈栈顶元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>minStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>minStack <span class="token keyword">or</span> val <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>minStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：一个栈"><a href="#方法二：一个栈" class="headerlink" title="方法二：一个栈"></a>方法二：一个栈</h3><p>算法复杂度 时间O(1) + 空间O(1)</p><ul><li>最小栈存储的不是真实值，而是真实值与min的差值</li><li>top的时候涉及到对数据的还原，这里千万注意是上一个最小值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>minV <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val <span class="token operator">-</span> self<span class="token punctuation">.</span>minV<span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>minV<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minV <span class="token operator">=</span> val                <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            <span class="token keyword">return</span>        tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>minV <span class="token operator">-=</span> tmp            <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            <span class="token keyword">return</span>       tmp <span class="token operator">=</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV <span class="token operator">+</span> tmp            <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>minV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0167-两数之和②-输入有序数组</title>
      <link href="/leetcode-shua-ti-0167-liang-shu-zhi-he-shu-ru-you-xu-shu-zu/"/>
      <url>/leetcode-shua-ti-0167-liang-shu-zhi-he-shu-ru-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和②-输入有序数组"><a href="#两数之和②-输入有序数组" class="headerlink" title="两数之和②-输入有序数组"></a>两数之和②-输入有序数组</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个非递减顺序排列的整数数组<code>nums</code>和一个整数目标值<code>target</code>，从该整数数组<code>nums</code>中找出和为目标值<code>target</code>的那两个整数，并返回他们的数组下标。下标从<code>1</code>开始计数</p><p>假设每种输入只会对应一个答案，数组中同一个元素在答案里不能重复出现，可以按任意顺序返回答案。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [2,7,11,15], target=9输出: [1, 2]解释：2 + 7 = 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3,2,4], target=6输出: [2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希表法"><a href="#方法一：哈希表法" class="headerlink" title="方法一：哈希表法"></a>方法一：哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>创建一个哈希表，对于每一个<code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p>关键点：</p><ul><li>求和转换为求差</li><li>借助哈希结构将数组中每个元素及其索引相互对应</li><li>以空间换时间，将查找时间从O(N)减低到O(1)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>hash_map<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p>复杂度 时间O(N)+空间O(1)</p><p>因为数组是有序的，所以使用双指针法。一个<code>left</code>指针，一个<code>right</code>指针，如果<code>left+right</code>的值大于<code>target</code>，则<code>right</code>减1，否则<code>left</code>加1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>           <span class="token keyword">elif</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0160-相交链表</title>
      <link href="/leetcode-shua-ti-0160-xiang-jiao-lian-biao/"/>
      <url>/leetcode-shua-ti-0160-xiang-jiao-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>编写一个程序，找到两个单链表相交的起始节点</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: intersectVal=8, listA=[4, 1, 8, 4, 5], listB = [5, 0, 1, 8, 4, 5], skipA= 2, skipB = 3输出: Intersected at '8'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: intersectVal=2, listA=[0, 9, 1, 2, 4], listB = [3, 2, 4], skipA= 3, skipB = 1输出: Intersected at '2'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希法"><a href="#方法一：哈希法" class="headerlink" title="方法一：哈希法"></a>方法一：哈希法</h3><p>算法复杂度  时间O(N) +空间O(N)</p><p>两条链表先遍历其中一个，将其所有节点存入哈希表，然后遍历另一个链表，检查节点是否在哈希表中，第一个存在的节点就是相交节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        data <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> headA<span class="token punctuation">:</span>            data<span class="token punctuation">.</span>add<span class="token punctuation">(</span>headA<span class="token punctuation">)</span>            headA <span class="token operator">=</span> headA<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> headB<span class="token punctuation">:</span>            <span class="token keyword">if</span> headB <span class="token keyword">in</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span> headB            headB <span class="token operator">=</span> headB<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>使用a,b两个指针分别指向A, B两条链表，两个指针以相同的速度向后移动</p><p>当a到达链表的尾部时，重定位到链表B的头结点</p><p>当b到达链表的尾部时，重定位到链表A的头结点</p><p>a, b指针相遇的点为相交的起始节点，否则没有相交点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        pA<span class="token punctuation">,</span> pB <span class="token operator">=</span> pheadA<span class="token punctuation">,</span> pheadB        <span class="token keyword">while</span> pA <span class="token operator">!=</span> pB<span class="token punctuation">:</span>            pA <span class="token operator">=</span> pA<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pA <span class="token keyword">else</span> pheadB            pB <span class="token operator">=</span> pB<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pB <span class="token keyword">else</span> pheadA        <span class="token keyword">return</span> pA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0169-多数元素</title>
      <link href="/leetcode-shua-ti-0169-duo-shu-yuan-su/"/>
      <url>/leetcode-shua-ti-0169-duo-shu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个大小为<code>n</code>的数组，找到其中的多数元素。多数元素指在数组中出现次数大于<code>[n/2]</code>的元素</p><p>假设数组是非空的，并且给定的数组总是存在多数元素。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [3,2,3]输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,2,1,1,1,2,2]输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="投票算法"><a href="#投票算法" class="headerlink" title="投票算法"></a>投票算法</h3><p>算法复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        count<span class="token punctuation">,</span> major <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                major <span class="token operator">=</span> num            <span class="token keyword">if</span> num <span class="token operator">==</span> major<span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                count <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> major<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0191-位1的个数</title>
      <link href="/leetcode-shua-ti-0191-wei-1-de-ge-shu/"/>
      <url>/leetcode-shua-ti-0191-wei-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="位1的个数"><a href="#位1的个数" class="headerlink" title="位1的个数"></a>位1的个数</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>输入一个无符号整数，返回其二进制表达式中数字位数为<code>1</code>的个数</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 00000000000000000000000000001011输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 00000000000000000000000010000000输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><code>n&amp;(n-1)</code>可以消除<code>n</code>的最后一个1</p><p>复杂度 时间O(logN)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n<span class="token punctuation">:</span>            n <span class="token operator">&amp;</span><span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python语言特征法"><a href="#Python语言特征法" class="headerlink" title="Python语言特征法"></a>Python语言特征法</h3><p>转成二进制，然后count计算1的个数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0198-打家劫舍</title>
      <link href="/leetcode-shua-ti-0198-da-jia-jie-she/"/>
      <url>/leetcode-shua-ti-0198-da-jia-jie-she/</url>
      
        <content type="html"><![CDATA[<h1 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>假设你是一个专业的小偷，计划偷窃沿街的房屋，每个房屋内有一定的现金，相邻的房屋装有相连的防盗系统，如果相邻的房屋同一晚上被小偷闯入，系统会子动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算不出动报警装置的情况下，一夜之内能够偷到的最高金额。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [1,2,3,1]输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [2,7,9,3,1]输出: 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ul><li>状态定义：设动态规划列表<code>dp</code>，<code>dp[i]</code>代表前<code>i</code>个房子在满足条件下能够偷窃到的最高金额</li><li>转移方程：<code>dp[n+1] = max(dp[n], dp[n-1] + num)</code></li><li>简化空间复杂度：<code>dp[n]</code>只与<code>dp[n-1]</code>和<code>dp[n-2]</code>有关系，因此可以设两个变量<code>cur</code>和<code>prev</code>交替记录，将空间复杂度降到O(1)</li></ul><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            prev <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            cur <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>prev <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">,</span> cur        <span class="token keyword">return</span> cur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更简的写法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        cur<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            cur<span class="token punctuation">,</span> prev <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>prev <span class="token operator">+</span> num<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">,</span> cur        <span class="token keyword">return</span> cur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0190-颠倒二进制位</title>
      <link href="/leetcode-shua-ti-0190-dian-dao-er-jin-zhi-wei/"/>
      <url>/leetcode-shua-ti-0190-dian-dao-er-jin-zhi-wei/</url>
      
        <content type="html"><![CDATA[<h1 id="颠倒二进制位"><a href="#颠倒二进制位" class="headerlink" title="颠倒二进制位"></a>颠倒二进制位</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>颠倒给定的32位无符号整数二进制位</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 00000010100101000001111010011100输出: 964176192 (00111001011110000010100101000000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 11111111111111111111111111111101输出: 3221225471 (10111111111111111111111111111111)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><code>&lt;&lt;</code>左移运算符：运算数的各二进制全部左移若干位，高位丢弃，低位补0</p><p><code>&gt;&gt;</code>右移运算符：运算数的各二进制全部右移若干位</p><p><code>|</code>按位或运算符：只有对应二个二进制有一个为1时，结果位为1</p><p>复杂度 时间O(logN)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            n <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python语言特征法"><a href="#Python语言特征法" class="headerlink" title="Python语言特征法"></a>Python语言特征法</h3><p>先转成二进制，然后将前面的<code>0b</code>替换为完整的全零前缀，再倒置后转成整数返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        bin_n <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        tmp_n <span class="token operator">=</span> bin_n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp_n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0172-阶乘后的零</title>
      <link href="/leetcode-shua-ti-0172-jie-cheng-hou-de-ling/"/>
      <url>/leetcode-shua-ti-0172-jie-cheng-hou-de-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="阶乘后的零"><a href="#阶乘后的零" class="headerlink" title="阶乘后的零"></a>阶乘后的零</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数<code>n</code>，返回<code>n!</code>结果尾数中零的数量，要求时间复杂度为O(logN)</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 3输出: 0解释: 3!=6，尾数中没有零<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 5输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><p>发现结尾如果是零，必须分解质因素后，<code>2</code>和<code>5</code>相乘才行，而<code>5</code>的数量要远小于<code>2</code>，因此只需求解这<code>n</code>分解质因数后一共有多少个<code>5</code>即可。发现规律得到式子：<code>f(n)=n/5+n/5^2+n/5^3+n/5^4+...</code></p><p>复杂度 时间O(logN)+空间O(1)</p><p>迭代写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">5</span>            count <span class="token operator">+=</span> n        <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> n <span class="token operator">//</span> <span class="token number">5</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>trailingZeroes<span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0203-移除链表元素</title>
      <link href="/leetcode-shua-ti-0203-yi-chu-lian-biao-yuan-su/"/>
      <url>/leetcode-shua-ti-0203-yi-chu-lian-biao-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个链表的头节点<code>head</code>和一个整数<code>val</code>，请你删除链表中所有满足<code>Node.val == val</code>的节点，并返回新的头节点。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head = [1,2,6,3,4,5,6], val=6输出: [1,2,3,4,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head = [7,7,7,7,7,7], val=7输出: []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="链表的基本操作"><a href="#链表的基本操作" class="headerlink" title="链表的基本操作"></a>链表的基本操作</h3><p>注意头尾节点的处理 + 指针循环引用</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        prev <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        cur <span class="token operator">=</span> prev        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0206-反转链表</title>
      <link href="/leetcode-shua-ti-0206-fan-zhuan-lian-biao/"/>
      <url>/leetcode-shua-ti-0206-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你单链表的头节点<code>head</code>, 请你反转链表，并返回反转后的链表</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head = [1,2,3,4,5]输出: [5,4,3,2,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: head=[1,2]输出: [2,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="链表的基本操作"><a href="#链表的基本操作" class="headerlink" title="链表的基本操作"></a>链表的基本操作</h3><p>使用一个变量记录前驱<code>pre</code>，一个变量记录后继<code>next</code>，不断更新<code>current.next=pre</code></p><p>注意头尾节点的处理 + 指针循环引用</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        prev <span class="token operator">=</span> <span class="token boolean">None</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev            prev <span class="token operator">=</span> cur            cur <span class="token operator">=</span> <span class="token builtin">next</span>        <span class="token keyword">return</span> prev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0219-存在重复元素②</title>
      <link href="/leetcode-shua-ti-0219-cun-zai-chong-fu-yuan-su/"/>
      <url>/leetcode-shua-ti-0219-cun-zai-chong-fu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="存在重复元素②"><a href="#存在重复元素②" class="headerlink" title="存在重复元素②"></a>存在重复元素②</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数数组和一个整数<code>k</code>，判断数组中是否存在两个不同的索引<code>i</code>和<code>j</code>，使得<code>nums[i]=nums[j]</code>，并且i和j的差的绝对值至多为<code>k</code>。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,2,3,1], k=3输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,0,1,1], k=1输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h3><p>用一个哈希表存储已经访问过的数字，键是数字，值是位置，每次访问都查看哈希表中是否有这个元素，有的话拿索引进行对比，是否满足条件，如果满足则返回true即可</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        hash_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token keyword">in</span> hash_map <span class="token keyword">and</span> i <span class="token operator">-</span> hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0226-翻转二叉树</title>
      <link href="/leetcode-shua-ti-0226-fan-zhuan-er-cha-shu/"/>
      <url>/leetcode-shua-ti-0226-fan-zhuan-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>翻转一颗二叉树</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,2,3,1], k=3输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums=[1,0,1,1], k=1输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>递归简化操作</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right        <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left        self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：栈"><a href="#方法二：栈" class="headerlink" title="方法二：栈"></a>方法二：栈</h3><p>如果树很高，建议使用栈来代替递归</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right        <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node<span class="token punctuation">.</span>left            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0232-用栈实现队列</title>
      <link href="/leetcode-shua-ti-0232-yong-zhan-shi-xian-dui-lie/"/>
      <url>/leetcode-shua-ti-0232-yong-zhan-shi-xian-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>仅使用两个栈实现先入先出队列，队列应当支持一般队列支持的所有操作(<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>)</p><p>实现<code>MyQueue</code>类:</p><ul><li><code>void push(int x)</code>将元素<code>x</code>推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回<code>true</code>，否则，返回<code>false</code></li></ul><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：["MyQueue", "push", "push", "peek", "pop", "empty"][[], [1], [2], [], [], []]输出：[null, null, null, 1, 1, false]解释：MyQueue myQueue = new MyQueue();myQueue.push(1); // queue is: [1]myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)myQueue.peek(); // return 1myQueue.pop(); // return 1, queue is [2]myQueue.empty(); // return false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h3><ul><li>在<code>push</code>的时候利用双栈</li></ul><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        """</span>        self<span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Push element x to the back of queue.        """</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Removes the element from in front of queue and returns that element.        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the front element.        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Returns whether the queue is empty.        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment"># Your MyQueue object will be instantiated and called as such:</span><span class="token comment"># obj = MyQueue()</span><span class="token comment"># obj.push(x)</span><span class="token comment"># param_2 = obj.pop()</span><span class="token comment"># param_3 = obj.peek()</span><span class="token comment"># param_4 = obj.empty()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0263-丑数</title>
      <link href="/leetcode-shua-ti-0263-chou-shu/"/>
      <url>/leetcode-shua-ti-0263-chou-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>判断给定的数是否为丑数，丑数是只包含因数2，3，5的正整数</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 6输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: 8输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：非递归法"><a href="#方法一：非递归法" class="headerlink" title="方法一：非递归法"></a>方法一：非递归法</h3><ul><li>数论</li><li>因数分解</li></ul><p>复杂度 时间O(logN)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                n <span class="token operator">/=</span> i        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归法"><a href="#方法二：递归法" class="headerlink" title="方法二：递归法"></a>方法二：递归法</h3><p>复杂度 时间O(logN)+空间O(logN)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>       <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>isUgly<span class="token punctuation">(</span>n <span class="token operator">/</span> i<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0342-4的幂</title>
      <link href="/leetcode-shua-ti-0342-4-de-mi/"/>
      <url>/leetcode-shua-ti-0342-4-de-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="4的幂"><a href="#4的幂" class="headerlink" title="4的幂"></a>4的幂</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数，判断它是否是4的幂次方，不使用循环或递归完成。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 16输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 5输出: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：归纳法1"><a href="#方法一：归纳法1" class="headerlink" title="方法一：归纳法1"></a>方法一：归纳法1</h3><p>如果一个数字是4的幂次方，满足：</p><ol><li>是2的幂次方，最低位之外，其他位置有且仅有一个1   —&gt;  n&amp;(n-1) = 0</li><li>这个1不在偶数位，一定在奇数位  —&gt;  n &amp; 0x55555555 = n</li></ol><p>复杂度 时间O(1)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&amp;</span> <span class="token number">0x55555555</span> <span class="token operator">==</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法二：归纳法2"><a href="#方法二：归纳法2" class="headerlink" title="方法二：归纳法2"></a>方法二：归纳法2</h3><p>如果一个数字是4的幂次方，满足：</p><ol><li>是2的幂次方，最低位之外，其他位置有且仅有一个1   —&gt;  n&amp;(n-1) = 0</li><li>减去1是3的幂次方   —&gt; (n-1) % 3 = 0</li></ol><p>复杂度 时间O(1)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法三：python语言特征"><a href="#方法三：python语言特征" class="headerlink" title="方法三：python语言特征"></a>方法三：python语言特征</h3><p>复杂度 时间O(1)+空间O(1)</p><p>转数字为二进制表示的字符串，利用字符串相关操作进行判断</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        bin_n <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> bin_n<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bin_n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0283-移动零</title>
      <link href="/leetcode-shua-ti-0283-yi-dong-ling/"/>
      <url>/leetcode-shua-ti-0283-yi-dong-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个数组<code>nums</code>，请将所有0移到数组的末尾，同时保持非零元素的相对顺序，必须在原数组上操作，不能拷贝额外的数组，尽量减少操作次数。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: [0,1,0,3,12]输出: [1,3,12,0,0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>使用一个慢指针表示写指针，快指针表示读指针。</p><p>读指针不断往后移动，遇到非0，则将读到的值写入写指针，触发写指针移动，读指针走到算法结束。</p><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> fast <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>            fast <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0349-两个数组的交集</title>
      <link href="/leetcode-shua-ti-0349-liang-ge-shu-zu-de-jiao-ji/"/>
      <url>/leetcode-shua-ti-0349-liang-ge-shu-zu-de-jiao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定两个数组，编写一个函数来计算他们的交集。输出结果中的每个元素一定是唯一的。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1 = [1,2,2,1], nums2 = [2,2]输出: [2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出: [9,4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：哈希表法"><a href="#方法一：哈希表法" class="headerlink" title="方法一：哈希表法"></a>方法一：哈希表法</h3><p>先遍历第一个数组，将其存在hashtable在，然后遍历第二个数组，如果在hashtable中，就push到ret，然后清空hashtable，最后返回ret即可。</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        hash_map<span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums1<span class="token punctuation">:</span>            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> num        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                hash_map<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>num<span class="token punctuation">)</span>         <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：Python语言特征"><a href="#方法二：Python语言特征" class="headerlink" title="方法二：Python语言特征"></a>方法二：Python语言特征</h3><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0371-两整数之和</title>
      <link href="/leetcode-shua-ti-0371-liang-zheng-shu-zhi-he/"/>
      <url>/leetcode-shua-ti-0371-liang-zheng-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="两整数之和"><a href="#两整数之和" class="headerlink" title="两整数之和"></a>两整数之和</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>不使用运算符<code>+</code>和<code>-</code>计算两整数<code>a</code>、<code>b</code>之和。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: a = 1, b = 2输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: a = -2, b = 3输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><ul><li>异或是一种不进位的加减法</li><li>求与之后左移以为来表示进位</li></ul><p>复杂度 时间O(1)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        a <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>        b <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>        <span class="token keyword">while</span> b<span class="token punctuation">:</span>            carry <span class="token operator">=</span> a <span class="token operator">&amp;</span> b            a <span class="token operator">=</span> a <span class="token operator">^</span> b            b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>        <span class="token keyword">return</span> a <span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">0x80000000</span> <span class="token keyword">else</span> <span class="token operator">~</span><span class="token punctuation">(</span>a <span class="token operator">^</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0401-二进制手表</title>
      <link href="/leetcode-shua-ti-0401-er-jin-zhi-shou-biao/"/>
      <url>/leetcode-shua-ti-0401-er-jin-zhi-shou-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制手表"><a href="#二进制手表" class="headerlink" title="二进制手表"></a>二进制手表</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>二进制手表顶部有4个LED代表小时（0-11），底部6个LED代表分钟（0-59），每个LED代表一个0或1，最低位在右侧</p><p>给定一个非负整数<code>num</code>代当前LED亮着的数量，返回所有可能的时间。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: num = 1输出: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: num = 9输出：[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：笛卡尔积"><a href="#方法一：笛卡尔积" class="headerlink" title="方法一：笛卡尔积"></a>方法一：笛卡尔积</h3><p>给定一个数字<code>num</code>，将其分为两部分，一部分<code>a</code>给小时，另一部分<code>num-a</code>给分钟，最终结果就是<code>a</code>能表示的所有小时的集合和<code>num-a</code>所能表示的分的集合的笛卡尔积，枚举所有<code>(a, num-a)</code>的集合即可。</p><p>复杂度 时间O(N^2)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">readBinaryWatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">possible_number</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> minute<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">,</span> combinations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">,</span> combinations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> a <span class="token keyword">in</span> posible_number<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> b <span class="token keyword">in</span> posible_number<span class="token punctuation">(</span>num<span class="token operator">-</span>i<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ans<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：二进制"><a href="#方法二：二进制" class="headerlink" title="方法二：二进制"></a>方法二：二进制</h3><p>进一步抽象，实际要找的就是<code>a</code>和<code>b</code>相加等于<code>num</code>，并且<code>a</code>和<code>b</code>就是二进制表示中1的个数</p><p>复杂度 时间O(N^2)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">readBinaryWatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">==</span> num<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0437-路径总和③</title>
      <link href="/leetcode-shua-ti-0437-lu-jing-zong-he/"/>
      <url>/leetcode-shua-ti-0437-lu-jing-zong-he/</url>
      
        <content type="html"><![CDATA[<h1 id="路径总和③"><a href="#路径总和③" class="headerlink" title="路径总和③"></a>路径总和③</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个二叉树，他的每个节点都存放着一个整数值，找出路径和等于给定数值的路径总数。</p><p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方法必须向下的。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8输出: 3分析：和等于8的路径有3条：5-&gt;3,5-&gt;2-&gt;1,-3-&gt;11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h3><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> targetSum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            node<span class="token punctuation">,</span> temp <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            res <span class="token operator">+=</span> temp<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span>            temp <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                arr <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">]</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                arr <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">]</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> targetSum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sumList<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            sumList <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token operator">+</span> root<span class="token punctuation">.</span>val <span class="token keyword">for</span> num <span class="token keyword">in</span> sumList<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">]</span>            <span class="token keyword">return</span> sumList<span class="token punctuation">.</span>count<span class="token punctuation">(</span>targetSum<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sumList<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>right<span class="token punctuation">,</span> sumList<span class="token punctuation">)</span>    <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0455-分发饼干</title>
      <link href="/leetcode-shua-ti-0455-fen-fa-bing-gan/"/>
      <url>/leetcode-shua-ti-0455-fen-fa-bing-gan/</url>
      
        <content type="html"><![CDATA[<h1 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>每个孩子最多得到一块饼干，对每个孩子<code>i</code>，都有一个胃口值<code>g[i]</code>，每块饼干<code>s[j]</code>尺寸。如果<code>s[j] &gt;= g[i]</code>，将这饼干<code>j</code>分给孩子<code>i</code>，这个孩子能够满足，目前是尽可能满足越多数量的孩子，并输出最大值。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: g = [1,2,3], s = [1,1]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: g = [1,2], s = [1,2,3]输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>给一个孩子的饼干应该尽量小并且能满足孩子，大的留来满足胃口大的孩子。</p><ul><li>将需求因子<code>g</code>和<code>s</code>分别从小到大进行排序</li><li>使用贪心思想，配合两个指针，每个饼干只尝试一次，成功则换下一个孩子来尝试，不成功则换下一个饼干来尝试</li></ul><p>复杂度 时间O(NlogN)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> g<span class="token punctuation">:</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        g<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span>                ans <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0504-七进制数</title>
      <link href="/leetcode-shua-ti-0504-qi-jin-zhi-shu/"/>
      <url>/leetcode-shua-ti-0504-qi-jin-zhi-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="七进制数"><a href="#七进制数" class="headerlink" title="七进制数"></a>七进制数</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个整数，将其转化为7进制，并以字符串形式输出。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：100输出："202"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：-7输出："-10"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>给一个孩子的饼干应该尽量小并且能满足孩子，大的留来满足胃口大的孩子。</p><p>10进制转任意进制的思路都是<strong>除x取余</strong>，其中x为进制数。</p><ul><li>除x取余并逆序输出</li></ul><h3 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h3><p>复杂度 时间O(N)+空间O(h)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"-"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>convertToBase7<span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>convertToBase7<span class="token punctuation">(</span>num <span class="token operator">//</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：迭代法"><a href="#方法二：迭代法" class="headerlink" title="方法二：迭代法"></a>方法二：迭代法</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"0"</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        is_negative <span class="token operator">=</span> num <span class="token operator">&lt;</span> <span class="token number">0</span>        num <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            num<span class="token punctuation">,</span> remain <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">7</span><span class="token punctuation">,</span> num <span class="token operator">%</span> <span class="token number">7</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>remain<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span>_1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> is_negative <span class="token keyword">else</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0575-分糖果</title>
      <link href="/leetcode-shua-ti-0575-fen-tang-guo/"/>
      <url>/leetcode-shua-ti-0575-fen-tang-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="分糖果"><a href="#分糖果" class="headerlink" title="分糖果"></a>分糖果</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果，你需要把这些糖果均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：candies = [1,1,2,2,3,3]输出：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：candies = [1,1,2,3]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="逻辑分析法"><a href="#逻辑分析法" class="headerlink" title="逻辑分析法"></a>逻辑分析法</h3><p>复杂度 时间O(N)+空间O(N)</p><p>由于糖果是偶数，并且只需要做到两个人糖果数量一样即可。考虑两种情况：</p><ul><li>如果糖果种类大于n/2，妹妹最多可以获得的糖果种类应该是n/2</li><li>如果糖果种类小于n/2，妹妹最多可以获得的糖果种类是糖果种类本身。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candies<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>candies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candies<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0665-非递减数列</title>
      <link href="/leetcode-shua-ti-0665-fei-di-jian-shu-lie/"/>
      <url>/leetcode-shua-ti-0665-fei-di-jian-shu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="非递减数列"><a href="#非递减数列" class="headerlink" title="非递减数列"></a>非递减数列</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个长度为<code>n</code>的整数数字，请判断在最多改变<code>1</code>个元素的情况下，该数据能够变成一个非递减数列。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：nums = [4,2,3]输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：nums = [4, 2, 1]输出：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h3><p>复杂度 时间O(N)+空间O(1)</p><ul><li>考虑边界情况，贪心改变数组的值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkPossibility</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token keyword">and</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0821-字符的最短距离</title>
      <link href="/leetcode-shua-ti-0821-zi-fu-de-zui-duan-ju-chi/"/>
      <url>/leetcode-shua-ti-0821-zi-fu-de-zui-duan-ju-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="字符的最短距离"><a href="#字符的最短距离" class="headerlink" title="字符的最短距离"></a>字符的最短距离</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给定一个字符串<code>S</code>和一个字符<code>C</code>。返回一个代表字符串<code>S</code>中每个字符到字符串<code>S</code>中的字符<code>C</code>的最短距离的数组。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：S = "loveleetcode", c = 'e'输出：[3,2,1,0,1,0,0,1,2,2,1,0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：数组的遍历"><a href="#方法一：数组的遍历" class="headerlink" title="方法一：数组的遍历"></a>方法一：数组的遍历</h3><p>复杂度 时间O(N^2)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shotestToChar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> C<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            l <span class="token operator">=</span> r <span class="token operator">=</span> i            <span class="token keyword">while</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> S<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span> <span class="token keyword">break</span>                    l <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">while</span> r <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> S<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span> <span class="token keyword">break</span>                    r <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span>            <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">:</span> r <span class="token operator">=</span> <span class="token number">10000</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>r<span class="token operator">-</span>i<span class="token punctuation">,</span> i<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：单调栈"><a href="#方法二：单调栈" class="headerlink" title="方法二：单调栈"></a>方法二：单调栈</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shotestToChar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> C<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         pre <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span>                pre <span class="token operator">=</span> i            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">-</span> pre<span class="token punctuation">)</span>        pre <span class="token operator">=</span> <span class="token number">20000</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> C<span class="token punctuation">:</span>                pre <span class="token operator">=</span> i            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pre <span class="token operator">-</span> i<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0874-模拟行走机器人</title>
      <link href="/leetcode-shua-ti-0874-mo-ni-xing-zou-ji-qi-ren/"/>
      <url>/leetcode-shua-ti-0874-mo-ni-xing-zou-ji-qi-ren/</url>
      
        <content type="html"><![CDATA[<h1 id="模拟行走机器人"><a href="#模拟行走机器人" class="headerlink" title="模拟行走机器人"></a>模拟行走机器人</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>机器人在一个无限大小的网格上行走，从点<code>(0, 0)</code>处开始出发，面向北方。该机器人可以接收以下三种类型的命令：</p><p>-2：向左转 90 度</p><p>-1：向右转 90 度</p><p>1 &lt;= x &lt;= 9：向前移动 x 个单位长度</p><p>在网格上有一些格子被视为障碍物。</p><p>第 i 个障碍物位于网格点 <code>(obstacles[i][0], obstacles[i][1])</code></p><p>如果机器人试图走到障碍物上方，那么它将停留在障碍物的前一个网格方块上，但仍然可以继续该路线的其余部分。</p><p>返回从原点到机器人的最大欧式距离的平方。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：commands = [4,-1,3], obstacles = []输出：25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：commands = [4,-1,4, -2, 4], obstacles = [[2, 4]]输出：65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h3><ul><li>理解题意</li><li>建立坐标系</li><li>空间换时间</li></ul><p>复杂度 时间O(N*M)+空间O(obstacles)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">robotSim</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> commands<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obstacles<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        pos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        deg <span class="token operator">=</span> <span class="token number">90</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        obstaclesSet <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">,</span> obstacles<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> command <span class="token keyword">in</span> commands<span class="token punctuation">:</span>            <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                deg <span class="token operator">=</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">360</span>            <span class="token keyword">elif</span> command <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>                deg <span class="token operator">=</span> <span class="token punctuation">(</span>deg <span class="token operator">+</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">360</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">90</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">180</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> deg <span class="token operator">==</span> <span class="token number">270</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> command <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obstaclesSet<span class="token punctuation">:</span>                        pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                        i <span class="token operator">+=</span> <span class="token number">1</span>                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-1128-等价多米诺骨牌对的数量</title>
      <link href="/leetcode-shua-ti-1128-deng-jie-duo-mi-nuo-gu-pai-dui-de-shu-liang/"/>
      <url>/leetcode-shua-ti-1128-deng-jie-duo-mi-nuo-gu-pai-dui-de-shu-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="等价多米诺骨牌对的数量"><a href="#等价多米诺骨牌对的数量" class="headerlink" title="等价多米诺骨牌对的数量"></a>等价多米诺骨牌对的数量</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个由一些多米诺骨牌组成的列表 dominoes。</p><p>如果其中某一张多米诺骨牌可以通过旋转 0 度或 180 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。</p><p>形式上，<code>dominoes[i] = [a, b]</code> 和 <code>dominoes[j] = [c, d]</code> 等价的前提是 a==c 且 b==d，或是 a==d 且 b==c。</p><p>在 <code>0 &lt;= i &lt; j &lt; dominoes.length</code> 的前提下，找出满足 <code>dominoes[i]</code> 和 <code>dominoes[j] </code>等价的骨牌对 (i, j) 的数量。其中<code>1 &lt;= dominoes[i][j] &lt;= 9</code></p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：dominoes = [[1,2],[2,1],[3,4],[5,6]]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：”排序”-计数"><a href="#方法一：”排序”-计数" class="headerlink" title="方法一：”排序” + 计数"></a>方法一：”排序” + 计数</h3><p>用一个哈希表存储所有的[a,b]对的计数信息</p><p>复杂度 时间O(N)+空间O(N)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dominoes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>         n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dominoes<span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        cntMapper <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> dominoes<span class="token punctuation">:</span>            k <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token keyword">else</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>            cntMapper<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> cntMapper<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> cntMapper<span class="token punctuation">:</span>            v <span class="token operator">=</span> cntMapper<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> v <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>                cnt <span class="token operator">+=</span> <span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：状态压缩-一次遍历"><a href="#方法二：状态压缩-一次遍历" class="headerlink" title="方法二：状态压缩+一次遍历"></a>方法二：状态压缩+一次遍历</h3><p>考虑到数字的数据范围为<code>1 &lt;= dominoes[i][j] &lt;= 9</code>，因此使用10bit表示a,b。</p><p>复杂度 时间O(N)+空间O(1024)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dominoes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>         count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1024</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> dominoes<span class="token punctuation">:</span>            <span class="token keyword">if</span> a <span class="token operator">&gt;=</span> b<span class="token punctuation">:</span>                v <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token operator">|</span> b            <span class="token keyword">else</span><span class="token punctuation">:</span>                v <span class="token operator">=</span> b <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token operator">|</span> a            ans <span class="token operator">+=</span> counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span>            counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三：状态压缩优化"><a href="#方法三：状态压缩优化" class="headerlink" title="方法三：状态压缩优化"></a>方法三：状态压缩优化</h3><p>考虑到数字的数据范围为<code>1 &lt;= dominoes[i][j] &lt;= 9</code>，用9进制来存。</p><p>复杂度 时间O(N)+空间O(81)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dominoes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>         count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1024</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> dominoes<span class="token punctuation">:</span>            v <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ans <span class="token operator">+=</span> counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span>            counts<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-1260-二维网关迁移</title>
      <link href="/leetcode-shua-ti-1260-er-wei-wang-guan-qian-yi/"/>
      <url>/leetcode-shua-ti-1260-er-wei-wang-guan-qian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="二维网关迁移"><a href="#二维网关迁移" class="headerlink" title="二维网关迁移"></a>二维网关迁移</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个 n 行 m 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。</p><p>每次「迁移」操作将会引发下述活动：</p><p>位于<code>grid[i][j]</code>的元素将会移动到<code> grid[i][j + 1]</code>。</p><p>位于<code>grid[i][m - 1] </code>的元素将会移动到 <code>grid[i + 1][0]</code>。</p><p>位于<code>grid[n - 1][m - 1] </code>的元素将会移动到<code> grid[0][0]</code>。</p><p>请你返回 k 次迁移操作后最终得到的 二维网格。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1输出：[[9,1,2],[3,4,5],[6,7,8]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：commands = [4,-1,4, -2, 4], obstacles = [[2, 4]]输出：65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="转化为一维矩阵处理"><a href="#转化为一维矩阵处理" class="headerlink" title="转化为一维矩阵处理"></a>转化为一维矩阵处理</h3><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shiftGrid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 二维转为一维</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 取模，缩小k的范围</span>        k <span class="token operator">%=</span> m <span class="token operator">*</span> n        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 首尾交换法</span>        <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>                t <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span>                arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> t                l <span class="token operator">+=</span> <span class="token number">1</span>                r <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment"># 三次旋转</span>        reverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">*</span> n <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        reverse<span class="token punctuation">(</span>m <span class="token operator">*</span> n <span class="token operator">-</span> k<span class="token punctuation">,</span> m <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        reverse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 一维到二维</span>        row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">%</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-1332-删除回文子序列</title>
      <link href="/leetcode-shua-ti-1332-shan-chu-hui-wen-zi-xu-lie/"/>
      <url>/leetcode-shua-ti-1332-shan-chu-hui-wen-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="删除回文子序列"><a href="#删除回文子序列" class="headerlink" title="删除回文子序列"></a>删除回文子序列</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个字符串 s，它仅由字母 ‘a’ 和 ‘b’ 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。</p><p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p><p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p><p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：s = "ababa"输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入：s = "baabb"输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="判断回文"><a href="#判断回文" class="headerlink" title="判断回文"></a>判断回文</h3><ul><li><p>如果 s 是回文，则我们需要一次消除，否则需要两次</p></li><li><p> 对于空字符串，我们需要 0 次</p></li></ul><p>复杂度 时间O(N)+空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removePalindromeSub</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> s <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removePalindromeSub</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            l <span class="token operator">=</span> <span class="token number">0</span>            r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> l <span class="token operator">&lt;</span>r<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                l <span class="token operator">+=</span> <span class="token number">1</span>                r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> isPalindrome<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题-0027-移除元素</title>
      <link href="/leetcode-shua-ti-0027-yi-chu-yuan-su/"/>
      <url>/leetcode-shua-ti-0027-yi-chu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/">移除元素</a></h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>给你一个数组<code>nums</code>和一个值<code>val</code>，请原地删除所有数值等于<code>val</code>的元素，返回删除后数组的长度，不需要额外的数组空间，必须在原地修改输入数组在使用O(1)额外空间的条件下完成。</p><p>元素的顺序可以改变，不必考虑数组在超出新长度后面的元素。</p><p>示例1：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [3, 2, 2, 3], val = 3输出: 2, nums = [2, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">输入: nums = [0, 1, 2, 2, 3, 0, 4, 2], val = 2输出: 5, nums = [0, 1, 3, 3, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h2><h3 id="方法一：双指针法"><a href="#方法一：双指针法" class="headerlink" title="方法一：双指针法"></a>方法一：双指针法</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><p>用快慢指针来记录遍历的坐标</p><ul><li>开始时两个指针都指向第一个数字</li><li>如果快指针指的数字与<code>val</code>相同，则快指针向前一步</li><li>如果不同，则将指针所指值赋给慢指针，然后两个指针都向前一步</li><li>当快指针走完整个数组后，慢指针当前的坐标就是新数组的数字个数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        slow <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> fast <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> slow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：Python特性"><a href="#方法二：Python特性" class="headerlink" title="方法二：Python特性"></a>方法二：Python特性</h3><p>算法复杂度 时间O(N) + 空间O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> val <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单 </tag>
            
            <tag> 编程题 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
