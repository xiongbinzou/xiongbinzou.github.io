<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>十大排序算法</title>
      <link href="/posts/22092.html"/>
      <url>/posts/22092.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-选择排序">1. 选择排序</h2><p>思路：首先从序列中选择最小元素，将它与序列的第一个元素交换位置，再从序列剩下的元素中选择最小的元素，将它与序列的第二个元素交换位置，不断进行这样的操作，直到将整个序列排序。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="选择排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">=</span> i            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    idx <span class="token operator">=</span> j            <span class="token keyword">if</span> idx <span class="token operator">!=</span> i<span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>            <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>select_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="2-冒泡排序">2. 冒泡排序</h2><p>思路：从左到右不断交换序列相邻逆序的元素，在一轮的循环之后，可以让未排序的最大元素上浮到右侧，持续每次对越来越少的元素重复上面的步骤。优化：在一轮循环中，如果没有发生交换，则说明序列已经是有序的，此时可以直接退出。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="冒泡排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>  arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>                 <span class="token keyword">break</span>                <span class="token keyword">return</span> arr    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前: </span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bubble_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前: [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="3-插入排序">3. 插入排序</h2><p>思路：插入元素时，在左侧已排序序列中从后到前扫描，找到相应位置并插入，插入到左侧已经排序的序列中，使得插入之后左侧序列依旧有序。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="插入排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>insert_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="4-希尔排序">4. 希尔排序</h2><p>思路：对于大规模的序列，插入排序很慢，因为它只能交换相邻元素，每次只能将逆序数量减1。希尔排序先将整个待排序的序列分割为若干个子序列分别进行直接插入排序，通过交换不相邻的元素，每次减少的逆序数量大于1。希尔排序使用插入排序对间隔h的序列进行排序，通过不断减少h，最后令h=1，可以使整个序列有序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        h <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> h <span class="token operator">&lt;</span> n <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">:</span>            h <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">while</span> h <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">:</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            h <span class="token operator">=</span> h <span class="token operator">//</span> <span class="token number">3</span>                <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shell_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="5-归并排序">5. 归并排序</h2><p>思路：归并排序采用的是分治法，即将序列分为两部分，分别进行排序，然后归并起来。首先申请空间用来存放合并后的序列，其大小为两个已排序序列之和，然后设定两个指针，分别指向为两个已排序序列的起始位置，比较两个指针所指向的元素，选择相对较小的元素存入合并空间，并移动指针到下一个位置，重复上述操作直到某一指针到达序列尾，将另一序列剩下的所有元素直接复制到合并序列尾。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif" alt="归并排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> arr        mid_idx <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>mid_idx<span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>self<span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> left<span class="token punctuation">:</span>            result <span class="token operator">+=</span> left        <span class="token keyword">if</span> right<span class="token punctuation">:</span>            result <span class="token operator">+=</span> right                <span class="token keyword">return</span> result                <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="6-快速排序">6. 快速排序</h2><p>思路：快速排序通过从数列中挑出一个元素作为基准，将序列分为两个子序列，左子序列所有元素小于等于切分元素，右子序列所有元素大于等于切分元素，然后再将这两个子序列切分排序重复上述操作，最终得到排序好的序列。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="快速排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left_idx <span class="token operator">&lt;</span> right_idx<span class="token punctuation">:</span>            partition_idx <span class="token operator">=</span> self<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> partition_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partition_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span>            <span class="token keyword">return</span> arr        <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>right_idx<span class="token punctuation">]</span>        i <span class="token operator">=</span> left_idx <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left_idx<span class="token punctuation">,</span> right_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>right_idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="7-堆排序">7. 堆排序</h2><p>思路：利用堆这种数据结构所设计的一种排序算法，堆是一棵完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）其父节点，即大顶堆（小顶堆）。把最大元素和当前堆中序列的最后一个元素交换位置，并且不删除它。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif" alt="堆排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>build_max_heap<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">build_max_heap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>        right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>        largest <span class="token operator">=</span> i        <span class="token keyword">if</span> left <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>length <span class="token keyword">and</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>            largest <span class="token operator">=</span> left        <span class="token keyword">if</span> right <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>length <span class="token keyword">and</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>            largest <span class="token operator">=</span> right        <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span>heap_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="8-计数排序">8. 计数排序</h2><p>思路：核心在于将输入的数据值转化为键存储在额外开辟的数组空间，先找出待排序数组中最大和最小的元素，统计数组中每个值为i的元素出现的次数，存入数组的第i项，对所有的计数累加，反向填充目标数组，将每个元素i放在新数组的第i项，每放一个元素就将对应位置减去1。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/countingSort.gif" alt="计数排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">counting_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        sort_idx <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>         <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>sort_idx<span class="token punctuation">]</span> <span class="token operator">=</span> j                sort_idx <span class="token operator">+=</span> <span class="token number">1</span>                bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">return</span> arr    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>counting_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="9-桶排序">9. 桶排序</h2><p>思路：桶排序是计数排序的升级版，利用了函数的映射关系。需要注意，在额外空间充足的情况下，尽量增大桶的数量，尽量使用映射函数能够将n个数据均匀的分配到k个桶中。</p><p>元素分布在桶中：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_1.svg_.png" alt="桶排序-a"></p><p>元素在每个桶中排序:</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_2.svg_.png" alt="桶排序-b"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        bucket <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            bucket<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                arr <span class="token operator">+=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> arr    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bucket_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="10-基数排序">10. 基数排序</h2><p>思路：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/radixSort.gif" alt="基数排序"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        iter_cnt <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>max_value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iter_cnt<span class="token punctuation">)</span><span class="token punctuation">:</span>            bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> n <span class="token keyword">in</span> arr<span class="token punctuation">:</span>                idx <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">**</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>                bucket<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            arr<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> b <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>                arr <span class="token operator">+=</span> b            <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序前：</span><span class="token interpolation"><span class="token punctuation">{</span>arr<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"排序后：</span><span class="token interpolation"><span class="token punctuation">{</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>radix_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="11-小结">11. 小结</h2><table><thead><tr><th>排序算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>选择排序</td><td>×</td><td>N^2</td><td>1</td><td></td></tr><tr><td>冒泡排序</td><td>√</td><td>N^2</td><td>1</td><td></td></tr><tr><td>插入排序</td><td>√</td><td>N^2</td><td>1</td><td>时间复杂度和初始顺序有关</td></tr><tr><td>希尔排序</td><td>×</td><td>NlogN</td><td>1</td><td>改进版插入排序</td></tr><tr><td>归并排序</td><td>√</td><td>NlogN</td><td>N</td><td></td></tr><tr><td>快速排序</td><td>×</td><td>NlogN</td><td>logN</td><td></td></tr><tr><td>堆排序</td><td>×</td><td>NlogN</td><td>1</td><td>无法利用局部性原理</td></tr><tr><td>计数排序</td><td>√</td><td>n + k</td><td>k</td><td></td></tr><tr><td>桶排序</td><td>√</td><td>n + k</td><td>n + k</td><td></td></tr><tr><td>基数排序</td><td>√</td><td>n x k</td><td>n + k</td><td></td></tr></tbody></table><h2 id="参考文章">参考文章</h2><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.html">【CS-Notes】</a></li><li><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">【菜鸟教程排序算法】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语言进阶学习笔记</title>
      <link href="/posts/16133.html"/>
      <url>/posts/16133.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-特性">1. 特性</h2><p>特性（Attribute）是一种用于在程序运行时传递各种元素（例如类、方法、结构、枚举等）行为信息的声明性代码。使用特性可以将元数据（例如编译器指令、注释、描述、方法和类等信息）添加到程序中。.Net Framework提供了两种类型的特性，分别是预定义特性和自定义特性。</p><p>在C#中，特性具有以下属性：</p><ul><li>使用特性可以向程序中添加元数据，元数据是指程序中各种元素的相关信息，所有.NET程序中都包含一组指定的元数据；</li><li>可以将一个或多个特性应用于整个程序、模块或者较小的程序元素（例如类或属性）中；</li><li>特性可以像方法和属性一样接收自变量；</li><li>程序可使用反射来检查自己的元数据或其他程序中的元数据</li></ul><p>定义特性的语法如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">attribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span>positional_parameters<span class="token punctuation">,</span> name_parameter<span class="token operator">=</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>element<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，<code>[]</code>中用来定义特性的名称和值，<code>positional_parameters</code>用来指定基本信息，<code>name_parameter</code>用来指定可选信息</p><h3 id="1-1-预定义特性">1.1 预定义特性</h3><p>.Net Framework中提供了三个预定义的属性：AttributeUsage、Conditional和Obsolete</p><p><strong>AttributeUsage</strong></p><p>预定义特性AttributeUsage用来描述如何使用自定义特性类，其中定义了可以引用特性的项目类型。其语法如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>    validon<span class="token punctuation">,</span>    AllowMultiple <span class="token operator">=</span> allowmultiple<span class="token punctuation">,</span>    Inherited <span class="token operator">=</span> inherited<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数validon用了定义特性可被放置的语言元素，它是枚举器AttributeTargets的值的集合，默认是AttributeTargets.All;</li><li>参数allowmultiple（可选参数）用来为该特性的AllowMultiple属性（property）提供一个布尔值，默认为false，单用的，如果为true表示多用的</li><li>参数inherited（可选参数）用来对该特性的Inherited属性（property）提供一个布尔值，默认为false，不被继承的，如果为true表示可被派生类继承</li></ul><p>示例代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span>                AttributeTargets<span class="token punctuation">.</span>Constructor <span class="token operator">|</span>                 AttributeTargets<span class="token punctuation">.</span>Field <span class="token operator">|</span>                 AttributeTargets<span class="token punctuation">.</span>Method <span class="token operator">|</span>                AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">,</span>                AllowMultiple<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Conditional</strong></p><p>预定义特性Conditional用来定义条件方法。Conditional属性通过测试条件编译符号来确定适用的条件，当运行到一个条件方法调用时，是否执行该调用，要根据出现该调用时是否已定义了此符号来确定。使用Conditional是封闭#if和#endif内部方法的替代方法，它更整洁、别致、减少出错的机会。其语法如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Conditional</span><span class="token attribute-arguments"><span class="token punctuation">(</span>conditionalSymbol<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">define</span> DEBUG</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ConditionalTest</span>    <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Conditional</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"DEBUG"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token string">"Func1函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Conditional</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"BUG"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token string">"Func2函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token string">"Main函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// Main函数</span>    <span class="token comment">// Func1函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Obsolete</strong></p><p>预定义特性Obsolete用来标记不应该被使用的程序，可以使用它来通知编译器放弃某个目标元素。例如当你需要使用一个新方法来代替类中的某个旧方法时，就可以使用该特性将旧方法标记为Obsolete（过时）的并输出一条信息，来提示我们应该使用新方法替代旧方法。其语法格式如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span>message<span class="token punctuation">,</span> iserror<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>参数message是一个用来描述项目为什么过时以及用什么替代的字符串</li><li>参数iserror是一个布尔值，默认值为false，如果设置为true，则编译器会把该项目当做一个错误</li></ul><p>示例代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ObsoleteTest</span>    <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"OldMethod已弃用，请改用NewMethod"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"已弃用的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NewMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"新定义的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Main.cs(17,13): error CS0619: `Application.ObsoleteTest.OldMethod()' is obsolete: `OldMethod已弃用，请改用NewMethod'</span>        <span class="token comment">// Compilation failed: 1 error(s), 0 warnings</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-自定义特性">1.2 自定义特性</h3><p>.Net Framework允许创建自定义特性，自定义特性不仅可以用于存储声明性的信息，还可以在运行时被检索。创建并使用自定义特性分为四个步骤：</p><ul><li>声明自定义特性</li><li>构建自定义特性</li><li>在目标程序上应用自定义特性</li><li>通过反射访问自定义特性</li></ul><p>最后一步涉及编写一个简单的程序来读取元数据以便查找各种符号。元数据是有关数据或用于描述其他数据信息的数据，该程序应在运行时使用反射来访问属性。</p><p><strong>声明自定义特性</strong></p><p>自定义特性应该继承System.Attribute类，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>    AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span>    AllowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    Inherited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomethingAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构建自定义特性</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomethingAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name    <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Data    <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span> data <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SomethingAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用自定义特性</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[SomethingAttribute("Amy", data = "Name is Amy")][SomethingAttribute("Tom", data = "Name is Tom")]class Test</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>访问自定义特性</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> something <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SomethingAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">SomethingAttribute</span> each <span class="token keyword">in</span> something<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Name: {0}"</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Data: {0}"</span><span class="token punctuation">,</span> each<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-反射">2. 反射</h2><p>反射（Reflection）是指程序可以访问、检查、修改它本身行为或状态的一种能力，反射中提供了用来描述程序集、模块和类型的对象，可以使用反射动态地创建类型的实例，并将类型绑定到现有对象，或者从现有对象中获取类型，然后调用其方法或访问其字段和属性。如果代码中使用了特性，也可以利用反射来访问他们。</p><h3 id="2-1-反射优缺点">2.1 反射优缺点</h3><p>优点：</p><ul><li>反射提高了程序的灵活性和扩展性</li><li>降低耦合性，提高自适应能力</li><li>运行程序创建和控制任何类的对象，无需提前硬编码目标类</li></ul><p>缺点：</p><ul><li>性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和扩展性要求高的系统框架上，普通程序不建议使用</li><li>使用反射会模糊程序内部逻辑，程序希望在源代码中看到程序逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂</li></ul><h3 id="2-2-反射用途">2.2 反射用途</h3><ul><li>允许在运行时查看特性信息</li><li>允许审查集合中的各种类型，以及实例化这些类型</li><li>允许延迟绑定的方法和属性</li><li>允许在运行时创建新类型，然后使用这些类型执行一些任务</li></ul><h3 id="2-3-查看元数据">2.3 查看元数据</h3><p>使用反射可以查看特性信息，System.Reflection类的MemberInfo对象需要被初始化，用于发现与类相关的特性，为此可以定义目标类的一个对象：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelpAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Attribute</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> Url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Topic    <span class="token punctuation">{</span>        <span class="token keyword">get</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> topic<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">set</span>        <span class="token punctuation">{</span>            topic <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HelpAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>Url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> topic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HelpAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"Infomation to the class MyClass"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>MemberInfo</span> info <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> attributes <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attributes<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// HelpAttribute</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-属性">3. 属性</h2><p>属性（Property）是类、结构和接口的命名成员。类或结构中的成员变量或方法称为域，属性是域的扩展，且可以使用相同的语法来访问，他们使用访问器让私有域的值可被读写或操作。</p><p>属性不会确定存储位置，他们具有可读写或计算他们值的访问器。</p><p>例如，一个名为Student的类，带有age、name或code的私有域，我们不能在类的范围外直接访问这些域，但是可以拥有访问这些私有域的属性。</p><h3 id="3-1-get-set访问器">3.1 get/set访问器</h3><p>属性的访问器包括获取或写入属性的可执行语句，访问器可包含一个get访问器或一个set访问器，或者两种都包含。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Teacher</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name        <span class="token punctuation">{</span>            <span class="token keyword">get</span>             <span class="token punctuation">{</span>                <span class="token keyword">return</span> name<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age         <span class="token punctuation">{</span>             <span class="token keyword">get</span>             <span class="token punctuation">{</span>                <span class="token keyword">return</span> age<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                age <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Name = "</span> <span class="token operator">+</span> Name <span class="token operator">+</span> <span class="token string">", Age = "</span> <span class="token operator">+</span> Age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">PropertiesTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Zhang"</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Teacher Info: {0}"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Teacher Info: {0}"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Teacher Info: Name = Zhang, Age = 26</span>            <span class="token comment">// Teacher Info: Name = Zhang, Age = 27</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-抽象属性">3.2 抽象属性</h3><p>抽象类在中可以拥有抽象属性，这些属性会在派生类中实现</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Person</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Project <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"Project = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Project</span><span class="token punctuation">}</span></span><span class="token string">, Name = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string">, Age = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Age</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">AbstractPropertiesTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Project <span class="token operator">=</span> <span class="token string">"Math"</span><span class="token punctuation">,</span>                Name <span class="token operator">=</span> <span class="token string">"Zhang"</span><span class="token punctuation">,</span>                Age <span class="token operator">=</span> <span class="token number">26</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Teacher Info: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>Age<span class="token operator">++</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Teacher Info: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Teacher Info: Project = Math, Name = Zhang, Age = 26</span><span class="token comment">// Teacher Info: Project = Math, Name = Zhang, Age = 27</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-索引器">4. 索引器</h2><p>索引器（Indexer）是类中的一个特殊成员，他能够让对象以类似数组的形式来操作，使程序看起来更直观、更易编写。索引器与属性类似，在定义索引器时同样会get和set访问器，不同的是，访问索引器需要提供相应的参数。</p><h3 id="4-1-索引器定义">4.1 索引器定义</h3><p>索引器允许对象使用下标的方式来访问，定义时，该类的行为会像一个虚拟数组一样，可以使用数组访问符<code>[ ]</code>来访问类的成员。</p><p>其语法为：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">element<span class="token operator">-</span><span class="token return-type class-name">type</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token comment">// get访问器</span>    <span class="token keyword">get</span>    <span class="token punctuation">{</span>        <span class="token comment">// 返回index指定的值</span>    <span class="token punctuation">}</span>    <span class="token comment">// set访问器</span>    <span class="token keyword">set</span>    <span class="token punctuation">{</span>        <span class="token comment">// 设置index指定的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-索引器用途">4.2 索引器用途</h3><p>索引器实例数据分为更小的部分，并索引每部分，获取或设置每部分。索引器定义时不带名称，但带this关键字，它指向对象实例。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IndexedNames</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span>        <span class="token punctuation">{</span>            <span class="token keyword">get</span>            <span class="token punctuation">{</span>                <span class="token class-name"><span class="token keyword">string</span></span> tmp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span> tmp <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">IndexedNames</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"BBB"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"CCC"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> IndexedNames<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// AAA</span>        <span class="token comment">// BBB</span>        <span class="token comment">// CCC</span>        <span class="token comment">// NAN</span>        <span class="token comment">// NAN</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-重载索引器">4.3 重载索引器</h3><p>索引器可以被重载，而且在声明索引器时也可以带多个参数，每个参数可以是不同的类型，另外，索引器的索引不必是整数，也可以是其他类型，例如字符串类型。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IndexedNames</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"NAN"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span>        <span class="token punctuation">{</span>            <span class="token keyword">get</span>            <span class="token punctuation">{</span>                <span class="token class-name"><span class="token keyword">string</span></span> tmp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span> tmp <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">]</span>        <span class="token punctuation">{</span>            <span class="token keyword">get</span>            <span class="token punctuation">{</span>                <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> name<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">return</span> index<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IndexedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"BBB"</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"CCC"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> IndexedNames<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"'BBB'的索引为: {0}"</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span><span class="token string">"BBB"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// AAA</span>        <span class="token comment">// BBB</span>        <span class="token comment">// CCC</span>        <span class="token comment">// NAN</span>        <span class="token comment">// NAN</span>        <span class="token comment">// 'BBB'的索引为: 1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-委托">5. 委托</h2><p>委托（Delegate）类似于C或C++中函数的指针，是存有对某个方法的引用的一种引用类型的变量。引用可在运行时被改变。</p><p>委托特别用于实现事件和回调方法，所有的委托都派生自System.Delegate类。</p><h3 id="5-1-声明委托">5.1 声明委托</h3><p>委托声明决定了可由委托引用的方法。委托可指向一个与其具有相同标签的方法。</p><p>声明委托的语法如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token operator">&lt;</span><span class="token keyword">return</span> type<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">delegate</span><span class="token operator">-</span>name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>parameter list<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-实例化委托">5.2 实例化委托</h3><p>声明委托类型后，委托对象必须由<code>new</code>关键字来创建，且与一个特定的方法关联。当创建委托时，传递到new语句的参数就像方法调用一样书写，但是不带参数。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 声明委托</span><span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DelegateTest1</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MulNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 实例化委托</span>            <span class="token class-name">NumberChanger</span> nc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger</span> nc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>MulNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用委托对象调用方法</span>            <span class="token function">nc1</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Value of Num: {0}"</span><span class="token punctuation">,</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Value of Num: 35</span>            <span class="token function">nc2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Value of Num: {0}"</span><span class="token punctuation">,</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Value of Num: 175</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-委托多播">5.3 委托多播</h3><p>委托对象可以使用<code>+</code>运算符进行合并。一个合并委托调用它所合并的两个委托，只有同类型的委托才能被合并。<code>-</code>运算符可用于从合并的委托中移除组件委托。</p><p>使用委托合并或移除的操作，可以创建一个委托被调用时要调用的方法的调用类别，这称为委托的多播。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 声明委托</span><span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DelegateTest2</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MulNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 实例化委托</span>            <span class="token class-name">NumberChanger</span> nc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger</span> nc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>MulNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger</span> nc <span class="token operator">=</span> nc1 <span class="token operator">+</span> nc2<span class="token punctuation">;</span>            <span class="token comment">// 调用多播</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Value of Num: {0}"</span><span class="token punctuation">,</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Value of Num: 75</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-事件">6. 事件</h2><p>事件（Event）基本上说是一个用户操作，例如按键、点击、鼠标移动等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件。C#中使用事件机制实现线程间的通信。</p><h3 id="6-1-声明事件">6.1 声明事件</h3><p>在类的内部声明事件，首先必须声明该事件的委托类型，如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LogHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，声明事件本身，使用<code>event</code>关键字：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">LogHandler</span> EventLog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码定义了一个名为EventLog的事件和一个名为LogHandler的委托，该事件在生成时会调用委托。</p><h3 id="6-2-使用事件">6.2 使用事件</h3><p>示例1：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span>    <span class="token punctuation">{</span>        <span class="token comment">// 定义一个委托</span>        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 定义一个事件</span>        <span class="token keyword">public</span> <span class="token class-name">MyDelegate</span> MyDelegateEvent<span class="token punctuation">;</span>        <span class="token comment">// 定义一个事件的触发函数</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnMyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MyDelegateEvent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// 执行事件</span>                <span class="token function">MyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">EventTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PutOutChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I was fired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PutOutChar2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            COnsole<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I was fired too"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 实例化MyEvent类</span>            <span class="token class-name">MyEvent</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 注册一个事件</span>            myEvent<span class="token punctuation">.</span>MyDelegateEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>PutOutChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            myEvent<span class="token punctuation">.</span>MyDelegateEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>PutOutChar2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 执行触发事件的函数</span>            myEvent<span class="token punctuation">.</span><span class="token function">OnMyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 解绑一个事件</span>            myEvent<span class="token punctuation">.</span>MyDelegateEvent <span class="token operator">-=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyEvent<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>putOutChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 再次执行触发事件的函数</span>            myEvent<span class="token punctuation">.</span><span class="token function">OnMyDelegateEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// I was fired</span><span class="token comment">// I was fired too</span><span class="token comment">// I was fired too</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token comment">// 发布器</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token comment">// 定义一个委托</span>        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyDelegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 定义一个事件</span>        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">MyDelegate</span> MyEvent<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">value</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token comment">// 触发事件</span>            <span class="token function">MyEvent</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 订阅器</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subscriber</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintF</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Publisher</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Subscriber</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>MyEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Publisher<span class="token punctuation">.</span>MyDelegate</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>PrintF<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-集合">7. 集合</h2><p>集合（Collection）类是专门用于数据存储和检索的类，这些类提供了对栈（Stack）、队列（Queue）、列表（List）和哈希表（Hashtable）的支持。大多数集合类实现了相同的接口。</p><p>集合类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等，这些类创建Object类的对象的集合，在C#在，Object类是所有数据类型的基类。</p><h3 id="7-1-动态数组ArrayList">7.1 动态数组ArrayList</h3><p>动态数组ArrayList代表了可被单独索引的对象的有序集合，它基本上可以替代一个数组。与数组不同的是，可以使用索引在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。</p><p>下表为ArrayList类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Capacity</td><td>获取或设置ArrayList可包含的元素个数</td><td>Count</td><td>获取ArrayList中实际包含的元素个数</td></tr><tr><td>IsFixedSize</td><td>获取一个值，表示ArrayList是否具有固定大小</td><td>IsReadOnly</td><td>获取一个值，表示ArrayList是否只读</td></tr><tr><td>IsSynchronized</td><td>获取一个值，表示访问ArrayList是否同步（线程安全）</td><td>Item[Int32]</td><td>获取或设置指定索引处的元素</td></tr><tr><td>SyncRoot</td><td>获取一个对象用于同步访问ArrayList</td><td></td><td></td></tr></tbody></table><p>下表为ArrayList类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual int Add(object value);</td><td>在ArrayList的列表末尾添加一个对象</td><td>public virtual void AddRange(ICollection c);</td><td>在ArrayList的列表末尾添加ICollection的元素</td></tr><tr><td>public virtual void Clear();</td><td>在ArrayList中移除所有元素</td><td>public virtual bool Contains(object item);</td><td>判断某个元素是否存在ArrayList中</td></tr><tr><td>public virtual ArrayList GetRange(int index, int count);</td><td>返回一个ArrayList，表示源ArrayList中元素的子集</td><td>public virtual int IndexOf(object);</td><td>返回某个值在ArrayLust中第一次出现的索引，索引从零开始</td></tr><tr><td>public virtual void Insert(int index, object value);</td><td>在ArrayList指定索引处插入一个元素</td><td>public virtual void InsertRange(int index, ICollection c);</td><td>在ArrayList的指定索引处，插入某个集合的元素</td></tr><tr><td>public virtual void Remove(object obj);</td><td>从ArrayList中移除第一次出现的指定对象</td><td>public virtual void RemoveAt(int index);</td><td>移除ArrayList的指定索引处的元素</td></tr><tr><td>public virtual void RemoveRange(int index, int count);</td><td>在ArrayList中移除某个范围的元素</td><td>public virtual void Reverse();</td><td>逆转ArrayList在元素的顺序</td></tr><tr><td>public virtual void SetRange(int index, ICollection c);</td><td>复制某个集合的元素到ArrayList中某个范围的元素上</td><td>public virtual void Sort();</td><td>对ArrayList中的元素进行排序</td></tr><tr><td>public virtual void TrimToSize();</td><td>设置容量为ArrayList中元素的实际个数</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ArrayList</span> arrList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Capacity: {0}"</span><span class="token punctuation">,</span> arrList<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Capacity: 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}"</span><span class="token punctuation">,</span> arrList<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Count: 5</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> e <span class="token keyword">in</span> arrList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 42 35 55 29 7</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Sorted: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arrList<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> e <span class="token keyword">in</span> arrList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Sorted: 7 29 35 42 55</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-哈希表Hashtable">7.2 哈希表Hashtable</h3><p>哈希表Hashtable类代表了一系列基于键的哈希代码组织起来的键/值对。它是由键来访问集合中的元素。哈希表中的每一项都有一个键/值对，键用于访问集合中的项目。</p><p>下表为Hashtable类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Keys</td><td>获取一个ICollection，包含Hashtable中的键</td><td>Values</td><td>获取一个ICollection，包含Hashtable中的值</td></tr><tr><td>IsFixedSize</td><td>获取一个值，表示Hashtable是否具有固定大小</td><td>IsReadOnly</td><td>获取一个值，表示Hashtable是否只读</td></tr><tr><td>Count</td><td>获取Hashtable中实际包含的键值对个数</td><td>Item</td><td>获取或设置指定键相关的值</td></tr></tbody></table><p>下表为Hashtable类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual void Add(object key, object value)</td><td>向Hashtable添加一个带有指定键和值的元素</td><td>public  virtual void Clear()</td><td>从Hashtable中移除所有的元素</td></tr><tr><td>public virtual bool ContainsKey(object key)</td><td>判断Hashtable是否包含指定的键</td><td>public virtual bool ContainsValue(object value)</td><td>判断Hashtable是否包含指定的值</td></tr><tr><td>public virtual void Remove(object key);</td><td>从Hashtable移除带有指定的键的元素</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">HashtableTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Hashtable</span> hashT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span> <span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">,</span> <span class="token string">"DDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"005"</span><span class="token punctuation">,</span> <span class="token string">"EEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashT<span class="token punctuation">.</span><span class="token function">ContainsValue</span><span class="token punctuation">(</span><span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The 'BBB' is already in the table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                hashT<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"006"</span><span class="token punctuation">,</span> <span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取键的集合</span>            <span class="token class-name">ICollection</span> keys <span class="token operator">=</span> hashT<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> k <span class="token keyword">in</span> keys<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> hashT<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 002: BBB</span><span class="token comment">// 001: AAA</span><span class="token comment">// 003: CCC</span><span class="token comment">// 004: DDD</span><span class="token comment">// 006: FFF</span><span class="token comment">// 005: EEE</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-排序列表SortedList">7.3 排序列表SortedList</h3><p>排序列表SortedList类代表了一系列按照键来排序的键/值对，这些键值对可以通过键或索引来访问。</p><p>排序列表是数组和哈希表的组合，包含了一个可使用键或索引访问各项的列表。如果使用索引访问各项，则它是一个动态数组，如果使用键访问各项，则它是一个哈希表。集合中的各项总是按键值排序。</p><p>下表为SortedList类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Capacity</td><td>获取或设置SortedList可包含的元素个数</td><td>Count</td><td>获取SortedList中实际包含的元素个数</td></tr><tr><td>IsFixedSize</td><td>获取一个值，表示SortedList是否具有固定大小</td><td>IsReadOnly</td><td>获取一个值，表示SortedList是否只读</td></tr><tr><td>Item</td><td>获取或设置SortedList中指定键相关的值</td><td>Keys</td><td>获取SortedList中的键</td></tr><tr><td>Values</td><td>获取SortedList中的值</td><td></td><td></td></tr></tbody></table><p>下表为ArrayList类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual int Add(object key, object Value);</td><td>向SortedList添加一个带有指定键和值的元素</td><td>public virtual bool ContainsKey(object key);</td><td>判断SortedList是否存在指定的键</td></tr><tr><td>public virtual void Clear();</td><td>在SortedList中移除所有元素</td><td>public virtual bool ContainsValue(object value);</td><td>判断SortedList是否存在指定的值</td></tr><tr><td>public virtual object GetByIndex(int index);</td><td>获取SortedList的指定索引处的值</td><td>public virtual object GetKey(int index);</td><td>获取SortedList的指定索引处的键</td></tr><tr><td>public virtual IList GetKeyList();</td><td>获取SortedList中的键</td><td>public virtual IList GetValueList();</td><td>获取SortedList中的值</td></tr><tr><td>public virtual void Remove(object key);</td><td>从SortedList中移除带有指定的键的元素</td><td>public virtual void RemoveAt(int index);</td><td>移除SortedList中指定索引处的元素</td></tr><tr><td>public virtual int IndexOfKey(object key);</td><td>返回SortedList中的指定键的索引</td><td>public virtual int IndexOfValue(object key);</td><td>返回SortedList中的指定值第一次出现的索引</td></tr><tr><td>public virtual void TrimToSize();</td><td>设置容量为SortedList中元素的实际个数</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SortedListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">SortedList</span> sortedL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"003"</span><span class="token punctuation">,</span> <span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"004"</span><span class="token punctuation">,</span> <span class="token string">"DDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"005"</span><span class="token punctuation">,</span> <span class="token string">"EEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sortedL<span class="token punctuation">.</span><span class="token function">ContainsValue</span><span class="token punctuation">(</span><span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The 'BBB' is already in the table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                sortedL<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"006"</span><span class="token punctuation">,</span> <span class="token string">"FFF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取键的集合</span>            <span class="token class-name">ICollection</span> keys <span class="token operator">=</span> sortedL<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> k <span class="token keyword">in</span> keys<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> sortedL<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">// 001: AAA</span>            <span class="token comment">// 002: BBB</span><span class="token comment">// 003: CCC</span><span class="token comment">// 004: DDD</span><span class="token comment">// 005: EEE</span>            <span class="token comment">// 006: FFF</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-堆栈Stack">7.4 堆栈Stack</h3><p>堆栈Stack代表了一个后进先出的对象集合，当需要对各项进行后进先出的访问时，则使用堆栈。当在列表中添加一项，称为推入元素，当从列表中移除一项时，称为弹出元素。</p><p>下表为Stack类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Count</td><td>获取Stack中包含的元素个数</td></tr></tbody></table><p>下表为Stack类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual void Clear();</td><td>从Stack中移除所有的元素</td><td>public virtual bool Contains(object obj);</td><td>判断某个元素是否在Stack中</td></tr><tr><td>public virtual object Peek();</td><td>返回在Stack的顶部的对象，但不移除它</td><td>public virtual object Pop();</td><td>移除并返回Stack的顶部的对象</td></tr><tr><td>public virtual void Push(object obj);</td><td>向Stack的顶部添加一个对象</td><td>public virtual object[] ToArray();</td><td>复制Stack到一个新的数组中</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StackTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Stack</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> st<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// D C B A</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token char">'F'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The next popable value in stack: {0}"</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// The next popable value in stack: F</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> st<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// F E D C B A</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> st<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// C B A</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-队列Queue">7.5 队列Queue</h3><p>队列Queue代表了一个先进先出的对象集合，当需要对各项进行先进先出的访问时，则使用队列。当在列表中添加一项，称为入队，当从列表中移除一项，称为出队。</p><p>下表为Queue类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Count</td><td>获取Queue中包含的元素个数</td></tr></tbody></table><p>下表为Stack类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public virtual void Clear();</td><td>从Queue中移除所有的元素</td><td>public virtual bool Contains(object obj);</td><td>判断某个元素是否在Queue中</td></tr><tr><td>public virtual object Dequeue();</td><td>移除并返回在Queue的开头的对象</td><td>public virtual void Enqueue(object obj);</td><td>向Queue的末尾添加一个对象</td></tr><tr><td>public virtual object[] ToArray();</td><td>复制Queue到一个新的数组中</td><td>public virtual void TrimToSize();</td><td>设置容量为Queue中元素的实际个数</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">QueueTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Queue</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> q<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// A B C D</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token char">'F'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> q<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// A B C D E F</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> c <span class="token keyword">in</span> q<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">// C D E F</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-点阵列BitArray">7.6 点阵列BitArray</h3><p>点阵列BitArray类管理一个紧凑型的位值数组，它是由布尔值来表示，其中true表示位是开启的，false表示位是关闭的，当你需要存储位，但是事先不知道位数时，则使用点阵列。可以使用整型索引从点阵列集合中访问各项，索引从零开始。</p><p>下表为BitArray类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Count</td><td>获取BitArray中包含的元素个数</td></tr><tr><td>IsReadyOnly</td><td>获取一个值，表示BitArray是否只读</td></tr><tr><td>Item</td><td>获取或设置BitArray中指定位置的位的值</td></tr><tr><td>Length</td><td>获取或设置BitArray中的元素个数</td></tr></tbody></table><p>下表为BitArray类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public BitArray And(BitArray value);</td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位与操作</td><td>public bool Get(int index);</td><td>获取BitArray中指定位置的位的值</td></tr><tr><td>public BitArray Not();</td><td>把当前BitArray中的位值反转，以便设置为true的元素为false，设置为false的元素为true</td><td>public BitArray Or(BitArray value);</td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位或操作</td></tr><tr><td>public void Set(int index, bool value);</td><td>把BitArray中指定位置的位设置为指定的值</td><td>public void SetAll(bool value);</td><td>把BitArray中所有位设置为指定的值</td></tr><tr><td>public BitArray Xor(BitArray value);</td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位异或操作</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BitArrayTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">BitArray</span> ba1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BitArray</span> ba2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            ba1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            ba2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"BitArray ba1: 60"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ba1<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0, -6}"</span><span class="token punctuation">,</span> ba1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// False False True True True True False False</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"BitArray ba2: 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ba2<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0, -6}"</span><span class="token punctuation">,</span> ba2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// True False True True False False False False</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">BitArray</span> ba3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ba3 <span class="token operator">=</span> ba1<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>ba2<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"BitArray ba3 After And Operation: 12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ba3<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0, -6}"</span><span class="token punctuation">,</span> ba3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// False False True True False False False False</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-泛型">8. 泛型</h2><p>泛型Generic通过数据类型的代替参数编写类或方法，允许编写一个可以与任何类型一起工作的方法或类。当编译器遇到类的构造函数或方法的函数调用时，它会生成代码来处理指定的数据类型。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGenericArray<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> array<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyGenericArray</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span><span class="token punctuation">[</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token function">GetItem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetItem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">GenericTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 声明一个整型数组</span>            <span class="token class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                intArray<span class="token punctuation">.</span><span class="token function">SetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>intArray<span class="token punctuation">.</span><span class="token function">GetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 0 1 4 9 16</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 声明一个字符数组</span>            <span class="token class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> charArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyGenericArray<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                charArray<span class="token punctuation">.</span><span class="token function">SetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>charArray<span class="token punctuation">.</span><span class="token function">GetItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a b c d e</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-特性">8.1 特性</h3><p>使用泛型是一种增强程序功能的技术，具体表现在以下几个方面：</p><ul><li>有助于最大限度地重用代码、保护类型的安全以及提高性能</li><li>可以创建泛型集合类，使用泛型集合类来代替System.Collections中的集合类</li><li>可以创建自己的泛型接口、泛型类、泛型方法、泛型事件、泛型委托。</li><li>对泛型类进行约束以访问特定数据类型的方法</li><li>关于泛型数据类型中使用的类型的信息可运行时通过使用反射获取</li></ul><h3 id="8-2-泛型方法">8.2 泛型方法</h3><p>可以通过类型参数声明泛型方法</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">GenericTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Swap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">T</span> l<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name">T</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">T</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">=</span> l<span class="token punctuation">;</span>            l <span class="token operator">=</span> r<span class="token punctuation">;</span>            r <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token char">'M'</span><span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token char">'N'</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}, c = {2}, d = {3}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 10, b = 20, c = M, d = N</span>            <span class="token generic-method"><span class="token function">Swap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">ref</span> a<span class="token punctuation">,</span> <span class="token keyword">ref</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token generic-method"><span class="token function">Swap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Char<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">ref</span> c<span class="token punctuation">,</span> <span class="token keyword">ref</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}, c = {2}, d = {3}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 20, b = 10, c = N, d = M</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-泛型委托">8.3 泛型委托</h3><p>可以通过类型参数定义泛型委托，如<code>delegate T NumberChange&lt;T&gt;(T n);</code></p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">delegate</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">NumberChanger</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">GenericTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MultNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> nc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> nc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>MultNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">nc1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// num = 15</span>            <span class="token function">nc2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// num = 75</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-泛型约束">8.4 泛型约束</h3><p>在声明泛型方法或泛型类时，可以给泛型加上一定的约束来满足特定的一些条件</p><p>如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helper<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型限定条件：</p><ul><li>T : 结构 （类型参数必须是值类型，可以指定出Nullable以外的任何值类型）</li><li>T : 类 （类型参数必须是引用类型，包括任何类、接口、委托或数组类型）</li><li>T : new()  （类型参数必须具有无参数的公共构造函数，当与其他约束一起使用new()约束必须最后指定）</li><li>T : &lt;基类名&gt;  （类型参数必须是指定的基类或派生自指定的基类）</li><li>T : &lt;接口名称&gt;  （类型参数必须是指定的接口或实现指定的接口，可以指定多个接口约束。约束接口也可以是泛型的。</li></ul><h2 id="9-匿名方法">9. 匿名方法</h2><p>匿名方法Anonymous methods提供了一种传递代码块作为委托参数的技术，匿名方法是没有名称只有主体的方法。在匿名方法中不需要指定返回类型，它是从方法主体内的return语句推断的。</p><h3 id="9-1-匿名方法的语法">9.1 匿名方法的语法</h3><p>匿名方法是通过使用delegate关键字创建的委托实例来声明的。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">NumberChanger</span> nc <span class="token operator">=</span> <span class="token keyword">delegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Anonymous methods: {0}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 匿名方法的主体</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>委托可以通过匿名函数调用，也可以通过普通有名称的函数调用，只需要向委托对象中传递相应的方法参数即可。注：匿名函数主体后面要以<code>;</code>结尾。</p><p>示例如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AnonymousTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NumberChanger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 命名函数</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">+=</span> p<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"命名函数：{0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MultNum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">*=</span> q<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"命名函数：{0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">NumberChanger</span> nc <span class="token operator">=</span> <span class="token keyword">delegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"匿名函数：{0}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// 使用匿名函数调用委托</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 匿名函数：10</span>            <span class="token comment">// 使用命名函数实例化委托</span>            nc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>AddNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 命名函数：15</span>            nc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberChanger</span><span class="token punctuation">(</span>MultNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">nc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 命名函数：75</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-不安全代码">10. 不安全代码</h2><p>为了保持类型的安全性，默认情况下C#是不支持指针的，但是如果使用<code>unsafe</code>关键字来修饰类或类中的成员，则会被视为不安全代码。C#允许不安全代码中使用指针变量。</p><p>在公共语言运行中，不安全代码是指无法验证的代码，需要程序员来保证代码的安全性，不安全代码并不意味着一定是危险的。</p><h3 id="10-1-指针变量">10.1 指针变量</h3><p>指针也是变量，但是它的值是另一个变量的内存地址，在使用指针前需要先声明指针。</p><table><thead><tr><th>示例</th><th>说明</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>int* p</td><td>p是指向整数的指针</td><td>double* p</td><td>p是指向双精度数的指针</td></tr><tr><td>float* p</td><td>p是指向浮点数的指针</td><td>int** p</td><td>p是指向整数的指针的指针</td></tr><tr><td>int*[] p</td><td>p是指向整数的指针的一维数组</td><td>char* p</td><td>p是指向字符的指针</td></tr><tr><td>void* p</td><td>p是指向未知类型的指针</td><td></td><td></td></tr></tbody></table><p>与声明变量相同，我们同样可以在一行代码中同时声明多个指针，如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token operator">*</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">;</span>  <span class="token comment">// 同时定义p1、p2、p3三个整数指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：指针不能从对象中继承，并且装箱和拆箱也不支持指针，但是不同的指针类型以及指针与整型之间可以进行转换。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">unsafe</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> f <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>            <span class="token keyword">double</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>f<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"数据的内容是：{0}"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 字符串的内容是: 3.1415</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"数据在内存中的地址是：{0}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 字符串在内存中的地址是: 12569862</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在编译上述代码时需要在编译命令中添加<code>-unsafe</code>，例如<code>csc -unsafe pointerTest.cs</code></p><h3 id="10-2-使用指针检索数据的值">10.2 使用指针检索数据的值</h3><p>可以使用<code>ToString()</code>来获取指针变量所指向的数据的值，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">unsafe</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">var</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"变量var的值为：{0}"</span><span class="token punctuation">,</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 变量var的值为: 123456</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"指针p指向的值为：{0}"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指针p指向的值为: 123456</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"指针p的值为：{0}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指针p的值为: 15332624</span>                   <span class="token punctuation">}</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-将指针作为参数传递给函数">10.3 将指针作为参数传递给函数</h3><p>可以将指针变量作为参数传递给函数，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>            <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>            <span class="token operator">*</span>q <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">PointerTest</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> var1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> var2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token operator">*</span> x <span class="token operator">=</span> <span class="token operator">&amp;</span>var1<span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token operator">*</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span>var2<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用Swap函数前：var1 = {0}, var2 = {1}"</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用Swap函数前：var1 = 10, var2 = 20</span>            p<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用Swap函数后：var1 = {0}, var2 = {1}"</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用Swap函数后：var1 = 20, var2 = 10</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-使用指针访问数组元素">10.4 使用指针访问数组元素</h3><p>在C#中，数组和指向该数组且与数组名称相同的指针是不同的数据类型，例如<code>int* p</code>和<code>int[] p</code>就是不同的数据类型。可以增加指针p的值，因为它在内存中不是固定的，但数组地址在内存中是固定的，因此不能增加数组p的值，如果需要使用指针变量访问数组数据，则可以使用<code>fixed</code>关键字来固定指针。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PointerTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">fixed</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"List[{0}]的内存地址为：{1}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"List[{0}]的值为：{1}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token comment">// list[0] 的内存地址为：51981272</span>            <span class="token comment">// list[0] 的值为：10</span>            <span class="token comment">// list[1] 的内存地址为：51981276</span>            <span class="token comment">// list[1] 的值为：100</span>            <span class="token comment">// list[2] 的内存地址为：51981280</span>            <span class="token comment">// list[2] 的值为：200</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-正则表达式">11. 正则表达式</h2><p>正则表达式时一种匹配文本输入的模式。.Net框架提供了允许这种匹配的正则表达式引擎。模式由一个或多个字符、运算符和结构组成。</p><h3 id="11-1-定义正则表达式">11.1 定义正则表达式</h3><p>用于定义正则表达式的各种类型的字符、运算符和结构有：</p><ul><li>字符转义，正则表达式中的反斜杠<code>\</code>用来表示它后面跟随的字符时特殊字符，具有特殊的含义。如\a、\b、\t等</li><li>字符类，字符类可以与一个字符串中的任何一个字符相匹配。如\w、[character_group]、\p{name}等</li><li>定位符，可以根据字符串出现的具体位置来判断匹配是成功还是失败。如^、$、\A等</li><li>分组结构，描述了正则表达式的子表达式，并捕获输入字符串的子字符串。如（\w)\1、\w+(?=\.)、(?&lt;double&gt;\w)\k&lt;double&gt;等</li><li>限定符，用来指定在字符串中必须存在某个元素才能匹配成功。如*、+、？等</li><li>反向引用构造，允许先前匹配的子表达式随后在相同的正则表达式中进行标志。如\number、\k&lt;name&gt;</li><li>备用构造，用于修改正则表达式以启用either/or匹配。如|、(?(expresion) yes | no)、(?(name)yes | no)</li><li>替换，替换模式中使用的正则表达式，如$number、${name}、$&amp;等</li><li>杂项构造，如(?#注释)、#[行尾]、(?imnsx-imnsx)</li></ul><h3 id="11-2-Regex类">11.2 Regex类</h3><p>rege类用于使用一个正则表达式，下表列出来Regex类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public bool IsMatch( string input )</td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项</td><td>public bool IsMatch( string input, int startat )</td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项，从字符串中指定的位置开始查找</td></tr><tr><td>public static bool IsMatch( string input, string pattern )</td><td>指示指定的正则表达式是否在指定的输入字符串中找到匹配项</td><td>public MatchCollection Matches( string input )</td><td>在指定的输入字符串中搜索正则表达式的所有匹配项</td></tr><tr><td>public string Replace( string input, string replacement )</td><td>在指定的输入字符串中，把所有匹配正则表达式模式的所有匹配的字符串替换为指定的替换字符串</td><td>public string[] Split( string input )</td><td>把输入字符串分割为子字符串数组，根据在 Regex 构造函数中指定的正则表达式模式定义的位置进行分割</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>RegularExpressions</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">RegexTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowMatch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> expr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">MatchCollection</span> mc <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> expr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Match</span> m <span class="token keyword">in</span> mc<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">"make and then manage your maze"</span><span class="token punctuation">;</span>            <span class="token function">ShowMatch</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">@"\bm\S*e\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// make</span>            <span class="token comment">// manage</span>            <span class="token comment">// maze</span>                        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-多线程">12. 多线程</h2><p>多线程就是多个线程同时工作的过程，可将线程看做程序的执行路径，每个线程定义了一个独特的控制流，用来完成特定的任务。</p><p>多线程可以节省CPU资源，同时提高应用程序的执行效率。</p><h3 id="12-1-线程生命周期">12.1 线程生命周期</h3><p>线程声明周期开始于我们创建System.Theading.Thread类对象的时候，当线程被终止或完成执行时生命周期终止。</p><p>下面列出来线程生命周期中的各种状态：</p><ul><li>未启动状态：当线程实例被创建但Start方法未被调用时的状况；</li><li>就绪状态：当线程准备好运行并等待CPU周期时的状况；</li><li>不可运行状态：<ul><li>已经调用Sleep方法</li><li>已经调用Wait方法</li><li>通过I/O操作阻塞</li></ul></li><li>死亡状态：当线程已完成执行或已中止时的状况。</li></ul><h3 id="12-2-主线程">12.2 主线程</h3><p>在多线程中执行的第一个线程称为主线程，C#程序开始执行时，将自动创建主线程，使用Thread类创建的线程称为子线程，可以使用Thread类的CurrentThread属性访问线程。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Thread</span> th <span class="token operator">=</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">;</span>            th<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"主线程"</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这是{0}"</span><span class="token punctuation">,</span> th<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这是主线程</span>                        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-Thread类的常用属性和方法">12.3 Thread类的常用属性和方法</h3><p>下表为Thread类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>CurrentContext</td><td>获取线程正在其中执行的当前上下文</td><td>CurrentCulture</td><td>获取或设置当前线程的区域性</td></tr><tr><td>CurrentPrincipal</td><td>获取或设置线程的当前负责人</td><td>CurrentThread</td><td>获取当前正在运行的线程</td></tr><tr><td>CurrentUICulture</td><td>获取或设置资源管理器使用的当前区域性以便在运行时查找区域特定的资源</td><td>ExecutionContext</td><td>获取一个ExecutionContext对象，该对象包含有关当前线程的各种上下文信息</td></tr><tr><td>IsAlive</td><td>获取一个值，该值指示当前线程的执行状态</td><td>IsBackground</td><td>获取或设置一个值，该值指示某个线程是否为后台线程</td></tr><tr><td>IsThreadPoolThread</td><td>获取一个值，该值指示线程是否属于托管线程池</td><td>ManagedThreadId</td><td>获取当前托管线程的唯一标识符</td></tr><tr><td>Name</td><td>获取或设置线程的名称</td><td>Priority</td><td>获取或设置一个值，该值指示线程的调度优先级</td></tr><tr><td>ThreadState</td><td>获取一个值，该值包含当前线程的状态</td><td></td><td></td></tr></tbody></table><p>下表为Thread类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public void Abort()</td><td>在调用此方法的线程上引发ThreadAbortException，以开始终止此线程的过程。调用此方法通常会终止线程</td><td>public static LocalDataStoreSlot AllocateDataSlot()</td><td>在所有线程上分配未命名的数据槽</td></tr><tr><td>public static LocalDataStoreSlot AllocateNamedDataSlot( string name)</td><td>在所有线程上分配已命名的数据槽</td><td>public static void BeginCriticalRegion()</td><td>通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理的异常的影响可能会危害应用程序域中的其他任务</td></tr><tr><td>public static void BeginThreadAffinity()</td><td>通知主机托管代码将要执行依赖于当前物理操作系统线程的标识的指令</td><td>public static void EndCriticalRegion()</td><td>通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理的异常仅影响当前任务。</td></tr><tr><td>public static void EndThreadAffinity()</td><td>通知主机托管代码已执行完依赖于当前物理操作系统线程的标识的指令</td><td>public static void FreeNamedDataSlot(string name)</td><td>为进程中的所有线程消除名称与槽之间的关联</td></tr><tr><td>public static Object GetData( LocalDataStoreSlot slot )</td><td>在当前线程的当前域中从当前线程上指定的槽中检索值</td><td>public static AppDomain GetDomain()</td><td>返回当前线程正在其中运行的当前域</td></tr><tr><td>public static AppDomain GetDomainID()</td><td>返回唯一的应用程序域标识符</td><td>public static LocalDataStoreSlot GetNamedDataSlot( string name )</td><td>查找已命名的数据槽</td></tr><tr><td>public void Interrupt()</td><td>中断处于WaitSleep.Join线程状态的线程</td><td>public void Join()</td><td>在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止为止</td></tr><tr><td>public static void MemoryBarrier()</td><td>按如下方式同步内存存取：执行当前线程的处理器在对指令重新排序时，不能采用先执行 MemoryBarrier 调用之后的内存存取，再执行 MemoryBarrier 调用之前的内存存取的方式</td><td>public static void ResetAbort()</td><td>取消为当前线程请求的Abort</td></tr><tr><td>public static void SetData( LocalDataStoreSlot slot, Object data )</td><td>在当前正在运行的线程上为此线程的当前域在指定槽中设置数据</td><td>public void Start()</td><td>开始一个线程</td></tr><tr><td>public static void Sleep( int millisecondsTimeout )</td><td>让线程暂停一段时间</td><td>public static void SpinWait( int iterations )</td><td>导致线程等待由 iterations 参数定义的时间量</td></tr><tr><td>public static byte VolatileRead( ref byte address )<br>public static double VolatileRead( ref double address )<br>public static int VolatileRead( ref int address )<br>public static Object VolatileRead( ref Object address )</td><td>读取字段值。无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值</td><td>public static void VolatileWrite( ref byte address, byte value )<br>public static void VolatileWrite( ref double address, double value )<br>public static void VolatileWrite( ref int address, int value )<br>public static void VolatileWrite( ref Object address, Object value )</td><td>立即向字段写入一个值，以使该值对计算机中的所有处理器都可见</td></tr><tr><td>public static bool Yield()</td><td>导致调用线程执行准备好在当前处理器上运行的另一个线程。由操作系统选择要执行的线程</td><td></td><td></td></tr></tbody></table><h3 id="12-4-创建线程">12.4 创建线程</h3><p>线程是通过扩展Thread类创建的，扩展的Thread类调用Start()方法来开始子线程的执行。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallToChildThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread starts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ThreadStart</span> childref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>CallToChildThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>childref<span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Child thread starts</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-5-管理线程">12.5 管理线程</h3><p>Thread类提供了各种管理线程的方法，下面演示了Sleep()方法的使用，用于在一个特定的时间暂停线程。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallToChildThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread starts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> sleepTime <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread paused for {0} seconds"</span><span class="token punctuation">,</span> sleepTime <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread resumes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ThreadStart</span> childref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>CallToChildThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>childref<span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Child thread starts</span>            <span class="token comment">// Child thread pasued for 5 seconds</span>            <span class="token comment">// Child thread resumes</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-6-销毁线程">12.6 销毁线程</h3><p>Abort()方法用于销毁进行，通过抛出ThreadAbortException在运行时中止线程。这个异常不能被捕获，如果有finally块，控制会被送至finally块。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallToChildThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token keyword">try</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread starts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> counter <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> counter<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child thread resumes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThreadAbortException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Thread Abort Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Couldn't catch the Thread Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ThreadStart</span> childref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadStart</span><span class="token punctuation">(</span>CallToChildThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span>childref<span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            childThread<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Child thread starts</span>            <span class="token comment">// 0</span>            <span class="token comment">// 1</span>            <span class="token comment">// 2</span>            <span class="token comment">// Thread Abort Exception</span>            <span class="token comment">// Couldn't catch the Thread Exception</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章">参考文章</h2><p>本文是笔者通过下列网站教程学习C#语言进阶的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/csharp/csharp-tutorial.html">【菜鸟教程C#教程】</a></p><p>2.<a href="http://c.biancheng.net/csharp/">【C语言中文网C#教程】</a></p><p>3.<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">【微软C#官方文档】</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#进阶 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语言基础学习笔记</title>
      <link href="/posts/6569.html"/>
      <url>/posts/6569.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-环境准备">0. 环境准备</h2><h3 id="0-1-简介">0.1 简介</h3><p><strong>C#<strong>又称”<strong>C Sharp</strong>“，是微软发布和维护的一个</strong>现代的</strong>、<strong>通用的</strong>、<strong>面向对象</strong>的编程语言，是专为公共语言基础结构（CLI，由可执行代码合运行时环境组成，允许在不同的计算机平台和体系结构上使用各种高级语言）设计的。</p><p>C#的优点：</p><ul><li>现代的、通用的编程语言</li><li>面向对象</li><li>类型安全</li><li>容易学习</li><li>面向组件</li><li>结构化语言</li><li>产生高效率的程序</li><li>可以在多种计算机平台上编译</li><li>.Net框架的一部分</li></ul><p>C#运行在**.Net Framework**上，可以用于开发不同类型的应用程序：</p><ul><li>桌面应用程序</li><li>网络应用程序</li><li>分布式应用程序</li><li>Web服务应用程序</li><li>数据库应用程序</li><li>Unity3D游戏程序</li></ul><p><strong>.Net Framework</strong>是一个平台，它提供了一个跨语言的统一编程环境，而C#则是一种在**.Net Framework**平台上使用的编程语言。</p><h3 id="0-2-推荐IDE">0.2 推荐IDE</h3><ul><li><p><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio</a></p></li><li><p><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio Code</a></p></li><li><p><a href="https://www.codingrooms.com/compiler/csharp">在线IDE</a></p></li></ul><h3 id="0-3-基本语法">0.3 基本语法</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 这是单行注释</span><span class="token comment">/*这是多行注释这是多行注释*/</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span>     <span class="token punctuation">{</span>        <span class="token comment">// 成员变量</span>        <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>  <span class="token comment">// 长</span>        <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>  <span class="token comment">// 宽</span>              <span class="token comment">// 成员函数</span>        <span class="token comment">// 设置长和宽</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Acceptdetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token number">4.5</span><span class="token punctuation">;</span>              width <span class="token operator">=</span> <span class="token number">3.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 计算面积</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 显示输出</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Length: {0}"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 4.5</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Width: {0}"</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 3.5</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Area: {0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 15.75</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>     <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">Acceptdetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-数据类型">1. 数据类型</h2><p>C#语言的类型主要分为：<strong>值类型</strong>和<strong>引用类型</strong>，值类型的变量直接包含数据，而引用类型的变量存储数据的引用地址。</p><p>对于引用类型，两个变量可以引用同一对象，因此，对一个变量执行的运算可能会影响另一个变量所引用的对象。引用类型在<strong>托管堆</strong>分配空间。</p><p>对于值类型，每个变量都有自己的数据副本，对一个变量执行的操作不可能影响另一个。值类型在<strong>线程栈</strong>分配空间。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 引入命名空间</span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token comment">// 引用类型</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeRef</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 值类型</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">SomeVal</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">ValueTypeTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">SomeRef</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SomeRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在堆上分配</span>            <span class="token class-name">SomeVal</span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SomeVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在栈上分配</span>            r1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 提领指针</span>            v1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 在栈上修改</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>                        <span class="token class-name">SomeRef</span> r2 <span class="token operator">=</span> r1<span class="token punctuation">;</span>  <span class="token comment">// 只复制引用</span>            <span class="token class-name">SomeVal</span> v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token comment">// 在栈上分配并赋值成员</span>            r1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">// r1.x和r2.x都会修改</span>            v1<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">// v1.x会修改，v2.x不会</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>                        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-值类型">1.1 值类型</h3><p>值类型包含<strong>简单类型</strong>、<strong>结构类型</strong>和<strong>枚举类型</strong>。</p><ul><li>简单类型<ul><li>有符号整型：sbyte、short、int、long</li><li>无符号整型：byte、ushort、unit、ulong</li><li>Unicode字符：char</li><li>IEEE浮点型：float、doule</li><li>高精度小数：decimal</li><li>布尔型：bool</li></ul></li><li>结构类型<ul><li>用户自定义类型struct</li></ul></li><li>枚举类型<ul><li>用户自定义类型enum</li></ul></li></ul><h3 id="1-2-引用类型">1.2 引用类型</h3><p>引用类型包含<strong>类类型</strong>、<strong>接口类型</strong>、<strong>数组类型</strong>和<strong>委托类型</strong>。</p><ul><li>类类型<ul><li>所有其他类型的最终基类：object</li><li>Unicode字符串：string</li><li>用户自定义类型：class</li></ul></li><li>接口类型<ul><li>用户自定义类型：interface</li></ul></li><li>数组类型<ul><li>单维与多维数组：如int[]、int[,]</li></ul></li><li>委托类型<ul><li>用户自定义类型：delegate</li></ul></li></ul><h3 id="1-3-指针类型">1.3 指针类型</h3><p>仅在不安全代码中提供，使用<code>unsafe</code>关键词，开启不安全代码开发模式后，代码可以使用指针、分配和释放内存块，以及使用函数指针调用方法。<code>unsafe</code>代码的安全需要开发人员自行检测。</p><p>可以定义为指针的类型有</p><ul><li>sbyte、byte、short、unshort、int、uint、long、ulong、char、float、double、decimal、bool</li><li>任何枚举类型</li><li>任何指针类型</li><li>仅包含非托管类型的字段的任何用户定义的结构类型</li></ul><p><strong>装箱和拆箱</strong>操作不支持指针，但是可在不同的指针类型之间以及指针类型与整型之间进行转换。指针不能指向引用或包含引用的结构，因为无法对对象引用进行垃圾回收。</p><p>指针类型声明示例：</p><ul><li><code>int* p</code>: p是指向整数的指针</li><li><code>int** p</code>: p是指向整数的指针的指针</li><li><code>int*[] p</code>: p是指向整数的指针的一维数组</li><li><code>char* p</code>: p是指向字符的指针</li><li><code>void* p</code>: p是指向未知类型的指针</li></ul><p>对指针执行的运算符和语句</p><table><thead><tr><th>运算符/语句</th><th>使用</th><th>运算符/语句</th><th>使用</th></tr></thead><tbody><tr><td><code>*</code></td><td>执行指针间接寻址</td><td><code>-&gt;</code></td><td>通过指针访问结构的成员</td></tr><tr><td><code>[]</code></td><td>为指针建立索引</td><td><code>&amp;</code></td><td>获取变量的地址</td></tr><tr><td><code>++</code>和<code>--</code></td><td>递增和递减指针</td><td><code>+</code>和<code>-</code></td><td>执行指针算法</td></tr><tr><td><code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>和<code>&gt;=</code></td><td>比较指针</td><td><strong>stackalloc</strong></td><td>在堆栈上分配内存</td></tr><tr><td><strong>fixed</strong>语句</td><td>临时固定变量以便找到其地址</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">UnsafeTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">unsafe</span> <span class="token comment">// 开启不安全代码模式</span>            <span class="token punctuation">{</span>                <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 设置指向托管变量的指针，在执行该语句期间固定此变量</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> p<span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>                    p2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针向后移</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span>                    p2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针向后移</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 30</span>                                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>                    <span class="token operator">*</span>p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针所指向的值加1</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 11</span>                    <span class="token operator">*</span>p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针所指向的值加1</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-装箱与拆箱">1.4 装箱与拆箱</h3><p><strong>值类型转换为引用类型称为装箱</strong>，<strong>引用类型转为值类型称为拆箱</strong>。注：只有被装过箱的对象才能拆箱。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BoxingAndUnBoxingTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token comment">// 装箱操作</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"obj = {0}"</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// obj = 100</span>                        <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>  <span class="token comment">// 拆箱操作</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// num = 100</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-类型转换">1.5 类型转换</h3><p>类型转换是把数据从一种类型转换为另一种类型，C#中类型转换有两种形式：</p><ul><li><strong>隐式类型转换</strong>：是C#默认的以安全的方式进行的转换，不会导致数据丢失，例如从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li><strong>显式类型转换</strong>-：即强制类型转换，需要强制转换运算符，而且强制转换会造成数据丢失。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ForceTypeConversionTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> d <span class="token operator">=</span> <span class="token number">5673.74</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">;</span>                        i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> d<span class="token punctuation">;</span>  <span class="token comment">// double强制转换为int</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5673</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表为C#内置的一些类型转换方法</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ToBoolean</code></td><td>转换为布尔型</td><td><code>ToByte</code></td><td>转换为字节类型</td></tr><tr><td><code>ToChar</code></td><td>转换为单个Unicode字符类型</td><td><code>ToDateTime</code></td><td>把整数或字符串类型转换为日期-时间结构</td></tr><tr><td><code>ToDecimal</code></td><td>把浮点型或整数型转换为十进制类型</td><td><code>ToDouble</code></td><td>转换为双精度浮点型</td></tr><tr><td><code>ToInt16</code></td><td>转换为16位整数类型</td><td><code>ToInt32</code></td><td>转换为32位整数类型</td></tr><tr><td><code>ToInt64</code></td><td>转换为64位整数类型</td><td><code>ToSbyte</code></td><td>转换为有符号字节类型</td></tr><tr><td><code>ToString</code></td><td>转换为字符串类型</td><td><code>ToType</code></td><td>转换为指定类型</td></tr><tr><td><code>ToUInt16</code></td><td>转换为16位无符号整数类型</td><td><code>ToUInt32</code></td><td>转换为32位无符号整数类型</td></tr><tr><td><code>ToUInt64</code></td><td>转换为64位无符号整数类型</td><td><code>ToSingle</code></td><td>转换为小浮点数类型</td></tr></tbody></table><p>如把不同值的类型转换为字符串类型</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StringConversionTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">float</span></span> b <span class="token operator">=</span> <span class="token number">8.005f</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> c <span class="token operator">=</span> <span class="token number">2345.6789</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> d <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// 转换为字符串类型</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2022</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8.005</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2345.6789</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// False</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-变量">2. 变量</h2><p>变量是一种通过变量名表示某个内存区域的方法，变量的值可以更改并重复使用。</p><p>C#中基础变量类型可以归纳为以下几种：</p><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>整型</td><td>sbyte、byte、short、ushort、int、unit、long、ulong、char</td></tr><tr><td>浮点型</td><td>float、doule</td></tr><tr><td>十进制类型</td><td>decimal</td></tr><tr><td>布尔型</td><td>true、false</td></tr><tr><td>空类型</td><td>可为空值的数据类型</td></tr></tbody></table><h3 id="2-1-声明">2.1 声明</h3><p>声明变量的语法格式为<code>&lt;data_type&gt; variable_list;</code></p><p>如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">char</span></span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">bool</span></span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>变量名需要遵循的规则：</p><ul><li>变量名中只可以包含英文字母<code>a-z</code>,<code>A-Z</code>、数字<code>0-9</code>和下划线<code>_</code></li><li>不能以数字开头</li><li>变量名不能是任何C#的保留字或关键字</li></ul><h3 id="2-2-初始化">2.2 初始化</h3><p>可以在声明时直接初始化，也可以在声明后另起一行进行初始化，如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">VariableTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">short</span></span> a<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">float</span></span> b<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">5.5</span><span class="token punctuation">;</span>            <span class="token comment">// 初始化变量</span>            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">20.1f</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}, c = {2}, d = {3}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 10, b = 20.1, c = 30.1000003814697, d = 5.5</span>                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 接受用户输入的值</span>            <span class="token class-name"><span class="token keyword">int</span></span> f <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出你所输入数字</span>                            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-常量">3. 常量</h2><p><strong>常量是固定值</strong>，使用关键字<code>const</code>定义，在程序执行期间不允许修改，常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量、字符串常量、枚举常量。</p><h3 id="3-1-定义">3.1 定义</h3><p>声明常量的语法格式为<code>const &lt;data_type&gt; constant_name = value;</code>，常量在声明的同时需要赋值。</p><h3 id="3-2-使用">3.2 使用</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ConstantConversionTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">double</span></span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"半径为：{0}，圆的面积为：{1}"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 半径为：3，圆的面积为：28.26</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-运算符">4. 运算符</h2><p>运算符是一个用来告诉编辑器执行特定数字或逻辑运算的符号。</p><h3 id="4-1-算术运算符">4.1 算术运算符</h3><p>完成特定算术运算的符号：</p><table><thead><tr><th>算术运算符</th><th>描述</th><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>%</code></td><td>取余</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>++</code></td><td>自增</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>--</code></td><td>自减</td></tr><tr><td><code>/</code></td><td>除法</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArithmeticOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>               <span class="token class-name"><span class="token keyword">int</span></span> c<span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a + b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a + b = 30</span>            c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a - b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a - b = -10</span>            c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a * b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a * b = 200</span>            c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a / b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a / b = 0</span>            c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a % b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a % b = 10</span>            c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, a = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 11, a = 11</span>            c <span class="token operator">=</span> <span class="token operator">--</span>a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, a = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 10, a = 10</span>            c <span class="token operator">=</span> b<span class="token operator">++</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, b = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 20, b = 21</span>            c <span class="token operator">=</span> b<span class="token operator">--</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}, b = {1}"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21, b = 20</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-关系运算符">4.2 关系运算符</h3><p>比较运算符左右两边操作数的符号，结果为true或false</p><table><thead><tr><th>关系运算符</th><th>描述</th><th>关系运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>==</code></td><td>检查是否相等</td><td><code>!=</code></td><td>检查是否不等</td></tr><tr><td><code>&gt;</code></td><td>检查左操作数是否大于右操作数</td><td><code>&lt;</code></td><td>检查左操作数是否小于右操作数</td></tr><tr><td><code>&gt;=</code></td><td>检查左操作数是否大于等于右操作数</td><td><code>&lt;=</code></td><td>检查左操作数是否小于等于右操作数</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">RelationalOperatorTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a不等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a不等于b</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于b</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a不小于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a不大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a不大于b</span>            <span class="token punctuation">}</span>            a <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于或等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于或等于b</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> a<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"b大于或等于a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// b大于或等于a</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-逻辑运算符">4.3 逻辑运算符</h3><p>进行逻辑运算的符号，结果为<strong>true</strong>或<strong>false</strong>。</p><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑与，两个操作数都为true，结果才为true</td></tr><tr><td><code>||</code></td><td>逻辑或，两个操作数有一个为true，结果就为true</td></tr><tr><td><code>!</code></td><td>逻辑非，操作数为true，结果为false，操作数为false，结果为true</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">LogicalOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">bool</span></span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 条件为真</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 条件为真</span>            <span class="token punctuation">}</span>            a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"条件为假"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 条件为假</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"条件为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 条件为真  </span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-位运算符">4.4 位运算符</h3><table><thead><tr><th>位运算符</th><th>描述</th><th>位运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>按位与，均为1时，结果才为1</td><td>`</td><td>`</td></tr><tr><td><code>^</code></td><td>按位异或，两个位数值不同时，结果才为1</td><td><code>~</code></td><td>按位取反，9变为1,1变为0</td></tr><tr><td><code>&lt;&lt;</code></td><td>二进制左移指定位数</td><td><code>&gt;&gt;</code></td><td>二进制右移指定位数</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BitwiseOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a &amp; b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a &amp; b = 12</span>            c <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a | b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a | b = 61</span>            c <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a ^ b = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a ^ b = 49</span>            c <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"~a = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ~a = -61</span>            c <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a &lt;&lt; 2 = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a &lt;&lt; 2 = 240</span>            c <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a &gt;&gt; 2 = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a &gt;&gt; 2 = 15</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-赋值运算符">4.5 赋值运算符</h3><table><thead><tr><th>赋值运算符</th><th>描述</th><th>赋值运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>右边赋值给左边</td><td><code>+=</code></td><td>左边+右边赋值给左边</td></tr><tr><td><code>-=</code></td><td>左边-右边赋值给左边</td><td><code>*=</code></td><td>左边*右边赋值给左边</td></tr><tr><td><code>/=</code></td><td>左边/右边赋值给左边</td><td><code>%=</code></td><td>左边%右边赋值给左边</td></tr><tr><td><code>&lt;&lt;=</code></td><td>左移且赋值给左边</td><td><code>&gt;&gt;=</code></td><td>右移且赋值给左边</td></tr><tr><td><code>&amp;=</code></td><td>按位与且赋值给左边</td><td><code>^=</code></td><td>按位异或且赋值给左边</td></tr><tr><td><code>|=</code></td><td>按位或且赋值给左边</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AssignmentOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> c<span class="token punctuation">;</span>            c <span class="token operator">=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21</span>            c <span class="token operator">+=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 42</span>            c <span class="token operator">-=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21</span>            c <span class="token operator">*=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 441</span>            c <span class="token operator">/=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 21</span>            c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            c <span class="token operator">%=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 11</span>            c <span class="token operator">&lt;&lt;=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 44</span>            c <span class="token operator">&gt;&gt;=</span> a<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 11</span>            c <span class="token operator">&amp;=</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 2</span>            c <span class="token operator">^=</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 0</span>            c <span class="token operator">|=</span> <span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"c = {0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// c = 2</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-其他运算符">4.6 其他运算符</h3><table><thead><tr><th>其他运算符</th><th>描述</th><th>其他运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>sizeof()</code></td><td>返回数据类型的大小</td><td><code>typeof()</code></td><td>返回class的类型</td></tr><tr><td><code>&amp;</code></td><td>返回变量的地址</td><td><code>*</code></td><td>变量的指针</td></tr><tr><td><code>is</code></td><td>判断对象是否为某一类型</td><td><code>as</code></td><td>强制转换，即使失败也不抛异常</td></tr><tr><td><code>?:</code></td><td>三元运算符</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AssignmentOperatorsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"int的大小是{0}"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int的大小是4</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"short的大小是{0}"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">short</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// short的大小是2</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"double的大小是{0}"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">double</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// double的大小是8</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token number">20</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"b的值是{0}"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// b的值是30</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-条件控制">5. 条件控制</h2><h3 id="5-1-if语句">5.1 if语句</h3><p>由一个布尔表达式后跟一个或多个语句组成。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IfStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token comment">// 使用if语句检查布尔条件，如果为真则进入if语句内</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a大于10</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 20</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-if…else语句">5.2 if…else语句</h3><p>一个<code>if</code>语句后跟一个可选的else语句，<code>else</code>语句在布尔表达式为<strong>false</strong>时执行。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IfElseStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token comment">// 使用if语句检查布尔条件，如果为真则进入if语句内，否则进入else语句内</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于或等于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于或等于10</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 5</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-if…else-if…else语句">5.3 if…else if…else语句</h3><p>一个<code>if</code>语句后可跟一个可选的<code>else if ... else</code>语句，用于测试多个条件：</p><ul><li>一个<code>if</code>后可跟零个或一个<code>else</code>，它必须在所有的<code>else if</code>之后</li><li>一个<code>if</code>后可跟两个或多个<code>else if</code>，它们必须在<code>else</code>之前</li><li>一旦某个<code>else if</code>匹配成功，其他<code>else if</code>或<code>else</code>将不会被测试</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">IfElseIFElseStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a等于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a大于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a小于10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a小于10</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 5</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-嵌套if语句">5.4 嵌套if语句</h3><p>嵌套<code>if</code>语句意味着你可以在一个<code>if</code>或<code>else if</code>语句内使用另一个<code>if</code>或<code>else if</code>语句。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NestedIfStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = 100, b = 200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 100, b = 200</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-switch语句">5.5 switch语句</h3><p>一个<code>switch</code>语句允许测试一个变量等于多个值时的情况。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">SwitchStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> day <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Monday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Wednesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Thurday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Friday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Friday</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Saturday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Sunday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-嵌套switch语句">5.6 嵌套switch语句</h3><p>可以在一个<code>switch</code>语句内使用另一个<code>switch</code>语句。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NestedSwitchStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">100</span><span class="token punctuation">:</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 100</span>                    <span class="token keyword">switch</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">case</span> <span class="token number">200</span><span class="token punctuation">:</span>                            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"b = 200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// b = 200</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-条件运算符">5.7 ?条件运算符</h3><p>条件运算符又称三元运算符，可以用来代替<code>if...else</code>语句，形式如<code>Exp1 ? Exp2 : Exp3;</code>。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">TernaryOperatorTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> a <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span>            <span class="token comment">/* 等价于            int b;            if (a == 200)            {                b = 100;            }            else            {                b = 300;            }            */</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a = 100, b = 300</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-循环控制">6. 循环控制</h2><p>循环语句允许多次执行一个语句或语句组。</p><h3 id="6-1-while循环">6.1 while循环</h3><p>只要给定条件为真，<code>while</code>循环语句会重复执行一个目标语句，<code>while</code>循环又称为<strong>当型循环</strong>，在执行循环主体之前测试条件。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">WhileStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-for-foreach循环">6.2 for/foreach循环</h3><p><strong>for</strong></p><p><code>for</code>循环允许编写一个执行特定次数的循环的重复控制结构。</p><p>语法为：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">init</span><span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ForStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>foreach</strong></p><p><code>foreach</code>可以迭代数组或者一个集合对象。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ForeachStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num <span class="token keyword">in</span> array<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num = {0}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// num = 3</span>            <span class="token comment">// num = 4</span>            <span class="token comment">// num = 5</span>            <span class="token comment">// num = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-do…while循环">6.3 do…while循环</h3><p><code>do...while</code>循环是在尾部检查循环条件，直到给定的条件变为假为止。<code>do...while</code>又称<strong>直到型循环</strong>，会保证循环体至少执行一次。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DoWhileStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-嵌套循环">6.4 嵌套循环</h3><p><code>C#</code>允许在任何类型循环内嵌套任何类型的循环。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NestedLoopStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} * {1} = {2}\t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*1 * 1 = 11 * 2 = 2       2 * 2 = 41 * 3 = 3       2 * 3 = 6       3 * 3 = 91 * 4 = 4       2 * 4 = 8       3 * 4 = 12      4 * 4 = 161 * 5 = 5       2 * 5 = 10      3 * 5 = 15      4 * 5 = 20      5 * 5 = 251 * 6 = 6       2 * 6 = 12      3 * 6 = 18      4 * 6 = 24      5 * 6 = 30      6 * 6 = 361 * 7 = 7       2 * 7 = 14      3 * 7 = 21      4 * 7 = 28      5 * 7 = 35      6 * 7 = 42      7 * 7 = 491 * 8 = 8       2 * 8 = 16      3 * 8 = 24      4 * 8 = 32      5 * 8 = 40      6 * 8 = 48      7 * 8 = 56      8 * 8 = 641 * 9 = 9       2 * 9 = 18      3 * 9 = 27      4 * 9 = 36      5 * 9 = 45      6 * 9 = 54      7 * 9 = 63      8 * 9 = 72     9 * 9 = 81*/</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-break语句">6.5 break语句</h3><p><code>break</code>语句有两种用法：</p><ul><li>当<code>break</code>语句出现在一个循环内时，循环会立即终止，跳出循环体，执行下一条语句</li><li>可用于<code>switch</code>语句中终止一个<code>case</code></li></ul><p>注意，如果是嵌套循环，<code>break</code>循环只会跳出他所在的那一层循环。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">BreakStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 4</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-continue语句">6.6 continue语句</h3><p><code>continue</code>语句会跳出当前循环中的代码，开始下一次循环。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ContinueStatementTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    a<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// a = 3</span>            <span class="token comment">// a = 5</span>            <span class="token comment">// a = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-数组">7. 数组</h2><p>数组是存储<strong>相同类型</strong>元素的固定大小的<strong>顺序</strong>集合，数组中某个指定元素是通过索引来访问的，所有的数组是有连续的内存位置组成，最低的地址对应第一个元素，最高的地址对应最后一个元素。</p><h3 id="7-1-声明">7.1 声明</h3><p>声明语法为<code>datatype[] arrayName;</code>，其中datatype用于指定数组内元素的类型，[]指定数组的大小，arrayName指定数组的名字，如<code>double[] balance;</code>。</p><h3 id="7-2-初始化">7.2 初始化</h3><p>声明一个数组不会在内存中初始化数组，当初始化数组遍历时，可以赋值给数组。</p><p>数组是一个引用类型，所有需要使用<code>new</code>关键字来创建数组的实例，如<code>double[] balance = new double[10];</code>。</p><h3 id="7-3-赋值">7.3 赋值</h3><p>赋值有多种形式，可以通过索引号赋值给单个的数组元素，如<code>balance[0] = 123.0;</code>。</p><p>也可以在声明的同时给数组赋值，如<code>double[] balance = {123.0, 456.0, 789.0};</code>。</p><p>还可以创建并初始化一个数组，如<code>int[] marks = new int[3]{1, 2, 3};</code>，此处可以省略数组的大小，即<code>int[] marks = new int[]{1, 2, 3};。</code></p><p>可以赋值给一个数组变量到另一个目标数组变量中，此时目标和源会指向相同的内存位置。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> marks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> marks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-4-访问数组元素">7.4 访问数组元素</h3><p>元素是通过带索引的数组名称来访问的，如<code>int a = numbers[1];</code>。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayTest1</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化</span>            <span class="token comment">// 循环赋值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 循环访问、遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0}] = {1}"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0] = 100</span>            <span class="token comment">// num[1] = 101</span>            <span class="token comment">// num[2] = 102</span>            <span class="token comment">// num[3] = 103</span>            <span class="token comment">// num[4] = 104</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了使用<code>for</code>循环来访问数组中每个元素，还可以使用<code>foreach</code>语句</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayTest2</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化</span>            <span class="token comment">// 循环赋值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 遍历</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token keyword">in</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0}] = {1}"</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0] = 100</span>            <span class="token comment">// num[1] = 101</span>            <span class="token comment">// num[2] = 102</span>            <span class="token comment">// num[3] = 103</span>            <span class="token comment">// num[4] = 104</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-多维数组">7.5 多维数组</h3><p>C#支持多维数组，多维数组又称为矩形数组，二维数组是最简单最常用的多维数组，可以被认为是一个带有x行和y列的表格。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">toDArrayTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 声明初始化并赋值</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0},{1}] = {2}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0,0] = 1</span>            <span class="token comment">// num[0,1] = 2</span>            <span class="token comment">// num[1,0] = 3</span>            <span class="token comment">// num[1,1] = 4</span>            <span class="token comment">// num[2,0] = 5</span>            <span class="token comment">// num[2,1] = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-交替数组">7.6 交替数组</h3><p>交替数组是数组的数组，是一维数组。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">AlternatingArrayTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 声明初始化并赋值</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"num[{0}][{1}] = {2}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">j</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// num[0][0] = 1</span>            <span class="token comment">// num[0][1] = 2</span>            <span class="token comment">// num[1][0] = 3</span>            <span class="token comment">// num[1][1] = 4</span>            <span class="token comment">// num[2][0] = 5</span>            <span class="token comment">// num[2][1] = 6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-传递数组给函数">7.7 传递数组给函数</h3><p>可以传递数组作为函数的参数，可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayAndFunctionTest</span>    <span class="token punctuation">{</span>        <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> sum <span class="token operator">/</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayAndFunctionTest</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayAndFunctionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> avg <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"avg = {0}"</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// avg = 2.5</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-8-参数数组">7.8 参数数组</h3><p>当声明一个方法时，可能无法确定传递给函数的参数数目，此时，可以使用参数数组解决该问题，参数数组通常用于传递未知数量的参数给函数。C#提供了<code>params</code>关键字，是调用数组为形参的方法时，既可以传递数组实参，又可以传递一组数组元素。其格式为<code>public 返回类型 方法名称(params 类型名称[] 数组名称)</code>。</p><p>注意：</p><ul><li>带<code>params</code>关键字的参数类型必须是一维数组，不能使用多维数组</li><li>不能和<code>ref</code>、<code>out</code>同时使用</li><li>带<code>params</code>关键字的参数必须是最后一个参数，并且只能运行一个<code>params</code>关键字</li><li>不能使用<code>params</code>来使用重载方法</li><li>没有<code>params</code>关键字的方法优先级高于到有<code>params</code>关键字的方法</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayAndParamsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a + b = {0}"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a + b = 3</span>            <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 2 3 4 5</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">Test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 1 2 2</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-9-Array类">7.9 Array类</h3><p><code>Array</code>类是C#中所有数组的基类，他是在<code>System</code>命名空间定义的，<code>Array</code>类提供了各种用于数组的属性和方法。</p><p><strong>属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>IsFixedSize</code></td><td>获取一个值，该值指示数组是否带有固定大小</td></tr><tr><td><code>IsReadOnly</code></td><td>获取一个值，该值指示数组是否只读</td></tr><tr><td><code>Length</code></td><td>获取一个32位整数，该值表示所有维度的数组的元素总数</td></tr><tr><td><code>LongLength</code></td><td>获取一个64位整数，该值表示所有维度的数组的元素总数</td></tr><tr><td><code>Rank</code></td><td>获取数组的维度</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Clear</code></td><td>根据元素类型，设置数组中某个范围的元素为零、false或null</td><td><code>Copy(Array, Array, Int32)</code></td><td>从数组的第一个元素开始复制某个范围的元素到另一个数组的第一个元素位置</td></tr><tr><td><code>CopyTo(Array, Int32)</code></td><td>从当前的一维数组中复制所有元素到一个指定的一维数组的指定索引位置</td><td><code>GetLength</code></td><td>获取一个32位整数，表示指定维度的数组中的元素总和</td></tr><tr><td><code>GetLongLength</code></td><td>获取一个64位整数，表示指定维度的数组中的元素总和</td><td><code>GetLowerBound</code></td><td>获取数组中指定维度的下界</td></tr><tr><td><code>GetType</code></td><td>获取当前实例的类型</td><td><code>GetUpperBound</code></td><td>获取数组中指定维度的上界</td></tr><tr><td><code>GetValue(Int32)</code></td><td>获取一维数组中指定位置的值</td><td><code>IndexOf(Array, Object)</code></td><td>搜索指定的对象，返回整个一维数组中第一次出现的索引</td></tr><tr><td><code>Reverse(Array)</code></td><td>逆转整个一维数组中元素的顺序</td><td><code>SetValue(Object, Int32)</code></td><td>给一维数组中指定位置的元素设置值</td></tr><tr><td><code>Sort(Array)</code></td><td>使用数组的每个元素的<strong>IComparable</strong>接口实现排序</td><td><code>ToString</code></td><td>返回当前对象的字符串</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayClassTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"原始数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Array<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"逆转数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Array<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"排序数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 原始数组：3 2 5 8 7 6 </span>            <span class="token comment">// 逆转数组：6 7 8 5 2 3 </span>            <span class="token comment">// 排序数组：2 3 5 6 7 8</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-10-Array、ArrayList与泛型List-T-的区别">7.10 Array、ArrayList与泛型List&lt;T&gt;的区别</h3><p><strong>Array</strong></p><p>数组<code>Array</code>是一个存储相同类型元素的固定大小的顺序集合，数组是用来存储数据的集合，通常认为数组是一个同一类型变量的集合。</p><p><code>Array</code>类是C#中所有数组的基类，在<code>System</code>空间定义的。</p><p>数组在内存中是连续存储的，所以优点是索引速度很快，赋值和修改元素也非常简单。</p><p>缺点是声明数组的时候必须指定数组的长度；如果数组太长会造成内存浪费，太短会造成数据溢出的错误；在数组两个数据间插入数据很麻烦。</p><p><strong>ArrayList</strong></p><p>为了解决数组的优点，C#提供了<code>ArrayList</code>对象，<code>ArrayList</code>是在命名空间<code>System.Collections</code>下，使用该类时必须进行引用，同时继承了<strong>IList</strong>接口，提供了数据存储和检索。</p><p><code>ArrayList</code>对象的大小是按照其中存储的数据来动态扩充与收缩的，不需要再声明时指定长度。</p><p><code>ArrayList</code>的默认初始容量是0，随着元素添加到<code>ArrayList</code>中，容量会根据需要重新分配自动增加。</p><p><code>ArrayList</code>解决了前面提到的Array数组的所有缺点，但是在存储或检索值类型时通常会发生装箱和拆箱操作，带来很大性能损耗，不是类型安全的。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}, Capacity: {1}"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> list<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">PrintValues</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Count: 3, Capacity: 4</span>            <span class="token comment">// Hello World !</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintValues</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable</span> list<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} "</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>泛型List&lt;T&gt;</strong></p><p>由于<code>ArrayList</code>存在不安全类型与装箱拆箱的确定，所有出现了<code>List</code>类，该类使用大小可按需动态增加的数组实现<strong>IList</strong>泛型接口，是类型安全的，在声明<code>List</code>集合时，必须为其<code>List</code>集合内数据声明数据类型。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ListTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Count: {0}, Capacity: {1}"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> list<span class="token punctuation">.</span>Capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> e <span class="token keyword">in</span> list<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"{0} "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Count: 3, Capacity: 4</span>            <span class="token comment">// Hello World !</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：</p><ul><li><p>数组<code>Array</code>的容量固定，而<code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>的容量可自动扩充</p></li><li><p>数组<code>Array</code>可有多个维度，而<code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>始终只有一个维度</p></li><li><p>特定类型的数组<code>Array</code>性能由于<code>ArrayList</code>的性能</p></li><li><p><code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>基本等同，如果<code>List&lt;T&gt; </code>类的类型T是引用类型，则两个类的行为是完全相同的。如果T是值类型，需要考虑装箱和拆箱造成的性能损耗，<code>List&lt;T&gt; </code>是类型安全</p></li></ul><h2 id="8-枚举">8. 枚举</h2><p>枚举是一种类型，适用于某些取值范围有限的数据，枚举类型是使用<code>enum</code>关键字声明的，默认访问权限和类一样，都是<strong>internal</strong>，枚举的每一个值都是一个整型，默认是从0开始。</p><h3 id="8-1-声明">8.1 声明</h3><p>声明的一般语法为 <code>[访问权限修饰符] enum &lt;enum_name&gt; { enumeration list }</code></p><p>其中<code>enum_name</code>为枚举的类型名称，遵循大驼峰命名法，<code>enumeration list</code>是一个用逗号分割的标识符列表，如</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Days</span><span class="token punctuation">{</span>    Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-访问">8.2 访问</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">EnumTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">enum</span> <span class="token class-name">Days</span> <span class="token punctuation">{</span>Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Days<span class="token punctuation">.</span>Sun<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Sun</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Days<span class="token punctuation">.</span>Sun<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Days<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Thu</span>            <span class="token class-name">Days</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Days<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Thu</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-字符串">9. 字符串</h2><h3 id="9-1-创建String对象">9.1 创建String对象</h3><p>使用以下方法来创建<code>String</code>对象：</p><ul><li>通过给<code>String</code>变量指定一个字符串</li><li>通过使用<code>String</code>类构造函数</li><li>通过使用字符串串联符号<code>+</code></li><li>通过检索属性或调用一个返回字符串的方法</li><li>通过格式化方法开转换一个值或对象为它的字符串表示形式</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StringCreateTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 指定一个字符串</span>            <span class="token class-name"><span class="token keyword">string</span></span> fname<span class="token punctuation">,</span> lname<span class="token punctuation">;</span>            fname <span class="token operator">=</span> <span class="token string">"Harry"</span><span class="token punctuation">;</span>            lname <span class="token operator">=</span> <span class="token string">"Peter"</span><span class="token punctuation">;</span>            <span class="token comment">// 通过+符号连接</span>            <span class="token class-name"><span class="token keyword">string</span></span> fullname <span class="token operator">=</span> fname <span class="token operator">+</span> lname<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Full Name: {0}"</span><span class="token punctuation">,</span> fullname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Full Name: HarryPeter</span>            <span class="token comment">// 使用string构造函数</span>            <span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> greetings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Greetings: {0}"</span><span class="token punctuation">,</span> greetings<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Greetings: Hello</span>            <span class="token comment">// 方法返回字符串</span>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sarray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"From"</span><span class="token punctuation">,</span> <span class="token string">"C#"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> sarray<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Message: {0}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Message: Hello from C#</span>            <span class="token comment">// 用于转化值的格式化方法</span>            <span class="token class-name">DateTime</span> waiting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> chat <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"Message sent at {0:t} on {0:D}"</span><span class="token punctuation">,</span> waiting<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Message: {0}"</span><span class="token punctuation">,</span> chat<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Message: Message sent at 9:01 on Monday, October 10, 2022</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-属性和方法">9.2 属性和方法</h3><p><code>String</code>类有两个属性:</p><ul><li><code>Chars</code>：在当前<code>String</code>对象中获取<code>Char</code>对象的指定位置</li><li><code>Length</code>：在当前<code>String</code>对象中获取字符数</li></ul><p><code>String</code>类的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td><code>public static int Compare(string strA, string strB)</code></td><td>比较两个指定的string对象，并返回一个表示他们在排列顺序中相对位置的整数。该方法区分大小写</td><td><code>public static int Compare(string strA, string strB, bool ignoreCase)</code></td><td>比较两个指定的string对象，并返回一个表示他们在排列顺序中相对位置的整数。该方法不区分大小写</td></tr><tr><td><code>public static string Concat(string str0, string str1)</code></td><td>连接两个string对象</td><td><code>public static string Concat(string str0, string str1, string str2)</code></td><td>连接三个string对象</td></tr><tr><td><code>public static string Concat(string str0, string str1, string str2, string str3)</code></td><td>连接四个string对象</td><td><code>public bool Contains(string value)</code></td><td>返回一个表示指定string对象是否出现在字符串中的值</td></tr><tr><td><code>public static string Copy(string str)</code></td><td>创建一个与指定字符串具有相同值的新string对象</td><td><code>public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)</code></td><td>从string对象的指定位置开始复制指定数量的字符到Unicode字符数组中的指定位置</td></tr><tr><td><code>public bool EndsWith(string value)</code></td><td>判断string对象的结尾是否匹配指定的字符串</td><td><code>public bool Equals(string value)</code></td><td>判断当前的string对象是否与指定的string对象具有相同的值</td></tr><tr><td><code>public static bool Equals(string value)</code></td><td>判断两个指定的string对象是否具有相同的值</td><td><code>public static string Format(string format, Object arg0)</code></td><td>把指定字符串中一个或多个格式项替换为指定对象的字符串表示形式</td></tr><tr><td><code>public int IndexOf(char value)</code></td><td>返回指定Unicode字符在当前字符串中第一次出现的索引，索引从0开始</td><td><code>public int IndexOf(string value)</code></td><td>返回指定字符串在该实例中第一次出现的索引，索引从0开始</td></tr><tr><td><code>public int IndexOf(char value, int startIndex)</code></td><td>返回指定Unicode字符在当前字符串中指定字符位置开始搜索第一次出现的索引，索引从0开始</td><td><code>public int IndexOf(string value, int startIndex)</code></td><td>返回指定字符串在当前字符串中指定字符位置开始搜索第一次出现的索引，索引从0开始</td></tr><tr><td><code>public int IndexOfAny(char[] anyOf)</code></td><td>返回某一个指定的Unicode字符数组中任意字符在该实例中第一次出现的索引，索引从0开始</td><td><code>public int IndexOfAny(char[] anyOf, int startIndex)</code></td><td>返回某一个指定的Unicode字符数组从任意字符指定字符位置开始搜索第一次出现的索引，索引从0开始</td></tr><tr><td><code>public string Insert(int startIndex, string value)</code></td><td>返回一个新的字符串，其中，指定的字符串被插入在当前string对象的指定索引位置</td><td><code>public static bool IsNullOrEmpty(string value)</code></td><td>指示指定的字符串是否为null或者是否为一个空的字符串</td></tr><tr><td><code>public static string Join(string separator, string[] value)</code></td><td>连接一个字符串数组中的所有元素，使用指定的分隔符分割每个元素</td><td><code>public static string Join(string separator, string[] value, int startIndex, int count)</code></td><td>连接一个字符串数组中从指定位置开始的元素，使用指定的分隔符分割每个元素</td></tr><tr><td><code>public int LastIndexOf(char value)</code></td><td>返回指定Unicode字符在当前string对象中最后一次出现的索引位置，索引从0开始</td><td><code>public int LastIndexOf(string value)</code></td><td>返回指定字符串在当前string对象中最后一次出现的索引位置，索引从0开始</td></tr><tr><td><code>public string Remove(int startIndex)</code></td><td>移除当前实例中的所有字符，从指定位置开始，一直到最后一个位置为止，并返回字符串</td><td><code>public string Remove(int startIndex, int count)</code></td><td>从当前字符串的指定位置开始移除指定数量的字符，并返回字符串</td></tr><tr><td><code>public string Replace(char oldChar, char newChar)</code></td><td>把当前string对象中，所有指定的Unicode字符替换为另一个Unicode字符，并返回新的字符串</td><td><code>public string Replace(string oldValue, string newValue)</code></td><td>把当前string对象中，所有指定的字符串替换为另一个指定的字符串，并返回新的字符串</td></tr><tr><td><code>public string[] Split(params char[] separator)</code></td><td>返回一个字符串数组，包含当前的string对象中的子字符串，子字符串是按照指定的Unicode字符数组中的元素进行分隔的</td><td><code>public string[] Split(char[] separator, int count)</code></td><td>返回一个字符串数组，包含当前的string对象中的子字符串，子字符串是按照指定的Unicode字符数组中的元素进行分隔的,count指定要返回的子字符串最大数目</td></tr><tr><td><code>public bool StartsWith(string value)</code></td><td>判断字符串实例的开头是否匹配指定的字符串</td><td><code>public char[] ToCharArray()</code></td><td>返回一个带有当前string对象中所有字符的Unicode字符数组</td></tr><tr><td><code>public char[] ToCharArray()</code></td><td>返回一个带有当前string对象中所有字符的Unicode字符数组，从指定索引开始，知道到达指定的长度为止</td><td><code>public string ToLower()</code></td><td>把字符串转换为小写并返回</td></tr><tr><td><code>public string ToUpper()</code></td><td>把字符串转换为大写并返回</td><td><code>public string Trim()</code></td><td>移除当前string对象中前后所有的空白字符</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StringMethodsTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">string</span></span> str1 <span class="token operator">=</span> <span class="token string">"This is text"</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> str2 <span class="token operator">=</span> <span class="token string">"This is test"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">" are equal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">" are not equal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// This is text and This is test are not equal.</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"The sequence 'text' was found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// The sequence 'text' was found.</span>            <span class="token punctuation">}</span>            <span class="token class-name"><span class="token keyword">string</span></span> substr <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// text</span>            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> strarray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span><span class="token string">"Hello world"</span><span class="token punctuation">,</span> <span class="token string">"Hello Csharp"</span><span class="token punctuation">,</span> <span class="token string">"Hello Sunday"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> strarray<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Hello world</span>            <span class="token comment">// Hello Csharp</span>            <span class="token comment">// Hello Sunday</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-命名空间">10. 命名空间</h2><p>命名空间的设计目的是提供一种让一组名称与其他名称分隔的方式，可以使一个命名空间中声明的类名与另一个命名空间中声明的同类名不冲突。举个例子，一个文件夹中可以包含多个文件夹，每一个文件夹中不能有相同的文件名，但是不同文件夹中的文件可以重名。</p><h3 id="10-1-定义">10.1 定义</h3><p>以关键字<code>namespace</code>开始，后跟命名空间的名字</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">FirstSpace</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ClassA</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside FirstSpace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token namespace">SecondSpace</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">ClassA</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside SecondSpace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">FirstSpace<span class="token punctuation">.</span>ClassA</span> fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FirstSpace<span class="token punctuation">.</span>ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecondSpace<span class="token punctuation">.</span>ClassA</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SecondSpace<span class="token punctuation">.</span>ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fc<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside FirstSpace</span>        sc<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside SecondSpace</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-using的用法">10.2 using的用法</h3><ul><li><code>using指令</code>：可以引入命名空间，如：</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>using static指令</code>：无需指定类型名称即可访问其静态成员的类型。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Math</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token operator">=</span> PI<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>起别名</li></ul><p><code>using Project = PC.MyCompany.Project;</code></p><ul><li><code>using语句</code>：将实例与代码绑定。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Font</span> font3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">10.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              font4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">10.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// Use font3 and font4.</span><span class="token punctuation">}</span><span class="token comment">// 代码段结束时，自动调用font3和font4的Dispose方法，释放实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-嵌套命名空间">10.3 嵌套命名空间</h3><p>命名空间可以被嵌套，即可以在一个命名空间内部定义另一个命名空间，使用点运算符访问嵌套命名空间的成员。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">SomeNameSpace</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">SomeNameSpace<span class="token punctuation">.</span>Nested</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">SomeNameSpace</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside SomeNameSpace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside SomeNameSpace</span>            Nested<span class="token punctuation">.</span>ClassB<span class="token punctuation">.</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Inside Nested</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 内嵌命名空间</span>    <span class="token keyword">namespace</span> <span class="token namespace">Nested</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassB</span>        <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Inside Nested"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-类">11. 类</h2><p>类是对象的蓝图，对象是类的实例，构成类的方法和变量称为类的成员。</p><h3 id="11-1-定义">11.1 定义</h3><p>类的定义是以关键字<code>class</code>开始的，后跟类的名称，类的主体包含在一对花括号里面，主体的组成可能包括构造函数、析构函数、成员变量、成员函数，如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span>access specifier<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">class_name</span><span class="token punctuation">{</span>    <span class="token comment">// member variables</span>    <span class="token operator">&lt;</span>access specifier<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>data type<span class="token operator">&gt;</span> variable1<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>access specifier<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>data type<span class="token operator">&gt;</span> variable2<span class="token punctuation">;</span>    <span class="token comment">// member methods</span>    <span class="token operator">&lt;</span>access specifier<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">return</span> type<span class="token operator">&gt;</span> <span class="token function">method1</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// method body</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>access specifier<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">return</span> type<span class="token operator">&gt;</span> <span class="token function">method2</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// method body</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问标识符<code>&lt;access specifier&gt;</code>指定了对类及其成员的访问权限，如果没有指定，则使用默认的访问标志符，类的默认访问标识符是<code>internal</code>，成员的默认访问标识符是<code>private</code>。<ul><li>数据类型<code>&lt;data type&gt;</code>指定了变量的类型，返回类型<code>&lt;return type&gt;</code>指定了方法返回的数据类型</li></ul></li><li>如果要访问类的成员，使用<code>.</code>运算符，其链接了对象的名称和成员的名称。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BoxApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> height<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Boxtest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">6.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">7.0</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">11.0</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">12.0</span><span class="token punctuation">;</span>            volume <span class="token operator">=</span> box1<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box1的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box1的体积：210</span>            volume <span class="token operator">=</span> box2<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box2的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box2的体积：1320</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-成员函数和封装">11.2 成员函数和封装</h3><p>类的成员函数是在类内部定义的函数，能在类的任何对象上操作，其能访问该对象的所有成员。</p><p>类的成员变量是对象的属性，且保持私有来实现封装，这些变量只能使用公共成员函数来访问。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">BoxApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Box</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> height<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            width <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            height <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Boxtest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Box</span> box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Box</span> box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">11.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            box2<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">12.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            volume <span class="token operator">=</span> box1<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box1的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box1的体积：210</span>            volume <span class="token operator">=</span> box2<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box2的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box2的体积：1320</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-构造函数">11.3 构造函数</h3><p>类的构造函数是类的一个特殊的成员函数，当创建类的新对象时执行。</p><p>构造函数的名称与类的名称完全相同，他没有任何返回类型。</p><p>默认的构造函数没有任何参数，但是可以定义一个带参数的构造函数来给对象赋初值。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">LineApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Line</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token comment">// 构造函数</span>        <span class="token keyword">public</span> <span class="token function">Line</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"对象已经创建,length = {0}"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Line</span> line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Line</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对象已经创建,length = 10</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线条的长度：{0}"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线条的长度：10</span>            line<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线条的长度：{0}"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线条的长度：6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-析构函数">11.4 析构函数</h3><p>类的析构函数是类的一个特殊的成员函数，当类的对象超出范围时执行。</p><p>析构函数的名称是在类的名称前加一个<code>~</code>符号，没有返回值也不接收任何参数。</p><p>析构函数用于在结束程序（如关闭文件、释放内存等）之前释放资源。</p><p>析构函数不能继承或重载。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">LineApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Line</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token comment">// 构造函数</span>        <span class="token keyword">public</span> <span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"对象已创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">~</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"对象已删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Line</span> line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对象已创建</span>            line<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"线条的长度：{0}"</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线条的长度：6</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对象已删除</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-5-静态成员">11.5 静态成员</h3><p>使用关键字<code>static</code>可以把类成员定义为静态的，当声明一个类成员为静态时，意味着只有一个该静态成员的副本。</p><p>关键字<code>static</code>意味着类中只有一个该成员的实例，静态变量用于定义常量，因为他们的值可以通过直接调用类而不需要创建类的实例来获取。</p><p>静态变量可在成员函数或类定义外部进行初始化，也可以在内部初始化。</p><p>将类成员函数声明为<code>public static</code>无需实例化类即可调用类成员函数。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">StaticApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">StaticVar</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> num<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">StaticTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">StaticVar</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StaticVar</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s1<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s2<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s1<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"变量num: {0}"</span><span class="token punctuation">,</span> StaticVar<span class="token punctuation">.</span><span class="token function">GetNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 变量num: 3</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-结构体">12. 结构体</h2><p>结构体是值类型的数据结果，用来代表一个记录，可是单一变量存储各种数据类型的相关数据。</p><h3 id="12-1-定义">12.1 定义</h3><p>使用<code>struct</code>关键字来创建结构体，<code>struct</code>语句为程序定义了一个带有多个成员的结构体。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token comment">// 定义结构体</span><span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> title<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StructureTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Books</span> book1<span class="token punctuation">;</span>        <span class="token class-name">Books</span> book2<span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"C#"</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token string">"Microsoft"</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token string">"C# Programing Guider"</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">49.5</span><span class="token punctuation">;</span>                book2<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Harry Peter"</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token string">"Lolly"</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token string">"Death Cup"</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">88.9</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book1 title: {0}"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book1 title: C#</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book1 price: {0}"</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book1 price: 49.5</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book2 author: {0}"</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book2 author: Lolly</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"book2 subject: {0}"</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// book2 subject: Death Cup</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-2-特点">12.2 特点</h3><ul><li>结构体可带方法、字段、索引、属性、运算符方法和事件</li><li>结构体可定义带参数的构造函数，不能定义析构函数</li><li>结构体不能继承其他的结构或类</li><li>结构体不能作为其他结构或类的基础</li><li>结构可实现一个或多个接口</li><li>结构体成员不能指定为<code>abstract</code>、<code>virtual</code>或<code>protected</code></li><li>使用<code>New</code>操作符创建一个结构对象时，会调用适当的构造函数来创建结构体，结构体可以不使用<code>New</code>操作符即可被实例化</li><li>不使用<code>New</code>操作符，只有在所有的字段都被初始化之后，字段才能被赋值，对象才可用</li></ul><h3 id="12-3-类与结构体的区别">12.3 类与结构体的区别</h3><ul><li>类是引用类型，在堆中分配空间，栈中保存的只是引用，结构体是值类型，在栈中分配空间</li><li>结构体不支持继承</li><li>结构体不能声明默认的构造函数</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token comment">// 定义结构体</span><span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> title<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> SetValues <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> t<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        title <span class="token operator">=</span> t<span class="token punctuation">;</span>        author <span class="token operator">=</span> a<span class="token punctuation">;</span>        subject <span class="token operator">=</span> s<span class="token punctuation">;</span>        price <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"title: {0}"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"author: {0}"</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"subject: {0}"</span><span class="token punctuation">,</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"price: {0}"</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StructureTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Books</span> book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Books</span> book2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span><span class="token function">SetValues</span><span class="token punctuation">(</span><span class="token string">"C#"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft"</span><span class="token punctuation">,</span> <span class="token string">"C# Programing Guider"</span><span class="token punctuation">,</span> <span class="token number">49.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book2<span class="token punctuation">.</span><span class="token function">SetValues</span><span class="token punctuation">(</span><span class="token string">"Harry Peter"</span><span class="token punctuation">,</span> <span class="token string">"Lolly"</span><span class="token punctuation">,</span> <span class="token string">"Death Cup"</span><span class="token punctuation">,</span> <span class="token number">88.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book1<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// title: C#</span>        <span class="token comment">// author: Microsoft</span>        <span class="token comment">// subject: C# Programing Guider</span>        <span class="token comment">// price: 49.5</span>        book2<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// title: Harry Peter</span>        <span class="token comment">// author: Lolly</span>        <span class="token comment">// subject: Death Cup</span>        <span class="token comment">// price: 88.9</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-接口">13. 接口</h2><p>接口定义了所有类继承接口时应该遵循的语法合同，接口定义了语法合同“是什么”部分，派生类定义了语法合同”怎么做“部分。</p><p>接口定义了属性、方法和事件成员，接口只包含成员的声明，成员的定义是派生类的责任。</p><p>接口使得实现接口的类或结构在形式上保持一致。</p><p>抽象类在某种程度上与接口类似，但是他们只是用在当只有少数方法由基类声明有派生类实现时。</p><p>抽象类不能直接实例化，但允许派生出具体的，具有实际功能的类。接口本身是不实现任何功能。</p><p>注意：</p><ul><li>接口方法不能用<code>public</code>、<code>private</code>、<code>abstarct</code>等访问修饰符修饰，接口内不能有字段变量、构造函数</li><li>接口内可以定义属性</li><li>实现接口时，必须和接口的格式一致</li><li>必须实现接口的所有方法</li><li>接口是解决C#的单继承问题，使类可以同时继承多个基类</li></ul><h3 id="13-1-定义">13.1 定义</h3><p>使用关键字<code>interface</code>声明，默认是<code>public</code>的，接口名通常以<code>I</code>字母开头，如：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 定义接口</span><span class="token keyword">interface</span> <span class="token class-name">IMyInterface</span><span class="token punctuation">{</span>    <span class="token comment">// 接口成员，只有声明，无具体实现</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InterfaceImplementer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMyIterface</span></span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">InterfaceImplementer</span> iImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InterfaceImplementer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iImp<span class="token punctuation">.</span><span class="token function">MethodImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello My Iterface</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello My Iterface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-继承">13.2 继承</h3><p>如果一个接口继承其他接口，那么实现类或结构需要实现所有接口的成员。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IParentInterface</span><span class="token punctuation">{</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ParentInterfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IMyInterface</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IParentInterface</span></span><span class="token punctuation">{</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodToImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InterfaceImplementer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMyInterface</span></span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">InterfaceImplementer</span> iImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InterfaceImplementer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iImp<span class="token punctuation">.</span><span class="token function">MethodToImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// MethodToImplement() called</span>        iImp<span class="token punctuation">.</span><span class="token function">ParentInterfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ParentInterfaceMethod() called</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodToImplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"MethodToImplement() called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ParentInterfaceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ParentInterfaceMethod() called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-方法">14. 方法</h2><p>C#中的方法（也称为函数）是一段具有签名（由函数名、参数类型和参数修饰符组成的函数信息）的代码块，用来实现特定的功能，一般组成：</p><ul><li>访问权限修饰符：用于指定函数对一个类的可见性</li><li>返回值类型：用于指定函数返回值的数据类型</li><li>函数名称：用于进行函数调用的唯一名称</li><li>参数列表：在调用函数时需要传递给函数的参数，参数列表是可选的，可为空</li><li>函数主题：其中包含了实现函数功能的若干代码</li></ul><h3 id="14-1-方法声明">14.1 方法声明</h3><p>方法声明语法如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span>access_specifier<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>return_type<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>method_name<span class="token operator">&gt;</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span><span class="token punctuation">{</span>    method_body<span class="token punctuation">;</span>    <span class="token keyword">return</span> statement<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>&lt;access_specifier&gt;</code>为访问修饰符，<code>&lt;return_type&gt;</code>为返回值类型，<code>&lt;method_name&gt;</code>为方法名称，<code>paramater_list</code>为参数列表，<code>method_body</code>为方法主体，<code>return statement</code>为返回语句。访问权限修饰符、参数列表和返回语句是可选的。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MethodTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetMax</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>           result <span class="token operator">=</span> num1 <span class="token operator">&gt;</span> <span class="token class-name">num2 <span class="token punctuation">?</span></span> num1 <span class="token punctuation">:</span> num2<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-2-方法调用">14.2 方法调用</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">MethodTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetMax</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>            result <span class="token operator">=</span> num1 <span class="token operator">&gt;</span> <span class="token class-name">num2 <span class="token punctuation">?</span></span> num1 <span class="token punctuation">:</span> num2<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> res<span class="token punctuation">;</span>            <span class="token class-name">MethodTest</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MethodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">GetMax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"最大值是: {0}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 最大值是: 200</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3-递归调用">14.3 递归调用</h3><p>递归调用是方法自己调用自己。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> res<span class="token punctuation">;</span>            res <span class="token operator">=</span> num <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"5! = {0}"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5! = 120</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"7! = {0}"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7! = 5040</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-4-参数传递">14.4 参数传递</h3><p>不带参数的方法声明时<code>return_type</code>为<code>void</code>，当调用带有参数的方法时，需要向方法传递参数。C#有三种参数传递方式：</p><table><thead><tr><th>方式</th><th>描述</th></tr></thead><tbody><tr><td>值参数</td><td>这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。形参的值改变不会影响到实参的值，可以保证实参数据安全</td></tr><tr><td>引用参数</td><td>这种方法复制参数的内存位置引用给形式参数，意味着形参值的改变也会改变实参的值，使用<code>ref</code>关键字声明引用参数</td></tr><tr><td>输出参数</td><td>这个方式可以返回多个值，使用<code>out</code>关键字声明输出参数，可以不用return语句从函数中返回多个值</td></tr></tbody></table><h3 id="14-5-按值传递参数">14.5 按值传递参数</h3><p>参数默认的传递参数，这种方式实参和形参使用的是两个不同内存中的值。形参的值改变不会影响到实参的值，可以保证实参数据安全。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token comment">// 交换两个参数的值</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num2 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之前，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之后，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用方法之前，a = 100, b = 200</span>            <span class="token comment">// 调用方法之后，a = 100, b = 200</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-6-按引用传递参数">14.6 按引用传递参数</h3><p>引用参数是一个对变量的内存位置的引用，引用参数表示与提供给方法的实际参数具有相同的内存位置，因此，引用参数值的改变也会改变实际参数的值，需要使用<code>ref</code>关键字声明引用参数。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token comment">// 交换两个参数的值</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num2 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num1 <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之前，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">ref</span> a<span class="token punctuation">,</span> <span class="token keyword">ref</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用方法之后，a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用方法之前，a = 100, b = 200</span>            <span class="token comment">// 调用方法之后，a = 200, b = 100</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-7-按输出传递参数">14.7 按输出传递参数</h3><p><code>return</code>语句可用于只从函数中返回一个值，但是，可以使用输出参数来从函数中返回多个值，输出参数会把方法输出的数据赋给自己，提供给输出参数的变量不需要赋值。当需要从一个参数没有指定初始值的方法中返回值时，输出参数特别有用，需要使用<code>out</code>关键字声明引用参数。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumberManipulator</span>    <span class="token punctuation">{</span>        <span class="token comment">// 交换两个参数的值</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>            y <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">var</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumberManipulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">out</span> a<span class="token punctuation">,</span> <span class="token keyword">out</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a = {0}, b = {1}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// a = 13, b = 14</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-封装">15. 封装</h2><p>封装指把一个或多个项目封装在一个物理或逻辑的包中，封装是为了防止对实现细节的访问。</p><p>根据封装的具体需要，可以通过<strong>访问修饰符</strong>来设置使用者的访问权限。</p><ul><li><code>public</code> : 任何公有成员都可以被外部的类访问</li><li><code>private</code> : 只有同一个类中的函数可以访问他的私有成员</li><li><code>protected</code>：该类内部和继承类中可以访问</li><li><code>internal</code> : 同一个程序集的对象可以访问</li><li><code>protected internal</code> : <code>protected</code>和<code>internal</code>的并集，符合任意一条都可以访问</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">RectangelApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span>    <span class="token punctuation">{</span>        <span class="token comment">// 成员变量</span>        <span class="token keyword">internal</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">internal</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4.0</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 面积：20</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-继承">16. 继承</h2><p>继承是面向对象程序的特征之一，继承允许根据一个类来定义另一个类，有助于维护和创建程序，从而利于重用代码节省开发时间。</p><p>创建一个新类时，新类允许继承一个已有的类，通过继。承可以创建新类时重用、扩展和修改被继承类中定义的成员，被继承的类称为“基类”，继承基类的类称为“派生类”。</p><p>注意，C#只支持单继承，派生类只能继承一个基类，但是继承是可以传递的。</p><h3 id="16-1-基类与派生类">16.1 基类与派生类</h3><p>派生类继承了基类的成员变量和成员方法。因此父类对象应在子类对象创建之前被创建。您可以在成员初始化列表中进行父类的初始化。</p><p>创建派生类的语法：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span>访问修饰符<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token operator">&lt;</span>基类<span class="token operator">&gt;</span><span class="token punctuation">{</span>    <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token operator">&lt;</span>派生类<span class="token operator">&gt;</span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>基类<span class="token operator">&gt;</span><span class="token punctuation">{</span>    <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"长度：{0}"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"宽度：{0}"</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">TableTop</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Rectangle</span></span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> price <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">TableTop</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> cost<span class="token punctuation">;</span>            cost <span class="token operator">=</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> price<span class="token punctuation">;</span>            <span class="token keyword">return</span> cost<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"成本：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">TableTop</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TableTop</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 长度：4</span>        <span class="token comment">// 宽度：5</span>        <span class="token comment">// 面积：20</span>        <span class="token comment">// 成本：140</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-2-接口多重继承">16.2 接口多重继承</h3><p>多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。</p><p>C# 不支持多重继承，但可以使用接口来实现多重继承。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"> <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token comment">// 基类</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Area</span>  <span class="token comment">// 接口</span>    <span class="token punctuation">{</span>        <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span><span class="token punctuation">,</span> <span class="token class-name">Area</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"长度：{0}"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"宽度：{0}"</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ExecuteRectangle</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 长度：4</span>        <span class="token comment">// 宽度：5</span>        <span class="token comment">// 面积：20</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-3-抽象类与接口区别">16.3 抽象类与接口区别</h3><ul><li>接口支持多继承，抽象类不能实现多继承</li><li>接口只能定义抽象规则，抽象类既能定义规则，还能提供已实现的成员</li><li>接口是一组行为规范，抽象类是一个不完全的类</li><li>接口可以用于支持回调，抽象类不能实现回调，因为继承不支持</li><li>接口只包含方法、属性、索引器、事件的签名，但不能定义字段和包含实现的方法，抽象类可以定义字段、属性、包含有实现的方法</li><li>接口可以作用于值类型和引用类型，抽象类只能作用于引用类型。例如<code>struct</code>就可以继承接口，而不能继承类。</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span>  <span class="token comment">// 抽象类</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抽象方法</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span>  <span class="token comment">// 接口</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">;</span>  <span class="token comment">// 不能给字段赋值，写成public int a = 0;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 接口方法，继承接口的派生类必须实现此方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-多态性">17. 多态性</h2><p>多态性是指同一个行为具有多个不同表现形式或形态的能力，在面向对象编程中表现为"一个接口，多个功能"。</p><p>多态性可以分为<strong>编译时多态</strong>或者<strong>运行时多态</strong>，编译时多态（也称静态多态性）是编译时发生的函数响应，C# 提供了两种技术来实现编译时多态，分为函数重载和运算符重载。而运行时多态（也称动态多态性）是运行时发生的函数响应。</p><p>多态就是同一个接口使用不同实例而执行不同的操作。</p><h3 id="17-1-编译时多态">17.1 编译时多态</h3><p><strong>函数重载</strong></p><p>在同一范围内对相同函数名有多个定义，可以是参数类型或参数个数的不同，返回值类型除外。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReloadTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> c<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输出整型：{0}"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> f<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"输出浮点型型：{0}"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ReloadTest</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReloadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> add1 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">int</span></span> add2 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"add1 = {0}"</span><span class="token punctuation">,</span> add1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// add1 = 3</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"add2 = {0}"</span><span class="token punctuation">,</span> add2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// add2 = 6</span>            data<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出整型：1</span>            data<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出浮点型：1.23</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[<strong>运算符重载</strong>](#18. 运算符重载)</p><h3 id="17-2-运行时多态">17.2 运行时多态</h3><p><strong>抽象类</strong></p><p>C#允许使用关键字<code>abstract</code>创建抽象类，用于提供接口的部分类的实现，当一个派生类继承自该抽象类时，实现即完成。抽象类包含抽象方法，抽象方法可由派生类实现</p><p>注意：</p><ul><li>不能创建一个抽象类的实例</li><li>不能在一个抽象类外部声明一个抽象方法</li><li>通过关键字<code>sealed</code>可将类声明为密封类，该类不能被继承，抽象类不能被声明为密封类</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token comment">// 抽象类</span>    <span class="token punctuation">{</span>        <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抽象方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>  <span class="token comment">// 构造函数</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 重写抽象方法</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 面积：70</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚方法</strong></p><p>当有一个定义在类中的方法需要在继承类中实现时，可以使用关键字<code>virtual</code>声明虚方法，虚方法可以在不同的基础类中有不同的实现。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token comment">// 抽象类</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">,</span> width<span class="token punctuation">;</span>  <span class="token comment">// 成员变量</span>        <span class="token keyword">public</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>  <span class="token comment">// 构造函数</span>        <span class="token punctuation">{</span>            length <span class="token operator">=</span> l<span class="token punctuation">;</span>            width <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 纯虚方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 具体实现</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Rectangle类的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> width <span class="token operator">*</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span>  <span class="token comment">// 派生类</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 具体实现</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Triangle类的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> width <span class="token operator">*</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Caller</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallArea</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">double</span></span> area <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"面积：{0}"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Caller</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Triangle</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Triangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">CallArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Rectangle类的面积：20</span>            c<span class="token punctuation">.</span><span class="token function">CallArea</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Triangle类的面积：25</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-运算符重载">18. 运算符重载</h2><h3 id="18-1-定义">18.1 定义</h3><p>C#内置的运算符可以被重定义或重载，因此可以使用用户自定义类型的运算符。重载运算符是具有特殊名称的函数，是通过关键字<code>operator</code>后跟运算符符号来定义的，其余跟其他函数一样，有返回类型和参数列表。如定义一个实现Box类加法运算符重载方法，实现两个Box对象对应属性相加，并返回。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> Box <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">,</span> <span class="token class-name">Box</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span>length <span class="token operator">=</span> b<span class="token punctuation">.</span>length <span class="token operator">+</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    box<span class="token punctuation">.</span>width <span class="token operator">=</span> b<span class="token punctuation">.</span>width <span class="token operator">+</span> c<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    box<span class="token punctuation">.</span>height <span class="token operator">=</span> b<span class="token punctuation">.</span>height <span class="token operator">+</span> c<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">return</span> box<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-2-实现">18.2 实现</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>   <span class="token keyword">class</span> <span class="token class-name">Box</span>   <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> length<span class="token punctuation">;</span>  <span class="token comment">// 长度</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> width<span class="token punctuation">;</span>  <span class="token comment">// 宽度</span>      <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> height<span class="token punctuation">;</span>  <span class="token comment">// 高度</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token keyword">return</span> length <span class="token operator">*</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> l<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         length <span class="token operator">=</span> l<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> w<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         width <span class="token operator">=</span> w<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> h<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         height <span class="token operator">=</span> h<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 重载 + 运算符来把两个 Box 对象相加</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Box <span class="token keyword">operator</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">,</span> <span class="token class-name">Box</span> c<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token class-name">Box</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         box<span class="token punctuation">.</span>length <span class="token operator">=</span> b<span class="token punctuation">.</span>length <span class="token operator">+</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         box<span class="token punctuation">.</span>width <span class="token operator">=</span> b<span class="token punctuation">.</span>width <span class="token operator">+</span> c<span class="token punctuation">.</span>width<span class="token punctuation">;</span>         box<span class="token punctuation">.</span>height <span class="token operator">=</span> b<span class="token punctuation">.</span>height <span class="token operator">+</span> c<span class="token punctuation">.</span>height<span class="token punctuation">;</span>         <span class="token keyword">return</span> box<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">Test</span>   <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token class-name">Box</span> Box1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 声明 Box1，类型为 Box</span>         <span class="token class-name">Box</span> Box2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 声明 Box2，类型为 Box</span>         <span class="token class-name">Box</span> Box3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 声明 Box3，类型为 Box</span>         <span class="token class-name"><span class="token keyword">double</span></span> volume <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>          <span class="token comment">// 体积</span>         <span class="token comment">// Box1 详述</span>         Box1<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box1<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box1<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Box2 详述</span>         Box2<span class="token punctuation">.</span><span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token number">12.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box2<span class="token punctuation">.</span><span class="token function">SetWidth</span><span class="token punctuation">(</span><span class="token number">13.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Box2<span class="token punctuation">.</span><span class="token function">SetHeight</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Box1 的体积</span>         volume <span class="token operator">=</span> Box1<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box1 的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box1的体积：210</span>         <span class="token comment">// Box2 的体积</span>         volume <span class="token operator">=</span> Box2<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box2 的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box2的体积：1560</span>         <span class="token comment">// 把两个对象相加</span>         Box3 <span class="token operator">=</span> Box1 <span class="token operator">+</span> Box2<span class="token punctuation">;</span>         <span class="token comment">// Box3 的体积</span>         volume <span class="token operator">=</span> Box3<span class="token punctuation">.</span><span class="token function">GetVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Box3 的体积：{0}"</span><span class="token punctuation">,</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box3的体积：5400</span>         Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-3-可重载与不可重载运算符">18.3 可重载与不可重载运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code>, <code>-</code>, <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code></td><td>一元运算符只有一个操作数，且可以被重载</td></tr><tr><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td>二元运算符带有两个操作数，且可以被重载</td></tr><tr><td><code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td><td>比较运算符可以被重载</td></tr><tr><td><code>&amp;&amp;</code>, `</td><td></td></tr><tr><td><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></td><td>赋值运算符不能被重载</td></tr><tr><td><code>=</code>, <code>.</code>, <code>?:</code>, <code>-&gt;</code>, <code>new</code>, <code>is</code>, <code>sizeof</code>, <code>typeof</code></td><td>这些运算符不能被重载</td></tr></tbody></table><h2 id="19-文件读写">19. 文件读写</h2><p>文件是存储在磁盘中的具有特定名称和目录路径的数据集合，当使用程序对文件进行读写时，程序会将文件以数据流的形式读入内存中。因此流可以看作是通过通信路径传递的字节序列。</p><p>流分为输入流和输出流，输入流主要用来从文件读取数据，输出流主要用于向文件写入数据。</p><h3 id="19-1-I-O类">19.1 I/O类</h3><p><code>System.IO</code>命名空间中包含了各种作用于文件操作的类，例如文件创建、删除、读取、写入等。</p><table><thead><tr><th>I/O类</th><th>描述</th><th>I/O类</th><th>描述</th></tr></thead><tbody><tr><td><code>BinaryReader</code></td><td>从二进制流中读取原始数据</td><td><code>BinaryWriter</code></td><td>以二进制格式写入原始数据</td></tr><tr><td><code>BufferedStream</code></td><td>临时存储字节流</td><td><code>Directory</code></td><td>对目录进行复制、移动、重命名、创建和删除等</td></tr><tr><td><code>DirectoryInfo</code></td><td>用于对目录执行操作</td><td><code>DriveInfo</code></td><td>获取驱动器信息</td></tr><tr><td><code>File</code></td><td>对文件进行操作</td><td><code>FileInfo</code></td><td>用于对文件执行操作</td></tr><tr><td><code>FileStream</code></td><td>用于文件中任何位置的读写</td><td><code>MomoryStream</code></td><td>用于随机访问存储在内存中的数据流</td></tr><tr><td><code>Path</code></td><td>对路径信息执行操作</td><td><code>StreamReader</code></td><td>用于从字节流中读取字符</td></tr><tr><td><code>StringReader</code></td><td>用于从字符串缓冲区读取数据</td><td><code>StringWriter</code></td><td>用于向字符串缓冲区写入数据</td></tr></tbody></table><h3 id="19-2-FileStream类">19.2 FileStream类</h3><p><code>FileStream</code>类在<code>System.IO</code>命名空间下，使用它可读取、写入和关闭文件。创建<code>FileStream</code>类对象的语法格式如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">FileStream <span class="token operator">&lt;</span>object_name<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStram</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>file_name<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>FileMode Enumerator<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>FileAccess Enumerator<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>FileShare Enumerator<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FileStream类中常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Close()</td><td>释放内存，关闭文件</td><td>CopyTo(Stream)</td><td>当前流读取字节并写入另一个流</td></tr><tr><td>Dispose()</td><td>是否流使用的所有资源</td><td>Equals(Object)</td><td>判断指定对象是否等于当前对象</td></tr><tr><td>Finalize()</td><td>确保资源回收和清理完成</td><td>Flush()</td><td>清除流的缓冲区，所有数据写入文件</td></tr><tr><td>GetHashCode()</td><td>获取哈希函数</td><td>GetType()</td><td>获取当前实例的Type</td></tr><tr><td>Lock(Int64, Int64)</td><td>防止其他进程读取或写入FileStream</td><td>Read(Byte[], Int32, Int32)</td><td>读取字节块并写入缓冲区</td></tr><tr><td>ReadByte()</td><td>读取单个字节</td><td>ToString()</td><td>返回当前对象的字符串</td></tr><tr><td>Unlock(Int64, Int64)</td><td>允许其他进程访问FileStream</td><td>Write(Byte[], Int32, Int32)</td><td>将字节块写入文件流</td></tr><tr><td>WriteByte(Byte)</td><td>写入单个字节到文件流当前位置</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Application</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">FileStream</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义文件流</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                file<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 写入字节</span>            <span class="token punctuation">}</span>            file<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 将读取位置重设为文件开头</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取字节</span>            <span class="token punctuation">}</span>            <span class="token comment">// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 </span>            file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭文件流</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-3-高级文件操作">19.3 高级文件操作</h3><p>其他高级的I/O文件操作，如文本文件的读写，二进制文件的读写，Windows文件系统的操作等详见<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">官方文档</a>。</p><h2 id="20-预处理器">20. 预处理器</h2><p>预处理器指令指导编译器在实际编译开始之前对信息进行预处理。</p><p>所有的预处理器指令都是以<code>#</code>开始的，一个预处理器指令必须是该行上唯一的指令。</p><table><thead><tr><th>预处理器指令</th><th>描述</th><th>预处理器指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义一系列称为符号的字符</td><td><code>#undef</code></td><td>取消定义的字符</td></tr><tr><td><code>#if</code></td><td>测试符号是否为真</td><td><code>#else</code></td><td>创建符合条件指令，与#if一起使用</td></tr><tr><td><code>#elif</code></td><td>创建符合条件指令，与#if一起使用</td><td><code>#endif</code></td><td>指定一个条件指令的结束</td></tr><tr><td><code>#line</code></td><td>可修改编辑器的行数以及删除错误和警告的文件名</td><td><code>#error</code></td><td>从代码指定位置生成一个错误</td></tr><tr><td><code>#warning</code></td><td>从代码指定位置生成一个警告</td><td><code>#region</code></td><td>指定可折叠代码块的起始</td></tr><tr><td><code>#endregion</code></td><td>#region块的结束</td><td><code>#pragma</code></td><td>抑制或还原指定的编译警告</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">define</span> DEBUG</span><span class="token preprocessor property">#<span class="token directive keyword">define</span> RELEASE</span><span class="token preprocessor property">#<span class="token directive keyword">pragma</span> warning disable 168 </span><span class="token comment">// 取消编号168的警告</span><span class="token preprocessor property">#<span class="token directive keyword">pragma</span> warning restore 168 </span><span class="token comment">// 还原编号168的警告 </span><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token preprocessor property">#<span class="token directive keyword">if</span> (DEBUG &amp;&amp; !RELEASE)</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DEBUG is defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">elif</span> (!DEBUG &amp;&amp; RELEASE)</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"RELEASE is defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#<span class="token directive keyword">elif</span> (DEBUG &amp;&amp; RELEASE)</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DEBUG and RELEASE are defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// DEBUG and RELEASE are defined</span>        <span class="token preprocessor property">#<span class="token directive keyword">else</span> </span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DEBUG and RELEASE are not defined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token preprocessor property">#</span><span class="token return-type class-name">endif</span>        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-异常处理">21. 异常处理</h2><p>异常是在程序执行期间出现的问题，C#中的异常是对程序运行时出现的特殊情况的一种响应，比如尝试除以零。</p><p>异常提供了一种把程序控制权从某个部分转移到另一个部分的方式。</p><h3 id="21-1-语法">21.1 语法</h3><p>C#异常处理是建立在<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>四个关键词之上的。</p><ul><li><code>try</code>：一个try块标识了一个将被激活的特定的异常代码块，后跟一个或多个<code>catch</code>块</li><li><code>catch</code>：程序通过异常处理程序捕获异常，<code>catch</code>关键字表示异常的捕获</li><li><code>finally</code>：用于执行给定的语句，不管异常是否被抛出都会执行</li><li><code>throw</code>：当出现问题时，程序抛出一个异常，使用该关键字来完成</li></ul><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment">// 可能引起异常的语句</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionName</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 错误处理代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionName</span> e2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 错误处理代码</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment">// 无论是否抛出异常，都会执行的语句</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-2-异常类">21.2 异常类</h3><p>C#异常是用类来表示的，异常类主要是直接或间接派生自<code>System.Exception</code>类。<code>System.ApplicationException</code>类支持由应用程序生成的异常，自定义类都应派生自该类。</p><p><code>System.SystemException</code>类是所有预定义的系统异常的基类。</p><table><thead><tr><th>异常类</th><th>描述</th><th>异常类</th><th>描述</th></tr></thead><tbody><tr><td><code>System.IO.IOException</code></td><td>处理I/O错误</td><td><code>System.IndexOutOfRangeException</code></td><td>处理数组索引超范围错误</td></tr><tr><td><code>System.ArrayTypeMismatchException</code></td><td>处理数组类型不匹配错误</td><td><code>System.NullReferenceException</code></td><td>处理当依次空对象时错误</td></tr><tr><td><code>System.DivideByZeroException</code></td><td>处理当除以零时错误</td><td><code>System.InvalidCastException</code></td><td>处理类型转换期间错误</td></tr><tr><td><code>System.OutOfMemoryException</code></td><td>处理空间内存不足错误</td><td><code>System.StackOverflowException</code></td><td>处理栈溢出错误</td></tr></tbody></table><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">ErrorHandleApplication</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">DivNumbers</span>    <span class="token punctuation">{</span>        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">;</span>        <span class="token function">DivNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">division</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> num2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                result <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DivideByZeroException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Exception caugth: {0}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Result: {0}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">DivNumbers</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DivNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d<span class="token punctuation">.</span><span class="token function">division</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* Exception caugth: System.DivideByZeroException: Attempted to divide by zero.  at ErrorHandleApplication.DivNumbers.division (System.Int32 num1, System.Int32 num2) [0x00000] in &lt;c41f6dc696cc46ac9b099084f035765f&gt;:0 Result: 0*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-3-自定义异常">21.3 自定义异常</h3><p>用户可以创建自定义异常，派生自<code>ApplicationException</code>类。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token comment">// 自定义异常</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TempIsZeroException</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ApplicationException</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">TempIsZeroException</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Temperature</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token keyword">int</span></span> temperature <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temperature <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 抛出异常</span>            <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TempIsZeroException</span><span class="token punctuation">(</span><span class="token string">"Zero temperature"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Temperature: {0}"</span><span class="token punctuation">,</span> temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token namespace">UserDefineExecption</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">TempTest</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Temperature</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Temperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">ShowTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TempIsZeroException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"TempIsZeroException: {0}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// TempIsZeroException：Zero temperature</span>            <span class="token punctuation">}</span>            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章-2">参考文章</h2><p>本文是笔者通过下列网站教程学习C#基础的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/csharp/csharp-tutorial.html">【菜鸟教程C#教程】</a></p><p>2.<a href="http://c.biancheng.net/csharp/">【C语言中文网C#教程】</a></p><p>3.<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">【微软C#官方文档】</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
            <tag> C#基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境的使用</title>
      <link href="/posts/19904.html"/>
      <url>/posts/19904.html</url>
      
        <content type="html"><![CDATA[<p>python虚拟环境的主要目的是为Python项目创建一个隔离的环境，意味着每个环境都可以拥有自己的依赖项。</p><h2 id="1-安装virtualenv">1.安装virtualenv</h2><p><code>pip install virtualenv</code></p><h2 id="2-创建虚拟环境并指定Python版本">2.创建虚拟环境并指定Python版本</h2><p><code>virtualenv venv --python=python3.8</code></p><h2 id="3-进入虚拟环境">3.进入虚拟环境</h2><p><code>source bin/active</code></p><h2 id="4-退出虚拟环境">4.退出虚拟环境</h2><p><code>deactive</code></p><h2 id="5-删除虚拟环境">5.删除虚拟环境</h2><p><code>rm -r venv</code></p><h2 id="6-生成requirements-txt文件">6.生成requirements.txt文件</h2><p><strong>方法一:</strong></p><p><code>pip freeze &gt; requirements.txt</code></p><p><strong>方法二:</strong></p><p><code>pip install pipreqs</code></p><p><code>pipreqs ./ --encoding=utf-8 --force</code></p><h2 id="7-使用requirements-txt文件">7.使用requirements.txt文件</h2><p><code>pip install -r requirements.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> 使用记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua语言学习笔记</title>
      <link href="/posts/5067.html"/>
      <url>/posts/5067.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-环境准备-2">0. 环境准备</h2><h3 id="0-1-简介-2">0.1 简介</h3><p><strong>Lua</strong>是由标准C编写而成的脚本语言，诞生于1993年，具有<strong>高效性</strong>、<strong>可移植性</strong>、<strong>可嵌入性</strong>、<strong>简单强大</strong>、<strong>小巧轻便</strong>、<strong>免费开源</strong>等诸多优点，主要应用场景包括做为嵌入脚本、做为独立脚本、用于应用程序的动态配置、游戏开发以及Web应用脚本等。</p><h3 id="0-2-Windows下载与安装Lua">0.2 Windows下载与安装Lua</h3><ol><li>选择合适版本的Lua语言开发包<a href="http://joedf.ahkscript.org/LuaBuilds/">下载</a></li><li>解压下载好的Lua压缩包到合适的路径</li><li>将Lua的解压路径添加到环境变量<code>Path</code>中</li><li>打开Windows命令行工具，输入指令<code>lua</code>，命令行输出Lua版本信息，安装成功</li></ol><h3 id="0-3-CentOS下载与安装Lua">0.3 CentOS下载与安装Lua</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz  # 拉取合适的Lua包tar -C /usr/local -zxvf lua-5.4.4.tar.gz  # 解压到合适的目录下cd /usr/local/lua-5.4.4/  # 进入Lua包解压路径make all test  # 开始安装ln -s /usr/local/lua-5.4.4/src/lua /usr/bin/lua  # 建立连接（可选步骤）lua -v  # 查看版本，输出Lua版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0-4-推荐IDE">0.4 推荐IDE</h3><ol><li>VSCode(微软出品) + Lua扩展插件(Tencent出品)</li><li>在线IDE  <a href="https://replit.com/languages/lua">https://replit.com/languages/lua</a></li></ol><h2 id="1-基本数据类型">1. 基本数据类型</h2><h3 id="1-1-table">1.1 table</h3><p><strong>table类型</strong>是一个"关联数组"，需要注意：</p><ol><li>table的索引可以是数字或者是字符串，所有索引值都需要用<code>[</code>和<code>]</code>括起来，如果是字符串，还可以去掉引号和中括号</li><li>table的默认初始索引一般以1开始，如果不写索引，则索引会被认为是数字，并按顺序自动从1往后排</li><li>table变量只是一个地址引用，对table操作不会产生数据影响</li><li>table不固定长度大小，有新数据插入时长度会自动增长</li><li>table里保存数据可以是任何类型，包括<code>function</code>和<code>table</code></li><li>table所有元素之间用逗号<code>,</code>隔开</li></ol><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 初始化</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 指定值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"lua"</span>mytable<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"table"</span><span class="token comment">-- 修改值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token comment">-- 获取值</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 输出：Lua</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">-- 输出：table</span><span class="token comment">-- 移除引用</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-string">1.2 string</h3><p><strong>string类型</strong>可以使用双引号<code>""</code>或单引号<code>''</code>声明，如果是块字符串，可以以<code>[[</code>开始，以<code>]]</code>结尾。<br>字符串不可修改值，可以通过<code>string.gsub</code>函数来替换字符串中的子串。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token string">'1024'</span>b <span class="token operator">=</span> <span class="token string">'3.14159'</span>c <span class="token operator">=</span> <span class="token string">"Hello"</span>d <span class="token operator">=</span> <span class="token string">"2022"</span>e <span class="token operator">=</span> <span class="token string">[[&lt;html&gt;&lt;head /&gt;&lt;body&gt;&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment">-- 输出：1024   3.14159 Hello  2022</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">--[[ 输出：&lt;html&gt;&lt;head /&gt;&lt;body&gt;&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-number">1.3 number</h3><p><strong>number类型</strong>只有一种，即<strong>双精度浮点double类型</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">1024</span>b <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1024    number</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：3.14159 number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-boolean">1.4 boolean</h3><p><strong>boolean类型</strong>只有两个可选值：<strong>true</strong>（真）和 <strong>false</strong>（假）。<strong>判断时false和nil都是假，其他都为真</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token keyword">true</span>b <span class="token operator">=</span> <span class="token keyword">false</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：true    boolean</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：false   boolean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-nil">1.5 nil</h3><p><strong>nil类型</strong>表示一个无效值，只有值<code>nil</code>，如果打印没有赋值的变量，则会输出nil。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"first: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：first:  nil</span>a <span class="token operator">=</span> <span class="token number">1024</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"second: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：second:   1024</span>a <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"third: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">-- 输出：third:  nil</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"nil"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a is nil"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a is not nil"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 输出：a is nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：要判断变量是否为 nil 的时候，需要使用 type 获取变量的类型，然后与字符串的 nil 进行比较</p><h3 id="1-6-function">1.6 function</h3><p><strong>function类型</strong>是由C或Lua编写的完成某一功能的程序指令的集合，称为函数，可分为<strong>自定义函数</strong>和<strong>系统函数</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">end</span>result1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result1 = %d, result2 = %d"</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：result1 = 300, result2 = 1123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-thread">1.7 thread</h3><p><strong>thread类型</strong>表示执行的独立线路，用于执行协同程序。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">end</span>cor <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>cor<span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>cor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：thread: 0x13691f0   thread--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8-userdata">1.8 userdata</h3><p><strong>userdata类型</strong>是一种用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型，可以将任意C/C++的任意数据类型的数据存储在Lua变量中调用。</p><p>userdata可分为<strong>full userdata</strong>和<strong>light userdata</strong>。</p><table><thead><tr><th></th><th>full userdata</th><th>light userdata</th></tr></thead><tbody><tr><td>定义</td><td>用户自定义数据</td><td>一种表示C指针的值，不用创建</td></tr><tr><td>使用</td><td>需要显示的创建一块内存，该段内存有Lua垃圾回收器管理，不需要使用者关心</td><td>存储在栈上，使用者需要关心内存使用</td></tr><tr><td>创建</td><td>没有进行参数合法性检查<br><code>void *lua_newuserdata(lua State *L, size_t size);</code><br>有进行参数合法性检查<br><code>void *lua_checkudata(lua State *L, int arg, const char *tname);</code></td><td><code>void lua_pushlightuserdata(lua_State *L, void *p);</code></td></tr><tr><td>其他</td><td>可以指定其<strong>metatable</strong>和<strong>metamethods</strong></td><td>不可以指定其<strong>metatable</strong>和<strong>metamethods</strong></td></tr></tbody></table><h2 id="2-注释">2. 注释</h2><h3 id="2-1-单行注释">2.1 单行注释</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 这是行注释</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">)</span><span class="token comment">-- 这是行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-多行注释">2.2 多行注释</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--[[这是块注释，块注释可以注释多行内容--]]</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-变量">3. 变量</h2><p>变量相当于内存中一个数据存储空间的表示，通过变量名可以访问到变量的具体的值。</p><p>Lua的变量在定义时不需要指定明确的类型，而是会根据赋的默认值来断定变量的类型。</p><h3 id="3-1-变量赋值">3.1 变量赋值</h3><p>赋值是给已经定义的变量重新设置值的过程。</p><p>同时为多个变量赋值时：</p><ul><li><p>当变量个数 &gt; 值的个数时，按变量个数补足nil</p></li><li><p>当变量个数 &lt; 值的个数时，多余的值会被忽略</p></li></ul><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token keyword">true</span>c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token number">2022</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address <span class="token operator">=</span> <span class="token string">"Xiaoming"</span><span class="token punctuation">,</span> <span class="token number">18</span>day<span class="token punctuation">,</span> week <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"星期四"</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">-- 输出：1   true</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token comment">-- 输出：Hello  2022</span><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token comment">-- 输出：XiaoMing   18   nil</span><span class="token function">print</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> week<span class="token punctuation">)</span><span class="token comment">-- 输出：30  星期四</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-全局变量和局部变量">3.2 全局变量和局部变量</h3><p>变量根据作用域可分为全局变量和局部变量，且用<code>local</code>显式声明的变量为局部变量，其余全部为全局变量。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pi <span class="token operator">=</span> <span class="token number">3.14159</span>    <span class="token keyword">local</span> name <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token keyword">end</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"pi = "</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token comment">-- 输出：a =    1024   pi =   3.14159</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name = "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment">-- 输出：name =  nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-类型转换">3.3 类型转换</h3><p>Lua中，除了table类型，其他任何类型的变量都可以通过<code>tostring</code>函数转化为字符串类型。</p><p>能表示数字的字符串类型的变量可以通过<code>tonumber</code>函数转化为数字类型。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token keyword">true</span>sa <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>sb <span class="token operator">=</span> <span class="token function">tostring</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"sa = "</span><span class="token punctuation">,</span> sa<span class="token punctuation">,</span> <span class="token string">"type(sa) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sa =    100 type(sa) =  string</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"sb = "</span><span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token string">"type(sb) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sb =    true    type(sb) =  string</span>sc <span class="token operator">=</span> <span class="token string">"3.14"</span>sd <span class="token operator">=</span> <span class="token string">"0XA"</span>c <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"type(c) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：c =    3.14    type(c) =  number</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"type(d) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：d =    10    type(d) =  number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-获取输入">3.4 获取输入</h3><p>使用<code>io.read</code>函数获取用户输入。</p><p>可选参数：</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>“*n”</td><td>读取一个数字</td></tr><tr><td>“*a”</td><td>从当前位置读取剩余的全部内容</td></tr><tr><td>"*l”</td><td>读取下一行内容</td></tr><tr><td>10</td><td>读取指定数字的长度</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> name <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"name = "</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"type(name) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 用户输入：Lua</span><span class="token comment">-- 输出：name =   lua type(name) =   string</span><span class="token keyword">local</span> num <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"*n"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num = "</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token string">"type(num) = "</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 用户输入：1024</span><span class="token comment">-- 输出：name =   1024 type(name) =   number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-格式化输出">3.5 格式化输出</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">name <span class="token operator">=</span> <span class="token string">"lua"</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"name = %s, age = %d"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：name = lua, age = 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-循环控制">4. 循环控制</h2><p>循环控制就是让程序满足一定的条件就一直循环的去执行，直到条件不满足，则跳出循环继续执行循环以外的语句。</p><h3 id="4-1-while">4.1 while</h3><p><strong>while循环</strong>，<strong>当型循环</strong>，先判断条件，满足则执行循环，否则不进入循环。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token keyword">local</span> j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token keyword">do</span>        io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = % -6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">end</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-repeat-…-until">4.2 repeat … until</h3><p><strong>repeat until循环</strong>，<strong>直到型循环</strong>，后判断条件，满足则跳出循环，不满足则进入循环，<strong>循环至少会执行1次</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">repeat</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> num    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">until</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">repeat</span>    <span class="token keyword">local</span> j <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">repeat</span>        io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %-6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">until</span> j <span class="token operator">&gt;</span> i  i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">until</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-for">4.3 for</h3><p>如果循环的语句是<code>for i = 1, 9, 1 do ...</code>，表示从1开始，大于9结束，每次步进1。如果是步进1，最后1可以省略，变为<code>for i = 1, 9 do ...</code>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 求和</span><span class="token keyword">local</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> num<span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sum = %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 5050</span><span class="token comment">-- 打印乘法表</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token keyword">do</span>  <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token keyword">do</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %-6d"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 * 1 =  1    1 * 2 =  2    2 * 2 =  4    1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81--]]</span><span class="token comment">-- 遍历table</span>weekdays <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sunday"</span><span class="token punctuation">,</span><span class="token string">"Monday"</span><span class="token punctuation">,</span><span class="token string">"Tuesday"</span><span class="token punctuation">,</span><span class="token string">"Wednesday"</span><span class="token punctuation">,</span><span class="token string">"Thursday"</span><span class="token punctuation">,</span><span class="token string">"Friday"</span><span class="token punctuation">,</span><span class="token string">"Saturday"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>weekdays<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s --&gt; %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 --&gt; Sunday2 --&gt; Monday3 --&gt; Tuesday4 --&gt; Wednesday5 --&gt; Thursday6 --&gt; Friday7 --&gt; Saturday--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-break">4.4 break</h3><p>终止循环的继续运行，如果有多层循环，只能终止当层循环，无法终止外层循环。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            <span class="token keyword">break</span>        <span class="token keyword">end</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d, j = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0, j = 0i = 0, j = 1i = 1, j = 0i = 1, j = 1--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Lua中没有continue语句</strong>，但是可以借助for循环以及repeat until循环实现continue功能。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span>    <span class="token keyword">repeat</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">then</span>            <span class="token keyword">break</span>        <span class="token keyword">end</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">until</span> <span class="token keyword">true</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0i = 1i = 3i = 4--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-return">4.5 return</h3><p>使用<strong>return语句</strong>，终止循环、函数的执行。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"i = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：i = 0i = 1i = 2--]]</span><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"value &lt;= 0"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">end</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"value &gt; 0"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：value &gt; 0value &lt;= 0--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-goto">4.6 goto</h3><p>允许将控制流程无条件地转到被标记的语句处，<strong>仅lua5.2以上版本支持</strong>。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">::</span>label<span class="token punctuation">::</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-- goto label --"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">then</span>    <span class="token keyword">goto</span> label<span class="token keyword">end</span><span class="token comment">--[[ 输出：-- goto label ---- goto label ----]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-pairs和ipairs">4.7 pairs和ipairs</h3><p><strong>pairs和iparis</strong>都是能遍历集合（表、数组），但是<strong>iparis</strong>仅仅遍历值，按照索引升序遍历，索引中断停止遍历，即不能返回nil，只能返回数字0，如果遇到nil则退出。只能遍历到集合中出现的第一个不是整数的key。<strong>pairs</strong>能遍历集合的所有元素。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"t"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   A2   B5   yest   no1   A2   B--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-分支控制">5. 分支控制</h2><p>分支控制就是让程序有选择的执行，主要分为：<strong>单分支</strong>、<strong>双分支</strong>和<strong>多分支</strong>形式。</p><h3 id="5-1-if">5.1 if</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a &gt; bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-else">5.2 else</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:Out If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-elseif">5.3 elseif</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a == b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a == bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-条件嵌套">5.4 条件嵌套</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">local</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &gt; b"</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a == b"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a &lt;= b"</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Out If"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出:a == bOut If--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-函数">6. 函数</h2><p>在程序中，编写函数的<strong>主要目的</strong>是将一个需要很多行代码的复杂问题分解为一系列简单的任务来解决，而且，同一个函数可以被多次调用，有助于代码重用。</p><h3 id="6-1-function">6.1 function</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">end</span>result1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result1 = %d, result2 = %d"</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--输出：result1 = 300, result2 = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-多返回值">6.2 多返回值</h3><p>Lua中的函数可以不返回任何值，也可以返回一个值，也支持返回多个值。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">check_user</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>    <span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">85</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token keyword">true</span>    <span class="token keyword">elseif</span> score <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token keyword">true</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token keyword">false</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> level1<span class="token punctuation">,</span> isOk <span class="token operator">=</span> <span class="token function">check_user</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token keyword">local</span> level2<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">check_user</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"level1 = %s, level2 = %s"</span><span class="token punctuation">,</span> level1<span class="token punctuation">,</span> level2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：level1 = A, level2 = C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-可变参数">6.3 可变参数</h3><p>函数参数的个数可以是任意的，可变参数使用<code>...</code>来表示，若想要获取用户传入的所有的参数，可以使用<code>arg</code>变量。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">local</span> arg <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">iparis</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">do</span>        result <span class="token operator">=</span> result <span class="token operator">+</span> v    <span class="token keyword">end</span>    <span class="token keyword">return</span> result<span class="token keyword">end</span>result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"result = %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：result = 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-匿名函数">6.4 匿名函数</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">test_func</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> fun<span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>tab <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"val1"</span><span class="token punctuation">,</span> key2 <span class="token operator">=</span> <span class="token string">"val2"</span><span class="token punctuation">}</span><span class="token function">test_func</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> key <span class="token operator">..</span> <span class="token string">" = "</span> <span class="token operator">..</span> val <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：key1 = val1key2 = val2--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-闭包">6.5 闭包</h3><p>闭包的主要作用：</p><ul><li>简洁，不需要在不使用时生成对象，也不需要函数名</li><li>可以捕获外部变量形成不同的调用环境</li></ul><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> index    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> inner1 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inner1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1   2</span><span class="token keyword">local</span> inner2 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：1   2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-运算符">7. 运算符</h2><h3 id="7-1-算术运算符">7.1 算术运算符</h3><p><strong>算术运算符</strong>是对数值类型的变量进行运算的。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-4</td><td>-3</td></tr><tr><td>+</td><td>加法运算</td><td>5 + 5</td><td>10</td></tr><tr><td>-</td><td>减法运算</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘法运算</td><td>5 * 2</td><td>10</td></tr><tr><td>/</td><td>除法运算</td><td>10  / 3</td><td>3.3</td></tr><tr><td>%</td><td>取余运算</td><td>10 % 3</td><td>1</td></tr><tr><td>^</td><td>幂运算</td><td>2^3</td><td>8</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token keyword">local</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">local</span> d <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token keyword">local</span> e <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token keyword">local</span> f <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token keyword">local</span> g <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token keyword">local</span> h <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"c = %d, d = %d, e = %d, f = %f, g = %d, h = %d"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：c = -17, d = -23, e = -60, f = -6.666667, g = 1, h = -8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-关系运算符">7.2 关系运算符</h3><p><strong>关系运算符</strong>结果要么是真，要么是假。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等</td><td>4 == 3</td><td>false</td></tr><tr><td>~=</td><td>不等于</td><td>4 ~= 3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 3</td><td>true</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">local</span> c <span class="token operator">=</span> a <span class="token operator">==</span> b<span class="token keyword">local</span> d <span class="token operator">=</span> a <span class="token operator">~=</span> b<span class="token keyword">local</span> e <span class="token operator">=</span> a <span class="token operator">&gt;</span> b<span class="token keyword">local</span> f <span class="token operator">=</span> a <span class="token operator">&lt;</span> b<span class="token keyword">local</span> g <span class="token operator">=</span> a <span class="token operator">&gt;=</span> b<span class="token keyword">local</span> h <span class="token operator">=</span> a <span class="token operator">&lt;=</span> b<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"e = "</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token string">"f = "</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"g = "</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token string">"h = "</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token comment">-- 输出：c =     false   d =     true    e =     true    f =     false   g =     true    h =     false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-逻辑运算符">7.3 逻辑运算符</h3><p><strong>逻辑运算符</strong>用来连接多个条件，最终返回是true或false，使用逻辑运算符可以模拟三目运算符。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>A and B，如果A的值为假，则不会再计算B的值</td></tr><tr><td>or</td><td>逻辑或</td><td>A or B，如果A的值为真，则不会再计算B的值</td></tr><tr><td>not</td><td>逻辑非</td><td>not A</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> age <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">local</span> b <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">and</span> age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token keyword">local</span> c <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token keyword">or</span> age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token keyword">local</span> d <span class="token operator">=</span> <span class="token keyword">not</span> age<span class="token keyword">local</span> e <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token keyword">nil</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token number">0</span><span class="token keyword">local</span> g <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">and</span> age <span class="token keyword">or</span> <span class="token number">30</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b = "</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"c = "</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"d = "</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">"e = "</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token string">"f = "</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"g = "</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token comment">-- 输出：b =     true    c =     false   d =     false   e =     true   f =     false   g = 40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-其他运算符">7.4 其他运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>…</td><td>连接运算符</td><td>str1…str2</td></tr><tr><td>#</td><td>获取字符串长度</td><td>#str1</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">local</span> str2 <span class="token operator">=</span> <span class="token string">"lua"</span><span class="token keyword">local</span> str3 <span class="token operator">=</span> str1<span class="token operator">..</span>str2<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str3 = %s, #str3 = %d"</span><span class="token punctuation">,</span> str3<span class="token punctuation">,</span> <span class="token operator">#</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str3 = hellolua, #str3 = 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-字符串">8. 字符串</h2><h3 id="8-1-字符串函数">8.1 字符串函数</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>upper(arg)</td><td>字符串全部转为大写字母</td></tr><tr><td>lower(arg)</td><td>字符串全部转为小写字母</td></tr><tr><td>sub(s, i, [,j])</td><td>截取字符串</td></tr><tr><td>gsub(mainString, findString, replaceString, num)</td><td>在字符串中替换</td></tr><tr><td>dump(function)</td><td>把函数序列化为字符串来保存</td></tr><tr><td>find(str, substr, [init, [end]])</td><td>在字符串中查找，存在返回具体位置，不存在返回nil</td></tr><tr><td>reverse(arg)</td><td>字符串反转</td></tr><tr><td>format(…)</td><td>返回一个格式化字符串</td></tr><tr><td>char(arg)</td><td>将整型数字转化为字符并连接</td></tr><tr><td>byte[arg[int,]]</td><td>byte转换字符为整数值</td></tr><tr><td>len(arg)</td><td>计算字符串长度</td></tr><tr><td>rep(string, n)</td><td>返回字符串string的n个拷贝</td></tr><tr><td>…</td><td>连接两个字符串</td></tr><tr><td>gmatch(str, pattern)</td><td>迭代器函数，每次调用返回一个查找到的子串</td></tr><tr><td>match(str, pattern, init)</td><td>查找第一个配对的子串</td></tr></tbody></table><h3 id="8-1-大小写转换">8.1 大小写转换</h3><p><code>string.upper(s)</code> 用于将字符串中所有字母转化为大写。</p><p><code>string.lower(s)</code> 用于将字符串中所有字母转化为小写。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">upper</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello Lua, str2 = HELLO LUA, str3 = hello lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-字符串截取">8.2 字符串截取</h3><p><code>string.sub(s, i [, j])</code> 用于字符串截取，返回字符串s从第i个字符到第j个字符的子串。注意，字符串的第1个字符索引是1。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello Lua, str2 = Hello, str3 = Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-字符串替换">8.3 字符串替换</h3><p><code>string.gsub(mainString, findString, replaceString, num)</code> 用于字符串替换，num指定替换字符串的次数，默认全部替换。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello world, Hello Lua"</span>str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Nihao"</span><span class="token punctuation">)</span>str3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Nihao"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1 = %s, str2 = %s, str3 = %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1 = Hello world, Hello Lua, str2 = Nihao world, Nihao Lua, str3 = Nihao world, Hello Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-序列化与加载">8.4 序列化与加载</h3><p><code>string.dump(function)</code> 用于将函数序列化为字符串，便于函数的保存与传输<code>loadstring(str)</code> 用于将序列化后的函数字符串反序列化加载为函数。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span>str <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token function">loadstring</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：uaQ 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-字符串查找">8.5 字符串查找</h3><p><code>string.find(str, substr, [init, [end]])</code> 用于在一个指定的目标字符串中搜素指定的内容，返回其具体位置，不存在返回nil，也支持使用正则匹配查找。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"Hello Lua"</span>index1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"Lua"</span><span class="token punctuation">)</span>index2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>index3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"%s%u%a."</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"index1 = "</span><span class="token punctuation">,</span> index1<span class="token punctuation">,</span> <span class="token string">"index2 = "</span><span class="token punctuation">,</span> index2<span class="token punctuation">,</span> <span class="token string">"index3 = "</span><span class="token punctuation">,</span> index3<span class="token punctuation">)</span><span class="token comment">-- 输出：index1 =   7   index2 =   nil   index3 =   6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-6-字符串反转">8.6 字符串反转</h3><p><code>string.reverse(arg)</code> 用于反转字符串。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str <span class="token operator">=</span> <span class="token string">"Hello Lua"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s, res = %s"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str = Hello Lua, res = auL olleH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-7-格式化字符串">8.7 格式化字符串</h3><table><thead><tr><th>格式</th><th>描述</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>接收数字，转化为字符</td><td>%d,%i</td><td>接收数字，转化为有符号整数</td></tr><tr><td>%o</td><td>接收数字，转化为八进制数</td><td>%u</td><td>接收数字，转化为无符号整数</td></tr><tr><td>%x</td><td>接收数字，转化为十六进制数，使用小写字母</td><td>%X</td><td>接收数字，转化为十六进制数，使用大写字母</td></tr><tr><td>%e</td><td>接收数字，转化为科学计数法，使用小写字母e</td><td>%E</td><td>接收数字，转化为科学计数法，使用大写字母E</td></tr><tr><td>%f</td><td>接收数字，转化为浮点数</td><td>%g,%G</td><td>接收数字，转化为%e,%f中较短格式</td></tr><tr><td>%q</td><td>接收字符串，转化为可安全被Lua编译器读入的格式</td><td>%s</td><td>接收字符串，按给定参数格式化字符串</td></tr><tr><td>%+</td><td>表示其后的数字转义符将让正数显示正号</td><td>%占位符</td><td>在后面指定了字串宽度时占位用</td></tr><tr><td>%对齐标识</td><td>在指定了字串宽度时, 默认为右对齐, 增加 - 号改为左对齐</td><td>%宽度数值</td><td>占位宽度</td></tr><tr><td>%小数位数/字串裁切</td><td>数字保留位数，字符串做裁切</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%+d"</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：A+1700017--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-数字与字符的转换">8.8 数字与字符的转换</h3><p><code>string.char(arg)</code> 用于将整数转化为字符并连接。</p><p><code>string.byte(arg[,int])</code> 用于将字符转化为整数并连接，int表示要转换的字符。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">char</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：abc67--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-9-字符串长度">8.9 字符串长度</h3><p><code>string.len()</code>用于获取字符串长度，另外<code>#</code>也可以获取字符串长度。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"ABC"</span>str2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str1's len = %d, str2's len = %d"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">#</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str1's len = 3, str2's len = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-10-字符串拷贝">8.10 字符串拷贝</h3><p><code>string.rep(string, n)</code> 用于将字符串拷贝n次。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">rep</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：str = ABCDABCD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-11-字符串连接">8.11 字符串连接</h3><p>字符串可以使用<code>..</code>连接。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">str1 <span class="token operator">=</span> <span class="token string">"hello"</span>str2 <span class="token operator">=</span> <span class="token string">"lua"</span>res <span class="token operator">=</span> str1 <span class="token operator">..</span> <span class="token string">" "</span> <span class="token operator">..</span> str2<span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"res = %s"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：hello lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-12-字符串匹配">8.12 字符串匹配</h3><p><code>string.gmatch(str, pattern)</code> 是一个迭代器函数，每调用一次，返回一个在字符串str查找到的符合pattern描述的子串，如果没找到返回nil，也支持正则匹配。</p><p><code>string.match(str, pattern, init)</code> 只找寻str中第一个配对，搜索起点可配置，也支持正则匹配。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> word <span class="token keyword">in</span> string<span class="token punctuation">.</span><span class="token function">gmatch</span><span class="token punctuation">(</span><span class="token string">"Hello Lua"</span><span class="token punctuation">,</span> <span class="token string">"%a+"</span><span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"I have 2 questions for you."</span><span class="token punctuation">,</span> <span class="token string">"%d+ %a+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：HelloLua2 questions--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-13-转义字符">8.13 转义字符</h3><table><thead><tr><th>转义字符</th><th>意义</th><th>转义字符</th><th>意义</th></tr></thead><tbody><tr><td>\a</td><td>响铃</td><td>\b</td><td>退格，将当前位置移到前一列</td></tr><tr><td>\f</td><td>换页，将当前位置移到下页开头</td><td>\n</td><td>换行，将当前位置移到下一行开头</td></tr><tr><td>\r</td><td>回车，将当前位置移到本行开头</td><td>\t</td><td>水平制表，跳到下一个Tab位置</td></tr><tr><td>\v</td><td>垂直制表</td><td>\</td><td>代表一个反斜线字符</td></tr><tr><td>’</td><td>代表一个单引号字符</td><td>"</td><td>代表一个双引号字符</td></tr><tr><td>\0</td><td>空字符</td><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td></tr><tr><td>\xhh</td><td>1到2位十六进制数所代表的任意字符</td><td></td><td></td></tr></tbody></table><h2 id="9-Table">9. Table</h2><p><strong>数组与表的类型都为table</strong>。</p><p>数组的语法为<code>arrName = {element1, element2, ....}</code>，数组保存的一组数据类型可以不一致，数组的索引值是以1为起始的，也可以人为指定为0开始，如<code>arrName = {[0]=element1, element2, ....}</code>。</p><p>表是一个 “关联数组”，表的索引可以是数字或者是字符串，所有索引值都需要用 <code>[</code> 和 <code>]</code> 括起来；如果没有 [] 括起，则认为是字符串索引，可以认为，数组是索引为以0或1开始的连续数字的一种特殊的表，因此，表的一些增删改查行为函数也适用于数组。</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>concat</td><td>连接</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>maxn</td><td>最大key</td></tr><tr><td>remove</td><td>移除</td></tr><tr><td>sort</td><td>升序排序</td></tr></tbody></table><h3 id="9-1-定义">9.1 定义</h3><p><code>#</code>后面直接加数组名可以获取数组的长度，如果设置了索引从0开始，则获取到的数组长度会比实际的长度少1。</p><p><code>#</code>后面直接加表名无法准确获取数组的长度，会在索引中断的地方停止计数，应该用循环遍历来获取正确长度。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 数组</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>letters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span>letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"B"</span>letters<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C"</span>letters<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"D"</span>letters<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"E"</span>days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">}</span>numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">}</span>all <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Len: letters = %d, days = %d, numbers = %d, all = %d"</span><span class="token punctuation">,</span> <span class="token operator">#</span>letters<span class="token punctuation">,</span> <span class="token operator">#</span>days<span class="token punctuation">,</span> <span class="token operator">#</span>numbers<span class="token punctuation">,</span> <span class="token operator">#</span>all<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Len: letters = 5, days = 6, numbers = 3, all = 4</span><span class="token comment">-- 表</span>mytable1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>mytable2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Len: mytable1 = %d, mytable2 = %d"</span><span class="token punctuation">,</span> <span class="token operator">#</span>mytable1<span class="token punctuation">,</span> <span class="token operator">#</span>mytable2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Len: mytable1 = 1, mytable2 = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-遍历">9.2 遍历</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 数组</span>days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">#</span>days <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"days[%d] = %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：days[0] = Mondaydays[1] = Tuesdaydays[2] = Wednesdaydays[3] = Thursdaydays[4] = Fridaydays[5] = Saturdaydays[6] = Sunday--]]</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"letters[%d] = %s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：letters[1] = Aletters[2] = Bletters[3] = Cletters[4] = Dletters[5] = E--]]</span><span class="token comment">-- 表</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   Lua3   Countgreet   Hello--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-连接">9.3 连接</h3><p><code>table.concat(table [, sep [, start [, end]]])</code> 函数列出参数中指定table的数组部分从start位置到end位置的所有元素，元素键以指定分隔符sep隔开，start默认为1。注：该函数只处理table下标为数字的数据，且下标是连续的才能被处理，断开就结束了。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：orange, apple, banana</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>letters<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：B, C, D, E</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"str = %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-插入">9.4 插入</h3><p><code>table.insert(table [pos,] value)</code> 函数在table指定位置pos插入一个value元素，pos默认为数组部分末尾，即连续下标元素的最后。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"watermelon"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   orange2   apple3   watermelon4   banana--]]</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>letters<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"W"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span>， <span class="token operator">#</span>letters <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：0   A1   B2   C3   W4   D5   E--]]</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Table"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">#</span>mytable<span class="token punctuation">)</span><span class="token comment">--[[ 输出：1   Lua2   Table3   Countgreet   Hello3--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-5-最大值">9.5 最大值</h3><p><code>table.maxn(table)</code> 函数返回table的最大正数索引，如果没有正数索引返回0。Lua5.2之后的版本已移除该函数。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">)</span>letters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：343--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-6-删除">9.6 删除</h3><p><code>table.remove(table [,pos])</code> 函数删除指定pos位置的元素，pos默认为table长度。即连续索引的最大值。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span>remove1 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>remove2 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"remove1 = %s, remove2 = %s"</span><span class="token punctuation">,</span> remove1<span class="token punctuation">,</span> remove2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：remove1 = banana, remove2 = orange</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lua"</span><span class="token punctuation">,</span> greet <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Count"</span><span class="token punctuation">}</span>remove <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"remove = %s"</span><span class="token punctuation">,</span> remove<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：remove = Lua</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-7-排序">9.7 排序</h3><p><code>table.sort(table [,comp])</code> 函数用于对给定的table进行升序排序，还支持传入排序规则。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> test0 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span> <span class="token keyword">do</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>v<span class="token operator">..</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> test1 <span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"deng"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"luo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"yang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"ma"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"wu"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>table<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token keyword">do</span>   <span class="token function">print</span><span class="token punctuation">(</span>test1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> test1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1 2 3 4 6 7 8 91   deng2   yang5   wu8   ma9   luo--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-元素metatable">10. 元素metatable</h2><h3 id="10-1-定义-2">10.1 定义</h3><p>Lua的table中可以访问对应的key来得到value值，但是却无法对两个table进行操作。元表允许改变table的行为，每个行为关联了对应的元方法。如两个table相加操作<code>a+b</code>，当Lua尝试对两个表相加时，先检查两者之一是否有元表，之后检查<code>__add</code>字段是否存在，如果操作，则调用相应的值。<code>__add</code>等即时字段其对应的值就是元方法。</p><p>有两个重要的函数处理元表：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>setmetatable(table, metatable)</td><td>对指定的table设置元表，如果元表中存在<code>__metatable</code>键值，则setmetatable会失败</td></tr><tr><td>getmetatable(table)</td><td>返回对象的元表</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token comment">-- 普通表</span>mymetatable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 元表</span><span class="token function">setmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> mymetatable<span class="token punctuation">)</span> <span class="token comment">-- 设置元表</span><span class="token function">getmetatable</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token comment">-- 返回元表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-index元方法">10.2 __index元方法</h3><p><code>__index</code>元方法用来对表访问。</p><p>Lua查找一个表元素时的规则：</p><p>1 在表中查找，如果找到，返回该元素，找不到继续</p><p>2 判断该表是否有元表，如果没有元表，返回nil，有元表则继续</p><p>3 判断该表有没有<code>__index</code>方法，如果<code>__index</code>方法为nil，则返回nil，如果<code>__index</code>方法是一个表，则重复1、2、3步；如果<code>__index</code>方法是一个函数，则返回该函数的返回值</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">"key2"</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token string">"metatablevalue"</span>        <span class="token keyword">else</span>           <span class="token keyword">return</span> <span class="token keyword">nil</span>        <span class="token keyword">end</span>     <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"key1 = %s, key2 = %s"</span><span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：key1 = value1, key2 = metatablevalue</span><span class="token comment">-- 等价于</span>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__index <span class="token operator">=</span> <span class="token punctuation">{</span>key2 <span class="token operator">=</span> <span class="token string">"metatablevalue"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token comment">-- 输出：value1    metatablevalue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-newindex元方法">10.3 __newindex元方法</h3><p><code>__newindex</code>元方法用来对表更新。</p><p>当给表的一个缺少的索引赋值，解释器会查找<code>__newindex</code>元方法，如果存在，则调用这个函数而不进行赋值操作。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token string">"value1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    __newindex <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token function">rawset</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token operator">..</span>value<span class="token operator">..</span><span class="token string">"\""</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>mytable<span class="token punctuation">.</span>key1 <span class="token operator">=</span> <span class="token string">"new value"</span>mytable<span class="token punctuation">.</span>key2 <span class="token operator">=</span> <span class="token number">4</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">foramt</span><span class="token punctuation">(</span><span class="token string">"key1 = %s, key2 = %s"</span><span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key1<span class="token punctuation">,</span> mytable<span class="token punctuation">.</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 输出：key1 = new value, key2 = "4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-call元方法">10.4 __call元方法</h3><p><code>__call</code>元方法可以让table当做一个函数来使用。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> mt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>mt<span class="token punctuation">.</span>__call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span> <span class="token keyword">do</span>        <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">setmetatable</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：123--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-5-tostring元方法">10.5 __tostring元方法</h3><p><code>__tostring</code>元方法用于修改表的输出行为。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>__tostring <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> v        <span class="token keyword">end</span>    <span class="token keyword">return</span> <span class="token string">"sum = "</span> <span class="token operator">..</span>sum    <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token comment">-- 输出：sum = 60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-6-为表添加操作符">10.6 为表添加操作符</h3><table><thead><tr><th>模式</th><th>等价于运算符</th><th>模式</th><th>等价于运算符</th></tr></thead><tbody><tr><td>__add</td><td>+</td><td>__sub</td><td>-</td></tr><tr><td>__mul</td><td>*</td><td>__div</td><td>/</td></tr><tr><td>__mod</td><td>%</td><td>__unm</td><td>-</td></tr><tr><td>__concat</td><td>…</td><td>__eq</td><td>==</td></tr><tr><td>__lt</td><td>&lt;</td><td>__le</td><td>&lt;=</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">local</span> mn <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> mn <span class="token operator">&lt;</span> k <span class="token keyword">then</span>            mn <span class="token operator">=</span> k        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> mn<span class="token keyword">end</span><span class="token comment">-- 两表相加</span>mytable <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    __add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> newtable<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>newtable<span class="token punctuation">)</span> <span class="token keyword">do</span>            table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mytable<span class="token punctuation">,</span> <span class="token function">table_maxn</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> newtable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">end</span>        <span class="token keyword">return</span> mytable   <span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>secondtable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>mytable <span class="token operator">=</span> mytable <span class="token operator">+</span> secondtable<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>mytable<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">--[[ 输出：1   12   23   34   45   56   6--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-模块与包">11. 模块与包</h2><h3 id="11-1-模块定义">11.1 模块定义</h3><p>模块类似于一个封装库，是由变量、函数等已知元素组成的table，因此创建模块就是创建一个table，然后把需要导出的常量、函数放入其中，最后返回这个table即可。如下创建自定义模块module。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 文件名 module.lua</span><span class="token comment">-- 定义一个名为module的模块</span>module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 定义一个常量</span>module<span class="token punctuation">.</span>constant <span class="token operator">=</span> <span class="token string">"this is constant"</span><span class="token comment">-- 定义一个函数</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"This is a public function\n"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"This is a private function"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2-require函数">11.2 require函数</h3><p><code>require("模块名")</code>用来加载模块，执行require后会返回一个由模块常量或函数组成的table，并且还会定义一个包含该table的全局变量。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token comment">-- 别名变量 m</span><span class="token keyword">local</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>constant<span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：this is constantThis is a private function--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>require函数会尝试从Lua文件或C程序中加载模块，require用于搜索Lua文件的路径存放在全局变量package_path中，当Lua启动后，会以环境变量LUA_PATH的值来初始化这个环境变量，如果找不到该环境变量，则使用一个编译时定义的默认路径来初始化。</p><p>可以自定义设置路况，在当前用户跟目录下打开.profile文件（没有则创建，打开.bashrc文件也可以），例如把"~/lua/"路径加入LUA_PATH环境变量里。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#LUA_PATHexport LAU_PATH="~/lua/?.lua;;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件路径以";“号分割，最后两个”;;"表示新加的路径后面加上原来的默认路径。</p><p>接着执行指令<code>source ~/.profile</code>更新变量参数使之生效。</p><p>如果找到目标文件，则会调用<code>package.loadfile</code>来加载模块，否则就会找C程序库。</p><p>搜索的文件路径是从全局变量 package.cpath 获取，而这个变量则是通过环境变量 LUA_CPATH 来初始。</p><p>搜索的策略跟上面的一样，只不过现在换成搜索的是 so 或 dll 类型的文件。如果找得到，那么 require 就会通过 package.loadlib 来加载它。</p><h3 id="11-3-module函数">11.3 module函数</h3><p><code>module()</code>函数调用时会创建表并将其赋予给全局变量和loaded table，最后还会将这个表设置为主程序块的环境。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 在模块文件在使用module函数</span>module <span class="token string">"module_name"</span><span class="token comment">--[[等同语法--]]</span><span class="token comment">-- 定义模块名</span><span class="token keyword">local</span> moduleName <span class="token operator">=</span> <span class="token string">"module_name"</span><span class="token comment">-- 定义用于返回的模块表</span><span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">-- 将模块表加入到全局变量</span>_G<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token comment">-- 将模块表加入到package.loaded中防止多次加载</span>package<span class="token punctuation">.</span>loaded<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token comment">-- 将模块表设置为函数的环境表，使得模块中的所有操作都是在模块表中，这样定义函数就直接定义在模块表中</span><span class="token function">setfenv</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> M<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-4-调用C语言包">11.4 调用C语言包</h3><p>Lua和C语言很容易结合，可以使用C语言为Lua写包，C语言包使用前必须先加载并连接，大多数系统是通过动态连接库机制。</p><p>Lua在一个加loadlib的函数内提供了所有的动态连接功能。这个函数的两个参数：库的绝对路径和初始化函数，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> path <span class="token operator">=</span> <span class="token string">"/usr/local/lua/lib/libluasocket.so"</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">loadlib</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"luaopen_socket"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>loadlib函数加载指定的库并连接到Lua，然而并没有调用初始化函数，而是返回初始化函数作为Lua的一个函数。</p><p>如果加载动态库或者查找初始化函数出错，loadlib将返回nil和错误信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> path <span class="token operator">=</span> <span class="token string">"C:\\windows\\luasocket.dll"</span><span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">loadlib</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"luaopen_socket"</span><span class="token punctuation">)</span><span class="token comment">-- 真正打开库</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下我们期望二进制的发布库包含一个与前面代码段相似的 stub 文件，安装二进制库的时候可以随便放在某个目录，只需要修改 stub 文件对应二进制库的实际路径即可。</p><p>将 stub 文件所在的目录加入到 LUA_PATH，这样设定后就可以使用 require 函数加载 C 库了。</p><h2 id="12-协程">12. 协程</h2><h3 id="12-1-定义-2">12.1 定义</h3><p>协程与线程比较类似，拥有独立的堆栈、独立的局部变量、独立的指令，同时又与其他协同程序共享全局变量和其他大部分东西。</p><p>一个具有多线程的程序可以同时运行几个线程，而协程却需要彼此写作运行，在任一指定时刻只有一个协程在运行，并且这个正在运行的协同程序只有在明确的被要求挂起时才会被挂起。</p><p>协程有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协程。</p><h3 id="12-2-用法">12.2 用法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>coroutine.create()</td><td>创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用时唤醒函数调用</td></tr><tr><td>coroutine.resume()</td><td>重启coroutine，和create配合使用</td></tr><tr><td>coroutine.yield()</td><td>挂起coroutine，将coroutine设置为挂起状态，和resume配合使用能够有很多效果</td></tr><tr><td>coroutine.status()</td><td>查看coroutine的状态，有dead、suspened、running三种状态</td></tr><tr><td>coroutine.wrap()</td><td>创建coroutine，返回一个函数，一旦调用这个函数，就进入croutine，和create功能重复</td></tr><tr><td>coroutine.running()</td><td>返回正在运行的coroutine，一个coroutine就是一个新村，返回一个coroutine的线程号</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"foo函数输出"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">return</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token keyword">end</span>co <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>     <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第一次协同程序执行输出"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        <span class="token keyword">local</span> r <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第二次协同程序执行输出"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">local</span> r<span class="token punctuation">,</span> s <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第三次协同程序执行输出"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token string">"结束协同程序"</span>   <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"--分割线--"</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：第一次协同程序执行输出 1 10foo 函数输出 2main true 4--分割线--第二次协同程序执行输出 rmain true 11 -9--分割线--第三次协同程序执行输出 x ymain true 10 结束协同程序--分割线--main false 10 cannot resume dead coroutine--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-生产者-消费者问题">12.3 生产者-消费者问题</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> newProductor<span class="token keyword">function</span> <span class="token function">productor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token function">send</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>        <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> status<span class="token punctuation">,</span> value <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>newProductor<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">end</span>newProductor <span class="token operator">=</span> coutine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>productor<span class="token punctuation">)</span><span class="token function">cosumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：1234567...--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-文件IO">13. 文件IO</h2><p>Lua文件IO库用于读取和处理文件，分为<strong>简单模式</strong>和<strong>完全模式</strong>：</p><ul><li>简单模式：拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作，适合做一些简单的文件操作</li><li>完全模式：使用外部的文件句柄来实现，以一种面向对象的形式，将所有的文件操作定义为文件句柄的方法，适合做一些高级的文件操作，如同时读取多个文件</li></ul><h3 id="13-1-简单模式">13.1 简单模式</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>io.input([file])</td><td>设置默认的输入文件，file为文件名，返回文件句柄</td></tr><tr><td>io.output([file])</td><td>设置默认的输出文件，file为文件名</td></tr><tr><td>io.close([file])</td><td>关闭文件，不带参数的默认文件</td></tr><tr><td>io.read(formats)</td><td>读取默认文件，formats取值为<code>a*</code>-全读、<code>*n</code>-按数字读入、<code>*l</code>-按行读入，<code>n</code>-读取n个字符</td></tr><tr><td>io.lines([fn])</td><td>fn文件名，如无文件，取默认文件，返回一个迭代器</td></tr><tr><td>io.write(value)</td><td>向默认文件写入内容</td></tr><tr><td>io.flush()</td><td>把文件缓存里的操作立即作用到默认输出文件</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 设置默认输入文件</span>io<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 输出文件第一行</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"read file: [%s]"</span><span class="token punctuation">,</span> io<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭文件</span>io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 以附加的方式打开只写文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment">-- 设置默认输出文件</span>io<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment">-- 在文件最后一行写入</span>io<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"File content in test.lua"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"file write success"</span><span class="token punctuation">)</span><span class="token comment">-- 关闭文件</span>io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-完全模式">13.2 完全模式</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 输出文件第一行</span><span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 以附加的方式打开只写文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment">-- 在文件最后一行写入</span>file<span class="token punctuation">::</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"--test"</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 以只读方式打开文件</span>file <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.lua"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">-- 定位到文件倒数第25个位置</span>file<span class="token punctuation">::</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token comment">-- 从当前（倒数第25个位置）读取整个文件</span><span class="token function">print</span><span class="token punctuation">(</span>file<span class="token punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"*a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 关闭打开的文件</span>file<span class="token punctuation">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-错误处理">14. 错误处理</h2><p>错误类型分为<strong>语法错误</strong>和<strong>运行错误</strong>。</p><p>语法错误通常是对程序的组件使用不当引起，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">for</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 输出：lua: main.lua:2: 'do' expected near 'print'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行错误时程序可以正常运行，但是会输出报错信息，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:2: attempt to perform arithmetic on local 'b' (a nil value)stack traceback:    main.lua:2: in function 'add'    main.lua:4: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-1-assert">14.1 assert</h3><p><code>assert(express, message)</code> 断言函数会判断给定express表达式是否成立，成立的话不做任何事情，不成立则以message作为错误信息抛出。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"a not a number"</span><span class="token punctuation">)</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">,</span> <span class="token string">"b not a number"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:3: b not a numberstack traceback:    [C]: in function 'assert'    main.lua:3: in function 'add'    main.lua:6: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-2-error">14.2 error</h3><p><code>error(message [,level])</code> 函数终止正在执行的函数，并返回message的内容作为错误信息，level参数指示获得错误的位置，level=1指出调用error位置，level=2指出调用error函数的函数吗，level=0不添加错误位置信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"a not a number"</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"b not a number"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">end</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：lua: main.lua:10: b not a numberstack traceback:    [C]: in function 'error'    main.lua:6: in function 'add'    main.lua:10: in main chunk--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3-pcall">14.3 pcall</h3><p>可以使用<code>pcall</code>函数包装需要执行的代码，<code>pcall</code>函数接收一个函数和要传递给后者的参数，并执行该函数，无错误返回true，有错误返回false和错误信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">a<span class="token punctuation">,</span> errorinfo <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> errorinfo<span class="token punctuation">)</span><span class="token comment">--[[ 输出：27true nil--]]</span>b<span class="token punctuation">,</span> errorinfo <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error..'</span><span class="token punctuation">)</span> <span class="token keyword">end</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> errorinfo<span class="token punctuation">)</span><span class="token comment">--[[ 输出：27false main.lua1: error..--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-4-xpcall">14.4 xpcall</h3><p><code>xpcall</code>函数相比<code>pcall</code>函数会返回更多的错误调试信息，并执行该函数，无错误返回true，有错误返回false和错误信息。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">myfunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token keyword">nil</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">myerrorhandler</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ERROR:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">end</span>status <span class="token operator">=</span> <span class="token function">xpcall</span><span class="token punctuation">(</span>myfunction<span class="token punctuation">,</span> myerrorhandler<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token comment">--[[ 输出：ERROR:  main.lua:2: attempt to perform arithmetic on global 'n' (a nil value)false--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-垃圾回收">15. 垃圾回收</h2><h3 id="15-1-机制">15.1 机制</h3><p>Lua运行了一个垃圾收集器收集所有死对象来完成自动内存管理的工作。</p><p>Lua实现了一个增量标记-扫描收集器，使用垃圾收集器间歇率和垃圾收集器步进倍率来控制垃圾收集循环。</p><p>垃圾收集器间歇率控制着收集器需要在开启新的循环前要等待多久。</p><p>垃圾收集器步进倍率控制收集器运作速度相对与内存分配速度的倍率，默认值是200%，即运作速度2倍于内存分配速率。</p><h3 id="15-2-垃圾回收器函数">15.2 垃圾回收器函数</h3><p>Lua提供一下函数<code>collectgarbage([opt [,arg]])</code>来控制自动内存管理。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>collectgarbage(“collect”)</td><td>做一次完整的垃圾收集循环</td></tr><tr><td>collectgarbage(“count”)</td><td>以K字节数为单位返回Lua使用的总内存数</td></tr><tr><td>collectgarbage(“restart”)</td><td>重启垃圾收集器的自动运行</td></tr><tr><td>collectgarbage(“setpause”)</td><td>将arg设为收集器的间歇率，返回间歇率的前一个值</td></tr><tr><td>collectgarbage(“setstepmul”)</td><td>返回步进倍率的前一个值</td></tr><tr><td>collectgarbage(“step”)</td><td>单步运行垃圾收集器，步长由arg控制</td></tr><tr><td>collectgarbage(“stop”)</td><td>停止垃圾收集器的运行</td></tr></tbody></table><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"collect"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">collectgarbage</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--[[ 输出：27.639648437527.6767578125026.623046875--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-面向对象">16. 面向对象</h2><h3 id="16-1-面向对象特征">16.1 面向对象特征</h3><ul><li><p>封装：能够把一个实体的信息、功能、响应都装入一个单独的对象中的特征。</p></li><li><p>继承：基础的方法允许在不改动原程序的基础上对其进行扩充，使得原功能得以保存，新功能也得以扩展，有利于减少重复代码，提高开发效率。</p></li><li><p>多态：同一操作作用于不同的对象，产生不同的执行结果，可以通过指向基类的指针，来调用实现派生类的方法。</p></li><li><p>抽象：简化复杂问题的方法，可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。</p></li></ul><h3 id="16-2-类封装">16.2 类封装</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 元类</span>Shape <span class="token operator">=</span> <span class="token punctuation">{</span> area <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment">-- 基础类方法 new</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    size <span class="token operator">=</span> size <span class="token keyword">or</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>area <span class="token operator">=</span> size <span class="token operator">*</span> size    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 基础类方法 printArea</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">pirntArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myshape <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>myshape<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The area = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-3-继承与多态">16.3 继承与多态</h3><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 元类</span>Shape <span class="token operator">=</span> <span class="token punctuation">{</span> area <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token comment">-- 基础类方法 new</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    size <span class="token operator">=</span> size <span class="token keyword">or</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>area <span class="token operator">=</span> size <span class="token operator">*</span> size    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 基础类方法 printArea</span><span class="token keyword">function</span> Shape<span class="token punctuation">:</span><span class="token function">pirntArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myshape <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>myshape<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The area = 100</span><span class="token comment">-- 继承1</span>Square <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 派生类方法 new</span><span class="token keyword">function</span> Square<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 派生类方法 printArea</span><span class="token keyword">function</span> Square<span class="token punctuation">:</span><span class="token function">printArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The Square area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>mysquare <span class="token operator">=</span> Square<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>mysquare<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The Square area = 100</span><span class="token comment">-- 继承2</span>Rectangle <span class="token operator">=</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 派生类方法 new</span><span class="token keyword">function</span> Rectangle<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> length<span class="token punctuation">,</span> breadth<span class="token punctuation">)</span>    o <span class="token operator">=</span> o <span class="token keyword">or</span> Shape<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self    self<span class="token punctuation">.</span>area <span class="token operator">=</span> length <span class="token operator">*</span> breadth    <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token comment">-- 派生类方法 printArea</span><span class="token keyword">function</span> Rectangle<span class="token punctuation">:</span><span class="token function">printArea</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The Rectangle area = "</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">-- 创建对象</span>myrectangle <span class="token operator">=</span> Rectangle<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>myrectangle<span class="token punctuation">:</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 输出：The Rectangle area = 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章-3">参考文章</h2><p>本文是笔者通过下列网站教程学习Lua的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/lua/lua-tutorial.html">【菜鸟教程Lua教程】</a></p><p>2.<a href="https://haicoder.net/lua/lua-tutorial.html">【嗨客网Lua教程】</a></p>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
            <tag> Lua基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
