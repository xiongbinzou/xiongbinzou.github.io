<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot+Vue全栈开发学习笔记</title>
      <link href="/posts/24277.html"/>
      <url>/posts/24277.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-课程介绍及环境准备">1. 课程介绍及环境准备</h2><h3 id="1-1-课程内容">1.1 课程内容</h3><p>Java EE企业级框架：SpringBoot + MyBatisPlus</p><p>Web前端核心框架：Vue + ElementUI</p><p>公共云部署：前后端项目集成打包和部署</p><h3 id="1-2-目标">1.2 目标</h3><p>掌握JavaEE企业级开发框架的使用，能够利用SpringBoot开发Web应用</p><p>掌握Web前端开发框架Vue的使用，能够完成前后端分离开发</p><p>掌握云端环境的配置与使用，能够完成前后端程序的打包部署</p><h3 id="1-3-Web应用概述">1.3 Web应用概述</h3><p>市面上的软件主要分为两种架构模式：</p><ul><li><p>B/S（Browser/Server，浏览器/服务器架构）</p><p>B/S架构的主要特点是分散性高、维护方便、开发简单、共享性高、总拥有成本低。</p><p>在B/S架构下，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端，浏览器只需要请求服务器，获取Web页面，并把Web页面展示给用户即可。</p><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230807223701414.png" alt=""></p></li><li><p>C/S（Client/Server，客户端/服务器架构）、</p><p>C/S架构的主要特点是交互性强，具有安全访问模式，网络流量低，响应速度快，客户端负责大多数业务逻辑和UI演示。C/S架构软件需要针对不同的操作系统开发不同版本的软件。</p></li></ul><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230807223006527.png" alt=""></p><h3 id="1-4-开发环境配置">1.4 开发环境配置</h3><h4 id="Java环境配置">Java环境配置</h4><p>1）下载JDK8安装包：</p><p><a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">https://www.oracle.com/java/technologies/downloads/#java8-windows</a></p><p>2）安装JDK8</p><p>双击下载好的JDK，按照提示进行默认安装即可，注意安装路径不能出现中文或空格</p><p>3）配置系统环境变量</p><p>系统环境变量新增JAVA_HOME变量，填入JDK8安装路径</p><p>系统环境变量Path变量新增——<code>%JAVA_HOME%\bin</code></p><p>系统环境变量Path变量新增——<code>%JAVA_HOME%\jre\bin</code></p><p>4）测试</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">java <span class="literal">-version</span></span><br><span class="line"></span><br><span class="line">javac</span><br></pre></td></tr></tbody></table></figure><h4 id="Maven">Maven</h4><p>Maven是一个项目管理工具，可以对Java项目进行自动化的构建和依赖管理</p><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230807230316963.png" alt=""></p><p>1）下载Maven：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>2）将压缩包解压到任意目录，注意路径不能出现中文</p><p>3）配置系统环境变量</p><p>系统环境变量新增MAVEN_HOME变量，填入Maven解压路径</p><p>系统环境变量Path变量新增——<code>%MAVEN_HOME%\bin</code></p><p>4）测试：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">mvn <span class="literal">-v</span></span><br></pre></td></tr></tbody></table></figure><p>5）运行Maven时，Maven所需任何构件都是直接从本地仓库获取的，如果本地仓库没有，则会尝试从远处仓库下载构建到本地仓库，进行本地仓库配置：修改maven安装包中的conf/settings.xml文件，指定本地仓库位置和镜像仓库</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="IDEA开发工具">IDEA开发工具</h4><p>1）下载IDEA工具：</p><p><a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></p><p>建议下载免费使用的社区版，避免商业版权纠纷</p><p>2）配置JDK</p><p>新建Maven项目时，选择前面安装的JDK8</p><p>3）配置Maven</p><p>打开设置 File | Settings | Build, Execution, Deployment | Build Tools | Maven，配置</p><ul><li>Maven home path —— 前面Maven解压的路径</li><li>User settings file —— 前面Maven配置的settings.xml文件路径</li></ul><h2 id="2-SpringBoot快速上手">2. SpringBoot快速上手</h2><h3 id="2-1-SpringBoot介绍">2.1 SpringBoot介绍</h3><p>Spring Boot是由Pivotal团队提供的基于Spring的全新框架，旨在简化Spring应用的初始搭建和开发过程；</p><p>Spring Boot是所有基于Spring开发项目的起点；</p><p>Spring Boot尽可能地简化应用开发的门槛，让应用开发、测试、部署变得更加简单。</p><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230807234610380.png" alt=""></p><p>Spring Boot的特点：</p><ul><li>遵循“约定优于配置”的原则，只需要很少的配置或使用默认的配置</li><li>能够使用内嵌的Tomcat、Jetty服务器，不需要部署war文件</li><li>提供定制化的启动器Starters，简化Maven配置，开箱即用</li><li>纯Java配置，没有代码生成，也不需要XML配置</li><li>提供了生产级的服务监控方案，如安全监控、应用监控、健康检测等</li></ul><h3 id="2-2-快速创建SpringBoot应用">2.2 快速创建SpringBoot应用</h3><p>1）利用IDEA提供的Spring Initializr创建SpringBoot应用</p><ul><li>Group: 一般填公司域名，Artifact：项目名称</li><li>注意选择 Language 为 Java、 Type 为 Maven、JDK 为1.8、Java为8、Packaging 为 Jar</li><li>勾选Web -&gt; Spring Web</li><li>创建后，检查项目的Maven配置</li></ul><p>2）第1个helloworld程序</p><ul><li><p>helloworld/src/mainjava/com/xiongbinzou/helloworld/下创建controller包</p></li><li><p>在目录controller中，创建HelloController.java文件，内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Hello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>3）启动项目，在浏览器输入"<a href="http://localhost:8080/hello">http://localhost:8080/hello</a>"</p><h3 id="2-3-开发环境热部署">2.3 开发环境热部署</h3><p>热部署应用背景：</p><ul><li>在实际项目开发调试过程中，会频繁地修改后台类文件，导致需要重新编译、重新启动，整个过程效率低下</li><li>Spring Boot提供了spring-boot-devtools组件，使得无需手动重启Spring Boot应用即可重新编译、启动项目，大大缩短编译启动时间</li><li>devtools会监听classpath下的文件变动，触发Restart类加载器重新加载类，从而实现类文件和属性文件的热部署</li><li>并不是所有的更改都需要重启应用（如静态文件，视图模板），可以通过设置spring.devtools.restart.exclude属性来指定一些文件或目录的修改不用重启应用</li></ul><p>1）/helloworld/pom.xml中添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2）在/helloworld/src/main/resources/application.properties添加配置</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 热部署生效</span></span><br><span class="line"><span class="meta">spring.devtools.restart.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置重启目录</span></span><br><span class="line"><span class="meta">spring.devtools.restart.additional-paths</span>=<span class="string">src/main/java</span></span><br><span class="line"><span class="comment"># 设置classpath目录下的WEB-UBF文件内容修改不重启</span></span><br><span class="line"><span class="meta">spring.devtools.restart.exclude</span>=<span class="string">static/**</span></span><br></pre></td></tr></tbody></table></figure><p>3）打开 File | Settings | Build, Execution, Deployment | Compiler，勾选 Build project automatically</p><p>4）打开 File | Settings | Advanced Settings，勾选 Allow auto-make to start even if developed application is currently running</p><h2 id="3-Web开发基础">3. Web开发基础</h2><h3 id="3-1-启动器">3.1 启动器</h3><ul><li><p>Spirng Boot将传统Web开发的mvc、json、tomcat等框架整合，提供了spring-boot-starter-web组件，简化了web应用配置</p></li><li><p>创建Spring Boot项目后勾选Spring Web选项后，会自动将spring-boot-starter-web组件加入到项目中</p></li><li><p>spring-boot-start-web启动器主要包括web、webmvc、json、tomcat等基础依赖组件，作用是提供Web开发场景需要的所有底层依赖</p></li><li><p>webmvc为Web开发的基础框架，json为JSON数据解析组件，tomcat为自带的容器依赖</p></li></ul><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">&lt;dependencies&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line"><span class="attr">&lt;/dependencies&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-控制器">3.2 控制器</h3><ul><li>Spring Boot提供了@Controller和@RestController两种注解来标识此类负责接受和处理HTTP请求</li><li>如果请求的是页面和数据，使用@Controller注解即可；如果只是请求数据，则可以使用@RestController注解</li></ul><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230808210915893.png" alt=""></p><p><strong>@Controller的用法</strong>：适合前后端不分离的模式</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap map)</span> </span>{</span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>, <span class="string">"xiongbinzou"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>示例中返回了hello页面和name的数据，在前端页面中可以通过${name}参数获取后台返回的数据并展示</li><li>@Controller通常与Thymeleaf模板引擎结合使用</li></ul><p><strong>@RestController用法</strong>：适合前后端分离的模式</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/user")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"xiongbinzou"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>默认情况下，@RestController注解会将返回的对象数据转换为JSON格式</li></ul><h3 id="3-3-路由映射">3.3 路由映射</h3><ul><li><p>@RequestMapping注解主要负责URL的路由映射，它可以添加在Controller类或具体的方法上</p></li><li><p>如果添加在Controller类上，则这个Controller中的所有路由映射都将会加上此映射规则，如果添加到方法上，则只对当前方法生效</p></li><li><p>@RequestMapping注解包含很多属性参数来定义HTTP的请求映射规则，常用的属性参数如下：</p><ul><li>value：请求URL的路径，支持URL模板、正则表达式</li><li>method：HTTP请求方法</li><li>consumes：请求的媒体类型（Content-Type），如application/json</li><li>produces：响应的媒体类型</li><li>params，headers：请求的参数及请求头的值</li></ul></li><li><p>@RequestMapping的value属性用于匹配URL映射，value支持简单表达式@RequestMapping(“/user”)</p></li><li><p>@RequestMapping支持使用通配符匹配URL，用于统一映射某些URL规则类似的请求：</p><p>如：@RequestMapping(“/getJson/*.json”)，当在浏览器中请求/getJson/a.json或者/getJson/b.json时都会匹配到后台的Json方法</p></li><li><p>@RequestMapping的通配符匹配非常简单实用，支持<code>*</code>，<code>?</code>，<code>**</code>等</p><p>其中，<code>*</code>匹配任意字符，<code>**</code>匹配任意路径，<code>?</code>匹配单个字符</p></li><li><p>有通配符的优先级低于没有通配符的优先级，如<code>/user/add.json</code>比<code>json/*.json</code>优先级高，有<code>**</code>通配符的优先级低于有<code>*</code>的优先级</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/hello", method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Hello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="3-4-参数传递">3.4 参数传递</h3><ul><li><p>@RequestParam将请求参数绑定到控制器的方法参数上，接收的参数来自HTTP请求体或请求url的QueryString，当请求的参数名称与Controller的业务方法参数名称一致时，@RequestParam可以省略</p></li><li><p>@PathVariable用来请求动态URL，URL的值可以作为控制器中处理方法的参数</p></li><li><p>@RequestBody接收的参数是来自requestBody中，即请求体，一般用于处理非Content-Type:application/x-www-form-urlencoded编码格式的数据</p><p>比如：<code>application/json</code>、<code>application/xml</code>等类型的数据</p><p>/helloworld/src/main/java/com/xiongbinzou/helloworld/controller文件夹下新建ParamsController类，内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.xiongbinzou.helloworld.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamsController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/getTest1", method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest1</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"GET请求"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value="/getTest2", method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest2</span><span class="params">(String nickname, String phone)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"nickname:"</span> + nickname);</span><br><span class="line">        System.out.println(<span class="string">"phone:"</span> + phone);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"GET请求"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/getTest3", method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest3</span><span class="params">(<span class="meta">@RequestParam(value="nickname", required = false)</span> String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"nickname:"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"GET请求"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/postTest1", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postTest1</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"POST请求"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/postTest2", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postTest2</span><span class="params">(String username, String password)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"username:"</span> + username);</span><br><span class="line">        System.out.println(<span class="string">"password:"</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"POST请求"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/postTest3", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postTest3</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"POST请求"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/postTest4", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postTest4</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>{</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"POST请求"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/test/**")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"通配符请求"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="4-Web开发进阶">4. Web开发进阶</h2><h3 id="4-1-静态资源访问">4.1 静态资源访问</h3><ul><li><p>使用IDEA创建Spring Boot项目，会默认创建出classpath:/static/目录，静态资源一般放在这个目录下即可</p></li><li><p>如果默认的静态资源过滤策略不能满足开发需求，也可自定义静态资源过滤策略</p></li><li><p>在/helloworld/src/main/resources/application.properties中直接定义过滤规则和静态资源位置：</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置静态资源的url访问路径</span></span><br><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/images/**</span></span><br><span class="line"><span class="comment"># 设置静态资源的存放路径</span></span><br><span class="line"><span class="meta">spring.web.resources.static-locations</span>=<span class="string">classpath:/static</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>过滤规则为/static/**，静态资源位置为classpath:/static/</p><p>注：一般使用默认设定即可，不需要再设置</p></li></ul><h3 id="4-2-文件上传">4.2 文件上传</h3><ul><li><p>表单的enctype属性规定在发送到服务器之前应该如何对表单数据进行编码</p></li><li><p>当表单的enctype=“application/x-www-form-urlencoded”（默认）时，form表单中的数据格式为：key=value&amp;key=value</p></li><li><p>当表单的enctype="multipart/form-data"时，其传输数据形式如下：</p><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230808232513510.png" alt=""></p></li><li><p>Spring Boot工程嵌入的tomcat限制了请求的文件大小，每个文件的配置最大为1MB，单次请求的文件的总数不能大于10MB，更改这个默认设定，需要在/helloworld/src/main/resources/application.properties配置文件中加入两个配置：</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置请求文件大小</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="comment"># 设置单次请求文件的总大小</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>当表单为enctype="multipart/form-data"时，可以使用MultipartFile获取上传的文件数据，再通过transferTo方法将其写入到磁盘中</p><p>/hellowworld/src/main/java/com/xiongbinzou/helloworld/controller文件夹下新建FileUploadController类，内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(String nickname, MultipartFile photo, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        System.out.println(nickname);</span><br><span class="line">        System.out.println(<span class="string">"文件大小:"</span> + photo.getSize());</span><br><span class="line">        System.out.println(<span class="string">"文件原始名称:"</span> + photo.getOriginalFilename());</span><br><span class="line">        System.out.println(<span class="string">"文件类型:"</span> + photo.getContentType());</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">"user.dir"</span>));</span><br><span class="line"></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        saveFile(photo, path);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">(MultipartFile photo, String path)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        File upDir = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!upDir.exists()) {</span><br><span class="line">            upDir.mkdir();</span><br><span class="line">        }</span><br><span class="line">        File file = <span class="keyword">new</span> File(path+photo.getOriginalFilename());</span><br><span class="line">        photo.transferTo(file);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="4-3-拦截器">4.3 拦截器</h3><ul><li><p>拦截器在Web系统中非常常见，对于某些全局统一的操作，可以把它提取到拦截器中实现。拦截器有以下几种使用场景：</p><ol><li>权限检查：如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录页面</li><li>性能检测：通过拦截器在进入处理程序之前记录开始时间，在处理完成之后记录结束时间，从而得到请求的处理时间</li><li>通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还要提取Locale、Theme等信息，只要是多个处理程序需要的，即可使用拦截器来实现</li></ol></li><li><p>Spring Boot定义了HandlerInterceptor接口来实现自定义拦截器功能</p></li><li><p>HandlerInterceptor接口定义了preHandle、postHandle、afterCompletion三种方法，通过重写这三种方法实现请求前、请求后等操作</p><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230809000047689.png" alt=""></p><p>/helloworld/src/main/java/com/xiongbinzou/helloworld/文件夹下新建interceptor包，并新建HandlerInterceptor类，内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,  Object handler)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"LoginInterceptor"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>addPathPatterns方法定义拦截器地址，添加的一个拦截器没有addPathPattern任何一个url，则默认拦截所有请求</p></li><li><p>excludePathPatterns定义排除某些地址不被拦截，如果没有excludePathPatterns任何一个请求，则默认不放过任何一个请求</p><p>/helloworld/src/main/java/com/xiongbinzou/helloworld/文件夹下新建config包，并新建WebConfig类，内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiongbinzou.helloworld.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor()).addPathPatterns(<span class="string">"/user/**"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="5-RESTful服务和Swagger">5. RESTful服务和Swagger</h2><h3 id="5-1-RESTful介绍">5.1 RESTful介绍</h3><ul><li>RESTful是目前流行的互联网软件服务架构设计风格</li><li>REST（表达性状态转移，Representational State Transfer）是由Roy Thomas Fielding在2000年的博士论文中提出，它定义了互联网软件服务的架构原则，如果一个架构符合REST原则，则称之为RESTful架构</li><li>REST并不是一个标准，它更像一组客户端和服务端交互时的架构理念和设计原则，基于这种架构理念和设计原则的Web API更加简洁，更有层次</li></ul><p><img src="SpringBoot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230809002022891.png" alt=""></p><h4 id="RESTful的特点">RESTful的特点</h4><ul><li><p>每一种URI代表一种资源</p></li><li><p>客户端使用GET、POST、PUT、DELETE四种表示操作方法的动词对服务资源进行操作：</p><p>GET —— 用于获取资源</p><p>POST —— 用于新建资源（也可用于更新资源）</p><p>PUT —— 用于更新资源</p><p>DELETE —— 用于删除资源</p></li><li><p>通过操作资源的表现形式来实现服务端的请求操作</p></li><li><p>资源的表现形式是JSON或者HTML</p></li><li><p>客户端与服务器之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都包含必需的信息</p></li></ul><p><strong>符合RESTful规范的Web API需要具备两个关键特性</strong>：</p><ul><li>安全性：安全的方法被期望不会产生任何副作用，当使用GET操作获取资源时，不会引起资源本身的改变，也不会引起服务器状态的改变</li><li>幂等性：幂等的方法保证了重复一个请求和一次请求的效果相同（并不是指响应总是相同，而是指服务器上资源的状态从第一次请求后就不再改变了），在数学上幂等性指N次变换和1次变换相同</li></ul><h4 id="HTTP-Method">HTTP Method</h4><ul><li>HTTP提供了POST、GET、PUT、DELETE等操作类型对某个Web资源进行Create、Read、Update和Delete操作</li><li>一个HTTP请求处理利用URI标志目标资源之外，还需要通过HTTP Method指定对资源的操作类型，一些常见的HTTP方法及其在RESTful风格下的使用：</li></ul><table><thead><tr><th style="text-align:left">HTTP方法</th><th style="text-align:left">操作</th><th style="text-align:left">返回值</th><th style="text-align:left">特定返回值</th></tr></thead><tbody><tr><td style="text-align:left">POST</td><td style="text-align:left">Create</td><td style="text-align:left">201（Created），提交或保存资源</td><td style="text-align:left">404（Not Found），409（Conflict）资源已存在</td></tr><tr><td style="text-align:left">GET</td><td style="text-align:left">Read</td><td style="text-align:left">200（OK），获取资源或数据列表，支持分页、排序和条件查询</td><td style="text-align:left">200（OK）返回资源，404（Not Found）资源不存在</td></tr><tr><td style="text-align:left">PUT</td><td style="text-align:left">Update</td><td style="text-align:left">200（OK）或 204（No Content），修改资源</td><td style="text-align:left">404（Not Found）资源不存在，405（Method Not Allowed）禁止使用方法调用</td></tr><tr><td style="text-align:left">PATCH</td><td style="text-align:left">Upadte</td><td style="text-align:left">200（OK）或 204（No Content），修改资源</td><td style="text-align:left">404（Not Found）资源不存在</td></tr><tr><td style="text-align:left">DELETE</td><td style="text-align:left">Delete</td><td style="text-align:left">200（OK），资源删除成功</td><td style="text-align:left">404（Not Found）资源不存在，405（Method Not Allowed）禁止使用方法调用</td></tr></tbody></table><h4 id="HTTP状态码">HTTP状态码</h4><ul><li>HTTP状态码时服务向用户返回的状态码和提示信息，客户端的每一次请求，服务都必须给出回应，回应包括HTTP状态码和数据两部分</li><li>HTTP定义了40个标准状态码，可用于传达客户端请求的结果，状态码分为以下5个类别：<ul><li>1xx：信息，通信传输协议级信息</li><li>2xx：成功，表示客户端的请求已经成功接受</li><li>3xx：重定向，表示客户端必须执行一些其他操作才能完成其请求</li><li>4xx：客户端错误，此类错误状态码指向客户端</li><li>5xx：服务器操作，服务器负责这些错误状态码</li></ul></li></ul><table><thead><tr><th>HTTP状态码</th><th>返回值</th><th>HTTP Method</th><th>特定返回值</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>GET</td><td>服务器成功返回用户请求的数据，该操作时幂等性的</td></tr><tr><td>201</td><td>Created</td><td>POST/PUT/PATCH</td><td>用户创建或修改数据成功</td></tr><tr><td>202</td><td>Accepted</td><td>*</td><td>表示一个请求已经进入后台排队（异步任务）</td></tr><tr><td>204</td><td>NO CONTENT</td><td>DELETE</td><td>用户删除数据成功</td></tr><tr><td>400</td><td>INVALID REQUEST</td><td>POST/PUT/PATCH</td><td>用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作时幂等的</td></tr><tr><td>401</td><td>Unauthorized</td><td>*</td><td>表示用户没有权限（令牌、用户名、密码错误）</td></tr><tr><td>403</td><td>Forbidden</td><td>*</td><td>表示用户得到授权（与401相对），但是访问是被禁止的</td></tr><tr><td>404</td><td>NOT FOUND</td><td>*</td><td>用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的</td></tr><tr><td>406</td><td>Not Acceptable</td><td>GET</td><td>用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）</td></tr><tr><td>410</td><td>Gone</td><td>GET</td><td>用户请求的资源被永久删除，且不会再得到</td></tr><tr><td>422</td><td>Unprocessable entity</td><td>POST/PUT/P{Atch}</td><td>当创建一个对象时，发生一个验证错误</td></tr><tr><td>500</td><td>INTERNAL SERVER ERROR</td><td>*</td><td>服务器发生错误，用户将无法判断发出的请求是否成功</td></tr></tbody></table><h3 id="5-2-构建RESTful应用接口">5.2 构建RESTful应用接口</h3><ul><li><p>Spring Boot提供了spring-boot-starter-web组件完全支持开发RESTful API，提供了与REST操作方法对于的注解：</p><p>@GetMapping：处理GET请求，获取资源</p><p>@PostMapping：处理POST请求，新增资源</p><p>@PutMapping：处理PUT请求，更新资源</p><p>@DeleteMapping：处理DELETE请求，删除资源</p><p>@PatchMapping：处理PATCH请求，部分更新资源</p></li><li><p>在RESTful架构中，每个网址代表一种资源，所有URL中建议不用包含动词，只包含名词即可，而且所用的名词往往与数据库的表格名对应</p><p>用户管理模块API示例：</p><table><thead><tr><th>HTTP Method</th><th>接口地址</th><th>接口说明</th></tr></thead><tbody><tr><td>POST</td><td>/user</td><td>创建用户</td></tr><tr><td>GET</td><td>/user/id</td><td>根据id获取用户信息</td></tr><tr><td>PUT</td><td>/user</td><td>更新用户</td></tr><tr><td>DELETE</td><td>/user/id</td><td>根据id删除用户信息</td></tr></tbody></table><p>/helloworld/src/main/java/com/xiongbinzou/helloworld/controller文件夹下新建UserController类，内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiongbinzou.helloworld.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/user/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"根据ID获取用户"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/user")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"添加用户"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping("/user")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"更新用户"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping("/user/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"根据ID删除用户"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="5-3-使用Swagger生成Web-API文档">5.3 使用Swagger生成Web API文档</h3><h4 id="Swagger介绍">Swagger介绍</h4><ul><li>Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化RESTful风格的Web服务，是非常流行的API表达工具</li><li>Swagger能够自动生成完善的RESTful API文档，同时并根据后台代码的修改同步更新，并提供完整的测试页面来调试API</li></ul><h4 id="配置Swagger">配置Swagger</h4><ul><li><p>在Spring boot项目的/helloworld/pom.xml文件引入springfox-swagger2和springfox-swagger-ui依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Spring Boot 2.6.x后与Swagger有版本冲突问题，需要在/helloworld/src/main/resources/application.properties配置文件中加入以下配置：</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.pathmatch.matching-strategy</span>=<span class="string">ant_path_matcher</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>/helloworld/src/main/java/com/xiongbinzou/helloworld/config文件夹下新建Swagger2Config类，内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"演示项目API"</span>)</span><br><span class="line">                .description(<span class="string">"演示项目"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>使用@ApiOperation()修改/helloworld/src/main/java/com/xiongbinzou/helloworld/controller/UserController类，添加接口注解</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiongbinzou.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiongbinzou.helloworld.entity.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("获取用户")</span></span><br><span class="line">    <span class="meta">@GetMapping("/user/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"根据ID获取用户"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("添加用户")</span></span><br><span class="line">    <span class="meta">@PostMapping("/user")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"添加用户"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("更新用户")</span></span><br><span class="line">    <span class="meta">@PutMapping("/user")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"更新用户"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("删除用户")</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/user/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"根据ID删除用户"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> 即可得到接口可视化文档</p></li></ul><h2 id="6-MybatisPlus快速上手">6. MybatisPlus快速上手</h2><h2 id="7-MybatisPlus多表查询及分页查询">7. MybatisPlus多表查询及分页查询</h2><h2 id="8-Vue框架快速上手">8. Vue框架快速上手</h2><h2 id="9-Vue组件化开发">9. Vue组件化开发</h2><h2 id="10-第三方组件element-ui">10. 第三方组件element-ui</h2><h2 id="11-Axios网络请求">11. Axios网络请求</h2>]]></content>
      
      
      <categories>
          
          <category> Spring Boot &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Java </tag>
            
            <tag> 全栈开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible学习笔记</title>
      <link href="/posts/48635.html"/>
      <url>/posts/48635.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Ansible简介">1. Ansible简介</h2><blockquote><p>认识Ansible</p></blockquote><p>Ansible是一个为软件提供<strong>系统配置管理</strong>和<strong>批量部署</strong>的<strong>开源工具集</strong>，最初由Michael DeHaan于2012年编写，并于2015年被Red Hat公司收购，此后，Red Hat公司和开源社区进一步开发和改进了Ansible。</p><p><strong>Ansible的核心组件</strong>：</p><ul><li><p><strong>Module</strong> （模块）</p><p>文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/index_module.html">https://docs.ansible.com/ansible/latest/collections/index_module.html</a></p><p>模块涵盖领域：</p><ul><li>云计算</li><li>网络</li><li>服务配置和管理</li><li>虚拟化</li><li>容器化</li><li>…</li></ul><p>得益于Ansible可扩展的原生架构，支持自定义模块</p></li><li><p><strong>ad-hoc</strong>（Ansible命令行工具）</p><p>Ansible安装成功后即可执行Ansible指令，可使用<code>/usr/bin/ansible</code>命令行工具在一个或多个管理节点上执行单个任务的命令：</p><ul><li>有益于创建项目和测试Ansible配置</li><li>Ansible Modules的使用和测试更加方便</li></ul></li><li><p><strong>Playbook</strong>（剧本）</p><p>Ansible安装成功后可编写剧本：</p><ul><li>使用人类易读的配置部署和编排语言编写</li><li>可完成一组任务</li></ul></li><li><p><strong>Inventory</strong>（清单）</p><p>清单是目标的集合：</p><ul><li>最常见的由主机组成，但也可以是与之相关的组件，如网络交换机、容器、存储阵列、其他物理或虚拟组件</li><li>有用信息，如包含目标选择的文本文件</li><li>动态清单，可通过执行程序动态获取数据</li></ul></li></ul><p><strong>Ansible的特点</strong>：</p><ul><li>基于Python开发，容易扩展</li><li>功能强大，内置模块丰富，满足多样需求</li><li>管理模式简单，上手容易</li><li>无代理模式，通过SSH通信，跨平台支持</li></ul><h2 id="2-准备环境">2. 准备环境</h2><blockquote><p>安装Docker，配置Ansible实验环境，配置主机间SSH免密码连接，配置Ansible课程的代码库</p></blockquote><h3 id="2-1-安装Docker">2.1 安装Docker</h3><p>Docker是一个容器产品，利用操作系统级虚拟化，允许软件作为容器交付，容器是相互隔离的，每个容器内部都可以捆绑软件库和配置文件，Docker在Mac、Windows、Linux上都可用。</p><p>为了方便学习，我选择在Windows系统上安装Docker桌面级产品。</p><p>下载地址：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p>安装过程非常简单，安装后如果出现提示，按照提示去做就ok。</p><p>测试：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cmd控制台</span></span><br><span class="line">C:\Users\zouxiongbin&gt;docker run <span class="literal">-it</span> -<span class="literal">-rm</span> ubuntu bash</span><br><span class="line">Unable to find image <span class="string">'ubuntu:latest'</span> locally</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line"><span class="number">6</span>b851dcae6ca: Pull complete</span><br><span class="line">Digest: sha256:<span class="number">2</span>a357c4bd54822267339e601ae86ee3966723bdbcae640a70ace622cc9470c83</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:latest</span><br><span class="line">root@<span class="number">1</span>eb3165473b6:/<span class="comment"># uname -a</span></span><br><span class="line">Linux <span class="number">1</span>eb3165473b6 <span class="number">5.15</span>.<span class="number">90.1</span><span class="literal">-microsoft</span><span class="literal">-standard</span><span class="literal">-WSL2</span> <span class="comment">#1 SMP Fri Jan 27 02:56:13 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">root@<span class="number">1</span>eb3165473b6:/<span class="comment"># cat /etc/os-release</span></span><br><span class="line">PRETTY_NAME=<span class="string">"Ubuntu 22.04.2 LTS"</span></span><br><span class="line">NAME=<span class="string">"Ubuntu"</span></span><br><span class="line">VERSION_ID=<span class="string">"22.04"</span></span><br><span class="line">VERSION=<span class="string">"22.04.2 LTS (Jammy Jellyfish)"</span></span><br><span class="line">VERSION_CODENAME=jammy</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">HOME_URL=<span class="string">"https://www.ubuntu.com/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"https://help.ubuntu.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.launchpad.net/ubuntu/"</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span></span><br><span class="line">UBUNTU_CODENAME=jammy</span><br><span class="line">root@<span class="number">1</span>eb3165473b6:/<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-安装Ansible实验环境">2.2 安装Ansible实验环境</h3><p>Ansible实验环境代码地址： <a href="https://github.com/spurin/diveintoansible-lab%EF%BC%8C%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83%E8%AF%A5%E5%9C%B0%E5%9D%80%E6%96%87%E6%A1%A3%EF%BC%8C%E8%BF%99%E9%87%8C%E8%AE%B0%E5%BD%95%E4%B8%8BWindows%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%EF%BC%88%E5%89%8D%E6%8F%90%EF%BC%9A%E6%9C%AC%E5%9C%B0Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%BA%86git%EF%BC%89%EF%BC%9A">https://github.com/spurin/diveintoansible-lab，安装方法参考该地址文档，这里记录下Windows的安装方法（前提：本地Windows操作系统安装了git）：</a></p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cmd控制台</span></span><br><span class="line">C:\Users\zouxiongbin&gt;git version</span><br><span class="line">git version <span class="number">2.37</span>.<span class="number">1</span>.windows.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取ansible实验环境代码</span></span><br><span class="line">C:\Users\zouxiongbin&gt;git clone https://github.com/spurin/diveintoansible<span class="literal">-lab</span>.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比查看文件是否缺失</span></span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\.env</span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\DiveIntoAnsible_Cover.png</span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\README.md</span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\docker<span class="literal">-compose</span>.yaml</span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\config\guest_name</span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\config\guest_passwd</span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\config\guest_shell</span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>\config\root_passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行实验环境</span></span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>&gt;docker<span class="literal">-compose</span> up</span><br><span class="line">......</span><br><span class="line">Attaching to centos1, centos2, centos3, docker, portal, ubuntu<span class="literal">-c</span>, ubuntu1, ubuntu2, ubuntu3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新实验环境</span></span><br><span class="line">docker<span class="literal">-compose</span> pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除实验环境</span></span><br><span class="line">docker<span class="literal">-compose</span> down</span><br></pre></td></tr></tbody></table></figure><p>访问http://localhost:1000/即可进入Ansible实验环境，如下：</p><p><img src="Ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230616192742571.png" alt=""></p><p>实验环境由7台主机组成，分别是ubuntu-c（ansible管理主机，其他为ubuntu系统或centos系统的被管理主机）、ubuntu1、ubuntu2、ubuntu3、centos1、centos2、centos3</p><p>登录ubuntu-c主机，账号是<code>ansible</code>，密码是<code>password</code></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录Ubuntu-C主机</span></span><br><span class="line">ubuntu-c login: ansible</span><br><span class="line">Password: </span><br><span class="line">Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.90.1-microsoft-standard-WSL2 x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">The programs included with the Ubuntu system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><br><span class="line">applicable law.</span><br><span class="line"></span><br><span class="line">To run a command as administrator (user "root"), use "sudo &lt;command&gt;".</span><br><span class="line">See "man sudo_root" for details.</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~$ </span><br></pre></td></tr></tbody></table></figure><p>除了使用本地的系统搭建Ansible实验环境外，还可以使用Google Cloud使用云服务器搭建Ansible实验环境，地址为：<a href="https://diveinto.com/p/playground">https://diveinto.com/p/playground</a></p><h3 id="2-3-配置主机间SSH免密码连接">2.3 配置主机间SSH免密码连接</h3><p>Ansible是一个无代理架构，意味着被管理主机无需安装Agent，只需要配置主机间的SSH免密码连接。</p><p>SSH连接建立过程如图：</p><p><img src="Ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230616201117155.png" alt=""></p><p>配置Ansible SSH免密码连接</p><p><img src="Ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230616201943353.png" alt=""></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ubuntu-c ansible管理主机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成ssh密钥</span></span><br><span class="line">ansible@ubuntu-c:~$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/ansible/.ssh/id_rsa): </span><br><span class="line">Created directory '/home/ansible/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/ansible/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /home/ansible/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:p498cMfcCkbqBCie6F26a9f3vGVKJIP7nBgFP53/pmA ansible@ubuntu-c</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|     . .         |</span><br><span class="line">|  . . . + o .    |</span><br><span class="line">| o o   oSO.* .   |</span><br><span class="line">|. o  .  *oO = .  |</span><br><span class="line">|. . o .=.+ E =   |</span><br><span class="line">| . + . o*+* * .. |</span><br><span class="line">|  .o+  .+=o=..o. |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看公钥</span></span><br><span class="line">ansible@ubuntu-c:~$ cat .ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC3qePtp0SWcYxUAg+05EW/s7silEEMWU1gYgdyJlbqO3miImGQKt+jit4eLcKjwcduF1CpiIJ2bR2CWFx2eCOT1esg9xwNy7J9Mu52kzkwoSgvIumlczkHMla4k03KERp7kIeX3oDae98XpRULu+b7rknKh02HGWmsPwMuhq0pX0928BWRiEa4SJmFzvNGoKoJbyXCVF8ZcAiZAJI0TaMe1aEEUuIm41dRhYZf/6AftChWFcJ7x1YgXG6EbG0xlacImgYE9/n+X1Hhjklm+MmBnXE6VMde4E8CdVP5OOkMNqg3H2s23UFj+4tPha5juLfSEKxm2mXOfE5rqtPJZQImgGwHINgiZv4qbTg6t78CsCl2YXzBHk8oAPnpE/YFZ8tc5vozdhdhphbN2a5Q9xZ9abByGV7bHB5MS+GQuuGSHSnSp9Ai87gb43QoU1V76jlbngYzwQFwhxLnfoNCwzr3FQj9OJ8KrwQS8zuKKujGzG5UIytGQDlpgJOE97OTS2s= ansible@ubuntu-c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用ssh-copy-id将公钥的内容复制到被管理主机的authorized_keys文件</span></span><br><span class="line">ansible@ubuntu-c:~$ ssh-copy-id ansible@ubuntu1</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/ansible/.ssh/id_rsa.pub"</span><br><span class="line">The authenticity of host 'ubuntu1 (172.18.0.3)' can't be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:Bq0T7Bg1OWZDjSsLlhWtp7QjqtZitWuPQCgcXX+pXas.</span><br><span class="line">This host key is known by the following other names/addresses:</span><br><span class="line">    ~/.ssh/known_hosts:1: [hashed name]</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">ansible@ubuntu1's password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   "ssh 'ansible@ubuntu1'"</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试连接</span></span><br><span class="line">ansible@ubuntu-c:~$ ssh ubuntu1</span><br><span class="line">Last login: Fri Jun 16 12:28:32 2023 from 172.18.0.9</span><br><span class="line">To run a command as administrator (user "root"), use "sudo &lt;command&gt;".</span><br><span class="line">See "man sudo_root" for details.</span><br><span class="line"></span><br><span class="line">ansible@ubuntu1:~$</span><br></pre></td></tr></tbody></table></figure><p>不难发现，上面的做法存在弊端，每次将公钥的内容复制到新的被管理主机时，都需要键入<strong>yes</strong>和被管理主机的<strong>密码</strong>，被管理主机很多时设置起来比较费时，因此，可以使用sshpass脚本将这一过程自动化。</p><p>安装sshpass</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新apt</span></span><br><span class="line">ansible@ubuntu-c:~$ sudo apt update</span><br><span class="line">[sudo] password for ansible: </span><br><span class="line">Get:1 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]</span><br><span class="line">......</span><br><span class="line">Get:18 http://archive.ubuntu.com/ubuntu jammy-backports/universe amd64 Packages [27.0 kB]                                                                                                                                                                       Fetched 25.2 MB in 28s (904 kB/s)                                                                                               </span><br><span class="line"></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">90 packages can be upgraded. Run 'apt list --upgradable' to see them.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载sshpass</span></span><br><span class="line">ansible@ubuntu-c:~$ sudo apt install sshpass</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>编写公钥分发脚本</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写公钥分发脚本</span></span><br><span class="line">ansible@ubuntu-c:~$ cat ssh_key_send.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">rm -rf ~/.ssh/id_rsa*</span><br><span class="line">ssh-keygen -f ~/.ssh/id_rsa -P "" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">Pass_Text=password.txt</span><br><span class="line">Key_Path=~/.ssh/id_rsa.pub</span><br><span class="line">for user in ansible root</span><br><span class="line">do</span><br><span class="line">for os in ubuntu centos</span><br><span class="line">do</span><br><span class="line">for instance in 1 2 3</span><br><span class="line">do</span><br><span class="line">        sshpass -f $Pass_Text ssh-copy-id -i $Key_Path -o StrictHostKeyChecking=no ${user}@${os}${instance}</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 非交互式分发公钥命令，使用sshpass指定ssh密码，通过 -o StrictHostKeyChecking=no 跳过ssh连接确认信息</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行脚本</span></span><br><span class="line">ansible@ubuntu-c:~$ sh ssh_key_send.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安全起见，删除password.txt</span></span><br><span class="line">ansible@ubuntu-c:~$ rm password.txt</span><br></pre></td></tr></tbody></table></figure><p>此时ubuntu-c连接任何被管理主机都不需要输入账号密码</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ansible</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i 指定清单文件，也可以接 ,和主机列表</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -m 指定模板</span></span><br><span class="line">ansible@ubuntu-c:~$ ansible -i,ubuntu1,ubuntu2,ubuntu3,centos1,centos2,centos3 all -m ping</span><br><span class="line">ubuntu1 | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python3"</span><br><span class="line">    },</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">}</span><br><span class="line">ubuntu3 | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python3"</span><br><span class="line">    },</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">}</span><br><span class="line">ubuntu2 | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python3"</span><br><span class="line">    },</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">}</span><br><span class="line">centos1 | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/libexec/platform-python"</span><br><span class="line">    },</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">}</span><br><span class="line">centos2 | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/libexec/platform-python"</span><br><span class="line">    },</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">}</span><br><span class="line">centos3 | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/libexec/platform-python"</span><br><span class="line">    },</span><br><span class="line">    "changed": false,</span><br><span class="line">    "ping": "pong"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-配置Ansible课程的代码库">2.4 配置Ansible课程的代码库</h3><p>Ansible课程代码库地址：<a href="https://github.com/spurin/diveintoansible%EF%BC%8C%E5%BB%BA%E8%AE%AEgithub%E4%B8%8Astar">https://github.com/spurin/diveintoansible，建议github上star</a></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~$ git clone https://github.com/spurin/diveintoansible.git</span><br></pre></td></tr></tbody></table></figure><h2 id="3-Ansible架构和设计">3. Ansible架构和设计</h2><blockquote><p>Ansible配置文件，Ansible Inventory清单和Module模块</p></blockquote><h3 id="3-1-Ansible配置文件">3.1 Ansible配置文件</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看ansible版本信息</span></span><br><span class="line">ansible@ubuntu-c:~$ ansible --version</span><br><span class="line">ansible [core 2.14.2]</span><br><span class="line">  config file = None</span><br><span class="line">  configured module search path = ['/home/ansible/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']</span><br><span class="line">  ansible python module location = /usr/local/lib/python3.10/dist-packages/ansible</span><br><span class="line">  ansible collection location = /home/ansible/.ansible/collections:/usr/share/ansible/collections</span><br><span class="line">  executable location = /usr/local/bin/ansible</span><br><span class="line">  python version = 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0] (/usr/bin/python3)</span><br><span class="line">  jinja version = 3.1.2</span><br><span class="line">  libyaml = True</span><br></pre></td></tr></tbody></table></figure><p><strong>配置文件优先级</strong></p><p>可以发现Ansible config file还未配置，Ansible配置文件位置和环境变量可以用于影响config file，优先级从高到低依次是：</p><ol><li><strong>ANSIBLE_CONFIG</strong>  环境变量，带ansible配置文件路径</li><li><strong>./ansible.cfg</strong>  当前目录，当前目录可以有自己单独的配置文件，<strong>推荐</strong></li><li><strong>~/.ansible.cfg</strong>  隐藏文件，在用户的主目录中</li><li><strong>/etc/ansible/ansible.cfg</strong>  通常由Ansible通过包或系统安装提供，如<code>apt install ansible</code></li></ol><h3 id="3-2-Ansible清单">3.2 Ansible清单</h3><p>停止Ansible实验环境</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cmd控制台</span></span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>&gt;docker<span class="literal">-compose</span> down</span><br></pre></td></tr></tbody></table></figure><p>修改docker-compose.yml文件为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.8'</span> <span class="comment"># if no version is specificed then v1 is assumed. Recommend v2 minimum</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ubuntu-c:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">ubuntu-c</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ubuntu-c</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:ansible</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTUC_PORT_SSHD}:22</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTUC_PORT_TTYD}:7681</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CONFIG}:/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu-c/ansible:/home/ansible</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu-c/root:/root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ubuntu1:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">ubuntu1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ubuntu1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:ubuntu</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTU1_PORT_SSHD}:22</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTU1_PORT_TTYD}:7681</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CONFIG}:/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu1/ansible:/home/ansible</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu1/root:/root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ubuntu2:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">ubuntu2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ubuntu2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:ubuntu</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTU2_PORT_SSHD}:22</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTU2_PORT_TTYD}:7681</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CONFIG}:/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu2/ansible:/home/ansible</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu2/root:/root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ubuntu3:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">ubuntu3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ubuntu3</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:ubuntu</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTU3_PORT_SSHD}:22</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${UBUNTU3_PORT_TTYD}:7681</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CONFIG}:/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu3/ansible:/home/ansible</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/ubuntu3/root:/root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">centos1:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">centos1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">centos1</span></span><br><span class="line">    <span class="comment">#image: spurin/diveintoansible:centos</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:centos-sshd-2222</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">     <span class="comment">#- ${CENTOS1_PORT_SSHD}:22</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CENTOS1_PORT_SSHD}:2222</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CENTOS1_PORT_TTYD}:7681</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CONFIG}:/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/centos1/ansible:/home/ansible</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/centos1/root:/root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">centos2:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">centos2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">centos2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:centos</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CENTOS2_PORT_SSHD}:22</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CENTOS2_PORT_TTYD}:7681</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CONFIG}:/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/centos2/ansible:/home/ansible</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/centos2/root:/root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">centos3:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">centos3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">centos3</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:centos</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CENTOS3_PORT_SSHD}:22</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CENTOS3_PORT_TTYD}:7681</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${CONFIG}:/config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/centos3/ansible:/home/ansible</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/centos3/root:/root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Docker in Docker</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Usage: on host that wishes to use docker</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># sudo apt-get update</span></span><br><span class="line">  <span class="comment"># sudo apt -y install docker.io</span></span><br><span class="line">  <span class="comment"># export DOCKER_HOST=tcp://docker:2375</span></span><br><span class="line">  <span class="comment"># docker ps -a</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="attr">docker:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">docker</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:dind</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">${ANSIBLE_HOME}/shared:/shared</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">portal:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">portal</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">portal</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">spurin/diveintoansible:portal</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">NGINX_ENTRYPOINT_QUIET_LOGS=1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">centos1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">centos2</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">centos3</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">ubuntu1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">ubuntu2</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">ubuntu3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">"1000:80"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">diveinto.io</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">diveinto.io:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">diveinto.io</span></span><br><span class="line">    <span class="comment"># Canonical bridge interface name</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The setting below provides a friendly name for the bridge interface</span></span><br><span class="line">    <span class="comment"># as seen in the likes of the ip command.  Use at your own discretion</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#driver_opts:</span></span><br><span class="line">    <span class="comment">#  com.docker.network.bridge.name: "diveinto.io"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>重新启动Ansible实验环境</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cmd控制台</span></span><br><span class="line">C:\Users\zouxiongbin\diveintoansible<span class="literal">-lab</span>&gt;docker<span class="literal">-compose</span> up</span><br><span class="line">......</span><br><span class="line">Attaching to centos1, centos2, centos3, docker, portal, ubuntu<span class="literal">-c</span>, ubuntu1, ubuntu2, ubuntu3</span><br></pre></td></tr></tbody></table></figure><p>访问http://localhost:1000/进入ubuntu-c环境</p><p><strong>ini清单文件</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~$ ls</span><br><span class="line">diveintoansible  ssh_key_send.sh  this_is_example_ansible.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建文件夹并进入</span></span><br><span class="line">ansible@ubuntu-c:~$ mkdir demo01 &amp;&amp; cd demo01</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件和清单文件</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ touch ansible.cfg hosts</span><br></pre></td></tr></tbody></table></figure><p>配置文件 <strong>ansible.cfg</strong> :</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">inventory</span> = hosts</span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p>清单文件 <strong>hosts</strong> :</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[control]</span></span><br><span class="line">ubuntu-c <span class="attr">ansible_connection</span>=local</span><br><span class="line"></span><br><span class="line"><span class="section">[centos]</span></span><br><span class="line">centos1 <span class="attr">ansible_port</span>=<span class="number">2222</span></span><br><span class="line">centos<span class="section">[2:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[centos:vars]</span></span><br><span class="line"><span class="attr">ansible_user</span>=root</span><br><span class="line"></span><br><span class="line"><span class="section">[ubuntu]</span></span><br><span class="line">ubuntu<span class="section">[1:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ubuntu:vars]</span></span><br><span class="line"><span class="attr">ansible_become</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ansible_become_pass</span>=password</span><br><span class="line"></span><br><span class="line"><span class="section">[linux:children]</span></span><br><span class="line">centos</span><br><span class="line">ubuntu</span><br><span class="line"></span><br><span class="line"><span class="section">[linux:vars]</span></span><br><span class="line"><span class="attr">ansible_port</span>=<span class="number">1234</span></span><br></pre></td></tr></tbody></table></figure><p>上面的清单文件包括了：</p><ul><li><p>清单主机变量，如ansible_port</p></li><li><p>简单的范围清单，如ubuntu[1:3]</p></li><li><p>清单组变量，如[ubuntu:vars]、[linux:vars]</p></li><li><p>清单子组，如[linux:children]</p></li><li><p>ansible通过root连接centos机器</p></li><li><p>ansible通过2222端口连接centos1</p></li><li><p>ansible通过sudo连接ubuntu机器</p></li></ul><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m ping -o</span><br><span class="line">centos2 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host centos2 port 1234: Connection refused</span><br><span class="line">centos3 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host centos3 port 1234: Connection refused</span><br><span class="line">ubuntu1 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host ubuntu1 port 1234: Connection refused</span><br><span class="line">ubuntu2 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host ubuntu2 port 1234: Connection refused</span><br><span class="line">ubuntu3 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host ubuntu3 port 1234: Connection refused</span><br><span class="line">ubuntu-c | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">centos1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br></pre></td></tr></tbody></table></figure><p>注释掉hosts文件里最后两行，再进行测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m ping -o</span><br><span class="line">ubuntu-c | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">centos2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br></pre></td></tr></tbody></table></figure><p><strong>yaml清单文件</strong></p><p>新增清单文件 <strong>hosts.yaml</strong> :</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">control:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="attr">ubuntu-c:</span></span><br><span class="line">      <span class="attr">ansible_connection:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">centos:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="attr">centos1:</span></span><br><span class="line">      <span class="attr">ansible_port:</span> <span class="number">2222</span></span><br><span class="line">    <span class="attr">centos2:</span></span><br><span class="line">    <span class="attr">centos3:</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">ansible_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">ubuntu:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="attr">ubuntu1:</span></span><br><span class="line">    <span class="attr">ubuntu2:</span></span><br><span class="line">    <span class="attr">ubuntu3:</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">ansible_become:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ansible_become_pass:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">linux:</span></span><br><span class="line">  <span class="attr">children:</span></span><br><span class="line">    <span class="attr">centos:</span></span><br><span class="line">    <span class="attr">ubuntu:</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>将清单改为yaml类型，只需修改配置文件 <strong>ansible.cfg</strong> :</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">inventory</span> = hosts.yaml</span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p>再次进行测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo01$ ansible linux -m ping -o</span><br><span class="line">centos1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br></pre></td></tr></tbody></table></figure><p><strong>json清单文件</strong></p><p>使用python根据<strong>hosts.yaml</strong>生成清单文件 <strong>hosts.json</strong> （前提是已安装python3）:</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo01$ python3 --version</span><br><span class="line">Python 3.10.6</span><br><span class="line">ansible@ubuntu-c:~/demo01$ python3 -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin, Loader=yaml.FullLoader), sys.stdout, indent=4)' &lt; hosts.yaml &gt; hosts.json</span><br><span class="line">ansible@ubuntu-c:~/demo01$ cat hosts.json </span><br><span class="line">{</span><br><span class="line">    "control": {</span><br><span class="line">        "hosts": {</span><br><span class="line">            "ubuntu-c": {</span><br><span class="line">                "ansible_connection": "local"</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    "centos": {</span><br><span class="line">        "hosts": {</span><br><span class="line">            "centos1": {</span><br><span class="line">                "ansible_port": 2222</span><br><span class="line">            },</span><br><span class="line">            "centos2": null,</span><br><span class="line">            "centos3": null</span><br><span class="line">        },</span><br><span class="line">        "vars": {</span><br><span class="line">            "ansible_user": "root"</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    "ubuntu": {</span><br><span class="line">        "hosts": {</span><br><span class="line">            "ubuntu1": null,</span><br><span class="line">            "ubuntu2": null,</span><br><span class="line">            "ubuntu3": null</span><br><span class="line">        },</span><br><span class="line">        "vars": {</span><br><span class="line">            "ansible_become": true,</span><br><span class="line">            "ansible_become_pass": "password"</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    "linux": {</span><br><span class="line">        "children": {</span><br><span class="line">            "centos": null,</span><br><span class="line">            "ubuntu": null</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将清单改为json类型，只需修改配置文件 <strong>ansible.cfg</strong> :</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">inventory</span> = hosts.json</span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p>再次进行测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo01$ ansible centos -m ping -o</span><br><span class="line">centos1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br></pre></td></tr></tbody></table></figure><p><strong>命令行工具参数</strong></p><p>也可以使用ansible命令行工具参数，指定清单文件运行，如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i 指定清单文件，会覆盖配置文件的inventory参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e 指定清单命令，会覆盖清单文件对应的变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -m 指定模块，默认使用<span class="built_in">command</span>模块</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a 指定在被管理主机上执行的命令，命令需要使用引号</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -i hosts.yaml --list-hosts</span><br><span class="line">  hosts (7):</span><br><span class="line">    ubuntu-c</span><br><span class="line">    centos1</span><br><span class="line">    centos2</span><br><span class="line">    centos3</span><br><span class="line">    ubuntu1</span><br><span class="line">    ubuntu2</span><br><span class="line">    ubuntu3</span><br><span class="line">    </span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible linux -m ping -e 'ansible_port=22' -o</span><br><span class="line">centos1 | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host centos1 port 22: Connection refused</span><br><span class="line">centos2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible ubuntu -a 'id' -o</span><br><span class="line">ubuntu1 | CHANGED | rc=0 | (stdout) uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">ubuntu3 | CHANGED | rc=0 | (stdout) uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">ubuntu2 | CHANGED | rc=0 | (stdout) uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-Ansible模块">3.3 Ansible模块</h3><p><strong>执行期间颜色含义</strong></p><ul><li><font color="Red">红色</font> —— 代表失败</li><li><font color="yellow">黄色</font> —— 代表成功，有改变</li><li><font color="Green">绿色</font> —— 代表成功，无改变</li></ul><p><strong>幂等性</strong></p><p>幂等性指多次执行产生的结果不会发生改变，ansible的大部分模块都能够保持操作的幂等性，即相关操作的多次执行能够达到相同结果，但也有不满足幂等性原则的模块，比如shell模块和raw模块。</p><p><strong><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/setup_module.html">setup模块</a></strong></p><p>setup模块自动被剧本调用，收集远程主机的基本信息，随后可以在剧本中使用，可以使用ansible命令直接调用该模块查看目标的信息</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo01$ ansible centos1 -m setup | more</span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html">file模块</a></strong></p><p>file模块用于文件管理操作，包括文件/文件夹/链接文件的增删改查，其他模块如copy、template、assemble也可进行文件管理操作，对于windows目标系统，则需要使用win_file模块。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m file -a 'path=/tmp/test state=touch'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件权限</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m file -a 'path=/tmp/test state=file mode=600'</span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html">copy模块</a></strong></p><p>copy模块作用是复制文件，通常用于将ansible管理主机上的文件拷贝到远程主机中，也可以将远程主机的文件拷贝到远程主机</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拷贝管理主机上的文件到远程主机中</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m copy -a 'src=/tmp/x dest=/tmp/x'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝远程主机上的文件到远程主机中</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m copy -a 'remote_src=yes src=/tmp/x dest=/tmp/y'</span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html">fetch模块</a></strong></p><p>fetch模块作用也是复制文件，通常用于将到远程主机上的文件拷贝到ansible管理主机上</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m file -a 'path=/tmp/test_modules.txt state=touch mode=600' -o</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程文件拷贝到本地</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m fetch -a 'src=/tmp/test_modules.txt dest=/tmp/' -o</span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html">command模块</a></strong></p><p>command模块是ansible的默认基本模块，也可以省略不写，但是使用command模块，不得出现shell变量，如<code>$name</code>，也不得出现特殊符号<code>&gt; &lt; | ; &amp;</code>，如果需要使用，请使用<code>shell</code>模块</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 所有主机执行 hostname 命令</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -a 'hostname' -o</span><br><span class="line">ubuntu-c | CHANGED | rc=0 | (stdout) ubuntu-c</span><br><span class="line">centos1 | CHANGED | rc=0 | (stdout) centos1</span><br><span class="line">centos2 | CHANGED | rc=0 | (stdout) centos2</span><br><span class="line">ubuntu1 | CHANGED | rc=0 | (stdout) ubuntu1</span><br><span class="line">centos3 | CHANGED | rc=0 | (stdout) centos3</span><br><span class="line">ubuntu2 | CHANGED | rc=0 | (stdout) ubuntu2</span><br><span class="line">ubuntu3 | CHANGED | rc=0 | (stdout) ubuntu3</span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html">shell模块</a></strong></p><p>shell模块作用是在远程主机上执行命令</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 远程主机执行 ps -ef | grep vim 命令</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible linux -m shell -a 'ps -ef | grep vim' -o</span><br><span class="line">centos1 | CHANGED | rc=0 | (stdout) root         864     863  0 07:33 pts/0    00:00:00 /bin/sh -c ps -ef | grep vim\nroot         866     864  0 07:33 pts/0    00:00:00 grep vim</span><br><span class="line">centos2 | CHANGED | rc=0 | (stdout) root         769     768  0 07:33 pts/0    00:00:00 /bin/sh -c ps -ef | grep vim\nroot         771     769  0 07:33 pts/0    00:00:00 grep vim</span><br><span class="line">centos3 | CHANGED | rc=0 | (stdout) root         682     681  0 07:33 pts/0    00:00:00 /bin/sh -c ps -ef | grep vim\nroot         684     682  0 07:33 pts/0    00:00:00 grep vim</span><br><span class="line">ubuntu2 | CHANGED | rc=0 | (stdout) root        1338    1337  0 07:33 pts/1    00:00:00 /bin/sh -c ps -ef | grep vim\nroot        1340    1338  0 07:33 pts/1    00:00:00 grep vim</span><br><span class="line">ubuntu1 | CHANGED | rc=0 | (stdout) root        1345    1344  0 07:33 pts/1    00:00:00 /bin/sh -c ps -ef | grep vim\nroot        1347    1345  0 07:33 pts/1    00:00:00 grep vim</span><br><span class="line">ubuntu3 | CHANGED | rc=0 | (stdout) root        1335    1334  0 07:33 pts/1    00:00:00 /bin/sh -c ps -ef | grep vim\nroot        1337    1335  0 07:33 pts/1    00:00:00 grep vim</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/script_module.html">script模块</a></strong></p><p>script模块的作用是在远程主机上执行ansible管理主机上的脚本，脚本存在ansible管理主机上，不需要手动拷贝到远程主机后再执行</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建脚本</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ cat show_pwd.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">pwd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去/tmp目录下 批量执行脚本</span></span><br><span class="line">ansible@ubuntu-c:~/demo01$ ansible all -m script -a 'chdir=/tmp /home/ansible/demo01/show_pwd.sh' -o</span><br><span class="line">ubuntu-c | CHANGED =&gt; {"changed": true,"rc": 0,"stderr": "","stderr_lines": [],"stdout": "/tmp\n","stdout_lines": ["/tmp"]}</span><br><span class="line">centos1 | CHANGED =&gt; {"changed": true,"rc": 0,"stderr": "Shared connection to centos1 closed.\r\n","stderr_lines": ["Shared connection to centos1 closed."],"stdout": "/tmp\r\n","stdout_lines": ["/tmp"]}</span><br><span class="line">centos2 | CHANGED =&gt; {"changed": true,"rc": 0,"stderr": "Shared connection to centos2 closed.\r\n","stderr_lines": ["Shared connection to centos2 closed."],"stdout": "/tmp\r\n","stdout_lines": ["/tmp"]}</span><br><span class="line">centos3 | CHANGED =&gt; {"changed": true,"rc": 0,"stderr": "Shared connection to centos3 closed.\r\n","stderr_lines": ["Shared connection to centos3 closed."],"stdout": "/tmp\r\n","stdout_lines": ["/tmp"]}</span><br><span class="line">ubuntu1 | CHANGED =&gt; {"changed": true,"rc": 0,"stderr": "Shared connection to ubuntu1 closed.\r\n","stderr_lines": ["Shared connection to ubuntu1 closed."],"stdout": "\r\n/tmp\r\n","stdout_lines": ["","/tmp"]}</span><br><span class="line">ubuntu2 | CHANGED =&gt; {"changed": true,"rc": 0,"stderr": "Shared connection to ubuntu2 closed.\r\n","stderr_lines": ["Shared connection to ubuntu2 closed."],"stdout": "\r\n/tmp\r\n","stdout_lines": ["","/tmp"]}</span><br><span class="line">ubuntu3 | CHANGED =&gt; {"changed": true,"rc": 0,"stderr": "Shared connection to ubuntu3 closed.\r\n","stderr_lines": ["Shared connection to ubuntu3 closed."],"stdout": "\r\n/tmp\r\n","stdout_lines": ["","/tmp"]}</span><br></pre></td></tr></tbody></table></figure><p><strong>Ansible-doc</strong></p><p>适合用于查看指定模块的变量和语法</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo01$ ansible-doc shell</span><br></pre></td></tr></tbody></table></figure><h2 id="4-Ansible-Playbook介绍">4. Ansible Playbook介绍</h2><blockquote><p>YAML，Playbook剧本，变量，Facts 变量， Jinja2模板，Playbook的编写和执行</p></blockquote><h3 id="4-1-YAML">4.1 YAML</h3><p>YAML是一种面向数据的语言，ansible剧本可以使用YAML和json编写，使用YAML编写的剧本具有易读易写的特性，便于分享合作。</p><p>编写yaml文件<strong>test.yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># YAML文件开始于3个 - (短横线)</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="attr">example_key_1:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">string</span></span><br><span class="line"><span class="attr">example_key_2:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">another</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号和双引号</span></span><br><span class="line"><span class="attr">no_quotes:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">string</span> <span class="string">example</span></span><br><span class="line"><span class="attr">double_quotes:</span> <span class="string">"this is a string example"</span></span><br><span class="line"><span class="attr">single_quotes:</span> <span class="string">'this is a string example'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义字符</span></span><br><span class="line"><span class="attr">escape_no_quotes:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">string</span> <span class="string">example\n</span></span><br><span class="line"><span class="attr">escape_double_quotes:</span> <span class="string">"this is a string example\n"</span></span><br><span class="line"><span class="attr">escape_single_quotes:</span> <span class="string">'this is a string example\n'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行</span></span><br><span class="line"><span class="attr">multilines_example_key_1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  this is a string</span></span><br><span class="line"><span class="string">  that goes over</span></span><br><span class="line"><span class="string">  multiple lines</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">multilines_example_key_2:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  this is a string</span></span><br><span class="line"><span class="string">  that goes over</span></span><br><span class="line"><span class="string">  multiple lines</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">multilines_example_key_3:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">  this is a string</span></span><br><span class="line"><span class="string">  that goes over</span></span><br><span class="line"><span class="string">  multiple lines</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="comment"># 数字</span></span><br><span class="line"><span class="attr">example_integer_1:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">example_integer_2:</span> <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 真与假</span></span><br><span class="line"><span class="comment"># false, False, FALSE, no, No, NO, off, Off, OFF</span></span><br><span class="line"><span class="comment"># true, True, TRUE, yes, Yes, YES, on, On, ON</span></span><br><span class="line"><span class="comment"># n不等于假，y不等于真</span></span><br><span class="line"></span><br><span class="line"><span class="attr">is_false_01:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">is_false_02:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">is_false_03:</span> <span class="literal">FALSE</span></span><br><span class="line"><span class="attr">is_false_04:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">is_false_05:</span> <span class="literal">No</span></span><br><span class="line"><span class="attr">is_false_06:</span> <span class="literal">NO</span></span><br><span class="line"><span class="attr">is_false_07:</span> <span class="string">off</span></span><br><span class="line"><span class="attr">is_false_08:</span> <span class="string">Off</span></span><br><span class="line"><span class="attr">is_false_09:</span> <span class="string">OFF</span></span><br><span class="line"><span class="attr">is_false_10:</span> <span class="string">n</span></span><br><span class="line"><span class="attr">is_true_01:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">is_true_02:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">is_true_03:</span> <span class="literal">TRUE</span></span><br><span class="line"><span class="attr">is_true_04:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">is_true_05:</span> <span class="literal">Yes</span></span><br><span class="line"><span class="attr">is_true_06:</span> <span class="literal">YES</span></span><br><span class="line"><span class="attr">is_true_07:</span> <span class="string">on</span></span><br><span class="line"><span class="attr">is_true_08:</span> <span class="string">On</span></span><br><span class="line"><span class="attr">is_true_09:</span> <span class="string">ON</span></span><br><span class="line"><span class="attr">is_true_10:</span> <span class="string">y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表，内联列表和内联字典不能同时存在，所以此处注释掉</span></span><br><span class="line"><span class="comment"># - item 1</span></span><br><span class="line"><span class="comment"># - item 2</span></span><br><span class="line"><span class="comment"># - item 3</span></span><br><span class="line"><span class="comment"># - item 4</span></span><br><span class="line"><span class="comment"># - item 5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">example_key_4:</span> [<span class="string">item</span> <span class="number">1</span>, <span class="string">item</span> <span class="number">2</span>, <span class="string">item</span> <span class="number">3</span>, <span class="string">item</span> <span class="number">4</span>, <span class="string">item</span> <span class="number">5</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="attr">example_key_5:</span> <span class="string">example_key_5</span></span><br><span class="line"><span class="attr">example_key_6:</span> <span class="string">example_key_6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这种字典表示方法不常用</span></span><br><span class="line"><span class="comment"># {example_key_7: example_key_7, example_key_8: example_key_8}</span></span><br><span class="line"><span class="comment"># 嵌套字典</span></span><br><span class="line"><span class="attr">example_key_9:</span></span><br><span class="line">  <span class="attr">example_key_10:</span> <span class="string">sub_example_value1</span></span><br><span class="line"><span class="attr">example_key_11:</span></span><br><span class="line">  <span class="attr">example_key_12:</span> <span class="string">sub_example_value2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表</span></span><br><span class="line"><span class="attr">example_key_13:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item_2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item_3</span></span><br><span class="line"><span class="attr">exmaple_key_14:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item_4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item_5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item_6</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 多级嵌套</span></span><br><span class="line"><span class="attr">example_dictionary_1:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">example_dictioanry_2:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">example_dictionary_3:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">4</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">5</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">example_dictioanry_4:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">7</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML文件结束语3个 . (点)</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>编写展示脚本<strong>show_yaml_python.sh</strong></p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">python3 -c <span class="string">'import yaml,pprint;pprint.pprint(yaml.load(open("test.yaml").read(), Loader=yaml.FullLoader))'</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo02$ chmod +x show_yaml_python.sh </span><br><span class="line">ansible@ubuntu-c:~/demo02$ ./show_yaml_python.sh </span><br><span class="line">{<span class="string">'double_quotes'</span>: <span class="string">'this is a string example'</span>,</span><br><span class="line"> <span class="string">'escape_double_quotes'</span>: <span class="string">'this is a string example\n'</span>,</span><br><span class="line"> <span class="string">'escape_no_quotes'</span>: <span class="string">'this is a string example\\n'</span>,</span><br><span class="line"> <span class="string">'escape_single_quotes'</span>: <span class="string">'this is a string example\\n'</span>,</span><br><span class="line"> <span class="string">'example_dictionary_1'</span>: [{<span class="string">'example_dictioanry_2'</span>: [1, 2, 3]},</span><br><span class="line">                          {<span class="string">'example_dictionary_3'</span>: [4, 5, 6]},</span><br><span class="line">                          {<span class="string">'example_dictioanry_4'</span>: [7, 8, 9]}],</span><br><span class="line"> <span class="string">'example_integer_1'</span>: 1,</span><br><span class="line"> <span class="string">'example_integer_2'</span>: <span class="string">'1'</span>,</span><br><span class="line"> <span class="string">'example_key_1'</span>: <span class="string">'this is a string'</span>,</span><br><span class="line"> <span class="string">'example_key_11'</span>: {<span class="string">'example_key_12'</span>: <span class="string">'sub_example_value2'</span>},</span><br><span class="line"> <span class="string">'example_key_13'</span>: [<span class="string">'item_1'</span>, <span class="string">'item_2'</span>, <span class="string">'item_3'</span>],</span><br><span class="line"> <span class="string">'example_key_2'</span>: <span class="string">'this is another string'</span>,</span><br><span class="line"> <span class="string">'example_key_4'</span>: [<span class="string">'item 1'</span>, <span class="string">'item 2'</span>, <span class="string">'item 3'</span>, <span class="string">'item 4'</span>, <span class="string">'item 5'</span>],</span><br><span class="line"> <span class="string">'example_key_5'</span>: <span class="string">'example_key_5'</span>,</span><br><span class="line"> <span class="string">'example_key_6'</span>: <span class="string">'example_key_6'</span>,</span><br><span class="line"> <span class="string">'example_key_9'</span>: {<span class="string">'example_key_10'</span>: <span class="string">'sub_example_value1'</span>},</span><br><span class="line"> <span class="string">'exmaple_key_14'</span>: [<span class="string">'item_4'</span>, <span class="string">'item_5'</span>, <span class="string">'item_6'</span>],</span><br><span class="line"> <span class="string">'is_false_01'</span>: False,</span><br><span class="line"> <span class="string">'is_false_02'</span>: False,</span><br><span class="line"> <span class="string">'is_false_03'</span>: False,</span><br><span class="line"> <span class="string">'is_false_04'</span>: False,</span><br><span class="line"> <span class="string">'is_false_05'</span>: False,</span><br><span class="line"> <span class="string">'is_false_06'</span>: False,</span><br><span class="line"> <span class="string">'is_false_07'</span>: False,</span><br><span class="line"> <span class="string">'is_false_08'</span>: False,</span><br><span class="line"> <span class="string">'is_false_09'</span>: False,</span><br><span class="line"> <span class="string">'is_false_10'</span>: <span class="string">'n'</span>,</span><br><span class="line"> <span class="string">'is_true_01'</span>: True,</span><br><span class="line"> <span class="string">'is_true_02'</span>: True,</span><br><span class="line"> <span class="string">'is_true_03'</span>: True,</span><br><span class="line"> <span class="string">'is_true_04'</span>: True,</span><br><span class="line"> <span class="string">'is_true_05'</span>: True,</span><br><span class="line"> <span class="string">'is_true_06'</span>: True,</span><br><span class="line"> <span class="string">'is_true_07'</span>: True,</span><br><span class="line"> <span class="string">'is_true_08'</span>: True,</span><br><span class="line"> <span class="string">'is_true_09'</span>: True,</span><br><span class="line"> <span class="string">'is_true_10'</span>: <span class="string">'y'</span>,</span><br><span class="line"> <span class="string">'multilines_example_key_1'</span>: <span class="string">'this is a string\n'</span></span><br><span class="line">                             <span class="string">'that goes over\n'</span></span><br><span class="line">                             <span class="string">'multiple lines\n'</span>,</span><br><span class="line"> <span class="string">'multilines_example_key_2'</span>: <span class="string">'this is a string that goes over multiple lines\n'</span>,</span><br><span class="line"> <span class="string">'multilines_example_key_3'</span>: <span class="string">'this is a string that goes over multiple lines'</span>,</span><br><span class="line"> <span class="string">'no_quotes'</span>: <span class="string">'this is a string example'</span>,</span><br><span class="line"> <span class="string">'single_quotes'</span>: <span class="string">'this is a string example'</span>}</span><br></pre></td></tr></tbody></table></figure><p><strong>YAML学习资源</strong></p><ul><li>YAML 标准 - <a href="https://yaml.org/spec/1.2.2/">https://yaml.org/spec/1.2.2/</a></li><li>维基百科 YAML词条 - <a href="https://zh.wikipedia.org/wiki/YAML">https://zh.wikipedia.org/wiki/YAML</a></li><li>stackoverflow 关于YAML多行的问题讨论 - <a href="https://stackoverflow.com/questions/3790454/how-do-i-break-a-string-in-yaml-over-multiple-lines">https://stackoverflow.com/questions/3790454/how-do-i-break-a-string-in-yaml-over-multiple-lines</a></li></ul><h3 id="4-2-初识剧本">4.2 初识剧本</h3><p>先通过例子来熟悉下Ansible Playbook剧本。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建文件夹并进入</span></span><br><span class="line">ansible@ubuntu-c:~$ mkdir demo03 &amp;&amp; cd demo03</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件和清单文件</span></span><br><span class="line">ansible@ubuntu-c:~/demo03$ touch ansible.cfg hosts motd_playbook.yaml</span><br></pre></td></tr></tbody></table></figure><p>配置文件 <strong>ansible.cfg</strong>:</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">inventory</span> = hosts</span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p>清单文件 <strong>hosts</strong>:</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[control]</span></span><br><span class="line">ubuntu-c <span class="attr">ansible_connection</span>=local</span><br><span class="line"></span><br><span class="line"><span class="section">[centos]</span></span><br><span class="line">centos1 <span class="attr">ansible_port</span>=<span class="number">2222</span></span><br><span class="line">centos<span class="section">[2:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[centos:vars]</span></span><br><span class="line"><span class="attr">ansible_user</span>=root</span><br><span class="line"></span><br><span class="line"><span class="section">[ubuntu]</span></span><br><span class="line">ubuntu<span class="section">[1:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ubuntu:vars]</span></span><br><span class="line"><span class="attr">ansible_become</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ansible_become_pass</span>=password</span><br><span class="line"></span><br><span class="line"><span class="section">[linux:children]</span></span><br><span class="line">centos</span><br><span class="line">ubuntu</span><br></pre></td></tr></tbody></table></figure><p>剧本文件<strong>motd_playbook.yaml</strong>:</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># YAML文件开始于3个 - (短横线)</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># YAML中的减号表示列表项，剧本(playbook)包含戏剧(play)列表，每个戏剧都是字典数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="comment"># Hosts: 戏剧将在哪运行以及其他运行选项配置</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">centos</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Vars: 将在所有目标系统上应用的戏剧变量</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">motd:</span> <span class="string">"Welcome to CentOS Linux - Ansible Rocks\n"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Tasks: 将在戏剧中执行的任务列表，此部分也可用于前置和后置任务</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">a</span> <span class="string">MOTD</span> <span class="string">(message</span> <span class="string">of</span> <span class="string">day)</span></span><br><span class="line">      <span class="comment"># 将motd变量的内容复制到远程cento主机的/etc/motd文件</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">"<span class="template-variable">{{ motd }}</span>"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/motd</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Handlers: 作为任务的通知键处理程序列表</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Roles: 导入戏剧中的角色列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML文件结束语3个 . (点)</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo03$ ansible-playbook  motd_playbook.yaml </span><br><span class="line"></span><br><span class="line">PLAY [centos] *******************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [centos1]</span><br><span class="line"></span><br><span class="line">TASK [Configure a MOTD (message of the day)] ************************************************************************************</span><br><span class="line">changed: [centos1]</span><br><span class="line">changed: [centos2]</span><br><span class="line">changed: [centos3]</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************</span><br><span class="line">centos1                    : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 </span><br></pre></td></tr></tbody></table></figure><p>其中，TASK [Gathering Facts] 是默认执行的任务，通过setup模块收集目标系统的Facts变量。所以，虽然只定义了1个任务，但是每个目标主机都执行了2个任务。</p><p>上面定义了变量<strong>motd</strong>，在执行时也可以通过<code>-e 'motd="Testing the motd playbook\n"'</code>重写</p><p>登录任意centos系统，可以看到：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">centos1 login: ansible</span><br><span class="line">Password: </span><br><span class="line">Last login: Tue Jun 20 03:15:36 from 172.19.0.3</span><br><span class="line">Welcome to CentOS Linux - Ansible Rocks</span><br><span class="line">ansible@centos1:~$</span><br></pre></td></tr></tbody></table></figure><p>修改剧本文件，添加任务的通知键及处理程序：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># YAML文件开始于3个 - (短横线)</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># YAML中的减号表示列表项，剧本(playbook)包含戏剧(play)列表，每个戏剧都是字典数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="comment"># Hosts: 戏剧将在哪运行以及其他执行选项配置</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">centos</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Vars: 将在所有目标系统上应用的戏剧变量</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">motd:</span> <span class="string">"Welcome to CentOS Linux - Ansible Rocks\n"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Tasks: 将在戏剧中执行的任务列表，此部分也可用于前置和后置任务</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">a</span> <span class="string">MOTD</span> <span class="string">(message</span> <span class="string">of</span> <span class="string">day)</span></span><br><span class="line">      <span class="comment"># 将motd变量的内容复制到远程cento主机的/etc/motd路径</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">"<span class="template-variable">{{ motd }}</span>"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/motd</span></span><br><span class="line">      <span class="comment"># 设置任务的通知键</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">MOTD</span> <span class="string">changed</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Handlers: 作为任务的通知键处理程序列表</span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MOTD</span> <span class="string">changed</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">The</span> <span class="string">MOTD</span> <span class="string">was</span> <span class="string">changed</span></span><br><span class="line">  <span class="comment"># Roles: 导入剧本中的角色列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML文件结束语3个 . (点)</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>gather_facts —— 默认为True，设置为False时不执行默认的TASK [Gathering Facts] 任务</p><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo03$ ansible-playbook motd_playbook.yaml</span><br><span class="line"></span><br><span class="line">PLAY [centos] *******************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Configure a MOTD (message of day)] ****************************************************************************************</span><br><span class="line">changed: [centos2]</span><br><span class="line">changed: [centos1]</span><br><span class="line">changed: [centos3]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [MOTD changed] **************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "The MOTD was changed"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "The MOTD was changed"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "The MOTD was changed"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************</span><br><span class="line">centos1                    : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></tbody></table></figure><p>因为MOTD任务更改了，通知键的处理程序 RUNNING HANDLER [MOTD changed] 任务也执行了，调试输出<strong>msg: The MOTD was changed</strong>，并且 <strong>ok=2</strong></p><p>利用系统信息的facts变量<strong>ansible_distribution</strong>，配合<strong>when</strong>指令来区分不同系统发行版，从而在不同系统上执行不同内容，修改剧本文件：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># YAML文件开始于3个 - (短横线)</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># YAML中的减号表示列表项，剧本(playbook)包含戏剧(play)列表，每个戏剧都是字典数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="comment"># Hosts: 戏剧将在哪运行以及其他执行选项配置</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Vars: 将在所有目标系统上应用的戏剧变量</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">motd_centos:</span> <span class="string">"Welcome to CentOS Linux - Ansible Rocks\n"</span></span><br><span class="line">    <span class="attr">motd_ubuntu:</span> <span class="string">"Welcome to Ubuntu Linux - Ansible Rocks\n"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Tasks: 将在戏剧中执行的任务列表，此部分也可用于前置和后置任务</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">a</span> <span class="string">MOTD</span> <span class="string">(message</span> <span class="string">of</span> <span class="string">day)</span></span><br><span class="line">      <span class="comment"># 将motd变量的内容复制到远程cento主机的/etc/motd路径</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">"<span class="template-variable">{{ motd_centos }}</span>"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/motd</span></span><br><span class="line">      <span class="comment"># 设置任务的通知键</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">MOTD</span> <span class="string">changed</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">"CentOS"</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">a</span> <span class="string">MOTD</span> <span class="string">(message</span> <span class="string">of</span> <span class="string">day)</span></span><br><span class="line">      <span class="comment"># 将motd变量的内容复制到远程cento主机的/etc/motd路径</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">"<span class="template-variable">{{ motd_ubuntu }}</span>"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/motd</span></span><br><span class="line">      <span class="comment"># 设置任务的通知键</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">MOTD</span> <span class="string">changed</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">"Ubuntu"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Handlers: 作为任务的通知键处理程序列表</span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MOTD</span> <span class="string">changed</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">The</span> <span class="string">MOTD</span> <span class="string">was</span> <span class="string">changed</span></span><br><span class="line">  <span class="comment"># Roles: 导入剧本中的角色列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML文件结束语3个 . (点)</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo03$ ansible-playbook motd_playbook.yaml </span><br><span class="line"></span><br><span class="line">PLAY [linux] ********************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [ubuntu1]</span><br><span class="line">ok: [ubuntu2]</span><br><span class="line">ok: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Configure a MOTD (message of day)] ****************************************************************************************</span><br><span class="line">skipping: [ubuntu1]</span><br><span class="line">skipping: [ubuntu2]</span><br><span class="line">skipping: [ubuntu3]</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos2]</span><br><span class="line"></span><br><span class="line">TASK [Configure a MOTD (message of day)] ****************************************************************************************</span><br><span class="line">skipping: [centos1]</span><br><span class="line">skipping: [centos2]</span><br><span class="line">skipping: [centos3]</span><br><span class="line">changed: [ubuntu1]</span><br><span class="line">changed: [ubuntu3]</span><br><span class="line">changed: [ubuntu2]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [MOTD changed] **************************************************************************************************</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "The MOTD was changed"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "The MOTD was changed"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "The MOTD was changed"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************</span><br><span class="line">centos1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   </span><br><span class="line">ubuntu1                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   </span><br><span class="line">ubuntu2                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   </span><br><span class="line">ubuntu3                    : ok=3    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0</span><br></pre></td></tr></tbody></table></figure><p>点击查看更多的剧本关键字：<a href="http://docs.ansible.com/ansible/devel/playbooks_keywords.html">http://docs.ansible.com/ansible/devel/playbooks_keywords.html</a></p><h3 id="4-3-剧本变量">4.3 剧本变量</h3><p>新建变量文件<strong>external_vars.yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">external_example_key:</span> <span class="string">example</span> <span class="string">value</span></span><br><span class="line"></span><br><span class="line"><span class="attr">external_dict:</span></span><br><span class="line">   <span class="attr">dict_key:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">dictionary</span> <span class="string">value</span></span><br><span class="line"></span><br><span class="line"><span class="attr">external_inline_dict:</span> </span><br><span class="line">   {<span class="attr">inline_dict_key:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">an</span> <span class="string">inline</span> <span class="string">dictionary</span> <span class="string">value</span>}</span><br><span class="line"></span><br><span class="line"><span class="attr">external_named_list:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">item1</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">item2</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">item3</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">item4</span></span><br><span class="line"></span><br><span class="line"><span class="attr">external_inline_named_list:</span></span><br><span class="line">   [ <span class="string">item1</span>, <span class="string">item2</span>, <span class="string">item3</span>, <span class="string">item4</span> ]</span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>新建剧本variables_playbook.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">centos1</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 通过文件引入变量</span></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">external_vars.yaml</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">dictionary</span> <span class="string">key</span> <span class="string">value</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_example_key }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">dictionary</span> <span class="string">dictionary</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_dict }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">dictionary</span> <span class="string">dictionary</span> <span class="string">key</span> <span class="string">value</span> <span class="string">with</span> <span class="string">dictionary</span> <span class="string">dot</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_dict.dict_key }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">dictionary</span> <span class="string">dictionary</span> <span class="string">key</span> <span class="string">value</span> <span class="string">with</span> <span class="string">brackets</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_dict['dict_key'] }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">inline</span> <span class="string">dictionary</span> <span class="string">dictionary</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_inline_dict }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">inline</span> <span class="string">dictionary</span> <span class="string">dictionary</span> <span class="string">key</span> <span class="string">value</span> <span class="string">with</span> <span class="string">dictionary</span> <span class="string">dot</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_inline_dict.inline_dict_key }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">inline</span> <span class="string">dictionary</span> <span class="string">dictionary</span> <span class="string">key</span> <span class="string">value</span> <span class="string">with</span> <span class="string">brackets</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_inline_dict['inline_dict_key'] }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">list</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_named_list }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">list</span> <span class="string">first</span> <span class="string">item</span> <span class="string">dot</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_named_list.0 }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">named</span> <span class="string">list</span> <span class="string">first</span> <span class="string">item</span> <span class="string">brackets</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_named_list[0] }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">inline</span> <span class="string">named</span> <span class="string">list</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_inline_named_list }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">inline</span> <span class="string">named</span> <span class="string">list</span> <span class="string">first</span> <span class="string">item</span> <span class="string">dot</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_inline_named_list.0 }}</span>"</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">external</span> <span class="string">inline</span> <span class="string">named</span> <span class="string">list</span> <span class="string">first</span> <span class="string">item</span> <span class="string">brackets</span> <span class="string">notation</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ external_inline_named_list[0] }}</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><code>vars_files</code> —— 通过文件引入变量，如：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">vars_files:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">external_vars.yaml</span></span><br></pre></td></tr></tbody></table></figure><p><code>vars_prompt</code> —— 提示用户输入变量值，如：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">vars_promt:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">private:</span> <span class="literal">False</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">private:</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><p><code>hostvars[ansible_hostname]['ansible_port'] | default('22')</code> —— 获取主机的变量，如：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">hostvars</span> <span class="string">with</span> <span class="string">an</span> <span class="string">ansible</span> <span class="string">fact</span> <span class="string">and</span> <span class="string">collect</span> <span class="string">ansible_port,</span> <span class="string">dict</span> <span class="string">notation</span></span><br><span class="line">    <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ hostvars[ansible_hostname]['ansible_port'] | default('22') }}</span>"</span></span><br></pre></td></tr></tbody></table></figure><p>ansible-playbook通过<code>-e</code>传入变量值时有5种方式：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.通过ini格式传入</span></span><br><span class="line">ansible-playbook variable_playbook.yaml -e extra_vars_key="extra vars value"</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.通过json格式传入</span></span><br><span class="line">ansible-playbook variable_playbook.yaml -e {"extra_vars_key": "extra vars value"}</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.通过yaml格式传入</span></span><br><span class="line">ansible-playbook variable_playbook.yaml -e {extra_vars_key: extra vars value}</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.通过yaml文件传入</span></span><br><span class="line">ansible-playbook variable_playbook.yaml -e @extra_vars_file.yaml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.通过json文件传入</span></span><br><span class="line">ansible-playbook variable_playbook.yaml -e @extra_vars_file.json</span><br></pre></td></tr></tbody></table></figure><p>另外，主机变量和组变量可以分布使用单独的yaml文件host_vars/centos1、host_vars/ubuntu-c和group_vars/centos、group_vars/ubuntu来保存和区分，而不是写在一个host文件里</p><p>hosts文件内容变为：</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[control]</span></span><br><span class="line">ubuntu-c</span><br><span class="line"></span><br><span class="line"><span class="section">[centos]</span></span><br><span class="line">centos<span class="section">[1:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ubuntu]</span></span><br><span class="line">ubuntu<span class="section">[1:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[linux:children]</span></span><br><span class="line">centos</span><br><span class="line">ubuntu</span><br></pre></td></tr></tbody></table></figure><p>新建的host_vars/centos1内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ansible_port:</span> <span class="number">2222</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>新建的host_vars/ubuntu-c内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ansible_connection:</span> <span class="string">local</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>新建的group_vars/centos内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ansible_user:</span> <span class="string">root</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>新建的group_vars/ubuntu内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ansible_become:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ansible_become_pass:</span> <span class="string">password</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-4-使用和自定义Facts变量">4.4 使用和自定义Facts变量</h3><p>**Ansible Facts 是 Ansible 在被托管主机上自动收集的变量。**它是通过在执行 ad-hoc 以及 Playbook 时使用 setup 模块进行收集的，并且这个操作是默认的。</p><p>setup模块官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/setup_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/setup_module.html</a></p><p>ad-hoc使用setup模块示例：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示来自centos1主机所有关于network子集的facts变量</span></span><br><span class="line">ansible@ubuntu-c:~/demo03$ ansible centos1 -m setup -a 'gather_subset=network'</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示来自centos1主机特定network子集的facts变量</span></span><br><span class="line">ansible@ubuntu-c:~/demo03$ ansible centos1 -m setup -a 'gather_subset=!all,!min,network'</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用过滤器选项显示来自centos1主机facts变量 - ansible_memfree_mb</span> </span><br><span class="line">ansible@ubuntu-c:~/demo03$ ansible centos1 -m setup -a 'filter=ansible_memfree_mb'</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用过滤器选项+通配符显示来自centos1主机facts变量 - 包含ansible_mem 字段的变量</span> </span><br><span class="line">ansible@ubuntu-c:~/demo03$ ansible centos1 -m setup -a 'filter=ansible_mem*'</span><br></pre></td></tr></tbody></table></figure><p>ad-hoc命令模式中，setup模块收集的返回数据是字典结构，其中键为ansible_facts包含着收集到的facts变量，如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo03$ ansible centos1 -m setup -a 'filter=ansible_mem*'</span><br><span class="line">centos1 | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "ansible_memfree_mb": 10619,</span><br><span class="line">        "ansible_memory_mb": {</span><br><span class="line">            "nocache": {</span><br><span class="line">                "free": 13976,</span><br><span class="line">                "used": 1882</span><br><span class="line">            },</span><br><span class="line">            "real": {</span><br><span class="line">                "free": 10619,</span><br><span class="line">                "total": 15858,</span><br><span class="line">                "used": 5239</span><br><span class="line">            },</span><br><span class="line">            "swap": {</span><br><span class="line">                "cached": 0,</span><br><span class="line">                "free": 4096,</span><br><span class="line">                "total": 4096,</span><br><span class="line">                "used": 0</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "ansible_memtotal_mb": 15858,</span><br><span class="line">        "discovered_interpreter_python": "/usr/libexec/platform-python"</span><br><span class="line">    },</span><br><span class="line">    "changed": false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>playbook剧本模式中，setup模块收集的返回数据是字典结构，没有ansible_facts键，可以直接用facts变量，如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~$ mkdir demo04 &amp;&amp; cd demo04</span><br><span class="line">ansible@ubuntu-c:~/demo04$ cp ../demo03/hosts .</span><br><span class="line">ansible@ubuntu-c:~/demo04$ cp ../demo03/ansible.cfg .</span><br><span class="line">ansible@ubuntu-c:~/demo04$ cat facts_playbook.yaml </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"></span><br><span class="line">  hosts: all</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Show Ip Address</span><br><span class="line">      debug:</span><br><span class="line">        msg: "{{ ansible_default_ipv4.address }}"</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">ansible@ubuntu-c:~/demo04$ ansible-playbook facts_playbook.yaml </span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c]</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [ubuntu1]</span><br><span class="line">ok: [ubuntu2]</span><br><span class="line">ok: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Show Ip Address] **********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "172.19.0.2"</span><br><span class="line">}</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "172.19.0.7"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "172.19.0.5"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "172.19.0.8"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "172.19.0.9"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "172.19.0.4"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "172.19.0.3"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************</span><br><span class="line">centos1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu-c                   : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></tbody></table></figure><p><strong>创造自定义facts变量</strong></p><ul><li>能够使用任何语言编写</li><li>返回JSON结构或ini结构</li><li>默认放置在/etc/ansible/facts.d</li></ul><p>创建一个自定义facts变量用于收集系统日期信息：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自定义facts变量（返回JSON结构）</span></span><br><span class="line">ansible@ubuntu-c:~/demo04$ cat getdate1.fact </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo {\""date\"": \""`date`""}</span><br><span class="line">ansible@ubuntu-c:~/demo04$ chmod +x getdate1.fact </span><br><span class="line">ansible@ubuntu-c:~/demo04$ ./getdate1.fact</span><br><span class="line">{"date" : "Mon Jun 26 09:45:11 UTC 2023"}</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义facts变量（返回ini结构）</span></span><br><span class="line">ansible@ubuntu-c:~/demo04$ cat getdate2.fact </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo [date]</span><br><span class="line">echo date=`date`</span><br><span class="line">ansible@ubuntu-c:~/demo04$ chmod +x getdate2.fact </span><br><span class="line">ansible@ubuntu-c:~/demo04$ ./getdate2.fact</span><br><span class="line">[date]</span><br><span class="line">date=Mon Jun 26 09:47:31 UTC 2023</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/demo04$ sudo mkdir -p /etc/ansible/facts.d</span><br><span class="line">ansible@ubuntu-c:~/demo04$ sudo cp getdate* /etc/ansible/facts.d/</span><br><span class="line">ansible@ubuntu-c:~/demo04$ ansible ubuntu-c -m setup -a 'filter=ansible_local'</span><br><span class="line">ubuntu-c | SUCCESS =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "ansible_local": {</span><br><span class="line">            "getdate1": {</span><br><span class="line">                "date": "Mon Jun 26 09:53:15 UTC 2023"</span><br><span class="line">            },</span><br><span class="line">            "getdate2": {</span><br><span class="line">                "date": {</span><br><span class="line">                    "date": "Mon Jun 26 09:53:15 UTC 2023"</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python3"</span><br><span class="line">    },</span><br><span class="line">    "changed": false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改剧本facts_playbook.yaml，使用自定义的facts变量</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo04$ cat facts_playbook.yaml </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"></span><br><span class="line">  hosts: all</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Show Ip Address</span><br><span class="line">      debug:</span><br><span class="line">        msg: "{{ ansible_default_ipv4.address }}"</span><br><span class="line"></span><br><span class="line">    - name: Show Custom Fact 1</span><br><span class="line">      debug:</span><br><span class="line">        msg: "{{ ansible_local.getdate1.date }}"</span><br><span class="line"></span><br><span class="line">    - name: Show Custom Fact 2</span><br><span class="line">      debug:</span><br><span class="line">        msg: "{{ ansible_local.getdate2.date.date  }}"</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">ansible@ubuntu-c:~/demo04$ ansible-playbook facts_playbook.yaml -l ubuntu-c</span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c]</span><br><span class="line"></span><br><span class="line">TASK [Show Ip Address] **********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "172.19.0.2"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [Show Custom Fact 1] *******************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 09:58:49 UTC 2023"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [Show Custom Fact 2] *******************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 09:58:49 UTC 2023"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************</span><br><span class="line">ubuntu-c                   : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 </span><br></pre></td></tr></tbody></table></figure><p>目前自定义的facts变量只在ubuntu-c管理主机上生效，要想其他被管理主机也能使用自定义的facts变量，则可将自定义facts变量的文件拷贝到各自主机的/etc/ansible/facts.d目录下。</p><p>修改剧本facts_playbook.yaml：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Make</span> <span class="string">Facts</span> <span class="string">Dir</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/ansible/facts.d</span></span><br><span class="line">        <span class="attr">recurse:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">Fact</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/ansible/facts.d/getdate1.fact</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/ansible/facts.d/getdate1.fact</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">Fact</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/ansible/facts.d/getdate2.fact</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/ansible/facts.d/getdate2.fact</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Refresh</span> <span class="string">Facts</span></span><br><span class="line">      <span class="attr">setup:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Ip</span> <span class="string">Address</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ ansible_default_ipv4.address }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ ansible_local.getdate1.date }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ ansible_local.getdate2.date.date  }}</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">1</span> <span class="string">in</span> <span class="string">hostvars</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ hostvars[ansible_hostname].ansible_local.getdate1.date }}</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">2</span> <span class="string">in</span> <span class="string">hostvars</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ hostvars[ansible_hostname].ansible_local.getdate2.date.date }}</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>默认情况下，Ansible期望自定义facts变量文件位于需要root访问权限的位置/etc/ansible/facts.d，如何在没有root访问权限的环境中使用自定义facts变量。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先删除被管理主机上的自定义facts变量文件</span></span><br><span class="line">ansible@ubuntu-c:~/demo04$ ansible linux -m file -a 'path=/etc/ansible/facts.d/getdate1.fact state=absent'</span><br><span class="line">ansible@ubuntu-c:~/demo04$ ansible linux -m file -a 'path=/etc/ansible/facts.d/getdate2.fact state=absent'</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后将控制主机上的自定义facts变量文件移动</span></span><br><span class="line">ansible@ubuntu-c:~/demo04$ ls</span><br><span class="line">ansible.cfg  facts_playbook.yaml  getdate1.fact  getdate2.fact  hosts</span><br><span class="line">ansible@ubuntu-c:~/demo04$ mkdir facts.d</span><br><span class="line">ansible@ubuntu-c:~/demo04$ mv getdate* facts.d</span><br><span class="line">ansible@ubuntu-c:~/demo04$ ls</span><br><span class="line">ansible.cfg  facts.d  facts_playbook.yaml  hosts</span><br></pre></td></tr></tbody></table></figure><p>修改剧本facts_playbook.yaml，使用fact_path制定自定义facts变量文件位置：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Make</span> <span class="string">Facts</span> <span class="string">Dir</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/home/ansible/facts.d</span></span><br><span class="line">        <span class="attr">recurse:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">ansible</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">Fact</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">facts.d/getdate1.fact</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/home/ansible/facts.d/getdate1.fact</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">ansible</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">Fact</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/facts.d/getdate2.fact</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/home/ansible/facts.d/getdate2.fact</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">ansible</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Refresh</span> <span class="string">Facts</span></span><br><span class="line">      <span class="attr">setup:</span></span><br><span class="line">        <span class="attr">fact_path:</span> <span class="string">/home/ansible/facts.d</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Ip</span> <span class="string">Address</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ ansible_default_ipv4.address }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ ansible_local.getdate1.date }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ ansible_local.getdate2.date.date  }}</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">1</span> <span class="string">in</span> <span class="string">hostvars</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ hostvars[ansible_hostname].ansible_local.getdate1.date }}</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Custom</span> <span class="string">Fact</span> <span class="number">2</span> <span class="string">in</span> <span class="string">hostvars</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ hostvars[ansible_hostname].ansible_local.getdate2.date.date }}</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/demo04$ ansible-playbook facts_playbook.yaml </span><br><span class="line"></span><br><span class="line">PLAY [linux] ********************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] **********************************************************************************************************</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [ubuntu2]</span><br><span class="line">ok: [ubuntu1]</span><br><span class="line">ok: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Make Facts Dir] ***********************************************************************************************************</span><br><span class="line">changed: [centos1]</span><br><span class="line">changed: [centos3]</span><br><span class="line">changed: [centos2]</span><br><span class="line">changed: [ubuntu1]</span><br><span class="line">changed: [ubuntu2]</span><br><span class="line">changed: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Copy Fact 1] **************************************************************************************************************</span><br><span class="line">changed: [ubuntu1]</span><br><span class="line">changed: [centos3]</span><br><span class="line">changed: [ubuntu2]</span><br><span class="line">changed: [centos1]</span><br><span class="line">changed: [centos2]</span><br><span class="line">changed: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Copy Fact 2] **************************************************************************************************************</span><br><span class="line">changed: [centos1]</span><br><span class="line">changed: [centos2]</span><br><span class="line">changed: [ubuntu1]</span><br><span class="line">changed: [ubuntu2]</span><br><span class="line">changed: [centos3]</span><br><span class="line">changed: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Refresh Facts] ************************************************************************************************************</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [ubuntu1]</span><br><span class="line">ok: [ubuntu2]</span><br><span class="line">ok: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Show Ip Address] **********************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "172.19.0.7"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "172.19.0.5"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "172.19.0.8"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "172.19.0.9"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "172.19.0.4"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "172.19.0.3"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [Show Custom Fact 1] *******************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:48 UTC 2023"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [Show Custom Fact 2] *******************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:48 UTC 2023"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [Show Custom Fact 1 in hostvars] *******************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:48 UTC 2023"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [Show Custom Fact2 in hostvars] ********************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:47 UTC 2023"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Mon Jun 26 10:23:48 UTC 2023"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************************************************</span><br><span class="line">centos1                    : ok=10   changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=10   changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=10   changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu1                    : ok=10   changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu2                    : ok=10   changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu3                    : ok=10   changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试完毕后删除自定义的facts变量</span></span><br><span class="line">ansible@ubuntu-c:~/demo04$ ansible linux -m file -a 'path=/home/ansible/facts.d state=absent'</span><br><span class="line">centos1 | CHANGED =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/libexec/platform-python"</span><br><span class="line">    },</span><br><span class="line">    "changed": true,</span><br><span class="line">    "path": "/home/ansible/facts.d",</span><br><span class="line">    "state": "absent"</span><br><span class="line">}</span><br><span class="line">centos3 | CHANGED =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/libexec/platform-python"</span><br><span class="line">    },</span><br><span class="line">    "changed": true,</span><br><span class="line">    "path": "/home/ansible/facts.d",</span><br><span class="line">    "state": "absent"</span><br><span class="line">}</span><br><span class="line">centos2 | CHANGED =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/libexec/platform-python"</span><br><span class="line">    },</span><br><span class="line">    "changed": true,</span><br><span class="line">    "path": "/home/ansible/facts.d",</span><br><span class="line">    "state": "absent"</span><br><span class="line">}</span><br><span class="line">ubuntu1 | CHANGED =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python3"</span><br><span class="line">    },</span><br><span class="line">    "changed": true,</span><br><span class="line">    "path": "/home/ansible/facts.d",</span><br><span class="line">    "state": "absent"</span><br><span class="line">}</span><br><span class="line">ubuntu2 | CHANGED =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python3"</span><br><span class="line">    },</span><br><span class="line">    "changed": true,</span><br><span class="line">    "path": "/home/ansible/facts.d",</span><br><span class="line">    "state": "absent"</span><br><span class="line">}</span><br><span class="line">ubuntu3 | CHANGED =&gt; {</span><br><span class="line">    "ansible_facts": {</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python3"</span><br><span class="line">    },</span><br><span class="line">    "changed": true,</span><br><span class="line">    "path": "/home/ansible/facts.d",</span><br><span class="line">    "state": "absent"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-5-剧本使用Jinja2模板语言">4.5 剧本使用Jinja2模板语言</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~$ mkdir demo05 &amp;&amp; cd demo05</span><br><span class="line">ansible@ubuntu-c:~/demo05$ cp ../demo04/ansible.cfg .</span><br><span class="line">ansible@ubuntu-c:~/demo05$ cp ../demo04/hosts .</span><br><span class="line">ansible@ubuntu-c:~/demo05$ touch jinja2_playbook.yaml</span><br><span class="line">ansible@ubuntu-c:~/demo05$ echo jinja2_extensions = jinja2.ext.loopcontrols &gt;&gt; ansible.cfg</span><br></pre></td></tr></tbody></table></figure><p>jinja2_playbook.yaml文件内容如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Jinja2</span> <span class="string">if</span> <span class="string">elif</span> <span class="string">else</span> <span class="string">statement</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">             --== Ansible Jinja2 if elif else statement ==--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">             {<span class="comment"># If the hostname is ubuntu-c, include a message -#}</span></span><br><span class="line">             {<span class="string">%</span> <span class="string">if</span> <span class="string">ansible_hostname</span> <span class="string">==</span> <span class="string">"ubuntu-c"</span> <span class="string">-%</span>}</span><br><span class="line">                <span class="string">This</span> <span class="string">is</span> <span class="string">ubuntu-c</span></span><br><span class="line">             {<span class="string">%</span> <span class="string">elif</span> <span class="string">ansible_hostname</span> <span class="string">==</span> <span class="string">"centos1"</span> <span class="string">-%</span>}</span><br><span class="line">                 <span class="string">This</span> <span class="string">is</span> <span class="string">centos1</span> <span class="string">with</span> <span class="string">it's</span> <span class="string">modified</span> <span class="string">SSH</span> <span class="string">Port</span></span><br><span class="line">             {<span class="string">%</span> <span class="string">else</span> <span class="string">-%</span>}</span><br><span class="line">                 <span class="string">This</span> <span class="string">is</span> <span class="string">good</span> <span class="string">old</span> {{ <span class="string">ansible_hostname</span> }}</span><br><span class="line">             {<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>}</span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Jinja2</span> <span class="string">if</span> <span class="string">variable</span> <span class="string">is</span> <span class="string">defined</span> <span class="string">(</span> <span class="string">where</span> <span class="string">variable</span> <span class="string">is</span> <span class="string">defined</span> <span class="string">)</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">             --== Ansible Jinja2 if variable is defined ( where variable is defined ) ==--</span></span><br><span class="line"><span class="string"></span>             </span><br><span class="line">             {<span class="string">%</span> <span class="string">set</span> <span class="string">example_variable</span> <span class="string">=</span> <span class="string">'defined'</span> <span class="string">-%</span>}</span><br><span class="line">             {<span class="string">%</span> <span class="string">if</span> <span class="string">example_variable</span> <span class="string">is</span> <span class="string">defined</span> <span class="string">-%</span>}</span><br><span class="line">                 <span class="string">example_variable</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line">             {<span class="string">%</span> <span class="string">else</span> <span class="string">-%</span>}</span><br><span class="line">                 <span class="string">example_variable</span> <span class="string">is</span> <span class="string">not</span> <span class="string">defiend</span></span><br><span class="line">             {<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>}</span><br><span class="line">     </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Jinja2</span> <span class="string">for</span> <span class="string">statement</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">             --== Ansible Jinja2 for statement ==--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">             {<span class="string">%</span> <span class="string">for</span> <span class="string">entry</span> <span class="string">in</span> <span class="string">ansible_interfaces</span> <span class="string">-%</span>}</span><br><span class="line">                 <span class="string">Interface</span> <span class="string">entry</span> {{ <span class="string">loop.index</span> }} <span class="string">=</span> {{ <span class="string">entry</span> }}</span><br><span class="line">             {<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Jinja2</span> <span class="string">for</span> <span class="string">range</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">          --== Ansible Jinja2 for range ==--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          {<span class="string">%</span> <span class="string">for</span> <span class="string">entry</span> <span class="string">in</span> <span class="string">range(1</span>, <span class="number">11</span><span class="string">)</span> <span class="string">-%</span>}</span><br><span class="line">              {{ <span class="string">entry</span> }}</span><br><span class="line">          {<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>}</span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Jinja2</span> <span class="string">for</span> <span class="string">range</span>, <span class="string">reversed</span> <span class="string">(simulate</span> <span class="string">while</span> <span class="string">greater</span> <span class="number">5</span><span class="string">)</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">             --== Ansible Jinja2 for range, reversed (simulate while greater 5) ==--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">             {<span class="string">%</span> <span class="string">for</span> <span class="string">entry</span> <span class="string">in</span> <span class="string">range(10</span>, <span class="number">0</span>, <span class="number">-1</span><span class="string">)</span> <span class="string">-%</span>}</span><br><span class="line">                 {<span class="string">%</span> <span class="string">if</span> <span class="string">entry</span> <span class="string">==</span> <span class="number">5</span> <span class="string">-%</span>}</span><br><span class="line">                     {<span class="string">%</span> <span class="string">break</span> <span class="string">%</span>}</span><br><span class="line">                 {<span class="string">%</span> <span class="string">endif</span> <span class="string">-%</span>}</span><br><span class="line">             {{ <span class="string">entry</span> }}</span><br><span class="line">             {<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>}</span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Jinja2</span> <span class="string">for</span> <span class="string">range</span>, <span class="string">reversed(continue</span> <span class="string">if</span> <span class="string">odd)</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">             --== Ansible Jinja2 for range, reversed (continue if odd)</span></span><br><span class="line"><span class="string">             {% for entry in range(10, 0, -1) -%}</span></span><br><span class="line"><span class="string">                 {% if entry is odd -%}</span></span><br><span class="line"><span class="string">                     {% continue %}</span></span><br><span class="line"><span class="string">                 {% endif -%}</span></span><br><span class="line"><span class="string">                 {{ entry }}</span></span><br><span class="line"><span class="string">             {% endfor %}</span></span><br><span class="line"><span class="string"></span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Jinja2</span> <span class="string">filters</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">             --=== Ansible Jinja2 filters ===--</span></span><br><span class="line"><span class="string"></span>             </span><br><span class="line">             <span class="string">--==</span> <span class="string">min</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="string">==--</span></span><br><span class="line">             {{ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="string">|</span> <span class="string">min</span> }}</span><br><span class="line"></span><br><span class="line">             <span class="string">--==</span> <span class="string">max</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="string">==--</span></span><br><span class="line">             {{ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="string">|</span> <span class="string">max</span> }}</span><br><span class="line"></span><br><span class="line">             <span class="string">--==</span> <span class="string">unique</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>] <span class="string">==--</span></span><br><span class="line">             {{ [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>] <span class="string">|</span> <span class="string">unique</span> }}</span><br><span class="line"></span><br><span class="line">             <span class="string">--==</span> <span class="string">difference</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="string">vs</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="string">==--</span></span><br><span class="line">             {{ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="string">|</span> <span class="string">difference(</span>[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]<span class="string">)</span> }}</span><br><span class="line"></span><br><span class="line">             <span class="string">--==</span> <span class="string">random</span> [<span class="string">'rod'</span>, <span class="string">'jane'</span>, <span class="string">'freddy'</span>] <span class="string">==--</span></span><br><span class="line">             {{ [<span class="string">'rod'</span>, <span class="string">'jane'</span>, <span class="string">'freddy'</span>] <span class="string">|</span> <span class="string">random</span> }}</span><br><span class="line"></span><br><span class="line">             <span class="string">--==</span> <span class="string">urlsplit</span> <span class="string">hostname</span> <span class="string">==--</span></span><br><span class="line">             {{ <span class="string">"http://docs.ansible.com/ansible/latest/playbook_filters.html"</span> <span class="string">|</span> <span class="string">urlsplit('hostname')</span> }}</span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>剧本过滤器官方文档地址：<a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html">https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html</a></p><p>jinjia2相关内容可以写成单独的文件，然后在Ansible通过template模块引入。如：</p><p>新建template.j2文件，内容如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">--== Ansible Jinja2 if statement ==--</span><br><span class="line"></span><br><span class="line">{# If the hostname is ubuntu-c, include a message -#}</span><br><span class="line">{% if ansible_hostname == "ubuntu-c" -%}</span><br><span class="line">      This is ubuntu-c</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 if elif statement ==--</span><br><span class="line"></span><br><span class="line">{% if ansible_hostname == "ubuntu-c" -%}</span><br><span class="line">   This is ubuntu-c</span><br><span class="line">{% elif ansible_hostname == "centos1" -%}</span><br><span class="line">   This is centos1 with it's modified SSH Port</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 if elif else statement ==--</span><br><span class="line"></span><br><span class="line">{% if ansible_hostname == "ubuntu-c" -%}</span><br><span class="line">   This is ubuntu-c</span><br><span class="line">{% elif ansible_hostname == "centos1" -%}</span><br><span class="line">   This is centos1 with it's modified SSH Port</span><br><span class="line">{% else -%}</span><br><span class="line">   This is good old {{ ansible_hostname }}</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 if variable is defined ( where variable is not defined ) ==--</span><br><span class="line"></span><br><span class="line">{% if example_variable is defined -%}</span><br><span class="line">   example_variable is defined</span><br><span class="line">{% else -%}</span><br><span class="line">   example_variable is not defined</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 if varible is defined ( where variable is defined ) ==--</span><br><span class="line"></span><br><span class="line">{% set example_variable = 'defined' -%}</span><br><span class="line">{% if example_variable is defined -%}</span><br><span class="line">   example_variable is defined</span><br><span class="line">{% else -%}</span><br><span class="line">   example_variable is not defined</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 for statement ==--</span><br><span class="line"></span><br><span class="line">{% for entry in ansible_all_ipv4_addresses -%}</span><br><span class="line">   IP Address entry {{ loop.index }} = {{ entry }}</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 for range</span><br><span class="line"></span><br><span class="line">{% for entry in range(1, 11) -%}</span><br><span class="line">   {{ entry }}</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 for range, reversed (simulate while greater 5) ==--</span><br><span class="line"></span><br><span class="line">{% for entry in range(10, 0, -1) -%}</span><br><span class="line">   {% if entry == 5 -%}</span><br><span class="line">      {% break %}</span><br><span class="line">   {% endif -%}</span><br><span class="line">   {{ entry }}</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">--== Ansible Jinja2 for range, reversed (continue if odd) ==--</span><br><span class="line"></span><br><span class="line">{% for entry in range(10, 0, -1) -%}</span><br><span class="line">   {% if entry is odd -%}</span><br><span class="line">      {% continue %}</span><br><span class="line">   {% endif -%}</span><br><span class="line">   {{ entry }}</span><br><span class="line">{% endfor %}</span><br><span class="line"></span><br><span class="line">---=== Ansible Jinja2 filters ===---</span><br><span class="line"></span><br><span class="line">--== min [1, 2, 3, 4, 5] ==--</span><br><span class="line"></span><br><span class="line">{{ [1, 2, 3, 4, 5] | min }}</span><br><span class="line"></span><br><span class="line">--== max [1, 2, 3, 4, 5] ==--</span><br><span class="line"></span><br><span class="line">{{ [1, 2, 3, 4, 5] | max }}</span><br><span class="line"></span><br><span class="line">--== unique [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] ==--</span><br><span class="line"></span><br><span class="line">{{ [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] | unique }}</span><br><span class="line"></span><br><span class="line">--== difference [1, 2, 3, 4, 5] vs [2, 3, 4] ==--</span><br><span class="line"></span><br><span class="line">{{ [1, 2, 3, 4, 5] | difference([2, 3, 4]) }}</span><br><span class="line"></span><br><span class="line">--== random ['rod', 'jane', 'freddy'] ==--</span><br><span class="line"></span><br><span class="line">{{ ['rod', 'jane', 'freddy'] | random }}</span><br><span class="line"></span><br><span class="line">--== urlsplit hostname ==--</span><br><span class="line"></span><br><span class="line">{{ "http://docs.ansible.com/ansible/latest/playbooks_filters.html" | urlsplit('hostname') }}</span><br></pre></td></tr></tbody></table></figure><p>修改jinja2_playbook.yaml：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jinja2</span> <span class="string">template</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">template.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"/tmp/<span class="template-variable">{{ ansible_hostname }}</span>_template.out"</span></span><br><span class="line">        <span class="attr">trim_blocks:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-6-剧本实际应用">4.6 剧本实际应用</h3><p>在不同的linux系统上安装nginx，并配置index.html，引用变量</p><ul><li>配置hosts指向目标linux组</li><li>创建任务 Install EPEL：CentOS使用yum安装epel-release</li><li>分别创建任务 Install Nginx CentOS、Install Nginx Ubuntu：CentOS使用yum安装nginx，Ubuntu使用apt安装包安装nginx</li><li>删除任务 Install Nginx CentOS、Install Nginx Ubuntu，新增任务 Install Nginx：改为使用package模块安装nginx，不需要区分CentOS和Ubuntu</li><li>创建任务 Restart Nginx：使用service模块重启目标linux系统的nginx服务器</li><li>创建处理程序  Check HTTP Service：使用uri模块测试HTTP服务</li><li>修改任务 Restart Nginx：添加notify指向Check HTTP Service处理程序</li><li>创建组变量 nginx_root_location：CentOS组的nginx_root_location=/usr/share/nginx/html、Ubuntu组的nginx_root_location=/var/www/html</li><li>创建任务 Template index.html-base.j2 to index.html on target: 使用template模块，将自定义的index.html-base.j2 Jinja2模板指向nginx的/index.html</li><li>修改ansible.cfg：echo ‘ansible_managed = Managed by Ansible - file: {file} - host: {host} - uid:{uid}’ &gt;&gt; ansible.cfg</li><li>更新任务 Template index.html-base.j2 to index.html on target: 改为Template index.html-ansible_managed.j2 to index.html on target，更新自定义的模板文件为index.html-ansible_managed.j2</li><li>更新剧本，引入变量文件vars/logos.yaml</li><li>更新任务 Template index.html-ansible_managed.j2 to index.html on target：改为 Template index.html-logos.j2 to index.html on target，更新自定义的模板文件为index.html-logos.j2</li><li>使用package模块安装unzip包，创建任务 Unarchive playbook stacker game，使用unarchive模块解压缩</li><li>更新任务 Template index.html-ansible_managed.j2 to index.html on target：改为 Template index.html-logos.j2 to index.html on target，更新自定义的模板文件为index.html-logos.j2</li><li>更新任务 Template index.html-logos.j2 to index.html on target，改为 Template index.html-easter_egg.j2 to index.html on target，更新自定义的模板文件为index.html-easter_egg.j2</li></ul><p>最终，nginx_playbook.yaml内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vars/logos.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">EPEL</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">epel-release</span></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'CentOS'</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Template</span> <span class="string">index.html-easter_egg.j2</span> <span class="string">to</span> <span class="string">index.html</span> <span class="string">on</span> <span class="string">target</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">index.html-easter_egg.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>/index.html"</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">unzip</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Unarchive</span> <span class="string">playbook</span> <span class="string">stacker</span> <span class="string">game</span></span><br><span class="line">      <span class="attr">unarchive:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">playbook_stacker.zip</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>"</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://{{</span> <span class="string">ansible_default_ipv4.address</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">status_code:</span> <span class="number">200</span> </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>详细资源可以参见Ansible课程代码</p><h2 id="5-深入Ansible-Playbooks">5. 深入Ansible Playbooks</h2><blockquote><p>剧本 Module模块，动态Inventory清单，Register，When和Loops循环的使用，异步、串行、并行的性能，任务委派，Ansible魔法变量，Ansible Blocks块，Ansible Vault信息保护</p></blockquote><h3 id="5-1-剧本常用模块">5.1 剧本常用模块</h3><p>Ansible内置了数以千计的模块，涵盖了众多领域和技术方向，接下来将介绍一些剧本常用模块</p><p><strong>set_fact</strong>模块</p><p>作用：允许执行期间动态添加或改变facts变量</p><p>官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu3,centos3</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">a</span> <span class="string">fact</span></span><br><span class="line">      <span class="attr">set_fact:</span></span><br><span class="line">        <span class="attr">our_fact:</span> <span class="string">Ansible</span> <span class="string">Rocks!</span></span><br><span class="line">        <span class="attr">ansible_distribution:</span> <span class="string">"<span class="template-variable">{{ ansible_distribution | upper }}</span>"</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">our</span> <span class="string">installation</span> <span class="string">variables</span> <span class="string">for</span> <span class="string">CentOS</span></span><br><span class="line">      <span class="attr">set_fact:</span></span><br><span class="line">        <span class="attr">webserver_application_port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">webserver_application_path:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">        <span class="attr">webserver_application_user:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'CENTOS'</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">our</span> <span class="string">installation</span> <span class="string">variables</span> <span class="string">for</span> <span class="string">Ubuntu</span></span><br><span class="line">      <span class="attr">set_fact:</span></span><br><span class="line">        <span class="attr">webserver_application_port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">webserver_application_path:</span> <span class="string">/var/www/html</span></span><br><span class="line">        <span class="attr">webserver_application_user:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'UBUNTU'</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">our_fact</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ our_fact }}</span>"</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">ansible_distribution</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">{{ ansible_distribution }}</span>"</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">pre-set</span> <span class="string">distribution</span> <span class="string">based</span> <span class="string">facts</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"webserver_application_port: <span class="template-variable">{{ webserver_application_port }}</span> webserver_application_path: <span class="template-variable">{{ webserver_application_path }}</span> webserver_application_user: <span class="template-variable">{{ webserver_application_user }}</span>"</span></span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>pause</strong>模块</p><p>作用：允许暂停给定时间的剧本执行，或者暂停直到确认特定提示</p><p>官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pause_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pause_module.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu3,centos3</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pause</span> <span class="string">our</span> <span class="string">playbook</span> <span class="string">for</span> <span class="number">10</span> <span class="string">seconds</span></span><br><span class="line">      <span class="attr">pause:</span></span><br><span class="line">        <span class="attr">seconds:</span> <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prompt</span> <span class="string">user</span> <span class="string">to</span> <span class="string">verify</span> <span class="string">before</span> <span class="string">continue</span></span><br><span class="line">      <span class="attr">pause:</span></span><br><span class="line">        <span class="attr">prompt:</span> <span class="string">Please</span> <span class="string">check</span> <span class="string">that</span> <span class="string">the</span> <span class="string">webserver</span> <span class="string">is</span> <span class="string">running,</span> <span class="string">press</span> <span class="string">enter</span> <span class="string">to</span> <span class="string">continue</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Wait</span> <span class="string">for</span> <span class="string">the</span> <span class="string">webserver</span> <span class="string">to</span> <span class="string">be</span> <span class="string">running</span> <span class="string">on</span> <span class="string">port</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">wait_for:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>wait_for</strong>模块</p><p>作用：允许等待指定的时间后、等待指定的端口可用时、等待指定模块启动并准备好时、等待正则匹配文件中字符串存在时，继续执行剧本</p><p>官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu3,centos3</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Wait</span> <span class="string">for</span> <span class="string">the</span> <span class="string">webserver</span> <span class="string">to</span> <span class="string">be</span> <span class="string">running</span> <span class="string">on</span> <span class="string">port</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">wait_for:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>assemble</strong>模块</p><p>作用：允许将文件的集合组装成一个文件，可将获取本地或被管理主机的文件目录，并将他们连接在一起生成目标文件</p><p>官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/assemble_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/assemble_module.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Assemble</span> <span class="string">conf.d</span> <span class="string">to</span> <span class="string">sshd_config</span></span><br><span class="line">      <span class="attr">assemble:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">conf.d</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">sshd_config</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>add_host</strong>模块</p><p>作用：允许动态添加目标主机到正在执行的剧本中，已备后续使用</p><p>官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/add_host_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/add_host_module.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">centos1</span> <span class="string">to</span> <span class="string">adhoc_group</span></span><br><span class="line">      <span class="attr">add_host:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">centos1</span></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">adhoc_group1,</span> <span class="string">adhoc_group2</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">adhoc_group1</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ping</span> <span class="string">all</span> <span class="string">in</span> <span class="string">adhoc_group</span></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>group_by</strong>模块</p><p>作用：允许使用facts变量创建临时组，以便稍后在剧本中使用</p><p>官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/group_by_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/group_by_module.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">all</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">group</span> <span class="string">based</span> <span class="string">on</span> <span class="string">ansible_distribution</span></span><br><span class="line">      <span class="attr">group_by:</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">"custom_<span class="template-variable">{{ ansible_distribution | lower }}</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">custom_centos</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ping</span> <span class="string">all</span> <span class="string">in</span> <span class="string">custom_centos</span></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>fetch</strong>模块</p><p>作用：允许从远程计算机获取文件并将它们存储在本地文件树中，按主机名组织</p><p>官方文档地址：<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html">https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">centos</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fetch</span> <span class="string">/etc/redhat-release</span></span><br><span class="line">      <span class="attr">fetch:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/redhat-release</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/redhat-release</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-动态清单">5.2 动态清单</h3><p>目前，我们都是在ansible.cfg文件中配置清单hosts文件，然后在hosts文件内或host_vars、group_vars文件夹内指定清单变量，在命令行工具中也可以使用<code>-i</code>选项指定或覆盖之前配置的清单文件，如果指定的清单文件为可执行文件，则Ansible将执行此文件并将结果作为清单。</p><p>Ansible可以使用可执行文件作为动态清单，并使用文件执行结果作为清单</p><p>动态清单需要满足的条件：</p><ul><li>必须是可执行文件，能够从 命令行执行，语言不限</li><li>接受 <code>--list</code>、<code>--host</code>命令行选项</li><li>使用<code>--list</code>选项，返回JSON编码字典，包含清单内容</li><li>使用<code>--host</code>选项，返回基本的JSON编码字典，包含主机内容</li></ul><p>示例：</p><p>ansible.cfg</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p><a href="http://inventory.py">inventory.py</a></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Dynamic inventory for Ansible in Python</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use print functionality from Python 3 for compatibility</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># Attempt to import json, if it fails, import simplejson</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> simplejson <span class="keyword">as</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inherit from object for Python 2/3 compatibility</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inventory</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, include_hostvars_in_list</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Configure logger</span></span><br><span class="line">        <span class="comment">#self.configure_logger()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Capture and store include_hostvars_in_list</span></span><br><span class="line">        self.include_hostvars_in_list = include_hostvars_in_list</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Capture the script command line arguments</span></span><br><span class="line">        parser = argparse.ArgumentParser()</span><br><span class="line">        parser.add_argument(<span class="string">'--list'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">                            <span class="built_in">help</span>=<span class="string">'list inventory'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'--host'</span>, action=<span class="string">'store'</span>,</span><br><span class="line">                            <span class="built_in">help</span>=<span class="string">'show HOST variables'</span>)</span><br><span class="line">        self.args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If not called with --host or --list, show usage and exit</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self.args.<span class="built_in">list</span> <span class="keyword">or</span> self.args.host):</span><br><span class="line">            parser.print_usage()</span><br><span class="line">            <span class="keyword">raise</span> SystemExit</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Capture and store the inventory</span></span><br><span class="line">        self.define_inventory()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># When called with --list, print the inventory</span></span><br><span class="line">        <span class="keyword">if</span> self.args.<span class="built_in">list</span>:</span><br><span class="line">            self.print_json(self.<span class="built_in">list</span>())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If called with --host, print host information</span></span><br><span class="line">        <span class="keyword">elif</span> self.args.host:</span><br><span class="line">            self.print_json(self.host())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">define_inventory</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.groups = {</span><br><span class="line">            <span class="string">"centos"</span>: {</span><br><span class="line">                <span class="string">"hosts"</span>: [<span class="string">"centos1"</span>, <span class="string">"centos2"</span>, <span class="string">"centos3"</span>],</span><br><span class="line">                <span class="string">"vars"</span>: {</span><br><span class="line">                    <span class="string">"ansible_user"</span>: <span class="string">'root'</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            <span class="string">"control"</span>: {</span><br><span class="line">                <span class="string">"hosts"</span>: [<span class="string">"ubuntu-c"</span>],</span><br><span class="line">            },</span><br><span class="line">            <span class="string">"ubuntu"</span>: {</span><br><span class="line">                <span class="string">"hosts"</span>: [<span class="string">"ubuntu1"</span>, <span class="string">"ubuntu2"</span>, <span class="string">"ubuntu3"</span>],</span><br><span class="line">                <span class="string">"vars"</span>: {</span><br><span class="line">                    <span class="string">"ansible_become"</span>: <span class="literal">True</span>,</span><br><span class="line">                    <span class="string">"ansible_become_pass"</span>: <span class="string">'password'</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            <span class="string">"linux"</span>: {</span><br><span class="line">                <span class="string">"children"</span>: [<span class="string">"centos"</span>, <span class="string">"ubuntu"</span>],</span><br><span class="line">            }}</span><br><span class="line"></span><br><span class="line">        self.hostvars = {</span><br><span class="line">            <span class="string">'centos1'</span>: {</span><br><span class="line">                <span class="string">'ansible_port'</span>: <span class="number">2222</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">'ubuntu-c'</span>: {</span><br><span class="line">                <span class="string">'ansible_connection'</span>: <span class="string">'local'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pretty print JSON</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_json</span>(<span class="params">self, content</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(json.dumps(content, indent=<span class="number">4</span>, sort_keys=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return inventory dictionary</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        self.logger.info(<span class="string">'list executed'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If include_hostvars_in_list is True, merge the hostvars</span></span><br><span class="line">        <span class="comment"># as _meta data</span></span><br><span class="line">        <span class="keyword">if</span> self.include_hostvars_in_list:</span><br><span class="line">            merged = self.groups</span><br><span class="line">            merged[<span class="string">'_meta'</span>] = {}</span><br><span class="line">            merged[<span class="string">'_meta'</span>][<span class="string">'hostvars'</span>] = self.hostvars</span><br><span class="line">            <span class="keyword">return</span> merged</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Otherwise, return the groups without hostvars</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.groups</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return host dictionary</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">host</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        self.logger.info(<span class="string">'host executed for {}'</span>.<span class="built_in">format</span>(self.args.host))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If the requested hosts exists in hostvars, return it</span></span><br><span class="line">        <span class="keyword">if</span> self.args.host <span class="keyword">in</span> self.hostvars:</span><br><span class="line">            <span class="keyword">return</span> self.hostvars[self.args.host]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Otherwise, return an empty list</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Logger, for debugging as stdout is used by the script</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure_logger</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.logger = logging.getLogger(<span class="string">'ansible_dynamic_inventory'</span>)</span><br><span class="line">        self.hdlr = logging.FileHandler(<span class="string">'/var/tmp/ansible_dynamic_inventory.log'</span>)</span><br><span class="line">        self.formatter = logging.Formatter(<span class="string">'%(asctime)s %(levelname)s %(message)s'</span>)</span><br><span class="line">        self.hdlr.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.hdlr) </span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call the Inventory class constructor (__init__)</span></span><br><span class="line"><span class="comment"># Pass include_hostsvars_in_list as True to include hostvars</span></span><br><span class="line"><span class="comment"># as _meta data in list output</span></span><br><span class="line">Inventory(include_hostvars_in_list=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Dynamic Inventories/01$ ansible all -i inventory.py --list-hosts</span><br><span class="line">  hosts (7):</span><br><span class="line">    ubuntu-c</span><br><span class="line">    centos1</span><br><span class="line">    centos2</span><br><span class="line">    centos3</span><br><span class="line">    ubuntu1</span><br><span class="line">    ubuntu2</span><br><span class="line">    ubuntu3</span><br><span class="line">    </span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Dynamic Inventories/01$ ansible all -i inventory.py -m ping -o</span><br><span class="line">ubuntu-c | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">centos1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">centos3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/libexec/platform-python"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br></pre></td></tr></tbody></table></figure><p>将脚本inventory.py中的最后一行改为Inventory(include_hostvars_in_list=True)，对比发现，使用_meta可提高性能表现</p><h3 id="5-3-Register和When">5.3 Register和When</h3><p><strong>Register</strong></p><p>使用Register指令可以存储输出为一个变量，后续可以直接使用：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Exploring</span> <span class="string">register</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span> <span class="string">-c</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">hostname_output</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">hostname_output</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">hostname_output.stdout</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>register与when结合使用可以针对命令的执行结果进行而额外的处理，从而覆盖多种情况，如：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Exploring</span> <span class="string">register</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span> <span class="string">-s</span></span><br><span class="line">      <span class="attr">when:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">"CentOS"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ansible_distribution_major_version</span> <span class="string">|</span> <span class="string">int</span> <span class="string">&gt;=</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">command_register</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">patch</span> <span class="string">when</span> <span class="string">changed</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">command_register</span> <span class="string">is</span> <span class="string">changed</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">patch</span> <span class="string">when</span> <span class="string">skipped</span></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">command_register</span> <span class="string">is</span> <span class="string">skipped</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-循环的使用">5.4 循环的使用</h3><p>用好循环能够使剧本的编写更加简洁美观，提高编写效率。Ansible的剧本可以使用多种方式的循环，下面简单了解下：</p><p><strong>with_items循环</strong></p><p>遍历列表</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">a</span> <span class="string">MOTD</span> <span class="string">(message</span> <span class="string">of</span> <span class="string">the</span> <span class="string">day)</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">"Welcome to <span class="template-variable">{{ item }}</span> Linux - Ansible Rocks!\n"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/ect/motd</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">MOTD</span> <span class="string">changed</span></span><br><span class="line">      <span class="attr">with_items:</span> [ <span class="string">'CentOS'</span>, <span class="string">'Ubuntu'</span> ]</span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">item</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Creating</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">jane</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">michael</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">tom</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">danel</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Removing</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">jane</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">michael</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">tom</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">danel</span></span><br><span class="line">        </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MOTD</span> <span class="string">changed</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">The</span> <span class="string">MOTD</span> <span class="string">was</span> <span class="string">changed</span></span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>with_dict循环</strong></p><p>遍历字典</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Creating</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item.key }}</span>"</span></span><br><span class="line">        <span class="attr">comment:</span> <span class="string">"<span class="template-variable">{{ item.value.full_name }}</span>"</span></span><br><span class="line">      <span class="attr">with_dict:</span></span><br><span class="line">        <span class="attr">jane:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Jane</span> <span class="string">Smith</span></span><br><span class="line">        <span class="attr">michael:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Michael</span> <span class="string">Smith</span></span><br><span class="line">        <span class="attr">tom:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Tom</span> <span class="string">Smith</span></span><br><span class="line">        <span class="attr">danel:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Danel</span> <span class="string">Smith</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Removing</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item.key }}</span>"</span></span><br><span class="line">        <span class="attr">comment:</span> <span class="string">"<span class="template-variable">{{ item.value.full_name }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">with_dict:</span></span><br><span class="line">        <span class="attr">jane:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Jane</span> <span class="string">Smith</span></span><br><span class="line">        <span class="attr">michael:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Michael</span> <span class="string">Smith</span></span><br><span class="line">        <span class="attr">tom:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Tom</span> <span class="string">Smith</span></span><br><span class="line">        <span class="attr">danel:</span></span><br><span class="line">          <span class="attr">full_name:</span> <span class="string">Danel</span> <span class="string">Smith</span></span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>with_subelements循环</strong></p><p>组合子元素后，然后遍历</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Creating</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item.1 }}</span>"</span></span><br><span class="line">        <span class="attr">comment:</span> <span class="string">"<span class="template-variable">{{ item.1 | title }}</span> <span class="template-variable">{{ item.0.surname }}</span>"</span></span><br><span class="line">        <span class="comment"># https://docs.ansible.com/ansible/latest/plugins/lookup/password.html</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">"<span class="template-variable">{{ lookup('password', 'dev/null length=15 chars=ascii_letters,digits,hexdigits,punctuation') | password_hash('sha512') }}</span>"</span></span><br><span class="line">      <span class="attr">with_subelements:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">family:</span></span><br><span class="line">            <span class="attr">surname:</span> <span class="string">Smith</span></span><br><span class="line">            <span class="attr">members:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">jane</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">michael</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">tom</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">danel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">members</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Creating</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item.1 }}</span>"</span></span><br><span class="line">        <span class="attr">comment:</span> <span class="string">"<span class="template-variable">{{ item.1 | title }}</span> <span class="template-variable">{{ item.0.surname }}</span>"</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">"<span class="template-variable">{{ lookup('password', 'dev/null length=15 chars=ascii_letters,digits,hexdigits,punctuation') | password_hash('sha512') }}</span>"</span></span><br><span class="line">      <span class="attr">with_subelements:</span></span><br><span class="line">        <span class="bullet">-</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">surname:</span> <span class="string">Smith</span></span><br><span class="line">            <span class="attr">members:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">jane</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">michael</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">tom</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">danel</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">surname:</span> <span class="string">James</span></span><br><span class="line">            <span class="attr">members:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Kangkang</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Lihua</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">surname:</span> <span class="string">Angne</span></span><br><span class="line">            <span class="attr">members:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Richu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">members</span></span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>with_nested循环</strong></p><p>排列组合后，遍历</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Creating</span> <span class="string">user</span> <span class="string">directories</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"/home/<span class="template-variable">{{ item.0 }}</span>/<span class="template-variable">{{ item.1 }}</span>"</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">"<span class="template-variable">{{ item.0 }}</span>"</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">"<span class="template-variable">{{ item.0 }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_nested:</span></span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">jane</span>, <span class="string">michael</span>, <span class="string">tom</span>, <span class="string">danel</span> ]</span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">photos</span>, <span class="string">movies</span>, <span class="string">documents</span> ]</span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>with_together循环</strong></p><p>一一对应后，遍历</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Creating</span> <span class="string">user</span> <span class="string">directories</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"/home/<span class="template-variable">{{ item.0 }}</span>/<span class="template-variable">{{ item.1 }}</span>"</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">"<span class="template-variable">{{ item.0 }}</span>"</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">"<span class="template-variable">{{ item.0 }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_together:</span></span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">jane</span>, <span class="string">michael</span>, <span class="string">tom</span>, <span class="string">danel</span> ]</span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">photos</span>, <span class="string">movies</span>, <span class="string">documents</span>, <span class="string">music</span> ]</span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>with_file</strong>循环</p><p>遍历读取文件内容</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">authorized</span> <span class="string">key</span></span><br><span class="line">      <span class="attr">authorized_key:</span></span><br><span class="line">        <span class="attr">user:</span> <span class="string">jane</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">      <span class="attr">with_file:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/home/ansible/.ssh/id_rsa.pub</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">custom_key.pub</span></span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>with_sequence循环</strong></p><p>遍历序列</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">sequence</span> <span class="string">directories</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"/home/jane/sequence_<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="string">start=0</span> <span class="string">end=100</span> <span class="string">stride=10</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">sequence</span> <span class="string">directories</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="string">start=110</span> <span class="string">end=120</span> <span class="string">stride=2</span> <span class="string">format=/home/jane/hex_sequence_%d</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">hex</span> <span class="string">sequence</span> <span class="string">directories</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="string">start=0</span> <span class="string">end=16</span> <span class="string">stride=1</span> <span class="string">format=/home/jane/hex_sequence_%x</span></span><br><span class="line">   </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">hex</span> <span class="string">sequence</span> <span class="string">directories</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="string">count=5</span> <span class="string">format=/home/jane/count_sequence_%x</span></span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>with_random_choice循环</strong></p><p>遍历选项，随机选择其一</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">random</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"/home/jane/<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_random_choice:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"google"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"apple"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"microsoft"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"tencent"</span></span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>util循环</strong></p><p>直到达到条件，循环停止</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">script</span> <span class="string">until</span> <span class="string">we</span> <span class="string">hit</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">script:</span> <span class="string">random.sh</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">util:</span> <span class="string">result.stdout.find("10")</span> <span class="type">!=</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> random.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> !/bin/bash</span></span><br><span class="line">echo $((1 + RANDOM % 10))</span><br></pre></td></tr></tbody></table></figure><h3 id="5-5-异步、串行和并行">5.5 异步、串行和并行</h3><p>剧本执行也需要关注其执行的性能和速度</p><p>先看一个执行效率低下的剧本：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">6</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>ansible的剧本执行默认使用线性策略：执行该任务的所有主机都执行完毕后，才开始进入下一个任务的执行。如果执行该任务的某一个主机因为性能或别的原因，需要很长时间才能执行完该任务，其他所有主机都需要等待。</p><p>ansible的剧本支持异步执行策略，有益于需要长执行时间的任务。</p><blockquote><p>异步指的是程序或任务可以并发执行，当前任务不必等待前一个任务的完成。在异步方式下，任务可以提交给其他线程、进程或服务进行处理，而当前任务可以继续执行其他操作。</p><p>应用场景：异步通常用于需要提高系统的并发性和响应性能的情况，比如处理大量的并发请求或执行耗时操作。</p></blockquote><p>修改上面剧本为异步剧本：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result1</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result2</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result3</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result4</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">6</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">result6</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Capture</span> <span class="string">Job</span> <span class="string">IDs</span></span><br><span class="line">      <span class="attr">set_fact:</span></span><br><span class="line">        <span class="attr">jobids:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">                {% if item.ansible_job_id is defined -%}</span></span><br><span class="line"><span class="string">                  {{ jobids + [item.ansible_job_id] }}</span></span><br><span class="line"><span class="string">                {% else -%}</span></span><br><span class="line"><span class="string">                  {{ jobids }}</span></span><br><span class="line"><span class="string">                {% endif %}</span></span><br><span class="line"><span class="string"></span>        <span class="attr">with_items:</span> <span class="string">"<span class="template-variable">{{ [ result1, result2, result3, result4, result5, result6 ] }}</span>"</span> </span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">Job</span> <span class="string">IDs</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">jobids</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'Wait for Job IDs'</span></span><br><span class="line">      <span class="attr">aysnc_status:</span></span><br><span class="line">        <span class="attr">jid:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">      <span class="attr">with_items:</span> <span class="string">"<span class="template-variable">{{ jobids }}</span>"</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">jobs_result</span></span><br><span class="line">      <span class="attr">util:</span> <span class="string">jobs_result.finished</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">30</span></span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>设置async参数为10，代表等待至少10秒，设置poll参数为0，代表每秒轮询状态，不等待上个任务所有主机都执行完毕就开始下一个任务，但是最终会等待所有任务执行完成。</p><p>上面的方法需要用到很多剧本的知识，还有其他简单的方法设置异步剧本，如执行<code>echo forks=6 &gt;&gt; ansible.cfg</code>，不修改原剧本的情况下就能实现执行的异步。</p><p>ansible的剧本支持串行批量执行策略。</p><blockquote><p>串行是一种任务执行方式，指的是任务按照顺序依次执行，每个任务在前一个任务完成后才能开始执行。在串行执行中，任务之间没有并发或并行的特性。</p><p>应用场景：串行通常用于必须按照严格的顺序执行任务的情况，比如单线程的程序或依赖关系严格的任务流。</p></blockquote><p>修改原剧本为串行批量执行剧本：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">serial:</span> <span class="number">2</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">6</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">5</span></span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>serial设置分批次执行，2个执行主机为1批，比如说，centos1和centos2为第1批次，执行任务1，然后执行任务2，。。。，直到执行完成任务6。然后centos3和ubuntu1为第2个批次，执行任务1，然后执行任务2，。。。，直到执行完成任务6。最后ubuntu2和ubuntu3为第3个批次，执行任务1，然后执行任务2，。。。，直到执行完成任务6。</p><p>serial也可以指定为数字列表或百分比列表，即每个批次的执行主机数可以不一样。</p><p>ansible的剧本支持自由随机执行策略，适合没有执行顺序和主机要求的任务。</p><p>修改原剧本为自由随机执行剧本：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">free</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> {{ <span class="number">10</span> <span class="string">|</span> <span class="string">random</span> }}</span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> {{ <span class="number">10</span> <span class="string">|</span> <span class="string">random</span> }}</span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> {{ <span class="number">10</span> <span class="string">|</span> <span class="string">random</span> }}</span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> {{ <span class="number">10</span> <span class="string">|</span> <span class="string">random</span> }}</span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> {{ <span class="number">10</span> <span class="string">|</span> <span class="string">random</span> }}</span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="number">6</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> {{ <span class="number">10</span> <span class="string">|</span> <span class="string">random</span> }}</span><br><span class="line">      </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>任务执行的顺序和每次任务执行的主机数目都是随机的。</p><h3 id="5-6-任务委派">5.6 任务委派</h3><p>委派特定的任务在特定的目标上执行，因为存在在管理主机或其他被管理主机运行特定的命令或任务的需求。</p><p>如在主机ubuntu-c上设置ubuntu3的tcpwrappers规则，约束SSH连接只有来自ubuntu-c、centos1、ubuntu1主机才能成功。</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">an</span> <span class="string">OpenSSH</span> <span class="string">keypair</span> <span class="string">for</span> <span class="string">ubuntu3</span></span><br><span class="line">      <span class="attr">openssh_keypair:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.ssh/ubuntu3_id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">ubuntu3</span> <span class="string">OpenSSH</span> <span class="string">keypair</span> <span class="string">with</span> <span class="string">permissions</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">"<span class="template-variable">{{ item.0 }}</span>"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ item.0 }}</span>"</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">"<span class="template-variable">{{ item.1 }}</span>"</span></span><br><span class="line">      <span class="attr">with_together:</span></span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">~/.ssh/ubuntu3_id_rsa</span>, <span class="string">~/.ssh/ubuntu3_id_rsa.pub</span> ]</span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">"0600"</span>, <span class="string">"0644"</span> ]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu3</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">public</span> <span class="string">key</span> <span class="string">to</span> <span class="string">the</span> <span class="string">ubuntu3</span> <span class="string">authorized_keys</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">authorized_key:</span></span><br><span class="line">        <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">"<span class="template-variable">{{ lookup('file', '~/.ssh/ubuntu3_id_rsa.pub') }}</span>"</span></span><br><span class="line">        </span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">that</span> <span class="string">ssh</span> <span class="string">can</span> <span class="string">connect</span> <span class="string">to</span> <span class="string">ubuntu3</span> <span class="string">using</span> <span class="string">the</span> <span class="string">ssh</span> <span class="string">tool</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">ssh</span> <span class="string">-i</span> <span class="string">~/.ssh/ubuntu3_id_rsa</span> <span class="string">-o</span> <span class="string">BatchMode=yes</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">-o</span> <span class="string">UserKnownHostsFile=/dev/null</span> <span class="string">root@ubuntu3</span> <span class="string">date</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">False</span></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c,</span> <span class="string">centos1,</span> <span class="string">ubuntu1</span></span><br><span class="line">  <span class="attr">serial:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">host</span> <span class="string">to</span> <span class="string">/etc/hosts.allow</span> <span class="string">for</span> <span class="string">sshd</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/hosts.allow</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">"sshd: <span class="template-variable">{{ ansible_hostname }}</span>.diveinto.io"</span></span><br><span class="line">        <span class="attr">create:</span> <span class="literal">True</span></span><br><span class="line">      <span class="attr">delegate_to:</span> <span class="string">ubuntu3</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> </span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">that</span> <span class="string">ssh</span> <span class="string">can</span> <span class="string">connect</span> <span class="string">to</span> <span class="string">ubuntu3</span> <span class="string">using</span> <span class="string">the</span> <span class="string">ssh</span> <span class="string">tool</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">ssh</span> <span class="string">-i</span> <span class="string">~/.ssh/ubuntu3_id_rsa</span> <span class="string">-o</span> <span class="string">BatchMode=yes</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">-o</span> <span class="string">UserKnownHostsFile=/dev/null</span> <span class="string">root@ubuntu3</span> <span class="string">date</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">False</span></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu3</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Drop</span> <span class="string">SSH</span> <span class="string">connectivity</span> <span class="string">from</span> <span class="string">everywhere</span> <span class="string">else</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/hosts.deny</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">"sshd: ALL"</span></span><br><span class="line">        <span class="attr">create:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">that</span> <span class="string">ssh</span> <span class="string">can</span> <span class="string">connect</span> <span class="string">to</span> <span class="string">ubuntu3</span> <span class="string">using</span> <span class="string">the</span> <span class="string">ssh</span> <span class="string">tool</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">ssh</span> <span class="string">-i</span> <span class="string">~/.ssh/ubuntu3_id_rsa</span> <span class="string">-o</span> <span class="string">BatchMode=yes</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">-o</span> <span class="string">UserKnownHostsFile=/dev/null</span> <span class="string">root@ubuntu3</span> <span class="string">date</span></span><br><span class="line">      <span class="attr">changed_when:</span> <span class="literal">False</span></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c,</span> <span class="string">centos1,</span> <span class="string">ubuntu1</span></span><br><span class="line">  <span class="attr">serial:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Remove</span> <span class="string">specific</span> <span class="string">host</span> <span class="string">entries</span> <span class="string">in</span> <span class="string">/etc/hosts.allow</span> <span class="string">for</span> <span class="string">sshd</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/hosts.allow</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">"sshd: <span class="template-variable">{{ ansible_hostname }}</span>.diveinto.io"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">delegate_to:</span> <span class="string">ubuntu3</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu3</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Allow</span> <span class="string">SSH</span> <span class="string">connectivity</span> <span class="string">from</span> <span class="string">everywhere</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/etc/hosts.deny</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">"sshd: ALL"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">        </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-7-魔法变量">5.7 魔法变量</h3><p>Ansible默认会提供一些内置的变量以实现一些特定的功能，这些变量不能由用户直接设置，我们称之为魔法变量，如：</p><ul><li>hostvars</li><li>inventory_hostname</li><li>inventory_hostname_short</li><li>groups</li><li>group_names</li></ul><p>参考文档：<a href="https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html">https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html</a></p><p>示例：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Using</span> <span class="string">template,</span> <span class="string">create</span> <span class="string">a</span> <span class="string">remote</span> <span class="string">file</span> <span class="string">that</span> <span class="string">contains</span> <span class="string">all</span> <span class="string">variables</span> <span class="string">available</span> <span class="string">to</span> <span class="string">the</span> <span class="string">play</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">templates/dump_variables</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/ansible_variables</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fetch</span> <span class="string">the</span> <span class="string">templated</span> <span class="string">file</span> <span class="string">with</span> <span class="string">all</span> <span class="string">variables,</span> <span class="string">back</span> <span class="string">to</span> <span class="string">the</span> <span class="string">control</span> <span class="string">host</span></span><br><span class="line">      <span class="attr">fetch:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/tmp/ansible_variables</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"captured_variables/<span class="template-variable">{{ ansible_hostname }}</span>"</span></span><br><span class="line">        <span class="attr">flat:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span> <span class="string">up</span> <span class="string">left</span> <span class="string">over</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">file:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">/tmp/ansible_variables</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>其中，templates/dump_variables的内容为：</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line">PLAYBOOK VARS (Ansible vars):</span><br><span class="line"></span><br><span class="line">{{ vars | to_nice_yaml }}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-8-块的使用">5.8 块的使用</h3><p>块可以将任务进行分组，并且可以块级别上应用任务变量，同时支持在块内进行异常处理</p><p>常用语法：</p><blockquote><p>- block: 定义块</p><p>rescue: 当出现异常时，执行的语句</p><p>always: 无论结果如何都要执行的语句</p></blockquote><p>示例如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">A</span> <span class="string">block</span> <span class="string">of</span> <span class="string">modules</span> <span class="string">being</span> <span class="string">executed</span></span><br><span class="line">      <span class="attr">block:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Example</span> <span class="number">1</span> <span class="string">CentOS</span> <span class="string">only</span></span><br><span class="line">          <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">Example</span> <span class="number">1</span> <span class="string">CentOS</span> <span class="string">only</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'CentOS'</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Example</span> <span class="number">2</span> <span class="string">Ubuntu</span> <span class="string">only</span></span><br><span class="line">          <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">Example</span> <span class="number">2</span> <span class="string">Ubuntu</span> <span class="string">only</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'Ubuntu'</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Example</span> <span class="number">3</span> <span class="string">with</span> <span class="string">items</span></span><br><span class="line">          <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">"Example 3 with items - <span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">          <span class="attr">with_items:</span> [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">patch</span> <span class="string">and</span> <span class="string">python-dns</span></span><br><span class="line">      <span class="attr">block:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">patch</span></span><br><span class="line">          <span class="attr">package:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">        </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">python-dnspython</span></span><br><span class="line">          <span class="attr">package:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">python-dnspython</span></span><br><span class="line">            </span><br><span class="line">      <span class="attr">rescue:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Rollback</span> <span class="string">python</span></span><br><span class="line">          <span class="attr">package:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">            <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Rollback</span> <span class="string">python-dnspython</span></span><br><span class="line">          <span class="attr">package:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">python-dnspython</span></span><br><span class="line">            <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">            </span><br><span class="line">      <span class="attr">always:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">This</span> <span class="string">always</span> <span class="string">runs,</span> <span class="string">regardless</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-9-Vault信息保护">5.9 Vault信息保护</h3><p>Ansible Vault是一项安全功能，用于加密或保护剧本或文件中的敏感信息，而不是明文保存</p><p><strong>加密和解密变量</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加密变量</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/01$ ansible-vault encrypt_string --ask-vault-pass --name 'ansible_become_pass' 'password'</span><br><span class="line">New Vault password: </span><br><span class="line">Confirm New Vault password: </span><br><span class="line">Encryption successful</span><br><span class="line">ansible_become_pass: !vault |</span><br><span class="line">          $ANSIBLE_VAULT;1.1;AES256</span><br><span class="line">          34396561636439353966346563616432643335646135656133313163613862383439656565363334</span><br><span class="line">          3263326331356230396662656636323365663830346461350a396436373862383237643739643134</span><br><span class="line">          32303234386534323634313635303163346466356361656238356530393734306665383737656264</span><br><span class="line">          6163376237306532630a393531323666626262363538616566626136356462353430336361653864</span><br><span class="line">          3239</span><br></pre></td></tr></tbody></table></figure><p>然后修改group_vars/ubuntu为：</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line">ansible_become: true</span><br><span class="line">ansible_become_pass: !vault |</span><br><span class="line">          $ANSIBLE_VAULT<span class="comment">;1.1;AES256</span></span><br><span class="line">          34396561636439353966346563616432643335646135656133313163613862383439656565363334</span><br><span class="line">          3263326331356230396662656636323365663830346461350a396436373862383237643739643134</span><br><span class="line">          32303234386534323634313635303163346466356361656238356530393734306665383737656264</span><br><span class="line">          6163376237306532630a393531323666626262363538616566626136356462353430336361653864</span><br><span class="line">          3239</span><br></pre></td></tr></tbody></table></figure><p>然后执行下面命令：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解密变量</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/01$ ansible --ask-vault-pass ubuntu -m ping -o</span><br><span class="line">Vault password: </span><br><span class="line">ubuntu1 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu2 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br><span class="line">ubuntu3 | SUCCESS =&gt; {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"},"changed": false,"ping": "pong"}</span><br></pre></td></tr></tbody></table></figure><p><strong>加密和解密文件</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加密文件</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault encrypt external_vault_vars.yaml </span><br><span class="line">New Vault password: </span><br><span class="line">Confirm New Vault password: </span><br><span class="line">Encryption successful</span><br></pre></td></tr></tbody></table></figure><p>剧本内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">external_vault_vars.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">external_vault_var</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">external_vault_var</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>执行：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-playbook --ask-vault-pass vault_playbook.yaml</span><br><span class="line">Vault password:</span><br></pre></td></tr></tbody></table></figure><p>解密：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault decrypt external_vault_vars.yaml</span><br><span class="line">Vault password:</span><br><span class="line">Decryption successful</span><br></pre></td></tr></tbody></table></figure><p><strong>重新加密数据</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加密文件</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault encrypt external_vault_vars.yaml </span><br><span class="line">New Vault password: </span><br><span class="line">Confirm New vault password: </span><br><span class="line">Encryption successful</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加密文件</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault rekey external_vault_vars.yaml </span><br><span class="line">New Vault password: </span><br><span class="line">Confirm New Vault password: </span><br><span class="line">Rekey successful</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看加密文件</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault view external_vault_vars.yaml </span><br><span class="line">Vault password: </span><br><span class="line">external_vault_var: Example External Vault Var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看加密文件(使用密码文件)</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault view --vault-password-file password_file external_vault_vars.yaml </span><br><span class="line">external_vault_var: Example External Vault Var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看加密文件(使用密码文件)</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault view --vault-id @password_file external_vault_vars.yaml </span><br><span class="line">external_vault_var: Example External Vault Var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加密文件至命名valut变量 —— vars</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault encrypt --vault-id vars@prompt external_vault_vars.yaml </span><br><span class="line">New vault passowrd (vars): </span><br><span class="line">Confirm New vault password (vars): </span><br><span class="line">Encryption successful</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加密变量至命名valut变量 —— ssh</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault encrypt_string --vault-id ssh@prompt --name 'ansible_become_pass' 'password'</span><br><span class="line">New vault password (ssh): </span><br><span class="line">Confirm new vault password (ssh): </span><br><span class="line">Encryption successful</span><br><span class="line">ansible_become_pass: !vault |</span><br><span class="line">          $ANSIBLE_VAULT;1.2;AES256;ssh</span><br><span class="line">          30373934396234613766353262633936373238643366326131653735393237663830326362623432</span><br><span class="line">          6564663637656537366163323763316139616238633433340a633436323664643635383465383064</span><br><span class="line">          35633963306665626237306566376666383130396333326366663661653666663535316638303839</span><br><span class="line">          6131396362313266300a386331336665376562663631316564306138333534383131643439663364</span><br><span class="line">          6432</span><br><span class="line">          </span><br></pre></td></tr></tbody></table></figure><p>使用加密的变量和文件</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-vault encrypt_string --vault-id ssh@prompt --name 'ansible_become_pass' 'password'</span><br><span class="line">New vault password (ssh): </span><br><span class="line">Confirm new vault password (ssh): </span><br><span class="line">Encryption successful</span><br><span class="line">ansible_become_pass: !vault |</span><br><span class="line">          $ANSIBLE_VAULT;1.2;AES256;ssh</span><br><span class="line">          30373934396234613766353262633936373238643366326131653735393237663830326362623432</span><br><span class="line">          6564663637656537366163323763316139616238633433340a633436323664643635383465383064</span><br><span class="line">          35633963306665626237306566376666383130396333326366663661653666663535316638303839</span><br><span class="line">          6131396362313266300a386331336665376562663631316564306138333534383131643439663364</span><br><span class="line">          6432ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ^C</span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Ansible Playbooks, Deep Dive/Vault/02$ ansible-playbook --vault-id vars@prompt --vault-id ssh@prompt vault_playbook.yaml </span><br><span class="line">Vault password (vars): </span><br><span class="line">Vault password (ssh): </span><br><span class="line"></span><br><span class="line">PLAY [linux] *******************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [ubuntu1]</span><br><span class="line">ok: [ubuntu2]</span><br><span class="line">ok: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Show external_vault_var] *************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "external_vault_var": "Example External Vault Var"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "external_vault_var": "Example External Vault Var"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "external_vault_var": "Example External Vault Var"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "external_vault_var": "Example External Vault Var"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "external_vault_var": "Example External Vault Var"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "external_vault_var": "Example External Vault Var"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************</span><br><span class="line">centos1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br></pre></td></tr></tbody></table></figure><p>还可以加密剧本到命名vault变量，类似上述操作，在此不再赘述。</p><h2 id="6-构建Ansible-Playbooks">6. 构建Ansible Playbooks</h2><blockquote><p>使用includes和imports、Tags标签和Roles角色</p></blockquote><h3 id="6-1-使用includes和imports">6.1 使用includes和imports</h3><p>先准备tasks文件，如play1_task2.yaml:</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Play</span> <span class="number">1</span> <span class="bullet">-</span> <span class="string">Task</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">Play</span> <span class="number">1</span> <span class="bullet">-</span> <span class="string">Task</span> <span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>include_tasks指令</strong></p><p>动态导入</p><p>使用include_tasks指令在下面的剧本文件中将play1_task2.yaml文件导入：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Play</span> <span class="number">1</span> <span class="bullet">-</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">Play</span> <span class="number">1</span> <span class="bullet">-</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">play1_task2.yaml</span></span><br><span class="line"> </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Include and Import/01$  ansible-playbook include_tasks_playbook.yaml </span><br><span class="line"></span><br><span class="line">PLAY [all] ***********************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ***********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c]</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [ubuntu1]</span><br><span class="line">ok: [ubuntu2]</span><br><span class="line">ok: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Play 1 - Task 1] ***********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [include_tasks] *************************************************************************************************************</span><br><span class="line">included: /home/ansible/diveintoansible/Structuring Ansible Playbooks/Using Include and Import/01/play1_task2.yaml for ubuntu-c, centos1, centos2, centos3, ubuntu1, ubuntu2, ubuntu3</span><br><span class="line"></span><br><span class="line">TASK [Play 1 - Task 2] ***********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP ***********************************************************************************************************************</span><br><span class="line">centos1                    : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu-c                   : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu1                    : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu2                    : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu3                    : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 </span><br></pre></td></tr></tbody></table></figure><p><strong>import_tasks指令</strong></p><p>静态导入</p><p>使用import_tasks指令在下面的剧本文件中将play1_task2.yaml文件导入：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Play</span> <span class="number">1</span> <span class="bullet">-</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">Play</span> <span class="number">1</span> <span class="bullet">-</span> <span class="string">Task</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">import_tasks:</span> <span class="string">play1_task2.yaml</span></span><br><span class="line"> </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Include and Import/02$ ansible-playbook import_tasks_playbook.yaml </span><br><span class="line"></span><br><span class="line">PLAY [all] ***********************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ***********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c]</span><br><span class="line">ok: [centos1]</span><br><span class="line">ok: [centos2]</span><br><span class="line">ok: [centos3]</span><br><span class="line">ok: [ubuntu1]</span><br><span class="line">ok: [ubuntu2]</span><br><span class="line">ok: [ubuntu3]</span><br><span class="line"></span><br><span class="line">TASK [Play 1 - Task 1] ***********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 1"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [Play 1 - Task 2] ***********************************************************************************************************</span><br><span class="line">ok: [ubuntu-c] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [centos2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [centos3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu1] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu2] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line">ok: [ubuntu3] =&gt; {</span><br><span class="line">    "msg": "Play 1 - Task 2"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PLAY RECAP ***********************************************************************************************************************</span><br><span class="line">centos1                    : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos2                    : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">centos3                    : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu-c                   : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu1                    : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu2                    : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">ubuntu3                    : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </span><br></pre></td></tr></tbody></table></figure><p><strong>静态导入vs动态导入</strong></p><table><thead><tr><th style="text-align:center">静态导入</th><th style="text-align:center">动态导入</th></tr></thead><tbody><tr><td style="text-align:center">在解析剧本时处理</td><td style="text-align:center">在剧本执行时处理</td></tr><tr><td style="text-align:center">每个任务将独立针对when条件执行</td><td style="text-align:center">when 语句执行一次，如果满足条件，则执行所有任务</td></tr><tr><td style="text-align:center">import指令</td><td style="text-align:center">include指令</td></tr></tbody></table><p>为了对比，分别创建import_tasks.yaml和include_tasks.yaml，其中：</p><p>import_task.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">set_fact:</span></span><br><span class="line">    <span class="attr">import_tasks_var:</span> <span class="string">foo</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">2nd</span> <span class="string">Task</span></span><br><span class="line">  <span class="attr">debug:</span> </span><br><span class="line">    <span class="attr">msg:</span> <span class="string">2nd</span> <span class="string">Task</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">3rd</span> <span class="string">Task</span></span><br><span class="line">  <span class="attr">debug:</span> </span><br><span class="line">    <span class="attr">msg:</span> <span class="string">3rd</span> <span class="string">Task</span></span><br><span class="line">    </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>include_tasks.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">set_fact:</span></span><br><span class="line">    <span class="attr">include_tasks_var:</span> <span class="string">foo</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">2nd</span> <span class="string">Task</span></span><br><span class="line">  <span class="attr">debug:</span> </span><br><span class="line">    <span class="attr">msg:</span> <span class="string">2nd</span> <span class="string">Task</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">3rd</span> <span class="string">Task</span></span><br><span class="line">  <span class="attr">debug:</span> </span><br><span class="line">    <span class="attr">msg:</span> <span class="string">3rd</span> <span class="string">Task</span></span><br><span class="line">    </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>比较import指令和include指令的剧本include_import_tasks_playbook.yaml：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">centos1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">         <span class="attr">msg:</span> <span class="string">=====================</span> <span class="string">Testing</span> <span class="string">include_tasks</span> <span class="string">=====================</span></span><br><span class="line">     <span class="comment"># include_tasks is dynamic</span></span><br><span class="line">     <span class="comment"># The when statement is executed once, if the condition is met, all tasks are executed</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">include_tasks.yaml</span></span><br><span class="line">       <span class="attr">when:</span> <span class="string">include_tasks_var</span> <span class="string">is</span> <span class="string">not</span> <span class="string">defined</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">         <span class="attr">msg:</span> <span class="string">=====================</span> <span class="string">Testing</span> <span class="string">import_tasks</span> <span class="string">======================</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># import_tasks is static</span></span><br><span class="line">     <span class="comment"># Each task that in the include will be independently executed against the when condition</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">import_tasks:</span> <span class="string">import_tasks.yaml</span></span><br><span class="line">       <span class="attr">when:</span> <span class="string">import_tasks_var</span> <span class="string">is</span> <span class="string">not</span> <span class="string">defined</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Include and Import/03$ ansible-playbook include_import_tasks_playbook.yaml </span><br><span class="line"></span><br><span class="line">PLAY [centos1] *******************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ***********************************************************************************************************</span><br><span class="line">ok: [centos1]</span><br><span class="line"></span><br><span class="line">TASK [debug] *********************************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "===================== Testing include_tasks ====================="</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [include_tasks] *************************************************************************************************************</span><br><span class="line">included: /home/ansible/diveintoansible/Structuring Ansible Playbooks/Using Include and Import/03/include_tasks.yaml for centos1</span><br><span class="line"></span><br><span class="line">TASK [set_fact] ******************************************************************************************************************</span><br><span class="line">ok: [centos1]</span><br><span class="line"></span><br><span class="line">TASK [2nd Task] ******************************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "2nd Task"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [3rd Task] ******************************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "3rd Task"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [debug] *********************************************************************************************************************</span><br><span class="line">ok: [centos1] =&gt; {</span><br><span class="line">    "msg": "===================== Testing import_tasks ======================"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TASK [set_fact] ******************************************************************************************************************</span><br><span class="line">ok: [centos1]</span><br><span class="line"></span><br><span class="line">TASK [2nd Task] ******************************************************************************************************************</span><br><span class="line">skipping: [centos1]</span><br><span class="line"></span><br><span class="line">TASK [3rd Task] ******************************************************************************************************************</span><br><span class="line">skipping: [centos1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ***********************************************************************************************************************</span><br><span class="line">centos1                    : ok=8    changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br></pre></td></tr></tbody></table></figure><p><strong>import_playbook指令</strong></p><p>先准备剧本文件，如imported_playbook.yaml:</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">centos1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">set_fact:</span></span><br><span class="line">         <span class="attr">import_playbook_var:</span> <span class="literal">true</span></span><br><span class="line">         </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">         <span class="attr">msg:</span> <span class="string">Playbook</span> <span class="string">executed</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>使用import_playbook指令在下面的剧本文件中将imported_playbook.yaml文件静态导入</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">imported_playbook.yaml</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">import_playbook_var</span> <span class="string">is</span> <span class="string">not</span> <span class="string">defined</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>每个任务都会进行一次when条件的判断。</p><h3 id="6-2-使用tags">6.2 使用tags</h3><p>标签在处理大型剧本或剧本中包含其他剧本时非常有用，你可以运行部分配置而无需运行整个剧本</p><p>如：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vars/logos.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">EPEL</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">epel-release</span></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'CentOS'</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">install-epel</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">install-nginx</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Template</span> <span class="string">index.html-easter_egg.j2</span> <span class="string">to</span> <span class="string">index.html</span> <span class="string">on</span> <span class="string">target</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">index.html-easter_egg.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>/index.html"</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">deploy-app</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">unzip</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Unarchive</span> <span class="string">playbook</span> <span class="string">stacker</span> <span class="string">game</span></span><br><span class="line">      <span class="attr">unarchive:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">playbook_stacker.zip</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>"</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">deploy-app</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://{{</span> <span class="string">ansible_default_ipv4.address</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">status_code:</span> <span class="number">200</span> </span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>执行时添加<code>--tags</code>可只运行部分任务，添加<code>--skip-tags</code>可不执行部分命令，<strong>always</strong>标签的任务总是会指向，可通过<code>--skip-tags "always"</code>指令跳过</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Tags/03$ ansible-playbook nginx_playbook.yaml --tags "install-epel"</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Tags/03$ ansible-playbook nginx_playbook.yaml --tags "install-nginx,restart-nginx"</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Tags/03$ ansible-playbook nginx_playbook.yaml --skip-tags "deploy-app"</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>除了给任务打tag外，也可以给剧本打tag，但是可能会影响facts变量的值，因为默认情况下facts变量指向default标签。</p><p><strong>特殊标签</strong>:</p><ul><li>tagged: 只有打了tag的任务才会执行</li><li>untagged: 打了tag的任务不会执行</li><li>all：运行所有任务，默认ansible 使用 --tags all运行</li></ul><p>如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行所有任务</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Tags/04$ ansible-playbook nginx_playbook.yaml --tags "all"</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只运行打了tag的任务</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Tags/04$ ansible-playbook nginx_playbook.yaml --tags "tagged"</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只运行没打tag的任务</span></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Tags/04$ ansible-playbook nginx_playbook.yaml --tags "untagged"</span><br></pre></td></tr></tbody></table></figure><p>除了任务、剧本可以打标签外，导入也可以打标签，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">include_tasks.yaml</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">include_tasks</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">import_tasks:</span> <span class="string">import_tasks.yaml</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">import_tasks</span></span><br><span class="line">        </span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">import_playbook.yaml</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">import_playbook</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-使用roles">6.3 使用roles</h3><p>roles（角色）用于<strong>层次性，结构化</strong>地组织剧本，角色分别将变量、文件、任务、模块及处理器放置于单独的目录中，而在剧本中使用include指令导入。</p><p>使用角色的好处：</p><ul><li><p>代码复用</p></li><li><p>角色使大项目更加容易管理</p></li><li><p>角色按逻辑分组的结构，更易于分享</p></li><li><p>可以根据特定需求编写角色，如web server的角色，DNS角色或补丁角色</p></li><li><p>角色可以独立开发，由不同实体并行</p></li><li><p>模板、变量、文件、已指定目录和include被简化</p></li><li><p>角色可以依赖其他角色，因此提供自动包含</p></li></ul><p>简单的角色结构示例：</p><blockquote><p>roles/ \ansible所有的信息都放到此目录下面对应的目录中<br>└── example-role \角色名称<br>├── default  \为当前角色设定默认变量时使用此目录，应当包含一个main.yml文件；<br>├── files  \存放有copy或script等模块调用的文件，或压缩安装包等<br>├── handlers \此目录总应当包含一个main.yml文件，用于定义各角色用到的各handler<br>├── meta \应当包含一个main.yml，用于定义角色的特殊设定及其依赖关系<br>├── tasks \至少包含一个名为main.yml的文件，定义了此角色的任务列表，可使用include指令<br>├── templates \template模块会自动在此目录中寻找Jinja2模板文件<br>└── vars  \应当包含一个main.yml文件，用于定义此角色用到的变量</p></blockquote><p><strong>将已有剧本改成角色结构</strong></p><p>有一个批量部署nginx应用的剧本，<strong>./nginx_playbook.yaml</strong>内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">webapp</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vars/logos.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">EPEL</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">epel-release</span></span><br><span class="line">        <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'CentOS'</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">install-epel</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">install-nginx</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">      <span class="attr">notify:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Template</span> <span class="string">index.html-easter_egg.j2</span> <span class="string">to</span> <span class="string">index.html</span> <span class="string">on</span> <span class="string">target</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">templates/index.html-easter_egg.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>/index.html"</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">deploy-app</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">unzip</span></span><br><span class="line">      <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">unzip</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Unarchive</span> <span class="string">playbook</span> <span class="string">stacker</span> <span class="string">game</span></span><br><span class="line">      <span class="attr">unarchive:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">playbook_stacker.zip</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>"</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">deploy-app</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://{{</span> <span class="string">ansible_default_ipv4.address</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">status_code:</span> <span class="number">200</span> </span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>另外，模板内容可参见Ansible课程代码</p><p>使用<strong>ansible-galaxy</strong>指令创建roles</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Roles/02$ ansible-galaxy init nginx</span><br><span class="line">- Role nginx was created successfully</span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Roles/02$ find .</span><br><span class="line">.</span><br><span class="line">./ansible.cfg</span><br><span class="line">./files</span><br><span class="line">./files/playbook_stacker.zip</span><br><span class="line">./group_vars</span><br><span class="line">./group_vars/centos</span><br><span class="line">./group_vars/ubuntu</span><br><span class="line">./hosts</span><br><span class="line">./host_vars</span><br><span class="line">./host_vars/centos1</span><br><span class="line">./host_vars/ubuntu-c</span><br><span class="line">./nginx</span><br><span class="line">./nginx/defaults</span><br><span class="line">./nginx/defaults/main.yml</span><br><span class="line">./nginx/files</span><br><span class="line">./nginx/handlers</span><br><span class="line">./nginx/handlers/main.yml</span><br><span class="line">./nginx/meta</span><br><span class="line">./nginx/meta/main.yml</span><br><span class="line">./nginx/README.md</span><br><span class="line">./nginx/tasks</span><br><span class="line">./nginx/tasks/main.yml</span><br><span class="line">./nginx/templates</span><br><span class="line">./nginx/tests</span><br><span class="line">./nginx/tests/inventory</span><br><span class="line">./nginx/tests/test.yml</span><br><span class="line">./nginx/vars</span><br><span class="line">./nginx/vars/main.yml</span><br><span class="line">./nginx_playbook.yaml</span><br><span class="line">./templates</span><br><span class="line">./templates/index.html-ansible_managed.j2</span><br><span class="line">./templates/index.html-base.j2</span><br><span class="line">./templates/index.html-easter_egg.j2</span><br><span class="line">./templates/index.html-logos.j2</span><br><span class="line">./templates/index.html.j2</span><br><span class="line">./vars</span><br><span class="line">./vars/logos.yaml</span><br></pre></td></tr></tbody></table></figure><p>将<strong>nginx_playbook.yaml</strong>文件中handlers部分的内容写入<strong>nginx/handlers/main.yml</strong>，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line">  <span class="attr">uri:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://{{</span> <span class="string">ansible_default_ipv4.address</span> <span class="string">}}</span></span><br><span class="line">    <span class="attr">status_code:</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>移动现有的模板进入<strong>nginx/templates</strong>文件夹</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Roles/02$ mv templates/* nginx/templates/ &amp;&amp; rm -rf templates/</span><br></pre></td></tr></tbody></table></figure><p>移动现有文件进入<strong>nginx/files</strong>目录</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Roles/02$ mv files/* nginx/files/ &amp;&amp; rm -rf files/</span><br></pre></td></tr></tbody></table></figure><p>复制现有变量内容到<strong>nginx/var/main.yml</strong>，进入文件删除多余的破折号和点</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Roles/02$ cat vars/logos.yaml &gt;&gt; nginx/vars/main.yml</span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Roles/02$ rm -rf vars/</span><br></pre></td></tr></tbody></table></figure><p>将<strong>nginx_playbook.yaml</strong>文件中tasks部分的内容写入<strong>nginx/tasks/main.yml</strong>，并修改template部分，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">EPEL</span></span><br><span class="line">  <span class="attr">yum:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">epel-release</span></span><br><span class="line">    <span class="attr">update_cache:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">==</span> <span class="string">'CentOS'</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">install-epel</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">  <span class="attr">package:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">install-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="string">Check</span> <span class="string">HTTP</span> <span class="string">Service</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Template</span> <span class="string">index.html-easter_egg.j2</span> <span class="string">to</span> <span class="string">index.html</span> <span class="string">on</span> <span class="string">target</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">index.html-easter_egg.j2</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>/index.html"</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy-app</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">unzip</span></span><br><span class="line">  <span class="attr">package:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">unzip</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Unarchive</span> <span class="string">playbook</span> <span class="string">stacker</span> <span class="string">game</span></span><br><span class="line">  <span class="attr">unarchive:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">playbook_stacker.zip</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">"<span class="template-variable">{{ nginx_root_location }}</span>"</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy-app</span></span><br><span class="line">    </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>修改<strong>nginx_playbook.yaml</strong>为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">    </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>此时，文件结构变为：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Structuring Ansible Playbooks/Using Roles/02$ find .</span><br><span class="line">.</span><br><span class="line">./ansible.cfg</span><br><span class="line">./group_vars</span><br><span class="line">./group_vars/centos</span><br><span class="line">./group_vars/ubuntu</span><br><span class="line">./hosts</span><br><span class="line">./host_vars</span><br><span class="line">./host_vars/centos1</span><br><span class="line">./host_vars/ubuntu-c</span><br><span class="line">./nginx</span><br><span class="line">./nginx/.travis.yml</span><br><span class="line">./nginx/defaults</span><br><span class="line">./nginx/defaults/main.yml</span><br><span class="line">./nginx/files</span><br><span class="line">./nginx/files/playbook_stacker.zip</span><br><span class="line">./nginx/handlers</span><br><span class="line">./nginx/handlers/main.yml</span><br><span class="line">./nginx/meta</span><br><span class="line">./nginx/meta/main.yml</span><br><span class="line">./nginx/README.md</span><br><span class="line">./nginx/tasks</span><br><span class="line">./nginx/tasks/main.yml</span><br><span class="line">./nginx/templates</span><br><span class="line">./nginx/templates/index.html-ansible_managed.j2</span><br><span class="line">./nginx/templates/index.html-base.j2</span><br><span class="line">./nginx/templates/index.html-easter_egg.j2</span><br><span class="line">./nginx/templates/index.html-logos.j2</span><br><span class="line">./nginx/templates/index.html.j2</span><br><span class="line">./nginx/tests</span><br><span class="line">./nginx/tests/inventory</span><br><span class="line">./nginx/tests/test.yml</span><br><span class="line">./nginx/vars</span><br><span class="line">./nginx/vars/main.yml</span><br><span class="line">./nginx_playbook.yaml</span><br></pre></td></tr></tbody></table></figure><p>经过测试，发现可以正常运行。</p><p>上面的nginx角色还可以继续把webapp部分拆分出来做为独立的角色。</p><p>角色也可以覆盖参数，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">    <span class="bullet">-</span> { <span class="attr">role:</span> <span class="string">webapp</span>, <span class="attr">target_dir:</span> <span class="string">"{%- if ansible_distribution == 'CentOS' -%}/usr/share/nginx/html{%- elif ansible_distribution == 'Ubuntu' -%}/var/www/html{%- endif %}"</span> }</span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>角色依赖</strong></p><p>可以在<strong>webapp/meta/main.yml</strong>文件最后为webapp角色添加对nginx角色的依赖：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">......</span> <span class="string">省略大量内容</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nginx</span></span><br></pre></td></tr></tbody></table></figure><p>剧本内容变为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> { <span class="attr">role:</span> <span class="string">webapp</span>, <span class="attr">target_dir:</span> <span class="string">"{%- if ansible_distribution == 'CentOS' -%}/usr/share/nginx/html{%- elif ansible_distribution == 'Ubuntu' -%}/var/www/html{%- endif %}"</span> }</span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h2 id="7-云服务、容器、Ansible">7. 云服务、容器、Ansible</h2><blockquote><p>AWS、Docker与Ansible</p></blockquote><h3 id="7-1-AWS与Ansible">7.1 AWS与Ansible</h3><p>使用Ansible在AWS中自动化部署实例</p><p>首先在AWS的EC2控制台中创建密钥对，然后去个人账号创建访问密钥，进入VPCs创建默认的VPC</p><p>然后在AWS的EC2控制台中创建实例，选定系统镜像</p><p>配置AWS模块</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/01$ export AWS_ACCESS_KEY_ID="your_accesskey"</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/01$ export AWS_SECRET_ACCESS_KEY="your_accesskey_secret"</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/01$ sudo pip install boto boto3</span><br></pre></td></tr></tbody></table></figure><p><strong>ansible.cfg</strong>文件</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">inventory</span>=hosts</span><br><span class="line"><span class="attr">host_key_checking</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">forks</span>=<span class="number">6</span></span><br></pre></td></tr></tbody></table></figure><p><strong>hosts</strong>文件</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[control]</span></span><br><span class="line">ubuntu-c</span><br><span class="line"></span><br><span class="line"><span class="section">[centos]</span></span><br><span class="line">centos<span class="section">[1:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ubuntu]</span></span><br><span class="line">ubuntu<span class="section">[1:3]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[linux:children]</span></span><br><span class="line">centos</span><br><span class="line">ubuntu</span><br></pre></td></tr></tbody></table></figure><p><strong>ec2_playbook.yaml</strong>文件</p><ul><li>在 AWS 中创建用于 SSH 访问和 HTTP 的安全组</li><li>预置一组实例</li><li>将所有实例公共 IP 添加到主机组</li><li></li></ul><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">a</span> <span class="string">security</span> <span class="string">group</span> <span class="string">in</span> <span class="string">AWS</span> <span class="string">for</span> <span class="string">SSH</span> <span class="string">access</span> <span class="string">and</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">ec2_group:</span></span><br><span class="line">         <span class="attr">name:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">description:</span> <span class="string">Ansible</span> <span class="string">Security</span> <span class="string">Group</span></span><br><span class="line">         <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">         <span class="attr">rules:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">proto:</span> <span class="string">tcp</span></span><br><span class="line">              <span class="attr">from_port:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">to_port:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">cidr_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">proto:</span> <span class="string">tcp</span></span><br><span class="line">              <span class="attr">from_port:</span> <span class="number">22</span></span><br><span class="line">              <span class="attr">to_port:</span> <span class="number">22</span></span><br><span class="line">              <span class="attr">cidr_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Provision</span> <span class="string">a</span> <span class="string">set</span> <span class="string">of</span> <span class="string">instances</span></span><br><span class="line">      <span class="attr">ec2:</span></span><br><span class="line">         <span class="attr">key_name:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">instance_type:</span> <span class="string">t2.micro</span></span><br><span class="line">         <span class="attr">image:</span> <span class="string">ami-096fda3c22c1c990a</span></span><br><span class="line">         <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">         <span class="attr">wait:</span> <span class="literal">true</span></span><br><span class="line">         <span class="attr">exact_count:</span> <span class="number">20</span></span><br><span class="line">         <span class="attr">count_tag:</span></span><br><span class="line">            <span class="attr">Name:</span> <span class="string">AnsibleNginxWebservers</span></span><br><span class="line">         <span class="attr">instance_tags:</span></span><br><span class="line">            <span class="attr">Name:</span> <span class="string">Ansible</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">ec2</span></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">all</span> <span class="string">instance</span> <span class="string">public</span> <span class="string">IPs</span> <span class="string">to</span> <span class="string">host</span> <span class="string">group</span></span><br><span class="line">      <span class="attr">add_host:</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">"<span class="template-variable">{{ item.public_ip }}</span>"</span></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">ansiblehosts</span></span><br><span class="line">      <span class="attr">with_items:</span> <span class="string">"<span class="template-variable">{{ ec2.instances }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">group</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">groups.ansiblehosts</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>使用AWS动态清单</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/04$ mkdir inventory &amp;&amp; cd inventory</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/04$ wget https://raw.githubusercontent.com/ansible/ansible/stable-2.9/contrib/inventory/ec2.py</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/04$ wget https://raw.githubusercontent.com/ansible/ansible/stable-2.9/contrib/inventory/ec2.ini</span><br><span class="line"></span><br><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/04$ chmod u+x ec2.py </span><br></pre></td></tr></tbody></table></figure><p>修改ec2.py文件，第1行的python变为python3，注释掉第172行内容，即<code># from ansible.module_utils import ec2 as ec2_utils</code></p><p>修改ec2.ini文件:<code>cache_max_go=0</code></p><p>配置：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/04$ export EC2_INI_PATH=inventory/ec2.ini</span><br></pre></td></tr></tbody></table></figure><p>修改ansible.cfg为：</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">inventory</span>=inventory/ec2</span><br><span class="line"><span class="attr">host_key_checking</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">forks</span>=<span class="number">20</span></span><br><span class="line"><span class="attr">ansible_managed</span>=Managed by Ansible - file:{file} - host:{host} - uid:{uid}</span><br></pre></td></tr></tbody></table></figure><p>创建~./ssh/ansible.pem，将密钥复制到此处，并且设置权限为600</p><p>创建group_vars/tag_Name_Ansible：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">ansible_ssh_private_key_file:~./ssh/ansible.pem</span></span><br><span class="line"><span class="attr">ansible_user:</span> <span class="string">ec2-user</span></span><br><span class="line"><span class="attr">ansible_become:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>修改剧本内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">a</span> <span class="string">security</span> <span class="string">group</span> <span class="string">in</span> <span class="string">AWS</span> <span class="string">for</span> <span class="string">SSH</span> <span class="string">access</span> <span class="string">and</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">ec2_group:</span></span><br><span class="line">         <span class="attr">name:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">description:</span> <span class="string">Ansible</span> <span class="string">Security</span> <span class="string">Group</span></span><br><span class="line">         <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">         <span class="attr">rules:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">proto:</span> <span class="string">tcp</span></span><br><span class="line">              <span class="attr">from_port:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">to_port:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">cidr_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">proto:</span> <span class="string">tcp</span></span><br><span class="line">              <span class="attr">from_port:</span> <span class="number">22</span></span><br><span class="line">              <span class="attr">to_port:</span> <span class="number">22</span></span><br><span class="line">              <span class="attr">cidr_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Provision</span> <span class="string">a</span> <span class="string">set</span> <span class="string">of</span> <span class="string">instances</span></span><br><span class="line">      <span class="attr">ec2:</span></span><br><span class="line">         <span class="attr">key_name:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">instance_type:</span> <span class="string">t2.micro</span></span><br><span class="line">         <span class="attr">image:</span> <span class="string">ami-096fda3c22c1c990a</span></span><br><span class="line">         <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">         <span class="attr">wait:</span> <span class="literal">true</span></span><br><span class="line">         <span class="attr">exact_count:</span> <span class="number">20</span></span><br><span class="line">         <span class="attr">count_tag:</span></span><br><span class="line">            <span class="attr">Name:</span> <span class="string">AnsibleNginxWebservers</span></span><br><span class="line">         <span class="attr">instance_tags:</span></span><br><span class="line">            <span class="attr">Name:</span> <span class="string">Ansible</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">ec2</span></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Refresh</span> <span class="string">inventory</span> <span class="string">to</span> <span class="string">ensure</span> <span class="string">new</span> <span class="string">instances</span> <span class="string">exist</span> <span class="string">in</span> <span class="string">inventory</span></span><br><span class="line">      <span class="attr">meta:</span> <span class="string">refresh_inventory</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">tag_Name_Ansible</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> { <span class="attr">role:</span> <span class="string">webapp</span>, <span class="attr">target_dir:</span> <span class="string">/usr/share/nginx/html</span> }</span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>并将其改为角色结构，详细代码可查看提供的教程代码</p><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/AWS with Ansible/04$ ansible tag_Name_Ansible -m ping -o</span><br></pre></td></tr></tbody></table></figure><p>最终剧本为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">a</span> <span class="string">security</span> <span class="string">group</span> <span class="string">in</span> <span class="string">AWS</span> <span class="string">for</span> <span class="string">SSH</span> <span class="string">access</span> <span class="string">and</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">ec2_group:</span></span><br><span class="line">         <span class="attr">name:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">description:</span> <span class="string">Ansible</span> <span class="string">Security</span> <span class="string">Group</span></span><br><span class="line">         <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">         <span class="attr">rules:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">proto:</span> <span class="string">tcp</span></span><br><span class="line">              <span class="attr">from_port:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">to_port:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">cidr_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">proto:</span> <span class="string">tcp</span></span><br><span class="line">              <span class="attr">from_port:</span> <span class="number">22</span></span><br><span class="line">              <span class="attr">to_port:</span> <span class="number">22</span></span><br><span class="line">              <span class="attr">cidr_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Provision</span> <span class="string">a</span> <span class="string">set</span> <span class="string">of</span> <span class="string">instances</span></span><br><span class="line">      <span class="attr">ec2:</span></span><br><span class="line">         <span class="attr">key_name:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">ansible</span></span><br><span class="line">         <span class="attr">instance_type:</span> <span class="string">t2.micro</span></span><br><span class="line">         <span class="attr">image:</span> <span class="string">ami-096fda3c22c1c990a</span></span><br><span class="line">         <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">         <span class="attr">wait:</span> <span class="literal">true</span></span><br><span class="line">         <span class="attr">exact_count:</span> <span class="number">20</span></span><br><span class="line">         <span class="attr">count_tag:</span></span><br><span class="line">            <span class="attr">Name:</span> <span class="string">AnsibleNginxWebservers</span></span><br><span class="line">         <span class="attr">instance_tags:</span></span><br><span class="line">            <span class="attr">Name:</span> <span class="string">Ansible</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">ec2</span></span><br><span class="line">      <span class="attr">ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Refresh</span> <span class="string">inventory</span> <span class="string">to</span> <span class="string">ensure</span> <span class="string">new</span> <span class="string">instances</span> <span class="string">exist</span> <span class="string">in</span> <span class="string">inventory</span></span><br><span class="line">      <span class="attr">meta:</span> <span class="string">refresh_inventory</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">tag_Name_Ansible</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> { <span class="attr">role:</span> <span class="string">webapp</span>, <span class="attr">target_dir:</span> <span class="string">/usr/share/nginx/html</span> }</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">tag_Name_Ansible</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"Check http://<span class="template-variable">{{ ansible_host }}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pause:</span></span><br><span class="line">        <span class="attr">prompt:</span> <span class="string">"Verify service availability and continue to terminate"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Remove</span> <span class="string">tagged</span> <span class="string">EC2</span> <span class="string">instances</span> <span class="string">from</span> <span class="string">security</span> <span class="string">group</span> <span class="string">by</span> <span class="string">setting</span> <span class="string">an</span> <span class="string">empty</span> <span class="string">group</span></span><br><span class="line">      <span class="attr">ec2:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">running</span></span><br><span class="line">        <span class="attr">region:</span> <span class="string">"<span class="template-variable">{{ ec2_region }}</span>"</span></span><br><span class="line">        <span class="attr">instance_ids:</span> <span class="string">"<span class="template-variable">{{ ec2_id }}</span>"</span></span><br><span class="line">        <span class="attr">group_id:</span> <span class="string">""</span></span><br><span class="line">      <span class="attr">delegate_to:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Terminate</span> <span class="string">EC2</span> <span class="string">instances</span></span><br><span class="line">      <span class="attr">ec2:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">        <span class="attr">region:</span> <span class="string">"<span class="template-variable">{{ ec2_region }}</span>"</span></span><br><span class="line">        <span class="attr">instance_ids:</span> <span class="string">"<span class="template-variable">{{ ec2_id }}</span>"</span></span><br><span class="line">        <span class="attr">wait:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">delegate_to:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Remove</span> <span class="string">ansible</span> <span class="string">security</span> <span class="string">group</span></span><br><span class="line">    <span class="attr">ec2_group:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ansible</span></span><br><span class="line">      <span class="attr">region:</span> <span class="string">us-east-1</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-2-Docker与Ansible">7.2 Docker与Ansible</h3><p>配置Docker实验室</p><p>install_docker.sh脚本：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">install_docker.sh sudo apt update</span><br><span class="line">sudo apt install -y docker.io</span><br><span class="line">pip3 install docker</span><br></pre></td></tr></tbody></table></figure><p>执行：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/Docker with Ansible/01$ bash -x install_docker.sh</span><br></pre></td></tr></tbody></table></figure><p>设置环境变量envdocker</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DOCKER_HOST=tcp://docker:2375</span><br></pre></td></tr></tbody></table></figure><p>使之生效</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible@ubuntu-c:~/diveintoansible/Using Ansible with Cloud Services and Containers/Docker with Ansible/01$ source envdocker</span><br></pre></td></tr></tbody></table></figure><p>编写剧本 docker_playbook.yaml:</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">images</span></span><br><span class="line">      <span class="attr">docker_host:</span> <span class="string">tcp://docker:2375</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">pull</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">centos</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ubuntu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">wernight/funbox</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">a</span> <span class="string">customised</span> <span class="string">index.html</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/shared/index.html</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="string">Customised</span> <span class="string">page</span> <span class="string">for</span> <span class="string">nginxcustomised</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">a</span> <span class="string">customised</span> <span class="string">Dockerfile</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/shared/Dockerfile</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">0644</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="string">FROM</span> <span class="string">nginx</span></span><br><span class="line">          <span class="string">COPY</span> <span class="string">index.html</span> <span class="string">/usr/share/nginx/html/index.html</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">a</span> <span class="string">customised</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">docker_image:</span></span><br><span class="line">        <span class="attr">docker_host:</span> <span class="string">tcp://docker:2375</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginxcustomised:latest</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">build:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/shared</span></span><br><span class="line">          <span class="attr">pull:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        <span class="attr">force_source:</span> <span class="literal">yes</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">an</span> <span class="string">nginxcustomised</span> <span class="string">container</span></span><br><span class="line">      <span class="attr">docker_container:</span></span><br><span class="line">        <span class="attr">docker_host:</span> <span class="string">tcp://docker:2375</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">containerwebserver</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginxcustomised:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">container_default_behavior:</span> <span class="string">no_defaults</span></span><br><span class="line">        <span class="attr">recreate:</span> <span class="literal">yes</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>其他例子：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">python</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">docker_image:</span></span><br><span class="line">        <span class="attr">docker_host:</span> <span class="string">tcp://docker:2375</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">python:3.8.5</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">pull</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="number">3</span> <span class="string">python</span> <span class="string">containers</span></span><br><span class="line">      <span class="attr">docker_container:</span></span><br><span class="line">        <span class="attr">docker_host:</span> <span class="string">tcp://docker:2375</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"python<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">python:3.8.5</span></span><br><span class="line">        <span class="attr">container_default_behavior:</span> <span class="string">no_defaults</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">sleep</span> <span class="string">infinity</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="number">1</span><span class="number">-3</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">containers</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ping</span> <span class="string">containers</span></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p>其中，containers的配置为：</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[containers]</span></span><br><span class="line">python<span class="section">[1:3]</span> <span class="attr">ansible_connection</span>=docker ansible_python_interpreter=/usr/bin/python3</span><br></pre></td></tr></tbody></table></figure><p>终止并移除容器</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">ubuntu-c</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Remove</span> <span class="string">old</span> <span class="string">containers</span></span><br><span class="line">      <span class="attr">docker_container:</span></span><br><span class="line">        <span class="attr">docker_host:</span> <span class="string">tcp://docker:2375</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">        <span class="attr">container_default_behavior:</span> <span class="string">no_defaults</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">containerwebserver</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">python1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">python2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Remove</span> <span class="string">images</span></span><br><span class="line">      <span class="attr">docker_image:</span></span><br><span class="line">        <span class="attr">docker_host:</span> <span class="string">tcp://docker:2375</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">centos</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ubuntu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">wernight/funbox</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">nginxcustomised</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">python:3.8.5</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Remove</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">"<span class="template-variable">{{ item }}</span>"</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/shared/Dockerfile</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/shared/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h2 id="8-创建模块和插件">8. 创建模块和插件</h2><blockquote><p>创建自己的模块和插件</p></blockquote><h3 id="8-1-创建模块">8.1 创建模块</h3><p>下载ansible源码</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/ansible/ansible.git</span><br></pre></td></tr></tbody></table></figure><p>使用开发工具Hacking去调试模块，如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">~/ansible/hacking/test_module -m ~/ansible/lib/ansible/modules/command.py -a hostname</span><br></pre></td></tr></tbody></table></figure><p>生成模块测试成功和失败报告</p><p><a href="http://xn--icmp-4j1ir14k.sh">脚本icmp.sh</a></p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$1</span>&gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">TARGET=<span class="variable">${target:-127.0.0.1}</span></span><br><span class="line"></span><br><span class="line">ping -c 1 <span class="variable">${TARGET}</span> &gt;/dev/null 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"{\"changed\": true, \"rc\": 0}"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"{\"failed\": true, \"msg\": \"failed to ping\", \"rc\": 1}"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">~ansible/hacking/test-module -m icmp.sh</span><br><span class="line">~ansible/hacking/test-module -m icmp.sh -a 'target=centos1'</span><br></pre></td></tr></tbody></table></figure><p>模块测试结果保存在 <strong>/home/ansible/.ansible_module_generated</strong> 中</p><p>模块输入的参数保存在**/home/ansible/.ansible_test_module_arguments** 中</p><p>两个文件中有数据的前提是使用了<code>source $1&gt;/dev/null 2&gt;&amp;1</code>捕获输入</p><p><strong>创建一个简单的ping模块</strong></p><p>在ansible工作目录下新建一个library文件夹，将icmp.sh放入library文件夹并去掉.sh文件后缀，就算创建了一个简单的ping模块</p><p>剧本内容为：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">linux</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">icmp</span> <span class="string">module</span></span><br><span class="line">      <span class="attr">icmp:</span></span><br><span class="line">        <span class="attr">target:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="string">。。。</span></span><br></pre></td></tr></tbody></table></figure><p>如果想要将自定义模块发布到ansible源，需要遵循规范，可以参考：<a href="http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_general.html">http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_general.html</a></p><p>官方给的模块模板内容如下：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copyright: (c) 2018, Terry Jones &lt;terry.jones@example.org&gt;</span></span><br><span class="line"><span class="comment"># GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (absolute_import, division, print_function)</span><br><span class="line">__metaclass__ = <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">DOCUMENTATION = <span class="string">r'''</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">module: my_test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">short_description: This is my test module</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># If this is part of a collection, you need to use semantic versioning,</span></span><br><span class="line"><span class="string"># i.e. the version is of the form "2.5.0" and not "2.4".</span></span><br><span class="line"><span class="string">version_added: "1.0.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">description: This is my longer description explaining my test module.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">options:</span></span><br><span class="line"><span class="string">    name:</span></span><br><span class="line"><span class="string">        description: This is the message to send to the test module.</span></span><br><span class="line"><span class="string">        required: true</span></span><br><span class="line"><span class="string">        type: str</span></span><br><span class="line"><span class="string">    new:</span></span><br><span class="line"><span class="string">        description:</span></span><br><span class="line"><span class="string">            - Control to demo if the result of this module is changed or not.</span></span><br><span class="line"><span class="string">            - Parameter description can be a list as well.</span></span><br><span class="line"><span class="string">        required: false</span></span><br><span class="line"><span class="string">        type: bool</span></span><br><span class="line"><span class="string"># Specify this value according to your collection</span></span><br><span class="line"><span class="string"># in format of namespace.collection.doc_fragment_name</span></span><br><span class="line"><span class="string">extends_documentation_fragment:</span></span><br><span class="line"><span class="string">    - my_namespace.my_collection.my_doc_fragment_name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">author:</span></span><br><span class="line"><span class="string">    - Your Name (@yourGitHubHandle)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">EXAMPLES = <span class="string">r'''</span></span><br><span class="line"><span class="string"># Pass in a message</span></span><br><span class="line"><span class="string">- name: Test with a message</span></span><br><span class="line"><span class="string">  my_namespace.my_collection.my_test:</span></span><br><span class="line"><span class="string">    name: hello world</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># pass in a message and have changed true</span></span><br><span class="line"><span class="string">- name: Test with a message and changed output</span></span><br><span class="line"><span class="string">  my_namespace.my_collection.my_test:</span></span><br><span class="line"><span class="string">    name: hello world</span></span><br><span class="line"><span class="string">    new: true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># fail the module</span></span><br><span class="line"><span class="string">- name: Test failure of the module</span></span><br><span class="line"><span class="string">  my_namespace.my_collection.my_test:</span></span><br><span class="line"><span class="string">    name: fail me</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">RETURN = <span class="string">r'''</span></span><br><span class="line"><span class="string"># These are examples of possible return values, and in general should use other names for return values.</span></span><br><span class="line"><span class="string">original_message:</span></span><br><span class="line"><span class="string">    description: The original name param that was passed in.</span></span><br><span class="line"><span class="string">    type: str</span></span><br><span class="line"><span class="string">    returned: always</span></span><br><span class="line"><span class="string">    sample: 'hello world'</span></span><br><span class="line"><span class="string">message:</span></span><br><span class="line"><span class="string">    description: The output message that the test module generates.</span></span><br><span class="line"><span class="string">    type: str</span></span><br><span class="line"><span class="string">    returned: always</span></span><br><span class="line"><span class="string">    sample: 'goodbye'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.basic <span class="keyword">import</span> AnsibleModule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_module</span>():</span></span><br><span class="line">    <span class="comment"># define available arguments/parameters a user can pass to the module</span></span><br><span class="line">    module_args = <span class="built_in">dict</span>(</span><br><span class="line">        name=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">'str'</span>, required=<span class="literal">True</span>),</span><br><span class="line">        new=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">'bool'</span>, required=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># seed the result dict in the object</span></span><br><span class="line">    <span class="comment"># we primarily care about changed and state</span></span><br><span class="line">    <span class="comment"># changed is if this module effectively modified the target</span></span><br><span class="line">    <span class="comment"># state will include any data that you want your module to pass back</span></span><br><span class="line">    <span class="comment"># for consumption, for example, in a subsequent task</span></span><br><span class="line">    result = <span class="built_in">dict</span>(</span><br><span class="line">        changed=<span class="literal">False</span>,</span><br><span class="line">        original_message=<span class="string">''</span>,</span><br><span class="line">        message=<span class="string">''</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the AnsibleModule object will be our abstraction working with Ansible</span></span><br><span class="line">    <span class="comment"># this includes instantiation, a couple of common attr would be the</span></span><br><span class="line">    <span class="comment"># args/params passed to the execution, as well as if the module</span></span><br><span class="line">    <span class="comment"># supports check mode</span></span><br><span class="line">    module = AnsibleModule(</span><br><span class="line">        argument_spec=module_args,</span><br><span class="line">        supports_check_mode=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if the user is working with this module in only check mode we do not</span></span><br><span class="line">    <span class="comment"># want to make any changes to the environment, just return the current</span></span><br><span class="line">    <span class="comment"># state with no modifications</span></span><br><span class="line">    <span class="keyword">if</span> module.check_mode:</span><br><span class="line">        module.exit_json(**result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># manipulate or modify the state as needed (this is going to be the</span></span><br><span class="line">    <span class="comment"># part where your module will do what it needs to do)</span></span><br><span class="line">    result[<span class="string">'original_message'</span>] = module.params[<span class="string">'name'</span>]</span><br><span class="line">    result[<span class="string">'message'</span>] = <span class="string">'goodbye'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># use whatever logic you need to determine whether or not this module</span></span><br><span class="line">    <span class="comment"># made any modifications to your target</span></span><br><span class="line">    <span class="keyword">if</span> module.params[<span class="string">'new'</span>]:</span><br><span class="line">        result[<span class="string">'changed'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># during the execution of the module, if there is an exception or a</span></span><br><span class="line">    <span class="comment"># conditional state that effectively causes a failure, run</span></span><br><span class="line">    <span class="comment"># AnsibleModule.fail_json() to pass in the message and the result</span></span><br><span class="line">    <span class="keyword">if</span> module.params[<span class="string">'name'</span>] == <span class="string">'fail me'</span>:</span><br><span class="line">        module.fail_json(msg=<span class="string">'You requested this to fail'</span>, **result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># in the event of a successful module execution, you will want to</span></span><br><span class="line">    <span class="comment"># simple AnsibleModule.exit_json(), passing the key/value results</span></span><br><span class="line">    module.exit_json(**result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    run_module()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>因此，<a href="http://xn--libraryicmpicmp-7j3x7wm6hd04eqyl2u1b43jkpihy4h.py">将library文件夹下的icmp替换为icmp.py</a>，简单的ping模块可以改为：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">ANSIBLE_METADATA = {</span><br><span class="line">    <span class="string">'metadata_version'</span>: <span class="string">'1.1'</span>,</span><br><span class="line">    <span class="string">'status'</span>: [<span class="string">'preview'</span>],</span><br><span class="line">    <span class="string">'supported_by'</span>: <span class="string">'community'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">DOCUMENTATION = <span class="string">'''</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">module: icmp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">short_description: simple module for icmp ping</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">version_added: "2.10"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">description:</span></span><br><span class="line"><span class="string">    - "simple module for icmp ping"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">options:</span></span><br><span class="line"><span class="string">    target:</span></span><br><span class="line"><span class="string">        description:</span></span><br><span class="line"><span class="string">            - The target to ping</span></span><br><span class="line"><span class="string">        required: true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">author:</span></span><br><span class="line"><span class="string">    - James Spurin (@spurin)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">EXAMPLES = <span class="string">'''</span></span><br><span class="line"><span class="string"># Ping an IP</span></span><br><span class="line"><span class="string">- name: Ping an IP</span></span><br><span class="line"><span class="string">  icmp:</span></span><br><span class="line"><span class="string">    target: 127.0.0.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Ping a host</span></span><br><span class="line"><span class="string">- name: Ping a host</span></span><br><span class="line"><span class="string">  icmp:</span></span><br><span class="line"><span class="string">    target: centos1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">RETURN = <span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.basic <span class="keyword">import</span> AnsibleModule</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_module</span>():</span></span><br><span class="line">    <span class="comment"># define the available arguments/parameters that a user can pass to</span></span><br><span class="line">    <span class="comment"># the module</span></span><br><span class="line">    module_args = <span class="built_in">dict</span>(</span><br><span class="line">        target=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">'str'</span>, required=<span class="literal">True</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># seed the result dict in the object</span></span><br><span class="line">    <span class="comment"># we primarily care about changed and state</span></span><br><span class="line">    <span class="comment"># change is if this module effectively modified the target</span></span><br><span class="line">    <span class="comment"># state will include any data that you want your module to pass back</span></span><br><span class="line">    <span class="comment"># for consumption, for example, in a subsequent task</span></span><br><span class="line">    result = <span class="built_in">dict</span>(</span><br><span class="line">        changed=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the AnsibleModule object will be our abstraction working with Ansible</span></span><br><span class="line">    <span class="comment"># this includes instantiation, a couple of common attr would be the</span></span><br><span class="line">    <span class="comment"># args/params passed to the execution, as well as if the module</span></span><br><span class="line">    <span class="comment"># supports check mode</span></span><br><span class="line">    module = AnsibleModule(</span><br><span class="line">        argument_spec=module_args,</span><br><span class="line">        supports_check_mode=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if the user is working with this module in only check mode we do not</span></span><br><span class="line">    <span class="comment"># want to make any changes to the environment, just return the current</span></span><br><span class="line">    <span class="comment"># state with no modifications</span></span><br><span class="line">    <span class="keyword">if</span> module.check_mode:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># manipulate or modify the state as needed (this is going to be the</span></span><br><span class="line">    <span class="comment"># part where your module will do what it needs to do)</span></span><br><span class="line">    ping_result = module.run_command(<span class="string">'ping -c 1 {}'</span>.<span class="built_in">format</span>(module.params[<span class="string">'target'</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use whatever logic you need to determine whether or not this module</span></span><br><span class="line">    <span class="comment"># made any modifications to your target</span></span><br><span class="line">    <span class="keyword">if</span> module.params[<span class="string">'target'</span>]:</span><br><span class="line">        result[<span class="string">'debug'</span>] = ping_result</span><br><span class="line">        result[<span class="string">'rc'</span>] = ping_result[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">'rc'</span>]:</span><br><span class="line">          result[<span class="string">'failed'</span>] = <span class="literal">True</span></span><br><span class="line">          module.fail_json(msg=<span class="string">'failed to ping'</span>, **result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          result[<span class="string">'changed'</span>] = <span class="literal">True</span></span><br><span class="line">          module.exit_json(**result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    run_module()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>执行下面指令可以查看模板使用说明：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible-doc -M library icmp</span><br></pre></td></tr></tbody></table></figure><h3 id="8-2-创建插件">8.2 创建插件</h3><p>ansible插件是增强ansible的核心功能的代码片段，ansible使用插件架构来实现丰富，灵活和可扩展的功能集。</p><p>Ansible提供了许多方便的插件，也轻松自定义的插件。</p><p>官方lookup插件的源码：</p><p><a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/items.py">https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/items.py</a></p><p>官方vars插件的源码：</p><p><a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/vars/host_group_vars.py">https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/vars/host_group_vars.py</a></p><p>开发插件的官方文档：</p><p><a href="http://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html">http://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html</a></p><p>现有插件：</p><ul><li>Action插件</li><li>Cache插件</li><li>Callback插件</li><li>Connection插件</li><li>Filters插件</li><li>Lookup插件</li><li>Strategy插件</li><li>Shell插件</li><li>Test插件</li><li>Vars插件</li><li>inventory插件</li></ul><p><strong>自定义lookup插件实现排序遍历</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir lookup_plugins &amp;&amp; cd lookup_plugins</span><br><span class="line">wget https://raw.githubusercontent.com/ansible/ansible/devel/lib/ansible/plugins/lookup/items.py</span><br><span class="line">mv items.py sorted_items.py</span><br></pre></td></tr></tbody></table></figure><p>sorted_items.py内容为：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># (c) 2012, Michael DeHaan &lt;michael.dehaan@gmail.com&gt;</span></span><br><span class="line"><span class="comment"># (c) 2017 Ansible Project</span></span><br><span class="line"><span class="comment"># GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (absolute_import, division, print_function)</span><br><span class="line">__metaclass__ = <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">DOCUMENTATION = <span class="string">"""</span></span><br><span class="line"><span class="string">    name: items</span></span><br><span class="line"><span class="string">    author: Michael DeHaan</span></span><br><span class="line"><span class="string">    version_added: historical</span></span><br><span class="line"><span class="string">    short_description: list of items</span></span><br><span class="line"><span class="string">    description:</span></span><br><span class="line"><span class="string">      - this lookup returns a list of items given to it, if any of the top level items is also a list it will flatten it, but it will not recurse</span></span><br><span class="line"><span class="string">    notes:</span></span><br><span class="line"><span class="string">      - this is the standard lookup used for loops in most examples</span></span><br><span class="line"><span class="string">      - check out the 'flattened' lookup for recursive flattening</span></span><br><span class="line"><span class="string">      - if you do not want flattening nor any other transformation look at the 'list' lookup.</span></span><br><span class="line"><span class="string">    options:</span></span><br><span class="line"><span class="string">      _terms:</span></span><br><span class="line"><span class="string">        description: list of items</span></span><br><span class="line"><span class="string">        required: True</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">EXAMPLES = <span class="string">"""</span></span><br><span class="line"><span class="string">- name: "loop through list"</span></span><br><span class="line"><span class="string">  ansible.builtin.debug:</span></span><br><span class="line"><span class="string">    msg: "An item: {{ item }}"</span></span><br><span class="line"><span class="string">  with_items:</span></span><br><span class="line"><span class="string">    - 1</span></span><br><span class="line"><span class="string">    - 2</span></span><br><span class="line"><span class="string">    - 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- name: add several users</span></span><br><span class="line"><span class="string">  ansible.builtin.user:</span></span><br><span class="line"><span class="string">    name: "{{ item }}"</span></span><br><span class="line"><span class="string">    groups: "wheel"</span></span><br><span class="line"><span class="string">    state: present</span></span><br><span class="line"><span class="string">  with_items:</span></span><br><span class="line"><span class="string">     - testuser1</span></span><br><span class="line"><span class="string">     - testuser2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- name: "loop through list from a variable"</span></span><br><span class="line"><span class="string">  ansible.builtin.debug:</span></span><br><span class="line"><span class="string">    msg: "An item: {{ item }}"</span></span><br><span class="line"><span class="string">  with_items: "{{ somelist }}"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- name: more complex items to add several users</span></span><br><span class="line"><span class="string">  ansible.builtin.user:</span></span><br><span class="line"><span class="string">    name: "{{ item.name }}"</span></span><br><span class="line"><span class="string">    uid: "{{ item.uid }}"</span></span><br><span class="line"><span class="string">    groups: "{{ item.groups }}"</span></span><br><span class="line"><span class="string">    state: present</span></span><br><span class="line"><span class="string">  with_items:</span></span><br><span class="line"><span class="string">     - { name: testuser1, uid: 1002, groups: "wheel, staff" }</span></span><br><span class="line"><span class="string">     - { name: testuser2, uid: 1003, groups: staff }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">RETURN = <span class="string">"""</span></span><br><span class="line"><span class="string">  _raw:</span></span><br><span class="line"><span class="string">    description:</span></span><br><span class="line"><span class="string">      - once flattened list</span></span><br><span class="line"><span class="string">    type: list</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.plugins.lookup <span class="keyword">import</span> LookupBase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LookupModule</span>(<span class="params">LookupBase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, terms, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._flatten(terms)</span><br></pre></td></tr></tbody></table></figure><p>lookup插件引用了下面地址的类方法</p><p><a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/">https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/</a><strong>init</strong>.py</p><p>其内容为：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># (c) 2012-2014, Michael DeHaan &lt;michael.dehaan@gmail.com&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file is part of Ansible</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Ansible is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment"># it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment"># the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment"># (at your option) any later version.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Ansible is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment"># GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment"># along with Ansible.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make coding more python3-ish</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (absolute_import, division, print_function)</span><br><span class="line">__metaclass__ = <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.errors <span class="keyword">import</span> AnsibleFileNotFound</span><br><span class="line"><span class="keyword">from</span> ansible.plugins <span class="keyword">import</span> AnsiblePlugin</span><br><span class="line"><span class="keyword">from</span> ansible.utils.display <span class="keyword">import</span> Display</span><br><span class="line"></span><br><span class="line">display = Display()</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'LookupBase'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LookupBase</span>(<span class="params">AnsiblePlugin</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, loader=<span class="literal">None</span>, templar=<span class="literal">None</span>, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>(LookupBase, self).__init__()</span><br><span class="line"></span><br><span class="line">        self._loader = loader</span><br><span class="line">        self._templar = templar</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Backwards compat: self._display isn't really needed, just import the global display and use that.</span></span><br><span class="line">        self._display = display</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_basedir</span>(<span class="params">self, variables</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'role_path'</span> <span class="keyword">in</span> variables:</span><br><span class="line">            <span class="keyword">return</span> variables[<span class="string">'role_path'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self._loader.get_basedir()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_flatten</span>(<span class="params">terms</span>):</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> term <span class="keyword">in</span> terms:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(term, (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">                ret.extend(term)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret.append(term)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_combine</span>(<span class="params">a, b</span>):</span></span><br><span class="line">        results = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> b:</span><br><span class="line">                results.append(LookupBase._flatten([x, y]))</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_flatten_hash_to_list</span>(<span class="params">terms</span>):</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> terms:</span><br><span class="line">            ret.append({<span class="string">'key'</span>: key, <span class="string">'value'</span>: terms[key]})</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, terms, variables=<span class="literal">None</span>, **kwargs</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        When the playbook specifies a lookup, this method is run.  The</span></span><br><span class="line"><span class="string">        arguments to the lookup become the arguments to this method.  One</span></span><br><span class="line"><span class="string">        additional keyword argument named ``variables`` is added to the method</span></span><br><span class="line"><span class="string">        call.  It contains the variables available to ansible at the time the</span></span><br><span class="line"><span class="string">        lookup is templated.  For instance::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            "{{ lookup('url', 'https://toshio.fedorapeople.org/one.txt', validate_certs=True) }}"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        would end up calling the lookup plugin named url's run method like this::</span></span><br><span class="line"><span class="string">            run(['https://toshio.fedorapeople.org/one.txt'], variables=available_variables, validate_certs=True)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Lookup plugins can be used within playbooks for looping.  When this</span></span><br><span class="line"><span class="string">        happens, the first argument is a list containing the terms.  Lookup</span></span><br><span class="line"><span class="string">        plugins can also be called from within playbooks to return their</span></span><br><span class="line"><span class="string">        values into a variable or parameter.  If the user passes a string in</span></span><br><span class="line"><span class="string">        this case, it is converted into a list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Errors encountered during execution should be returned by raising</span></span><br><span class="line"><span class="string">        AnsibleError() with a message describing the error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Any strings returned by this method that could ever contain non-ascii</span></span><br><span class="line"><span class="string">        must be converted into python's unicode type as the strings will be run</span></span><br><span class="line"><span class="string">        through jinja2 which has this requirement.  You can use::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            from ansible.module_utils.common.text.converters import to_text</span></span><br><span class="line"><span class="string">            result_string = to_text(result_string)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_file_in_search_path</span>(<span class="params">self, myvars, subdir, needle, ignore_missing=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Return a file (needle) in the task's expected search path.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'ansible_search_path'</span> <span class="keyword">in</span> myvars:</span><br><span class="line">            paths = myvars[<span class="string">'ansible_search_path'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            paths = [self.get_basedir(myvars)]</span><br><span class="line"></span><br><span class="line">        result = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = self._loader.path_dwim_relative_stack(paths, subdir, needle)</span><br><span class="line">        <span class="keyword">except</span> AnsibleFileNotFound:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ignore_missing:</span><br><span class="line">                self._display.warning(<span class="string">"Unable to find '%s' in expected paths (use -vvvvv to see paths)"</span> % needle)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deprecate_inline_kv</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> place holder to deprecate in future version allowing for long transition period</span></span><br><span class="line">        <span class="comment"># self._display.deprecated('Passing inline k=v values embedded in a string to this lookup. Use direct ,k=v, k2=v2 syntax instead.', version='2.18')</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>修改sorted_items.py最后一行返回有序列表：<code>return self._flatten(sorted(terms, key=str))</code>，并将所有的with_items修改为with_sorted_items。</p><p>创建一个剧本用于测试：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">centos1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">loop</span> <span class="string">through</span> <span class="string">list</span></span><br><span class="line">       <span class="attr">debug:</span> </span><br><span class="line">         <span class="attr">msg:</span> <span class="string">"An item: <span class="template-variable">{{item}}</span>"</span></span><br><span class="line">       <span class="attr">with_sorted_items:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line">         <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line">         <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">Z</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">A</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">M</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><p><strong>自定义filter插件实现字符串逆序+大写</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir filter_plugins &amp;&amp; cd filter_plugins</span><br><span class="line">wget https://raw.githubusercontent.com/ansible/ansible/devel/lib/ansible/plugins/filter/core.py</span><br><span class="line">mv core.py reverse_upper.py</span><br></pre></td></tr></tbody></table></figure><p>修改reverse_upper.py内容为：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># (c) 2012, Jeroen Hoekx &lt;jeroen@hoekx.be&gt;</span></span><br><span class="line"><span class="comment"># GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make coding more python3-ish</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (absolute_import, division, print_function)</span><br><span class="line">__metaclass__ = <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> ntpath</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Mapping</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random, SystemRandom, shuffle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jinja2.filters <span class="keyword">import</span> pass_environment</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.errors <span class="keyword">import</span> AnsibleError, AnsibleFilterError, AnsibleFilterTypeError</span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.six <span class="keyword">import</span> string_types, integer_types, reraise, text_type</span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.common.text.converters <span class="keyword">import</span> to_bytes, to_native, to_text</span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.common.collections <span class="keyword">import</span> is_sequence</span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.common.yaml <span class="keyword">import</span> yaml_load, yaml_load_all</span><br><span class="line"><span class="keyword">from</span> ansible.parsing.ajson <span class="keyword">import</span> AnsibleJSONEncoder</span><br><span class="line"><span class="keyword">from</span> ansible.parsing.yaml.dumper <span class="keyword">import</span> AnsibleDumper</span><br><span class="line"><span class="keyword">from</span> ansible.template <span class="keyword">import</span> recursive_check_defined</span><br><span class="line"><span class="keyword">from</span> ansible.utils.display <span class="keyword">import</span> Display</span><br><span class="line"><span class="keyword">from</span> ansible.utils.encrypt <span class="keyword">import</span> passlib_or_crypt, PASSLIB_AVAILABLE</span><br><span class="line"><span class="keyword">from</span> ansible.utils.hashing <span class="keyword">import</span> md5s, checksum_s</span><br><span class="line"><span class="keyword">from</span> ansible.utils.unicode <span class="keyword">import</span> unicode_wrap</span><br><span class="line"><span class="keyword">from</span> ansible.utils.<span class="built_in">vars</span> <span class="keyword">import</span> merge_hash</span><br><span class="line"></span><br><span class="line">display = Display()</span><br><span class="line"></span><br><span class="line">UUID_NAMESPACE_ANSIBLE = uuid.UUID(<span class="string">'361E6D51-FAEC-444A-9079-341386DA8E2E'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_upper</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="string">"""Reverse and upper string """</span></span><br><span class="line">    <span class="keyword">return</span> string[::-<span class="number">1</span>].upper()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterModule</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">''' Ansible core jinja2 filters '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filters</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="string">'reverse_upper'</span>: reverse_upper,</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>创建一个剧本用于测试：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Reverse</span> <span class="string">and</span> <span class="string">upper</span> <span class="string">ansible_distribution</span></span><br><span class="line">       <span class="attr">debug:</span> </span><br><span class="line">         <span class="attr">msg:</span> <span class="string">"Reverse and upper of ansible_distribution: <span class="template-variable">{{ ansible_distribution | reverse_upper }}</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></tbody></table></figure><h2 id="9-故障排除和最佳实践">9. 故障排除和最佳实践</h2><blockquote><p>故障排除和最佳实践</p></blockquote><h3 id="9-1-故障排除">9.1 故障排除</h3><p><strong>SSH连接错误</strong></p><p>模拟：从ubuntu-c连接ubuntu1后，修改ubuntu1主机上~/.ssh/authorized_keys的权限为777</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ssh ubuntu1</span><br><span class="line"></span><br><span class="line">chmod 777 ~/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></tbody></table></figure><p>此时，重新登录时SSH免密码登录失效，提示输入密码</p><p>解决：</p><ol><li><p>使用<code>ssh -v ubuntu1</code>查看有用信息，但还是提示输入登录ubuntu1的密码</p></li><li><p>在新窗口连接ubuntu1，输入root用户名和密码，登录ubuntu后，执行<code>/usr/sbin/sshd -d -p 1234</code></p></li><li><p>ubuntu-c主机执行<code>ssh ubuntu1 -p 1234</code>，然后<code>ssh -v ubuntu1</code>信息窗口会出现因为所有权模式身份验证拒绝错误，由此确认了问题所在。</p></li></ol><p><strong>剧本语法检查</strong></p><p>如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible-playbook xxx_playbook.yaml --syntax-check</span><br></pre></td></tr></tbody></table></figure><p><strong>每个任务都选择是否执行</strong></p><p>如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible-playbook xxx_playbook.yaml --step</span><br></pre></td></tr></tbody></table></figure><p><strong>指定开始执行的任务</strong></p><p>如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ansible-playbook xxx_playbook.yaml --start-at-task="Install python-dnspython"</span><br></pre></td></tr></tbody></table></figure><p><strong>日志路径</strong></p><p>在ansible.cfg配置log_path，指定保存执行日志的文件，如：</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="attr">inventory</span>=hosts</span><br><span class="line"><span class="attr">host_key_checking</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">forks</span>=<span class="number">6</span></span><br><span class="line"><span class="attr">log_path</span>=log.txt</span><br></pre></td></tr></tbody></table></figure><p><strong>详细程度</strong></p><p>详细程度有4级</p><ul><li>-v  1级  输出数据显示</li><li>-vv  2级  输入输出显示</li><li>-vvv  3级  获取提供的附加信息，用于连接到托管主机</li><li>-vvvv  4级  提供额外的详细信息，包括连接插件和脚本以及用户上下文</li></ul><p>如：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">ansible-playbook</span> <span class="string">-vvvv</span> <span class="string">xxx_playbook.yaml</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-2-最佳实践">9.2 最佳实践</h3><p>官方最佳实践：<a href="https://docs.ansible.com/ansible/latest/tips_tricks/index.html">https://docs.ansible.com/ansible/latest/tips_tricks/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> 自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitflow代码管理规范</title>
      <link href="/posts/34725.html"/>
      <url>/posts/34725.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-时序图">1. 时序图</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">master--&gt;&gt;master:master最新版本tag为v1.0</span><br><span class="line">master-&gt;&gt;dev: master分支Merge到dev</span><br><span class="line">dev-&gt;&gt;20230220-name-feature1: 基于dev创建20230220-name-feature1分支</span><br><span class="line">dev-&gt;&gt;20230222-name-feature2: 基于dev创建20230222-name-feature2分支</span><br><span class="line">20230220-name-feature1--&gt;&gt;20230220-name-feature1: 开发人员A开发</span><br><span class="line">20230222-name-feature2--&gt;&gt;20230222-name-feature2: 开发人员B开发</span><br><span class="line">20230220-name-feature1--&gt;&gt;dev: 20230220-name-feature1分支合并到dev分支</span><br><span class="line">dev--&gt;&gt;dev: 开发人员A修复20230220-name-feature1功能bug</span><br><span class="line">20230222-name-feature2--&gt;&gt;dev: 20230222-name-feature2分支合并到dev分支</span><br><span class="line">dev--&gt;&gt;dev: 开发人员B修复20230222-name-feature2功能bug</span><br><span class="line">dev--&gt;&gt;dev: 该阶段所有功能开发完毕，部署内网web平台</span><br><span class="line">dev--&gt;&gt;master: 测试完毕后，dev分支合并到master</span><br><span class="line">master--&gt;&gt;master: 打tag v1.1，部署外网web平台</span><br><span class="line">master-&gt;&gt;hotfix: 基于master分支v1.1创建hotfix分支</span><br><span class="line">hotfix--&gt;&gt;hotfix: 完成bug修复</span><br><span class="line">hotfix--&gt;&gt;dev: hotfix分支合并到dev</span><br><span class="line">dev--&gt;&gt;dev: 重新部署内网web平台</span><br><span class="line">hotfix--&gt;&gt;master: hotfix分支合并到master</span><br><span class="line">master--&gt;&gt;master: 打tag v1.1.1，重新部署外网web平台</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">时序图</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/34725/image-20230615183745826.png" alt=""></td></tr></tbody></table><h2 id="2-分支结构">2. 分支结构</h2><table><thead><tr><th>分支</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>master</td><td>代码的主分支，存放稳定代码的保护分支，不允许开发人员随意合并，用于发布外网web平台，通过tag区分版本</td><td></td></tr><tr><td>dev</td><td>日常开发分支，达到稳定状态可以用于发布内网web平台，测试后可以被合并入master分支</td><td></td></tr><tr><td>20230203-name-feature</td><td>新功能分支，分支名形式为日期+开发人员姓名拼音+功能简单英文描述</td><td>20230203-zouxiongbin-QRcode</td></tr><tr><td>hotfix</td><td>bug修复分支</td><td></td></tr></tbody></table><h2 id="3-开发流程">3. 开发流程</h2><ol><li>管理员基于master稳定分支先打tag ，如v1.0</li><li>管理员从master分支合并到dev分支</li><li>开发人员A基于dev分支创建20230220-name-feature1分支</li><li>开发人员B基于dev分支创建20230222-name-feature2分支</li><li>20230220-name-feature1分支开发完毕，开发人员A自测</li><li>本地自测完毕后，开发人员A将20230220-name-feature1分支合并到dev分支</li><li>20230222-name-feature2分支开发完毕，开发人员B自测</li><li>本地自测完毕后，开发人员B将20230222-name-feature2分支合并到dev分支</li><li>管理员按计划使用dev代码部署内网web平台，开始系统测试</li><li>全部测试完成后，管理员将dev分支代码合并到master分支，master分支打tag，如v1.1，部署外网web平台</li><li>如果出现紧急bug，管理员从master新建一个hotfix分支，开发人员修补的代码需要提到该分支</li><li>测试通过后，管理员将hotfix分支合并到master分支和dev分支，master分支打tag，如v1.1.1，重新部署内网web平台和外网web平台</li></ol><h2 id="4-提交信息规范建议">4. 提交信息规范建议</h2><p>代码需要提交到对应分支，提交前请先执行<code>git pull origin dev</code></p><p><code>git commit -m "[type]：message"</code></p><p><strong>type类别说明：</strong></p><ul><li><p><strong>feat</strong>：添加新功能</p></li><li><p><strong>fix</strong>：修复bug</p></li><li><p><strong>perf</strong>：优化相关，比如提升性能、体验</p></li><li><p>docs：文档</p></li><li><p>style：格式，不影响代码运行的变动</p></li><li><p>test：增加测试用例</p></li><li><p>chore：构建过程或辅助工具的变动</p></li><li><p>revert：回滚到上一个版本</p></li><li><p>merge：代码合并</p></li></ul><p>message必须描述清楚主要变更内容，也可直接使用tapd任务单链接，如：git commit -m “[feat]:【【后台】1.4-后台封榜、后台解封】<a href="https://www.tapd.cn/30292197/prong/stories/view/1130292197001114925">https://www.tapd.cn/30292197/prong/stories/view/1130292197001114925</a>”</p><h2 id="5-Git常用指令">5. Git常用指令</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个git代码库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line">git clone [url]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前git配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置提交代码时的用户名字</span></span><br><span class="line">git config user.name "[name]"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置提交代码时的用户名字</span></span><br><span class="line">git config user.email "[email address]"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有本地和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取远程dev分支最新代码</span></span><br><span class="line">git pull origin dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将代码提交到远程branch分支</span></span><br><span class="line">git push origin [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将所有未提交的修改保存到堆栈中</span></span><br><span class="line">git stash save "desc"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看堆栈中保存的所有stash</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用堆栈中指定stash内容到当前目录</span></span><br><span class="line">git stash apply stash@{xx}</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看堆栈中最新保存的stash和当前目录的差异</span></span><br><span class="line">git stash show stash@{xx} -p</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gitflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitflow </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps从入门到实践</title>
      <link href="/posts/44686.html"/>
      <url>/posts/44686.html</url>
      
        <content type="html"><![CDATA[<h1>DevOps</h1><h3 id="一、DevOps介绍">一、DevOps介绍</h3><p>软件开发最开始是由两个团队组成：</p><ul><li>开发计划由<a href="">开发团队</a>从头开始设计和整体系统的构建。需要系统不停的迭代更新。</li><li><a href="">运维团队</a>将开发团队的Code进行测试后部署上线。希望系统稳定安全运行。</li></ul><p>这看似两个目标不同的团队需要协同完成一个软件的开发。</p><p>在开发团队指定好计划并完成coding后，需要提供到运维团队。</p><p>运维团队向开发团队反馈需要修复的BUG以及一些需要返工的任务。</p><p>这时开发团队需要经常等待运维团队的反馈。这无疑延长了事件并推迟了整个软件开发的周期。</p><p>会有一种方式，在开发团队等待的时候，让开发团队转移到下一个项目中。等待运维团队为之前的代码提供反馈。</p><p>可是这样就意味着一个完整的项目需要一个更长的周期才可以开发出最终代码。</p><hr><p>基于现在的互联网现状，更推崇敏捷式开发，这样就导致项目的迭代速度更快，但是由于开发团队与运维团队的沟通问题，会导致新版本上线的时间成本很高。这又违背的敏捷式开发的最初的目的。</p><p>那么如果让开发团队和运维团队整合到成一个团队，协同应对一套软件呢？这就被称为<a href="">DevOps</a>。</p><p><a href="">DevOps</a>，字面意思是Development &amp;Operations的缩写，也就是开发&amp;运维。</p><p>虽然字面意思只涉及到了开发团队和运维团队，其实QA测试团队也是参与其中的。</p><p>网上可以查看到<a href="">DevOps</a>的符号类似于一个无穷大的符号</p><table><thead><tr><th style="text-align:center"><a href="">DevOps</a></th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124130409521.png" alt=""></td></tr></tbody></table><p>这表明<a href="">DevOps</a>是一个不断提高效率并且持续不断工作的过程</p><p><a href="">DevOps</a>的定义：是一组过程、方法与系统的统称，用于促进开发、运维和测试部门之间的沟通、协作与整合。</p><p><a href="">DevOps</a>的方式可以让公司能够更快地应对更新和市场发展变化，开发可以快速交付，部署也更加稳定。</p><p>核心就在于<a href="">简化Dev和Ops团队之间的流程，使整体软件开发过程更快速。</a></p><p>整体的软件开发流程包括：</p><ul><li>PLAN：开发团队根据客户的目标制定开发计划</li><li>CODE：根据PLAN开始编码过程，需要将不同版本的代码存储在一个库中。</li><li>BUILD：编码完成后，需要将代码构建并且运行。</li><li>TEST：成功构建项目后，需要测试代码是否存在BUG或错误。</li><li>DEPLOY：代码经过手动测试和自动化测试后，认定代码已经准备好部署并且交给运维团队。</li><li>OPERATE：运维团队将代码部署到生产环境中。</li><li>MONITOR：项目部署上线后，需要持续的监控产品。</li><li>INTEGRATE：然后将监控阶段收到的反馈发送回PLAN阶段，整体反复的流程就是<a href="">DevOps</a>的核心，即持续集成、持续部署。</li></ul><p>为了保证整体流程可以高效的完成，各个阶段都有比较常见的工具，如下图：</p><table><thead><tr><th style="text-align:center">软件开发过程&amp;涉及工具</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/2021-11-23_175935.png" alt="2021-11-23_175935"></td></tr></tbody></table><p>最终可以给<a href="">DevOps</a>下一个定义：<a href="">DevOps 强调的是高效组织团队之间如何通过自动化的工具协作和沟通来完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。</a></p><p>自动化的工具协作和沟通来完成软件的生命周期管理</p><h3 id="二、Code阶段工具">二、Code阶段工具</h3><p>在code阶段，我们需要将不同版本的代码存储到一个仓库中，常见的版本控制工具就是SVN或者Git，这里我们采用Git作为版本控制工具，GitLab作为远程仓库。</p><h4 id="2-1-Git安装">2.1 Git安装</h4><p><a href="https://git-scm.com/%EF%BC%88%E5%82%BB%E7%93%9C%E5%BC%8F%E5%AE%89%E8%A3%85%EF%BC%89">https://git-scm.com/（傻瓜式安装）</a></p><h4 id="2-2-GitLab安装">2.2 GitLab安装</h4><p>单独准备服务器，采用Docker安装</p><ul><li><p>查看GitLab镜像</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker search gitlab</span><br></pre></td></tr></tbody></table></figure></li><li><p>拉取GitLab镜像</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></tbody></table></figure></li><li><p>准备docker-compose.yml文件</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'gitlab/gitlab-ce:latest'</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        external_url 'http://192.168.11.11:8929'</span></span><br><span class="line"><span class="string">        gitlab_rails['gitlab_shell_ssh_port'] = 2224</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'8929:8929'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'2224:2224'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'./config:/etc/gitlab'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'./logs:/var/log/gitlab'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'./data:/var/opt/gitlab'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>启动容器（需要稍等一小会……）</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li><li><p>访问GitLab首页</p><table><thead><tr><th style="text-align:center">首页</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124182140596.png" alt=""></td></tr></tbody></table></li><li><p>查看root用户初始密码</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab cat /etc/gitlab/initial_root_password</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">初始密码</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124182921234.png" alt=""></td></tr></tbody></table></li><li><p>登录root用户</p><table><thead><tr><th style="text-align:center">登录成功后跳转页面</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124183003858.png" alt=""></td></tr></tbody></table></li><li><p>第一次登录后需要修改密码</p><table><thead><tr><th style="text-align:center">修改密码</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124193444561.png" alt=""></td></tr></tbody></table></li></ul><p>搞定后，即可像Gitee、GitHub一样使用。</p><h3 id="三、Build阶段工具">三、Build阶段工具</h3><p>构建Java项目的工具一般有两种选择，一个是Maven，一个是Gradle。</p><p>这里我们选择Maven作为项目的编译工具。</p><p>具体安装Maven流程不做阐述，但是需要确保配置好Maven仓库私服以及JDK编译版本。</p><h3 id="四、Operate阶段工具">四、Operate阶段工具</h3><p>部署过程，会采用Docker进行部署，暂时只安装Docker即可，后续还需安装Kubenetes</p><h4 id="4-1-Docker安装">4.1 Docker安装</h4><ul><li><p>准备测试环境&amp;生产环境</p></li><li><p>下载Docker依赖组件</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置下载Docker的镜像源为阿里云</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装Docker服务</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装成功后，启动Docker并设置开机自启</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 设置开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></tbody></table></figure></li><li><p>测试安装成功</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124200317795.png" alt=""></td></tr></tbody></table></li></ul><h4 id="4-2-Docker-Compose安装">4.2 Docker-Compose安装</h4><ul><li><p>下载Docker/Compose：<a href="https://github.com/docker/compose">https://github.com/docker/compose</a></p></li><li><p>将下载好的<a href="">docker-compose-Linux-x86_64</a>文件移动到Linux操作系统：……</p></li><li><p>设置<a href="">docker-compose-Linux-x86_64</a>文件权限，并移动到$PATH目录中</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置文件权限</span></span><br><span class="line">chmod a+x docker-compose-Linux-x86_64</span><br><span class="line"><span class="comment"># 移动到/usr/bin目录下，并重命名为docker-compose</span></span><br><span class="line">mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</span><br></pre></td></tr></tbody></table></figure></li><li><p>测试安装成功</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124200658107.png" alt=""></td></tr></tbody></table></li></ul><h3 id="五、Integrate工具">五、Integrate工具</h3><p>持续集成、持续部署的工具很多，其中Jenkins是一个开源的持续集成平台。</p><p>Jenkins涉及到将编写完毕的代码发布到测试环境和生产环境的任务，并且还涉及到了构建项目等任务。</p><p>Jenkins需要大量的插件保证工作，安装成本较高，下面会基于Docker搭建Jenkins。</p><h4 id="5-1-Jenkins介绍">5.1 Jenkins介绍</h4><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具</p><p>Jenkins应用广泛，大多数互联网公司都采用Jenkins配合GitLab、Docker、K8s作为实现<a href="">DevOps</a>的核心工具。</p><p>Jenkins最强大的就在于插件，Jenkins官方提供了大量的插件库，来自动化CI/CD过程中的各种琐碎功能。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125141950900.png" alt=""></td><td style="text-align:center"><img src="/posts/44686/image-20211125141701495.png" alt=""></td></tr></tbody></table><p>Jenkins最主要的工作就是将GitLab上可以构建的工程代码拉取并且进行构建，再根据流程可以选择发布到测试环境或是生产环境。</p><p>一般是GitLab上的代码经过大量的测试后，确定发行版本，再发布到生产环境。</p><p>CI/CD可以理解为：</p><ul><li>CI过程即是通过Jenkins将代码拉取、构建、制作镜像交给测试人员测试。<ul><li>持续集成：让软件代码可以持续的集成到主干上，并自动构建和测试。</li></ul></li><li>CD过程即是通过Jenkins将打好标签的发行版本代码拉取、构建、制作镜像交给运维人员部署。<ul><li>持续交付：让经过持续集成的代码可以进行手动部署。</li><li>持续部署：让可以持续交付的代码随时随地的自动化部署。</li></ul></li></ul><table><thead><tr><th style="text-align:center">CI、CD</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125154112097.png" alt=""></td></tr></tbody></table><h4 id="5-2-Jenkins安装">5.2 Jenkins安装</h4><ul><li><p>拉取Jenkins镜像</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写docker-compose.yml</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/:/var/jenkins_home/</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>首次启动会因为数据卷data目录没有权限导致启动失败，设置data目录写权限</p><table><thead><tr><th style="text-align:center">错误日志</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124202610243.png" alt=""></td></tr></tbody></table><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">chmod -R a+w data/</span><br></pre></td></tr></tbody></table></figure></li><li><p>重新启动Jenkins容器后，由于Jenkins需要下载大量内容，但是由于默认下载地址下载速度较慢，需要重新设置下载地址为国内镜像站</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改数据卷中的hudson.model.UpdateCenter.xml文件</span></span><br><span class="line">&lt;?xml version=<span class="string">'1.1'</span> encoding=<span class="string">'UTF-8'</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;https://updates.jenkins.io/update-center.json&lt;/url&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br><span class="line"><span class="comment"># 将下载地址替换为http://mirror.esuni.jp/jenkins/updates/update-center.json</span></span><br><span class="line">&lt;?xml version=<span class="string">'1.1'</span> encoding=<span class="string">'UTF-8'</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;http://mirror.esuni.jp/jenkins/updates/update-center.json&lt;/url&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br><span class="line"><span class="comment"># 清华大学的插件源也可以https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>再次重启Jenkins容器，访问Jenkins（需要稍微等会）</p><table><thead><tr><th style="text-align:center">Jenkins首页</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124204517433.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211124203336300.png" alt=""></td></tr></tbody></table></li><li><p>查看密码登录Jenkins，并登录下载插件</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">登录并下载插件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124205050484.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211124205513465.png" alt=""></td></tr></tbody></table></li><li><p>选择需要安装的插件</p><table><thead><tr><th style="text-align:center">选择需要安装的插件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211124205854418.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211124205858730.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211124205917317.png" alt=""></td></tr></tbody></table></li><li><p>下载完毕设置信息进入首页（可能会出现下载失败的插件）</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/44686/image-20211124211635550.png" alt=""></td></tr><tr><td><img src="/posts/44686/image-20211124211700999.png" alt=""></td></tr><tr><td><img src="/posts/44686/image-20211124211720836.png" alt=""></td></tr></tbody></table></li></ul><h4 id="5-3-Jenkins入门配置">5.3 Jenkins入门配置</h4><p>由于Jenkins需要从Git拉取代码、需要本地构建、甚至需要直接发布自定义镜像到Docker仓库，所以Jenkins需要配置大量内容。</p><h5 id="5-3-1-构建任务">5.3.1 构建任务</h5><p>准备好GitLab仓库中的项目，并且通过Jenkins配置项目的实现当前项目的<a href="">DevOps</a>基本流程。</p><ul><li><p>构建Maven工程发布到GitLab（Gitee、Github均可）</p><table><thead><tr><th style="text-align:center">GitLab查看项目</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125195818670.png" alt=""></td></tr></tbody></table></li><li><p>Jenkins点击左侧导航新建任务</p><table><thead><tr><th style="text-align:center">新建任务</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125163541645.png" alt=""></td></tr></tbody></table></li><li><p>选择自由风格构建任务</p><table><thead><tr><th style="text-align:center">构建任务</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125170350811.png" alt=""></td></tr></tbody></table></li></ul><h5 id="5-3-1-配置源码拉取地址">5.3.1 配置源码拉取地址</h5><p>Jenkins需要将Git上存放的源码存储到Jenkins服务所在磁盘的本地</p><ul><li><p>配置任务源码拉取的地址</p><table><thead><tr><th style="text-align:center">源码管理</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125170418337.png" alt=""></td></tr></tbody></table></li><li><p>Jenkins立即构建</p><table><thead><tr><th style="text-align:center">点击任务test中的立即构建</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125200218093.png" alt=""></td></tr></tbody></table></li><li><p>查看构建工程的日志，点击上述③的任务条即可</p><table><thead><tr><th style="text-align:center">查看任务拉取Git源码日志</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125201701443.png" alt=""></td></tr></tbody></table><p>可以看到源码已经拉取带Jenkins本地，可以根据第三行日志信息，查看Jenkins本地拉取到的源码。</p></li><li><p>查看Jenkins容器中<a href="">/var/jenkins_home/workspace/test</a>的源码</p><table><thead><tr><th style="text-align:center">源码存放位置</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125201919108.png" alt=""></td></tr></tbody></table></li></ul><h5 id="5-3-2-配置Maven构建代码">5.3.2 配置Maven构建代码</h5><p>代码拉取到Jenkins本地后，需要在Jenkins中对代码进行构建，这里需要Maven的环境，而Maven需要Java的环境，接下来需要在Jenkins中安装JDK和Maven，并且配置到Jenkins服务。</p><ul><li><p>准备JDK、Maven压缩包通过数据卷映射到Jenkins容器内部</p><table><thead><tr><th style="text-align:center">数据卷存放位置</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125203757232.png" alt=""></td></tr></tbody></table></li><li><p>解压压缩包，并配置Maven的settings.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云镜像地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JDK1.8编译插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Jenkins配置JDK&amp;Maven并保存</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/44686/image-20211125204811759.png" alt=""></td></tr><tr><td><img src="/posts/44686/image-20211125204818869.png" alt=""></td></tr></tbody></table></li><li><p>配置Jenkins任务构建代码</p><table><thead><tr><th style="text-align:center">配置Maven构建代码</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125205027013.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211125205020738.png" alt=""></td></tr></tbody></table></li><li><p>立即构建测试，查看target下的jar包</p><table><thead><tr><th style="text-align:center">构建源码</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125205240208.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211125205725948.png" alt=""></td></tr></tbody></table></li></ul><h5 id="5-3-3-配置Publish发布-远程操作">5.3.3 配置Publish发布&amp;远程操作</h5><p>jar包构建好之后，就可以根据情况发布到测试或生产环境，这里需要用到之前下载好的插件Publish Over SSH。</p><ul><li><p>配置Publish Over SSH连接测试、生产环境</p><table><thead><tr><th style="text-align:center">Publish Over SSH配置</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125210148202.png" alt=""></td></tr></tbody></table></li><li><p>配置任务的构建后操作，发布jar包到目标服务</p><table><thead><tr><th style="text-align:center">配置构建后操作</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125205027013.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211125210424346.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211125210626631.png" alt=""></td></tr></tbody></table></li><li><p>立即构建任务，并去目标服务查看</p><table><thead><tr><th style="text-align:center">立即构建</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211125210755556.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211125210826057.png" alt=""></td></tr></tbody></table></li></ul><h3 id="六、CI、CD入门操作">六、CI、CD入门操作</h3><p>基于Jenkins拉取GitLab的SpringBoot代码进行构建发布到测试环境实现持续集成</p><p>基于Jenkins拉取GitLab指定发行版本的SpringBoot代码进行构建发布到生产环境实现CD实现持续部署</p><h4 id="6-1-持续集成">6.1 持续集成</h4><p>为了让程序代码可以自动推送到测试环境基于Docker服务运行，需要添加Docker配置和脚本文件让程序可以在集成到主干的同时运行起来。</p><ul><li><p>添加Dockerfile文件</p><table><thead><tr><th style="text-align:center">构建自定义镜像</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126161304485.png" alt=""></td></tr></tbody></table></li><li><p>添加docker-compose.yml文件</p><table><thead><tr><th style="text-align:center">加载自定义镜像启动容器</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126161331991.png" alt=""></td></tr></tbody></table></li><li><p>追加Jenkins构建后操作脚本命令</p><table><thead><tr><th style="text-align:center">构建后发布并执行脚本命令</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126161408514.png" alt=""></td></tr></tbody></table></li><li><p>发布到GitLab后由Jenkins立即构建并托送到目标服务器</p><table><thead><tr><th style="text-align:center">构建日志</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126161448527.png" alt=""></td></tr></tbody></table></li><li><p>测试部署到目标服务器程序</p><table><thead><tr><th style="text-align:center">查看目标服务器并测试接口</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126161504715.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211126161509411.png" alt=""></td></tr></tbody></table></li></ul><h4 id="6-2-持续交付、部署">6.2 持续交付、部署</h4><p>程序代码在经过多次集成操作到达最终可以交付，持续交付整体流程和持续集成类似，不过需要选取指定的发行版本</p><ul><li><p>下载Git Parameter插件</p><table><thead><tr><th style="text-align:center">下载Git Parameter</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126165209057.png" alt=""></td></tr></tbody></table></li><li><p>设置项目参数化构建</p><table><thead><tr><th style="text-align:center">基于Git标签构建</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126165444124.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211126172828266.png" alt=""></td></tr></tbody></table></li><li><p>给项目添加tag版本</p><table><thead><tr><th style="text-align:center">添加tag版本</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126165639286.png" alt=""></td></tr></tbody></table></li><li><p>任务构建时，采用Shell方式构建，拉取指定tag版本代码</p><table><thead><tr><th style="text-align:center">切换指定标签并构建项目</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126174715028.png" alt=""></td></tr></tbody></table></li><li><p>基于Parameter构建任务，任务发布到目标服务器</p><table><thead><tr><th style="text-align:center">构建任务</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211126174159487.png" alt=""></td></tr></tbody></table></li></ul><h3 id="七、集成Sonar-Qube">七、集成Sonar Qube</h3><h4 id="7-1-Sonar-Qube介绍">7.1 Sonar Qube介绍</h4><p>Sonar Qube是一个开源的代码分析平台，支持Java、Python、PHP、JavaScript、CSS等25种以上的语言，可以检测出重复代码、代码漏洞、代码规范和安全性漏洞的问题。</p><p>Sonar Qube可以与多种软件整合进行代码扫描，比如Maven，Gradle，Git，Jenkins等，并且会将代码检测结果推送回Sonar Qube并且在系统提供的UI界面上显示出来</p><table><thead><tr><th style="text-align:center">Sonar Qube的UI界面</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129190039986.png" alt=""></td></tr></tbody></table><h4 id="7-2-Sonar-Qube环境搭建">7.2 Sonar Qube环境搭建</h4><h5 id="7-2-1-Sonar-Qube安装">7.2.1 Sonar Qube安装</h5><p>Sonar Qube在7.9版本中已经放弃了对MySQL的支持，并且建议在商业环境中采用PostgreSQL，那么安装Sonar Qube时需要依赖PostgreSQL。</p><p>并且这里会安装Sonar Qube的长期支持版本<a href="">8.9</a></p><ul><li><p>拉取镜像</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker pull sonarqube:8.9.3-community</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写docker-compoe.yml</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarnet</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">sonarqube:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube:8.9.3-community</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9000:9000"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarnet</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_URL:</span> <span class="string">jdbc:postgresql://db:5432/sonar</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_USERNAME:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">sonarnet:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>启动容器</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li><li><p>需要设置sysctl.conf文件信息</p><table><thead><tr><th style="text-align:center">设置vm.max_map_count</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211207145215817.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211207145342350.png" alt=""></td></tr></tbody></table><p>并执行命令刷新</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></tbody></table></figure></li><li><p>重新启动需要一定时间启动，可以可以查看容器日志，看到如下内容代表启动成功</p><table><thead><tr><th style="text-align:center">容器日志</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129191426344.png" alt=""></td></tr></tbody></table></li><li><p>访问Sonar Qube首页</p><table><thead><tr><th style="text-align:center">登录</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129191537050.png" alt=""></td></tr></tbody></table></li><li><p>还需要重新设置一次密码</p><table><thead><tr><th style="text-align:center">重新设置密码</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129193824428.png" alt=""></td></tr></tbody></table></li><li><p>Sonar Qube首页</p><table><thead><tr><th style="text-align:center">Sonar Qube首页</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129194148239.png" alt=""></td></tr></tbody></table></li></ul><h5 id="7-2-2-安装中文插件">7.2.2 安装中文插件</h5><table><thead><tr><th style="text-align:center">安装中文插件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129194621820.png" alt=""></td></tr></tbody></table><p>安装成功后需要重启，安装失败重新点击install重装即可。</p><p>安装成功后，会查看到重启按钮，点击即可</p><table><thead><tr><th style="text-align:center">重启按钮</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129194748765.png" alt=""></td></tr></tbody></table><p>重启后查看效果</p><table><thead><tr><th style="text-align:center">首页效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129194931944.png" alt=""></td></tr></tbody></table><h4 id="7-3-Sonar-Qube基本使用">7.3 Sonar Qube基本使用</h4><p>Sonar Qube的使用方式很多，Maven可以整合，也可以采用sonar-scanner的方式，再查看Sonar Qube的检测效果</p><h5 id="7-3-1-Maven实现代码检测">7.3.1 Maven实现代码检测</h5><ul><li><p>修改Maven的settings.xml文件配置Sonar Qube信息</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sonar.login</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">sonar.login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sonar.password</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">sonar.password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sonar.host.url</span>&gt;</span>http://192.168.11.11:9000<span class="tag">&lt;/<span class="name">sonar.host.url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在代码位置执行命令：mvn sonar:sonar</p><table><thead><tr><th style="text-align:center">执行代码检测</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129195430146.png" alt=""></td></tr></tbody></table></li><li><p>查看Sonar Qube界面检测结果</p><table><thead><tr><th style="text-align:center">Sonar Qube检测结果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129195503762.png" alt=""></td></tr></tbody></table></li></ul><h5 id="7-3-2-Sonar-scanner实现代码检测">7.3.2 Sonar-scanner实现代码检测</h5><ul><li><p>下载Sonar-scanner：<a href="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/">https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/</a></p><p>下载4.6.x版本即可，要求Linux版本</p></li><li><p>解压并配置sonar服务端信息</p><ul><li><p>由于是zip压缩包，需要安装unzip解压插件</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install unzip</span><br></pre></td></tr></tbody></table></figure></li><li><p>解压压缩包</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">unzip sonar-scanner-cli/sonar-scanner-cli-4.6.0.2311-linux.zip</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置sonarQube服务端地址，修改conf下的sonar-scanner.properties</p><table><thead><tr><th style="text-align:center">配置服务端信息</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130140043382.png" alt=""></td></tr></tbody></table></li></ul></li><li><p>执行命令检测代码</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在项目所在目录执行以下命令</span></span><br><span class="line">~/sonar-scanner/bin/sonar-scanner -Dsonar.sources=./ -Dsonar.projectname=demo -Dsonar.projectKey=java -Dsonar.java.binaries=target/</span><br></pre></td></tr></tbody></table></figure><p><a href="">Ps：主要查看我的sonar-scanner执行命令的位置</a></p><table><thead><tr><th style="text-align:center">查看日志信息</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130141303457.png" alt=""></td></tr></tbody></table></li><li><p>查看SonarQube界面检测结果</p><table><thead><tr><th style="text-align:center">检测结果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130144608025.png" alt=""></td></tr></tbody></table></li></ul><h4 id="7-4-Jenkins集成Sonar-Qube">7.4 Jenkins集成Sonar Qube</h4><p>Jenkins继承Sonar Qube实现代码扫描需要先下载整合插件</p><h5 id="7-4-1-Jenkins安装插件">7.4.1 Jenkins安装插件</h5><table><thead><tr><th style="text-align:center">下载Sonar Qube插件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129201625561.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211129201607240.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211129202147390.png" alt=""></td></tr></tbody></table><h5 id="7-4-2-Jenkins配置Sonar-Qube">7.4.2 Jenkins配置Sonar Qube</h5><ul><li><p>开启Sonar Qube权限验证</p><table><thead><tr><th style="text-align:center">开启Sonar Qube权限校验</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130144850186.png" alt=""></td></tr></tbody></table></li><li><p>获取Sonar Qube的令牌</p><table><thead><tr><th style="text-align:center">获取令牌</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211129203102334.png" alt=""></td></tr></tbody></table></li><li><p>配置Jenkins的Sonar Qube信息</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="/posts/44686/image-20211129203235019.png" alt=""></td></tr><tr><td><img src="/posts/44686/image-20211129203342171.png" alt=""></td></tr><tr><td><img src="/posts/44686/image-20211129203457604.png" alt=""></td></tr></tbody></table></li></ul><h5 id="7-4-3-配置Sonar-scanner">7.4.3 配置Sonar-scanner</h5><ul><li><p>将Sonar-scaner添加到Jenkins数据卷中并配置全局配置</p><table><thead><tr><th style="text-align:center">配置Sonar-scanner</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130153628925.png" alt=""></td></tr></tbody></table></li><li><p>配置任务的Sonar-scanner</p><table><thead><tr><th style="text-align:center">配置任务的Sonar-scanner</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130155849143.png" alt=""></td></tr></tbody></table></li></ul><h5 id="7-4-4-构建任务">7.4.4 构建任务</h5><table><thead><tr><th style="text-align:center">构建任务</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130160017465.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211130160047648.png" alt=""></td></tr></tbody></table><h3 id="八、集成Harbor">八、集成Harbor</h3><h4 id="8-1-Harbor介绍">8.1 Harbor介绍</h4><p>前面在部署项目时，我们主要采用Jenkins推送jar包到指定服务器，再通过脚本命令让目标服务器对当前jar进行部署，这种方式在项目较多时，每个目标服务器都需要将jar包制作成自定义镜像再通过docker进行启动，重复操作比较多，会降低项目部署时间。</p><p>我们可以通过Harbor作为私有的Docker镜像仓库。让Jenkins统一将项目打包并制作成Docker镜像发布到Harbor仓库中，只需要通知目标服务，让目标服务统一去Harbor仓库上拉取镜像并在本地部署即可。</p><p>Docker官方提供了Registry镜像仓库，但是Registry的功能相对简陋。Harbor是VMware公司提供的一款镜像仓库，提供了权限控制、分布式发布、强大的安全扫描与审查机制等功能</p><h4 id="8-2-Harbor安装">8.2 Harbor安装</h4><p>这里采用原生的方式安装Harbor。</p><ul><li><p>下载Harbor安装包：<a href="https://github.com/goharbor/harbor/releases/download/v2.3.4/harbor-offline-installer-v2.3.4.tgz">https://github.com/goharbor/harbor/releases/download/v2.3.4/harbor-offline-installer-v2.3.4.tgz</a></p></li><li><p>拖拽到Linux并解压：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v2.3.4.tgz -C /usr/local/</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改Harbor配置文件：</p><ul><li><p>首先复制一份harbor.yml配置</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">cp harbor.yml.tmpl harbor.yml</span><br></pre></td></tr></tbody></table></figure></li><li><p>编辑harbor.yml配置文件</p><table><thead><tr><th style="text-align:center">配置Harbor文件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130215555218.png" alt=""></td></tr></tbody></table></li></ul></li><li><p>启动Harbor</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">查看日志</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130215941857.png" alt=""></td></tr></tbody></table></li><li><p>登录Harbor</p><table><thead><tr><th style="text-align:center">登录Harbor</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130220028840.png" alt=""></td></tr></tbody></table></li><li><p>首页信息</p><table><thead><tr><th style="text-align:center">首页信息</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211130220111602.png" alt=""></td></tr></tbody></table></li></ul><h4 id="8-3-Harbor使用方式">8.3 Harbor使用方式</h4><p>Harbor作为镜像仓库，主要的交互方式就是将镜像上传到Harbor上，以及从Harbor上下载指定镜像</p><p>在传输镜像前，可以先使用Harbor提供的权限管理，将项目设置为私有项目，并对不同用户设置不同角色，从而更方便管理镜像。</p><h5 id="8-3-1-添加用户构建项目">8.3.1 添加用户构建项目</h5><ul><li><p>创建用户</p><table><thead><tr><th style="text-align:center">创建用户</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211201213427157.png" alt=""></td></tr></tbody></table></li><li><p>构建项目（设置为私有）</p><table><thead><tr><th style="text-align:center">构建项目</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211201213751780.png" alt=""></td></tr></tbody></table></li><li><p>给项目追加用户</p><table><thead><tr><th style="text-align:center">追加用户管理</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211201213832458.png" alt=""></td></tr></tbody></table></li><li><p>切换测试用户</p><table><thead><tr><th style="text-align:center">切换测试用户</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211201214008303.png" alt=""></td></tr></tbody></table></li></ul><h5 id="8-3-2-发布镜像到Harbor">8.3.2 发布镜像到Harbor</h5><ul><li><p>修改镜像名称</p><p>名称要求：<a href="">harbor地址/项目名/镜像名:版本</a></p><table><thead><tr><th>修改镜像名称</th></tr></thead><tbody><tr><td><img src="/posts/44686/image-20211201221040200.png" alt=""></td></tr></tbody></table></li><li><p>修改daemon.json，支持Docker仓库，并重启Docker</p><table><thead><tr><th style="text-align:center">修改daemon.json，支持Docker仓库</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211201215931237.png" alt=""></td></tr></tbody></table></li><li><p>设置登录仓库信息</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码 Harbor地址</span><br></pre></td></tr></tbody></table></figure></li><li><p>推送镜像到Harbor</p><table><thead><tr><th style="text-align:center">推送镜像到Harbor</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211201221225196.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211201221300055.png" alt=""></td></tr></tbody></table></li></ul><h5 id="8-3-3-从Harbor拉取镜像">8.3.3 从Harbor拉取镜像</h5><p>跟传统方式一样，不过需要先配置<a href="">/etc/docker/daemon.json</a>文件</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">        <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://pee6w651.mirror.aliyuncs.com"</span>],</span><br><span class="line">        <span class="attr">"insecure-registries"</span>: [<span class="string">"192.168.11.11:80"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">拉取镜像</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211201222450091.png" alt=""></td></tr></tbody></table><h5 id="8-3-4-Jenkins容器使用宿主机Docker">8.3.4 Jenkins容器使用宿主机Docker</h5><p>构建镜像和发布镜像到harbor都需要使用到docker命令。而在Jenkins容器内部安装Docker官方推荐直接采用宿主机带的Docker即可。</p><p>设置Jenkins容器使用宿主机Docker</p><ul><li><p>设置宿主机docker.sock权限：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo chown root:root /var/run/docker.sock</span><br><span class="line">sudo chmod o+rw /var/run/docker.sock</span><br></pre></td></tr></tbody></table></figure></li><li><p>添加数据卷</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/:/var/jenkins_home/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/bin/docker:/usr/bin/docker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/docker/daemon.json:/etc/docker/daemon.json</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="8-3-5-添加构建操作">8.3.5 添加构建操作</h5><table><thead><tr><th style="text-align:center">制作自定义镜像</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211229155834500.png" alt=""></td></tr></tbody></table><h5 id="8-3-6-编写部署脚本">8.3.6 编写部署脚本</h5><p>部署项目需要通过Publish Over SSH插件，让目标服务器执行命令。为了方便一次性实现拉取镜像和启动的命令，推荐采用脚本文件的方式。</p><p>添加脚本文件到目标服务器，再通过Publish Over SSH插件让目标服务器执行脚本即可。</p><ul><li><p>编写脚本文件，添加到目标服务器</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">harbor_url=<span class="variable">$1</span></span><br><span class="line">harbor_project_name=<span class="variable">$2</span></span><br><span class="line">project_name=<span class="variable">$3</span></span><br><span class="line">tag=<span class="variable">$4</span></span><br><span class="line">port=<span class="variable">$5</span></span><br><span class="line"></span><br><span class="line">imageName=<span class="variable">$harbor_url</span>/<span class="variable">$harbor_project_name</span>/<span class="variable">$project_name</span>:<span class="variable">$tag</span></span><br><span class="line"></span><br><span class="line">containerId=`docker ps -a | grep <span class="variable">${project_name}</span> | awk <span class="string">'{print $1}'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$containerId</span>"</span> != <span class="string">""</span> ] ; <span class="keyword">then</span></span><br><span class="line">    docker stop <span class="variable">$containerId</span></span><br><span class="line">    docker rm <span class="variable">$containerId</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Delete Container Success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">imageId=`docker images | grep <span class="variable">${project_name}</span> | awk <span class="string">'{print $3}'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$imageId</span>"</span> != <span class="string">""</span> ] ; <span class="keyword">then</span></span><br><span class="line">    docker rmi -f <span class="variable">$imageId</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Delete Image Success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker login -u DevOps -p P@ssw0rd <span class="variable">$harbor_url</span></span><br><span class="line"></span><br><span class="line">docker pull <span class="variable">$imageName</span></span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="variable">$port</span>:<span class="variable">$port</span> --name <span class="variable">$project_name</span> <span class="variable">$imageName</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Start Container Success"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$project_name</span></span><br></pre></td></tr></tbody></table></figure><p>并设置权限为可执行</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">chmod a+x deploy.sh</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">如图</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211203192047357.png" alt=""></td></tr></tbody></table></li></ul><h5 id="8-3-7-配置构建后操作">8.3.7 配置构建后操作</h5><table><thead><tr><th style="text-align:center">执行脚本文件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211229155949038.png" alt=""></td></tr></tbody></table><h3 id="九、Jenkins流水线">九、Jenkins流水线</h3><h4 id="9-1-Jenkins流水线任务介绍">9.1 Jenkins流水线任务介绍</h4><p>之前采用Jenkins的自由风格构建的项目，每个步骤流程都要通过不同的方式设置，并且构建过程中整体流程是不可见的，无法确认每个流程花费的时间，并且问题不方便定位问题。</p><p>Jenkins的Pipeline可以让项目的发布整体流程可视化，明确执行的阶段，可以快速的定位问题。并且整个项目的生命周期可以通过一个Jenkinsfile文件管理，而且Jenkinsfile文件是可以放在项目中维护。</p><p>所以Pipeline相对自由风格或者其他的项目风格更容易操作。</p><h4 id="9-2-Jenkins流水线任务">9.2 Jenkins流水线任务</h4><h5 id="9-2-1-构建Jenkins流水线任务">9.2.1 构建Jenkins流水线任务</h5><ul><li><p>构建任务</p><table><thead><tr><th style="text-align:center">构建Jenkins流水线任务</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202144429302.png" alt=""></td></tr></tbody></table></li><li><p>生成Groovy脚本</p><table><thead><tr><th style="text-align:center">Hello World脚本生成</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202144531749.png" alt=""></td></tr></tbody></table></li><li><p>构建后查看视图</p><table><thead><tr><th style="text-align:center">构建后查看视图</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202144616117.png" alt=""></td></tr></tbody></table></li></ul><h5 id="9-2-2-Groovy脚本">9.2.2 Groovy脚本</h5><ul><li><p>Groovy脚本基础语法</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">// 所有脚本命令包含在pipeline{}中</span><br><span class="line">pipeline {  </span><br><span class="line">// 指定任务在哪个节点执行（Jenkins支持分布式）</span><br><span class="line">    agent any</span><br><span class="line">    </span><br><span class="line">    // 配置全局环境，指定变量名=变量值信息</span><br><span class="line">    environment{</span><br><span class="line">    host = <span class="string">'192.168.11.11'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // 存放所有任务的合集</span><br><span class="line">    stages {</span><br><span class="line">    // 单个任务</span><br><span class="line">        stage(<span class="string">'任务1'</span>) {</span><br><span class="line">        // 实现任务的具体流程</span><br><span class="line">            steps {</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'do something'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">// 单个任务</span><br><span class="line">        stage(<span class="string">'任务2'</span>) {</span><br><span class="line">        // 实现任务的具体流程</span><br><span class="line">            steps {</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'do something'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        // ……</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写例子测试</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    // 存放所有任务的合集</span><br><span class="line">    stages {</span><br><span class="line">        stage(<span class="string">'拉取Git代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'拉取Git代码'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'检测代码质量'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'检测代码质量'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'构建代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'构建代码'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'制作自定义镜像并发布Harbor'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'制作自定义镜像并发布Harbor'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'基于Harbor部署工程'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'基于Harbor部署工程'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">配置Grovvy脚本</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202145155428.png" alt=""></td></tr></tbody></table></li><li><p>查看效果</p><table><thead><tr><th style="text-align:center">查看效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202145240166.png" alt=""></td></tr></tbody></table></li></ul><p><a href="">Ps：涉及到特定脚本，Jenkins给予了充足的提示，可以自动生成命令</a></p><table><thead><tr><th style="text-align:center">生成命令位置</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202145349043.png" alt=""></td></tr></tbody></table><h5 id="9-2-3-Jenkinsfile实现">9.2.3 Jenkinsfile实现</h5><p>Jenkinsfile方式需要将脚本内容编写到项目中的Jenkinsfile文件中，每次构建会自动拉取项目并且获取项目中Jenkinsfile文件对项目进行构建</p><ul><li><p>配置pipeline</p><table><thead><tr><th style="text-align:center">配置pipeline</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202151127254.png" alt=""></td></tr></tbody></table></li><li><p>准备Jenkinsfile</p><table><thead><tr><th style="text-align:center">准备Jenkinsfile文件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202151155145.png" alt=""></td></tr></tbody></table></li><li><p>测试效果</p><table><thead><tr><th style="text-align:center">测试效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202151225161.png" alt=""></td></tr></tbody></table></li></ul><h4 id="9-3-Jenkins流水线任务实现">9.3 Jenkins流水线任务实现</h4><h5 id="9-3-1-参数化构建">9.3.1 参数化构建</h5><p>添加参数化构建，方便选择不的项目版本</p><table><thead><tr><th style="text-align:center">Git参数化构建</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202191944277.png" alt=""></td></tr></tbody></table><h5 id="9-3-2-拉取Git代码">9.3.2 拉取Git代码</h5><p>通过流水线语法生成Checkout代码的脚本</p><table><thead><tr><th style="text-align:center">语法生成</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211202192047619.png" alt=""></td></tr></tbody></table><p><img src="/posts/44686/image-20211202192129895.png" alt="">将*/master更改为标签<a href="">${tag}</a></p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    stages {</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'拉取Git代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'${tag}'</span>]], extensions: [], userRemoteConfigs: [[url: <span class="string">'http://49.233.115.171:8929/root/test.git'</span>]]])</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="9-3-3-构建代码">9.3.3 构建代码</h5><p>通过脚本执行mvn的构建命令</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages {</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'拉取Git代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'${tag}'</span>]], extensions: [], userRemoteConfigs: [[url: <span class="string">'http://49.233.115.171:8929/root/test.git'</span>]]])</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'构建代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/maven/bin/mvn clean package -DskipTests'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="9-3-4-代码质量检测">9.3.4 代码质量检测</h5><p>通过脚本执行sonar-scanner命令即可</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages {</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'拉取Git代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'${tag}'</span>]], extensions: [], userRemoteConfigs: [[url: <span class="string">'http://49.233.115.171:8929/root/test.git'</span>]]])</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'构建代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/maven/bin/mvn clean package -DskipTests'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'检测代码质量'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/sonar-scanner/bin/sonar-scanner -Dsonar.sources=./ -Dsonar.projectname=${JOB_NAME} -Dsonar.projectKey=${JOB_NAME} -Dsonar.java.binaries=target/ -Dsonar.login=31388be45653876c1f51ec02f0d478e2d9d0e1fa'</span> </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="9-3-5-制作自定义镜像并发布">9.3.5 制作自定义镜像并发布</h5><ul><li><p>生成自定义镜像脚本</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    environment{</span><br><span class="line">        harborHost = <span class="string">'192.168.11.11:80'</span></span><br><span class="line">        harborRepo = <span class="string">'repository'</span></span><br><span class="line">        harborUser = <span class="string">'DevOps'</span></span><br><span class="line">        harborPasswd = <span class="string">'P@ssw0rd'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // 存放所有任务的合集</span><br><span class="line">    stages {</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'拉取Git代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'${tag}'</span>]], extensions: [], userRemoteConfigs: [[url: <span class="string">'http://49.233.115.171:8929/root/test.git'</span>]]])</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'构建代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/maven/bin/mvn clean package -DskipTests'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'检测代码质量'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/sonar-scanner/bin/sonar-scanner -Dsonar.sources=./ -Dsonar.projectname=${JOB_NAME} -Dsonar.projectKey=${JOB_NAME} -Dsonar.java.binaries=target/ -Dsonar.login=31388be45653876c1f51ec02f0d478e2d9d0e1fa'</span> </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'制作自定义镜像并发布Harbor'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">''</span><span class="string">'cp ./target/*.jar ./docker/</span></span><br><span class="line"><span class="string">                cd ./docker</span></span><br><span class="line"><span class="string">                docker build -t ${JOB_NAME}:${tag} ./'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">                sh <span class="string">''</span><span class="string">'docker login -u ${harborUser} -p ${harborPasswd} ${harborHost}</span></span><br><span class="line"><span class="string">                docker tag ${JOB_NAME}:${tag} ${harborHost}/${harborRepo}/${JOB_NAME}:${tag}</span></span><br><span class="line"><span class="string">                docker push ${harborHost}/${harborRepo}/${JOB_NAME}:${tag}'</span><span class="string">''</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成Publish Over SSH脚本</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line">    environment{</span><br><span class="line">        harborHost = <span class="string">'192.168.11.11:80'</span></span><br><span class="line">        harborRepo = <span class="string">'repository'</span></span><br><span class="line">        harborUser = <span class="string">'DevOps'</span></span><br><span class="line">        harborPasswd = <span class="string">'P@ssw0rd'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // 存放所有任务的合集</span><br><span class="line">    stages {</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'拉取Git代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'${tag}'</span>]], extensions: [], userRemoteConfigs: [[url: <span class="string">'http://49.233.115.171:8929/root/test.git'</span>]]])</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'构建代码'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/maven/bin/mvn clean package -DskipTests'</span></span><br><span class="line">            }</span><br><span class="line">        }docker</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'检测代码质量'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/sonar-scanner/bin/sonar-scanner -Dsonar.sources=./ -Dsonar.projectname=${JOB_NAME} -Dsonar.projectKey=${JOB_NAME} -Dsonar.java.binaries=target/ -Dsonar.login=7d66af4b39cfe4f52ac0a915d4c9d5c513207098'</span> </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'制作自定义镜像并发布Harbor'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">''</span><span class="string">'cp ./target/*.jar ./docker/</span></span><br><span class="line"><span class="string">                cd ./docker</span></span><br><span class="line"><span class="string">                docker build -t ${JOB_NAME}:${tag} ./'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">                sh <span class="string">''</span><span class="string">'docker login -u ${harborUser} -p ${harborPasswd} ${harborHost}</span></span><br><span class="line"><span class="string">                docker tag ${JOB_NAME}:${tag} ${harborHost}/${harborRepo}/${JOB_NAME}:${tag}</span></span><br><span class="line"><span class="string">                docker push ${harborHost}/${harborRepo}/${JOB_NAME}:${tag}'</span><span class="string">''</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">'目标服务器拉取镜像并运行'</span>) {</span><br><span class="line">            steps {</span><br><span class="line">                sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">'testEnvironment'</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">"/usr/bin/deploy.sh <span class="variable">$harborHost</span> <span class="variable">$harborRepo</span> <span class="variable">$JOB_NAME</span> <span class="variable">$tag</span> <span class="variable">$port</span> "</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">''</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">''</span>, sourceFiles: <span class="string">''</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">false</span>)])</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><a href="">Ps：由于采用变量，记得使用双引号</a></p><h4 id="9-4-Jenkins流水线整合钉钉">9.4 Jenkins流水线整合钉钉</h4><p>在程序部署成功后，可以通过钉钉的机器人及时向群众发送部署的最终结果通知</p><ul><li><p>安装插件</p><table><thead><tr><th style="text-align:center">安装插件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211209151549412.png" alt=""></td></tr></tbody></table></li><li><p>钉钉内部创建群组并构建机器人</p><table><thead><tr><th style="text-align:center">钉钉内部创建群组并构建机器人</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211209152217433.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211209152252050.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20211209152403312.png" alt=""></td></tr></tbody></table><p>最终或获取到Webhook信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://oapi.dingtalk.com/robot/send?access_token=kej4ehkj34gjhg34jh5bh5jb34hj53b4</span><br></pre></td></tr></tbody></table></figure></li><li><p>系统配置添加钉钉通知</p><table><thead><tr><th style="text-align:center">配置钉钉通知</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211209162923440.png" alt=""></td></tr></tbody></table></li><li><p>任务中追加流水线配置</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pipeline {</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    environment {</span><br><span class="line">        sonarLogin = <span class="string">'2bab7bf7d5af25e2c2ca2f178af2c3c55c64d5d8'</span></span><br><span class="line">        harborUser = <span class="string">'admin'</span></span><br><span class="line">        harborPassword = <span class="string">'Harbor12345'</span></span><br><span class="line">        harborHost = <span class="string">'192.168.11.12:8888'</span></span><br><span class="line">        harborRepo = <span class="string">'repository'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    stages {</span><br><span class="line">        stage(<span class="string">'拉取Git代码'</span>){</span><br><span class="line">            steps {</span><br><span class="line">                checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'$tag'</span>]], extensions: [], userRemoteConfigs: [[url: <span class="string">'http://49.233.115.171:8929/root/lsx.git'</span>]]])</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'Maven构建代码'</span>){</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/maven/bin/mvn clean package -DskipTests'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'SonarQube检测代码'</span>){</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">'/var/jenkins_home/sonar-scanner/bin/sonar-scanner -Dsonar.sources=./ -Dsonar.projectname=${JOB_NAME} -Dsonar.projectKey=${JOB_NAME} -Dsonar.java.binaries=target/ -Dsonar.login=${sonarLogin}'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">'制作自定义镜像'</span>){</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">''</span><span class="string">'cd docker</span></span><br><span class="line"><span class="string">                mv ../target/*.jar ./</span></span><br><span class="line"><span class="string">                docker build -t ${JOB_NAME}:$tag .</span></span><br><span class="line"><span class="string">                '</span><span class="string">''</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'推送自定义镜像'</span>){</span><br><span class="line">            steps {</span><br><span class="line">                sh <span class="string">''</span><span class="string">'docker login -u ${harborUser} -p ${harborPassword} ${harborHost}</span></span><br><span class="line"><span class="string">                docker tag ${JOB_NAME}:$tag ${harborHost}/${harborRepo}/${JOB_NAME}:$tag</span></span><br><span class="line"><span class="string">                docker push ${harborHost}/${harborRepo}/${JOB_NAME}:$tag'</span><span class="string">''</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'通知目标服务器'</span>){</span><br><span class="line">            steps {</span><br><span class="line">                sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">'centos-docker'</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">"/usr/bin/deploy.sh <span class="variable">$harborHost</span> <span class="variable">$harborRepo</span> <span class="variable">$JOB_NAME</span> <span class="variable">$tag</span> <span class="variable">$port</span>"</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">''</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">''</span>, sourceFiles: <span class="string">''</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">false</span>)])</span><br><span class="line">            }  </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    post {</span><br><span class="line">        success {</span><br><span class="line">            dingtalk (</span><br><span class="line">                robot: <span class="string">'Jenkins-DingDing'</span>,</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">'MARKDOWN'</span>,</span><br><span class="line">                title: <span class="string">"success: <span class="variable">${JOB_NAME}</span>"</span>,</span><br><span class="line">                text: [<span class="string">"- 成功构建:<span class="variable">${JOB_NAME}</span>项目!\n- 版本:<span class="variable">${tag}</span>\n- 持续时间:<span class="variable">${currentBuild.durationString}</span>\n- 任务:#<span class="variable">${JOB_NAME}</span>"</span>]</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">        failure {</span><br><span class="line">            dingtalk (</span><br><span class="line">                robot: <span class="string">'Jenkins-DingDing'</span>,</span><br><span class="line">                <span class="built_in">type</span>:<span class="string">'MARKDOWN'</span>,</span><br><span class="line">                title: <span class="string">"fail: <span class="variable">${JOB_NAME}</span>"</span>,</span><br><span class="line">                text: [<span class="string">"- 失败构建:<span class="variable">${JOB_NAME}</span>项目!\n- 版本:<span class="variable">${tag}</span>\n- 持续时间:<span class="variable">${currentBuild.durationString}</span>\n- 任务:#<span class="variable">${JOB_NAME}</span>"</span>]</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看效果</p><table><thead><tr><th style="text-align:center">钉钉通知效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211209163021396.png" alt=""></td></tr></tbody></table></li></ul><h3 id="十、Kubernetes容器编排工具">十、Kubernetes容器编排工具</h3><h4 id="10-1-Kubernetes介绍">10.1 Kubernetes介绍</h4><p>Kubernetes是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful），Kubernetes提供了应用部署，规划，更新，维护的一种机制。</p><p>Kubernetes一个核心的特点就是能够自主的管理容器来保证云平台中的容器按照用户的期望状态运行着，管理员可以加载一个微型服务，让规划器来找到合适的位置，同时，Kubernetes也系统提升工具以及人性化方面，让用户能够方便的部署自己的应用。</p><p>Kubernetes主要能帮助我们完成：</p><ul><li><p>服务发现和负载均衡</p><p>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p></li><li><p>存储编排</p><p>Kubernetes 允许你自动挂载你选择的存储系统，比如本地存储，类似Docker的数据卷。</p></li><li><p>自动部署和回滚</p><p>你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。Kubernetes 会自动帮你根据情况部署创建新容器，并删除现有容器给新容器提供资源。</p></li><li><p>自动完成装箱计算</p><p>Kubernetes 允许你设置每个容器的资源，比如CPU和内存。</p></li><li><p>自我修复</p><p>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的容器，并运行状况检查的容器。</p></li><li><p>秘钥与配置管理</p><p>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p></li></ul><h4 id="10-2-Kubernetes架构">10.2 Kubernetes架构</h4><p>Kubernetes 搭建需要至少两个节点，一个Master负责管理，一个Slave搭建在工作服务器上负责分配。</p><table><thead><tr><th style="text-align:center">kubernetes架构</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211210114507638.png" alt=""></td></tr></tbody></table><p>从图中可以看到各个组件的基本功能：</p><ul><li>API Server：作为K8s通讯的核心组件，K8s内部交互以及接收发送指令的组件。</li><li>controller-manager：作为K8s的核心组件，主要做资源调度，根据集群情况分配资源</li><li>etcd：一个key-value的数据库，存储存储集群的状态信息</li><li>scheduler：负责调度每个工作节点</li><li>cloud-controller-manager：负责调度其他云服务产品</li><li>kubelet：管理Pods上面的容器。</li><li>kube-proxy：负责处理其他Slave或客户端的请求。</li><li>Pod：可以理解为就是运行的容器</li></ul><h4 id="10-3-Kubernetes安装">10.3 Kubernetes安装</h4><p>这里会采用https://kuboard.cn/提供的方式安装K8s，安装单Master节点</p><ul><li>要求使用Centos7.8版本：<a href="https://vault.centos.org/7.8.2003/isos/x86_64/CentOS-7-x86_64-Minimal-2003.iso">https://vault.centos.org/7.8.2003/isos/x86_64/CentOS-7-x86_64-Minimal-2003.iso</a></li><li>至少2台 <strong>2核4G</strong> 的服务器</li></ul><p>安装流程</p><table><thead><tr><th style="text-align:center">安装流程</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211210190653687.png" alt=""></td></tr></tbody></table><p>准备好服务器后开始安装</p><ul><li><p>重新设置hostname，不允许为localhost</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 hostname，名字不允许使用下划线、小数点、大写字母，不能叫master</span></span><br><span class="line">hostnamectl set-hostname your-new-host-name</span><br><span class="line"><span class="comment"># 查看修改结果</span></span><br><span class="line">hostnamectl status</span><br><span class="line"><span class="comment"># 设置 hostname 解析</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"127.0.0.1   <span class="subst">$(hostname)</span>"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></tbody></table></figure></li><li><p>要求2台服务之间可以相互通讯</p></li><li><p>安装软件</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 阿里云 docker hub 镜像</span></span><br><span class="line"><span class="built_in">export</span> REGISTRY_MIRROR=https://registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">curl -sSL https://kuboard.cn/install-script/v1.19.x/install_kubelet.sh | sh -s 1.19.5</span><br></pre></td></tr></tbody></table></figure></li></ul><p>首先初始化Master节点</p><blockquote><p>关于初始化时用到的环境变量</p><ul><li><strong>APISERVER_NAME</strong> 不能是 master 的 hostname</li><li><strong>APISERVER_NAME</strong> 必须全为小写字母、数字、小数点，不能包含减号</li><li><strong>POD_SUBNET</strong> 所使用的网段不能与 <em><strong>master节点/worker节点</strong></em> 所在的网段重叠。该字段的取值为一个 <a href="https://kuboard.cn/glossary/cidr.html">CIDR</a> 值，如果您对 CIDR 这个概念还不熟悉，请仍然执行 export POD_SUBNET=10.100.0.0/16 命令，不做修改</li></ul></blockquote><ul><li><p>设置ip，域名，网段并执行初始化操作</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"><span class="comment"># 替换 x.x.x.x 为 master 节点实际 IP（请使用内网 IP）</span></span><br><span class="line"><span class="comment"># export 命令只在当前 shell 会话中有效，开启新的 shell 窗口后，如果要继续安装过程，请重新执行此处的 export 命令</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=192.168.11.32</span><br><span class="line"><span class="comment"># 替换 apiserver.demo 为 您想要的 dnsName</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.demo</span><br><span class="line"><span class="comment"># Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中</span></span><br><span class="line"><span class="built_in">export</span> POD_SUBNET=10.100.0.1/16</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">${MASTER_IP}</span>    <span class="variable">${APISERVER_NAME}</span>"</span> &gt;&gt; /etc/hosts</span><br><span class="line">curl -sSL https://kuboard.cn/install-script/v1.19.x/init_master.sh | sh -s 1.19.5</span><br></pre></td></tr></tbody></table></figure></li><li><p>检查Master启动状态</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span></span><br><span class="line">watch kubectl get pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 master 节点初始化结果</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></tbody></table></figure></li></ul><p><code>Ps：如果出现NotReady的情况执行（最新版本的BUG，1.19一般没有）</code></p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull quay.io/coreos/flannel:v0.10.0-amd64 </span><br><span class="line">mkdir -p /etc/cni/net.d/</span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/cni/net.d/10-flannel.conf</span></span><br><span class="line"><span class="string">{"name":"cbr0","type":"flannel","delegate": {"isDefaultGateway": true}}</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">mkdir /usr/share/oci-umount/oci-umount.d -p</span><br><span class="line">mkdir /run/flannel/</span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /run/flannel/subnet.env</span></span><br><span class="line"><span class="string">FLANNEL_NETWORK=172.100.0.0/16</span></span><br><span class="line"><span class="string">FLANNEL_SUBNET=172.100.1.0/24</span></span><br><span class="line"><span class="string">FLANNEL_MTU=1450</span></span><br><span class="line"><span class="string">FLANNEL_IPMASQ=true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml</span><br></pre></td></tr></tbody></table></figure><p>安装网络服务插件</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> POD_SUBNET=10.100.0.0/16</span><br><span class="line">kubectl apply -f https://kuboard.cn/install-script/v1.22.x/calico-operator.yaml</span><br><span class="line">wget https://kuboard.cn/install-script/v1.22.x/calico-custom-resources.yaml</span><br><span class="line">sed -i <span class="string">"s#192.168.0.0/16#<span class="variable">${POD_SUBNET}</span>#"</span> calico-custom-resources.yaml</span><br><span class="line">kubectl apply -f calico-custom-resources.yaml</span><br></pre></td></tr></tbody></table></figure><p>初始化worker节点</p><ul><li><p>获取Join命令参数，在Master节点执行</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">获取命令</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211213183025291.png" alt=""></td></tr></tbody></table></li><li><p>在worker节点初始化</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 worker 节点执行</span></span><br><span class="line"><span class="comment"># 替换 x.x.x.x 为 master 节点的内网 IP</span></span><br><span class="line"><span class="built_in">export</span> MASTER_IP=192.168.11.32</span><br><span class="line"><span class="comment"># 替换 apiserver.demo 为初始化 master 节点时所使用的 APISERVER_NAME</span></span><br><span class="line"><span class="built_in">export</span> APISERVER_NAME=apiserver.demo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">${MASTER_IP}</span>    <span class="variable">${APISERVER_NAME}</span>"</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为 master 节点上 kubeadm token create 命令的输出</span></span><br><span class="line">kubeadm join apiserver.demo:6443 --token vwfilu.3nhndohc5gn1jv9k     --discovery-token-ca-cert-hash sha256:22ff15cabfe87ab48a7db39b3bbf986fee92ec92eb8efc7fe9b0abe2175ff0c2</span><br></pre></td></tr></tbody></table></figure></li></ul><p>检查最终运行效果</p><ul><li><p>在 master 节点上执行</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></tbody></table></figure></li></ul><p><code>Ps：如果出现NotReady的情况执行（最新版本的BUG，1.19一般没有）</code></p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull quay.io/coreos/flannel:v0.10.0-amd64 </span><br><span class="line">mkdir -p /etc/cni/net.d/</span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/cni/net.d/10-flannel.conf</span></span><br><span class="line"><span class="string">{"name":"cbr0","type":"flannel","delegate": {"isDefaultGateway": true}}</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">mkdir /usr/share/oci-umount/oci-umount.d -p</span><br><span class="line">mkdir /run/flannel/</span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /run/flannel/subnet.env</span></span><br><span class="line"><span class="string">FLANNEL_NETWORK=172.100.0.0/16</span></span><br><span class="line"><span class="string">FLANNEL_SUBNET=172.100.1.0/24</span></span><br><span class="line"><span class="string">FLANNEL_MTU=1450</span></span><br><span class="line"><span class="string">FLANNEL_IPMASQ=true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml</span><br></pre></td></tr></tbody></table></figure><ul><li><p>输出结果如下所示：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@k8smaster ~]<span class="comment"># kubectl get nodes</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">搭建成功效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211210184851810.png" alt=""></td></tr></tbody></table></li></ul><p>安装Kuboard管理K8s集群</p><ul><li><p>安装Kuboard</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">https://addons.kuboard.cn/kuboard/kuboard-v3.yaml</span></span><br><span class="line"><span class="comment"># 您也可以使用下面的指令，唯一的区别是，该指令使用华为云的镜像仓库替代 docker hub 分发 Kuboard 所需要的镜像</span></span><br><span class="line"><span class="comment"># kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3-swr.yaml</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>查看启动情况</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">watch kubectl get pods -n kuboard</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">查看效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211213184701784.png" alt=""></td></tr></tbody></table></li><li><p>在浏览器中打开链接 <a href="http://your-node-ip-address:30080">http://your-node-ip-address:30080</a></p><table><thead><tr><th style="text-align:center">首页</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211213184742709.png" alt=""></td></tr></tbody></table></li><li><p>输入初始用户名和密码，并登录</p><ul><li>用户名： <code>admin</code></li><li>密码： <code>Kuboard123</code></li></ul><table><thead><tr><th style="text-align:center">首页效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20211213184840120.png" alt=""></td></tr></tbody></table></li></ul><h4 id="10-4-Kubernetes操作">10.4 Kubernetes操作</h4><p>首先我们要了解Kubernetes在运行我们的资源时，关联到了哪些内容</p><ul><li><p>资源的构建方式：</p><ul><li>采用kubectl的命令方式</li><li>yaml文件方式</li></ul></li></ul><h5 id="10-4-1-Namespace">10.4.1 Namespace</h5><ul><li><p>命名空间：主要是为了对Kubernetes中运行的资源进行过隔离， 但是网络是互通的，类似Docker的容器，可以将多个资源配置到一个NameSpace中。而NameSpace可以对不同环境进行资源隔离，默认情况下Kubernetes提供了default命名空间，在构建资源时，如果不指定资源，默认采用default资源。<br>命令方式：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看现有的全部命名空间</span></span><br><span class="line">kubectl get ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建命名空间</span></span><br><span class="line">kubectl create ns 命名空间名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除现有命名空间， 并且会删除空间下的全部资源</span></span><br><span class="line">kubectl delete ns 命名空间名称</span><br></pre></td></tr></tbody></table></figure><p>yaml文件方式：（构建资源时，设置命名空间）</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="10-4-2-Pod">10.4.2 Pod</h5><ul><li><p>Pod：Kubernetes运行的一组容器，Pod是Kubernetes的最小单位，但是对于Docker而然，Pod中会运行多个Docker容器</p><ul><li><p>命令方式：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有运行的pod</span></span><br><span class="line">kubectl get pods -A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定Namespace下的Pod</span></span><br><span class="line">kubectl get pod [-n 命名空间]  <span class="comment">#（默认default）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Pod</span></span><br><span class="line">kubectl run pod名称 --image=镜像名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Pod详细信息</span></span><br><span class="line">kubectl describe pod pod名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pod</span></span><br><span class="line">kubectl delete pod pod名称 [-n 命名空间]  <span class="comment">#（默认default）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod输出的日志</span></span><br><span class="line">kubectl logs -f pod名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进去pod容器内部</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it pod名称 -- bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kubernetes给Pod分配的ip信息，并且通过ip和容器的端口，可以直接访问</span></span><br><span class="line">kubectl get pod -owide</span><br></pre></td></tr></tbody></table></figure></li><li><p>yaml方式（推荐）</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">运行的pod名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">镜像名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">容器名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Pod：kubectl apply -f yaml文件名称</span></span><br><span class="line"><span class="comment"># 删除Pod：kubectl delete -f yaml文件名称</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Pod中运行多个容器</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">运行的pod名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">镜像名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">容器名称</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">镜像名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">容器名称</span></span><br><span class="line"><span class="string">…………</span>    </span><br></pre></td></tr></tbody></table></figure><p>启动后可以查看到</p><table><thead><tr><th style="text-align:center">Kuboard效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220104203155749.png" alt=""></td></tr></tbody></table></li></ul></li></ul><h5 id="10-4-3-Deployment">10.4.3 Deployment</h5><p>部署时，可以通过Deployment管理和编排Pod</p><p>Deployment部署实现</p><ul><li><p>命令方式</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 基于Deployment启动容器</span></span><br><span class="line">kubectl create deployment deployment名称 --image=镜像名称</span><br><span class="line"><span class="comment"># 用deployment启动的容器会在被删除后自动再次创建，达到故障漂移的效果</span></span><br><span class="line"><span class="comment"># 需要使用deploy的方式删除deploy</span></span><br><span class="line"><span class="comment"># 查看现在的deployment</span></span><br><span class="line">kubectl get deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除deployment</span></span><br><span class="line">kubectl delete deployment deployment名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于Deployment启动容器并设置Pod集群数</span></span><br><span class="line">kubectl create deployment deployment名称 --image=镜像名称 --replicas 集群个数</span><br></pre></td></tr></tbody></table></figure></li><li><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/">配置文件方式</a></p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">       <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">       <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>正常使用kubectl运行yaml即可</p></li></ul><p>弹性伸缩功能</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 基于scale实现弹性伸缩</span></span><br><span class="line">kubectl scale deploy/Deployment名称 --replicas 集群个数</span><br><span class="line"><span class="comment"># 或者修改yaml文件</span></span><br><span class="line">kubectl edit deploy Deployment名称</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">图形化页面修改</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220104210823057.png" alt=""></td></tr></tbody></table><p>灰度发布</p><p>Deploy可以在部署新版本数据时，成功启动一个pod，才会下线一个老版本的Pod</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">kubectl set image deployment/Deployment名称 容器名=镜像:版本</span><br></pre></td></tr></tbody></table></figure><h5 id="10-4-4-Service">10.4.4 Service</h5><p>可以将多个Pod对外暴露一个Service，让客户端可以通过Service访问到这一组Pod，并且可以实现负载均衡</p><p>ClusterIP方式：</p><p>ClusterIP是集群内部Pod之间的访问方式</p><ul><li><p>命令实现效果</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过生成service映射一个Deployment下的所有pod中的某一个端口的容器</span></span><br><span class="line">kubectl expose deployment Deployment名称 --port=Service端口号 --target-port=Pod内容器端口</span><br></pre></td></tr></tbody></table></figure><p>之后通过<code>kubectl get service</code>查看Service提供的ip，即可访问</p><table><thead><tr><th style="text-align:center">kubectl get service</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220104214659229.png" alt=""></td></tr></tbody></table><p>也可以通过<code>Deployment名称.namespace名称.svc</code>作为域名访问</p><table><thead><tr><th style="text-align:center">在服务容器内执行</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220104215030265.png" alt=""></td></tr></tbody></table></li></ul><p>NodePort方式</p><p>ClusterIP的方式只能在Pod内部实现访问，但是一般需要对外暴露网关，所以需要NodePort的方式Pod外暴露访问</p><ul><li><p>命令实现方式</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过生成service映射一个Deployment下的所有pod中的某一个端口的容器</span></span><br><span class="line">kubectl expose deployment Deployment名称 --port=Service端口号 --target-port=Pod内容器端口 --<span class="built_in">type</span>=NodePort</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">查看Service效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220104222750733.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20220104222819455.png" alt=""></td></tr></tbody></table></li></ul><p>Service也可以通过yaml文件实现</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="string">labels</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">selector:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">     <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">     <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>通过apply启动就也可以创建Service</p><p>测试效果-Deployment部署，通过Service暴露</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-service</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></tbody></table></figure><p>可以查看到暴露的信息</p><table><thead><tr><th style="text-align:center">Service信息</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220105205334996.png" alt=""></td></tr></tbody></table><h5 id="10-4-5-Ingress">10.4.5 Ingress</h5><p>Kubernetes推荐将Ingress作为所有Service的入口，提供统一的入口，避免多个服务之间需要记录大量的IP或者域名，毕竟IP可能改变，服务太多域名记录不方便。</p><p>Ingress底层其实就是一个Nginx， 可以在Kuboard上直接点击安装</p><table><thead><tr><th style="text-align:center">Kuboard安装</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220105153343642.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/image-20220105153416367.png" alt=""></td></tr></tbody></table><p>因为副本数默认为1，但是k8s整体集群就2个节点，所以显示下面即为安装成功</p><table><thead><tr><th style="text-align:center">安装成功</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220105153502619.png" alt=""></td></tr></tbody></table><p>可以将Ingress接收到的请求转发到不同的Service中。</p><p>推荐使用yaml文件方式</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">ingress</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.mashibing.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8888</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th style="text-align:center">启动时问题</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220105203819715.png" alt=""></td></tr></tbody></table><p>Kuboard安装的Ingress有admission的校验配置，需要先删除配置再启动</p><p>找到指定的ingress的校验信息，删除即可</p><table><thead><tr><th style="text-align:center">删除信息</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220105204434044.png" alt=""></td></tr></tbody></table><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看校验webhook的配置</span></span><br><span class="line">kubectl get -A ValidatingWebhookConfiguration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的校验</span></span><br><span class="line">kubectl delete ValidatingWebhookConfiguration ingress-nginx-admission-my-ingress-controller</span><br></pre></td></tr></tbody></table></figure><p>配置本地hosts文件</p><table><thead><tr><th style="text-align:center">配置hosts</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220105204921272.png" alt=""></td></tr></tbody></table><p>记下来既可以访问在Service中暴露的Nginx信息</p><table><thead><tr><th style="text-align:center">服通过Ingress访问</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20220105205407393.png" alt=""></td></tr></tbody></table><h4 id="10-5-Jenkins集成Kubernetes">10.5 Jenkins集成Kubernetes</h4><h5 id="10-5-1-准备部署的yml文件">10.5.1 准备部署的yml文件</h5><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pipeline</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">pipeline</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">pipeline</span>    </span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pipeline</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.11</span><span class="number">.102</span><span class="string">:80/repo/pipeline:v4.0.0</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pipeline</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pipeline</span>  </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pipeline</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">ingress</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">mashibing.pipeline.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">pipeline</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8081</span></span><br></pre></td></tr></tbody></table></figure><h5 id="10-5-2-Harbor私服配置">10.5.2 Harbor私服配置</h5><p>在尝试用kubernetes的yml文件启动pipeline服务时，会出现Kubernetes无法拉取镜像的问题，这里需要在kubernetes所在的Linux中配置Harbor服务信息，并且保证Kubernetes可以拉取Harbor上的镜像</p><ul><li><p>设置Master和Worker的私服地址信息</p><table><thead><tr><th style="text-align:center">设置Harbor私服地址</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642498962716.png" alt=""></td></tr></tbody></table></li><li><p>在Kuboard上设置私服密文信息</p><table><thead><tr><th style="text-align:center">设置密文并测试</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642498994935.png" alt=""></td></tr></tbody></table><p>按照复制指令的位置测试认证，效果如下</p><table><thead><tr><th style="text-align:center">测试效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642499172789.png" alt=""></td></tr></tbody></table></li></ul><h5 id="10-5-3-测试使用效果">10.5.3 测试使用效果</h5><p>执行kubectl命令，基于yml启动服务，并且基于部署后服务的提示信息以及Ingress的设置，直接访问</p><table><thead><tr><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642499368121.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/1642499788199.png" alt=""></td></tr></tbody></table><h5 id="10-5-3-Jenkins远程调用">10.5.3 Jenkins远程调用</h5><ul><li><p>将pipeline.yml配置到Gitlab中</p><table><thead><tr><th style="text-align:center">配置yml文件</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642499885324.png" alt=""></td></tr></tbody></table></li><li><p>配置Jenkins的目标服务器，可以将yml文件传输到K8s的Master上</p><table><thead><tr><th style="text-align:center">设置目标服务器</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642499992148.png" alt=""></td></tr></tbody></table></li><li><p>修改Jenkinsfile，重新设置流水线任务脚本，并测试效果</p><table><thead><tr><th style="text-align:center">传递yml文件脚本</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642500061153.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/1642500102996.png" alt=""></td></tr></tbody></table></li><li><p>设置Jenkins无密码登录k8s-master</p><p>将Jenkins中公钥信息复制到k8s-master的~/.ssh/authorized_keysz中，保证远程连接无密码</p><table><thead><tr><th style="text-align:center">远程执行命令无需密码</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642500239406.png" alt=""></td></tr></tbody></table></li><li><p>设置执行kubectl的脚本到Jenkinsfile</p><table><thead><tr><th style="text-align:center">设置Jenkinsfile</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642500378788.png" alt=""></td></tr></tbody></table></li><li><p>执行查看效果</p><table><thead><tr><th style="text-align:center">执行流水线</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642500413802.png" alt=""></td></tr></tbody></table><p>可以查看到yml文件是由变化的， 这样k8s就会重新加载</p></li><li><p>查看效果</p><table><thead><tr><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642500474036.png" alt=""></td></tr></tbody></table></li></ul><p><a href="">Ps：这种方式更适应与CD操作，将项目将基于某个版本部署到指定的目标服务器</a></p><h4 id="10-6-基于GitLab的WebHooks">10.6 基于GitLab的WebHooks</h4><p>这里要实现自动化的一个CI操作，也就是开发人员Push代码到Git仓库后，Jenkins会自动的构建项目，将最新的提交点代码构建并进行打包部署，这里区别去上述的CD操作，CD操作需要基于某个版本进行部署，而这里每次都是将最新的提交点集成到主干上并测试。</p><h5 id="10-6-1-WebHooks通知">10.6.1 WebHooks通知</h5><p>开启Jenkins的自动构建</p><table><thead><tr><th style="text-align:center">构建触发器</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642500817131.png" alt=""></td></tr></tbody></table><p>设置Gitlab的Webhooks</p><table><thead><tr><th style="text-align:center">设置Gitlab的Webhooks</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642500933316.png" alt=""></td></tr></tbody></table><p>需要关闭Jenkins的Gitlab认证</p><table><thead><tr><th style="text-align:center">关闭Jenkins的Gitlab认证</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642501016474.png" alt=""></td></tr></tbody></table><p>再次测试Gitlab</p><table><thead><tr><th style="text-align:center">再次测试</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642501065243.png" alt=""></td></tr></tbody></table><h5 id="10-6-2-修改配置">10.6.2 修改配置</h5><p>修改Jenkinsfile实现基于最新提交点实现持续集成效果，将之前引用${tag}的全部去掉</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 所有的脚本命令都放在pipeline中</span></span><br><span class="line">pipeline{</span><br><span class="line"><span class="comment">// 指定任务再哪个集群节点中执行</span></span><br><span class="line">agent any</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明全局变量，方便后面使用</span></span><br><span class="line">environment {</span><br><span class="line">harborUser = 'admin'</span><br><span class="line">        harborPasswd = 'Harbor12345'</span><br><span class="line">        harborAddress = '192.168.11.102:<span class="number">80</span>'</span><br><span class="line">        harborRepo = 'repo'</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    stages {</span><br><span class="line">        stage('拉取git仓库代码') {</span><br><span class="line">            steps {</span><br><span class="line">                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'http:<span class="comment">//192.168.11.101:8929/root/mytest.git']]])</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stage('通过maven构建项目') {</span><br><span class="line">            steps {</span><br><span class="line">                sh '/var/jenkins_home/maven/bin/mvn clean package -DskipTests'</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stage('通过SonarQube做代码质量检测') {</span><br><span class="line">            steps {</span><br><span class="line">                sh '/var/jenkins_home/sonar-scanner/bin/sonar-scanner -Dsonar.source=./ -Dsonar.projectname=${JOB_NAME} -Dsonar.projectKey=${JOB_NAME} -Dsonar.java.binaries=./target/ -Dsonar.login=<span class="number">40306</span>ae8ea69a4792df2ceb4d9d25fe8a6ab1701'</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stage('通过Docker制作自定义镜像') {</span><br><span class="line">            steps {</span><br><span class="line">                sh '''mv ./target<span class="comment">/*.jar ./docker/</span></span><br><span class="line"><span class="comment">                docker build -t ${JOB_NAME}:latest ./docker/'''</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">        stage('将自定义镜像推送到Harbor') {</span></span><br><span class="line"><span class="comment">            steps {</span></span><br><span class="line"><span class="comment">                sh '''docker login -u ${harborUser} -p ${harborPasswd} ${harborAddress}</span></span><br><span class="line"><span class="comment">                docker tag ${JOB_NAME}:latest  ${harborAddress}/${harborRepo}/${JOB_NAME}:latest</span></span><br><span class="line"><span class="comment">                docker push ${harborAddress}/${harborRepo}/${JOB_NAME}:latest '''</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">        stage('将yml文件传到k8s-master上') {</span></span><br><span class="line"><span class="comment">            steps {</span></span><br><span class="line"><span class="comment">                sshPublisher(publishers: [sshPublisherDesc(configName: 'k8s', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'pipeline.yml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">        stage('远程执行k8s-master的kubectl命令') {</span></span><br><span class="line"><span class="comment">            steps {</span></span><br><span class="line"><span class="comment">               sh '''ssh root@192.168.11.201 kubectl apply -f /usr/local/k8s/pipeline.yml</span></span><br><span class="line"><span class="comment">                ssh root@192.168.11.201 kubectl rollout restart deployment pipeline -n test'''</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    post {</span></span><br><span class="line"><span class="comment">        success {</span></span><br><span class="line"><span class="comment">            dingtalk(</span></span><br><span class="line"><span class="comment">                robot: 'Jenkins-DingDing',</span></span><br><span class="line"><span class="comment">                type: 'MARKDOWN',</span></span><br><span class="line"><span class="comment">                title: "success: ${JOB_NAME}",</span></span><br><span class="line"><span class="comment">                text: ["- 成功构建：${JOB_NAME}! \n- 版本：latest \n- 持续时间：${currentBuild.durationString}" ]</span></span><br><span class="line"><span class="comment">            )</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">        failure {</span></span><br><span class="line"><span class="comment">            dingtalk(</span></span><br><span class="line"><span class="comment">                robot: 'Jenkins-DingDing',</span></span><br><span class="line"><span class="comment">                type: 'MARKDOWN',</span></span><br><span class="line"><span class="comment">                title: "success: ${JOB_NAME}",</span></span><br><span class="line"><span class="comment">                text: ["- 构建失败：${JOB_NAME}! \n- 版本：latest \n- 持续时间：${currentBuild.durationString}" ]</span></span><br><span class="line"><span class="comment">            )</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></tbody></table></figure><p>修改pipeline.yml，更改镜像版本</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pipeline</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">pipeline</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">pipeline</span>    </span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pipeline</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.11</span><span class="number">.102</span><span class="string">:80/repo/pipeline:latest</span>   <span class="comment"># 这里</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 省略其他内容…………</span></span><br></pre></td></tr></tbody></table></figure><h5 id="10-6-3-滚动更新">10.6.3 滚动更新</h5><p>因为pipeline没有改变时，每次不会重新加载，这样会导致Pod中的容器不会动态更新，这里需要使用kubectl的rollout restart命令滚动更新</p><table><thead><tr><th style="text-align:center">设置Jenkinsfle</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/1642501521065.png" alt=""></td></tr><tr><td style="text-align:center"><img src="/posts/44686/1642501549176.png" alt=""></td></tr></tbody></table><h4 id="10-7-DevOps流程CI-CD示例图">10.7 DevOps流程CI/CD示例图</h4><table><thead><tr><th style="text-align:center">DevOps流程CI/CD示例图</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/posts/44686/image-20230503203319402.png" alt=""></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Devops </tag>
            
            <tag> Docker </tag>
            
            <tag> Jenkins </tag>
            
            <tag> SonarQube </tag>
            
            <tag> Harbor </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> WebHooks </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(4)：前端功能完善</title>
      <link href="/posts/12498.html"/>
      <url>/posts/12498.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备工作">1. 准备工作</h2><h3 id="1-1-安装Axios">1.1 安装Axios</h3><p>虽然现在前后端 Django + Vue 都有了，但还缺一个它们之间通信的手段。Vue 官方推荐的是 <a href="https://github.com/axios/axios">axios</a> 这个前端库。</p><p>命令行进入 <code>frontend</code> 目录，安装 axios</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">&gt; npm install axios</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-解决跨域">1.2 解决跨域</h3><p>跨域问题是由于浏览器的同源策略（域名，协议，端口均相同）造成的，是浏览器施加的安全限制。即Vue 服务器端口（8080）和 Django 服务器端口（8000）不一致，因此无法通过 Javascript 代码请求后端资源。</p><p>解决跨域的方法有两种：</p><p>方法一（前端解决）：前端配置<code>fronted/vite.config.js</code>文件并写入：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/vite.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { fileURLToPath, URL } <span class="keyword">from</span> <span class="string">'node:url'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig({</span><br><span class="line">  <span class="attr">plugins</span>: [vue()],</span><br><span class="line">  <span class="attr">resolve</span>: {</span><br><span class="line">    <span class="attr">alias</span>: {</span><br><span class="line">      <span class="string">'@'</span>: fileURLToPath(<span class="keyword">new</span> URL(<span class="string">'./src'</span>, <span class="keyword">import</span>.meta.url))</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">server</span>: {</span><br><span class="line">    <span class="attr">port</span>: <span class="string">'5173'</span>,</span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">'/api'</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">'http://127.0.0.1:8000/api'</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">''</span>)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>方法二（后端解决）：后端引入<code>django-cors-middleware</code>库</p><p>两种解决方法都可以，这里选择前端代理的方法。</p><h2 id="2-Vue结构">2. Vue结构</h2><p>为了理解 Vue 的基本结构，让我们来看三个重要的文件。</p><h3 id="2-1-index-html">2.1 index.html</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- frontend/index.html --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vite App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"/src/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这个页面是整个前端工程提供 html 的入口，里面的 <code>&lt;div id="app"&gt;</code> 是 Vue 初始化应用程序的根容器。</p><p>不过在前端工程化的思想中，很少会直接去写这类 <code>html</code> 文件。</p><h3 id="2-2-main-js">2.2 main.js</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/main.css'</span></span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>作用是把后续你要写的 Vue 组件挂载到刚才那个 <code>index.html</code> 中。</p><p>如果你有些前端的初始化配置，都可以写到这里。</p><h3 id="2-3-App-vue">2.3 App.vue</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/App.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import HelloWorld from './components/HelloWorld.vue'</span><br><span class="line">import TheWelcome from './components/TheWelcome.vue'</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;img alt="Vue logo" class="logo" src="./assets/logo.svg" width="125" height="125" /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class="wrapper"&gt;</span><br><span class="line">      &lt;HelloWorld msg="You did it!" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;TheWelcome /&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">header {</span><br><span class="line">  line-height: 1.5;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.logo {</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto 2rem;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@media (min-width: 1024px) {</span><br><span class="line">  header {</span><br><span class="line">    display: flex;</span><br><span class="line">    place-items: center;</span><br><span class="line">    padding-right: calc(var(--section-gap) / 2);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  .logo {</span><br><span class="line">    margin: 0 2rem 0 0;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  header .wrapper {</span><br><span class="line">    display: flex;</span><br><span class="line">    place-items: flex-start;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这个文件对应 Vue 的欢迎页面，</p><p>Vue 采用组件化的思想，把同一个组件的内容打包到一起。比如这个默认的 <code>App.vue</code> 文件， <code>&lt;template&gt;</code> 标签就对应传统的 <code>html</code> ，<code>&lt;script&gt;</code> 标签对应 <code>javascript</code> ，<code>&lt;style&gt;</code> 标签对应了 <code>css</code> 。</p><p><code>&lt;HelloWorld .../&gt;</code> 和<code>&lt;TheWelcome /&gt;</code>是封装好的组件，路径位于 <code>frontend/src/components/</code> 。</p><p>以上就是 Vue 项目三个重要的文件，而对入门者来说，最重要的就是各种 <code>.vue</code> 文件，这就是你最主要的写代码的地方。</p><h2 id="3-文章列表">3. 文章列表</h2><h3 id="3-1-初次尝试">3.1 初次尝试</h3><p>Vue 把同一个组件的 <code>template</code> / <code>script</code> / <code>style</code> 打包到一起组成<code>.vue</code>文件。在<code>App.vue</code>里编写文章列表页面代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/App.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'App',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article').then(response =&gt; {</span><br><span class="line">      this.info = response.data</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>删除<code>main.js</code>中引入的样式，即删除<code>import './assets/main.css'</code>这一行内容。</p><p>访问地址：<a href="http://localhost:5173/">http://localhost:5173/</a> 即可看到后端文章列表数据被渲染出来了。</p><p><img src="/posts/12498/image-20230328201646275.png" alt="初次尝试"></p><h3 id="3-2-优化界面">3.2 优化界面</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/App.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">        {{ tag }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'App',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article').then(response =&gt; {</span><br><span class="line">      this.info = response.data</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    formatted_time(iso_date_string) {</span><br><span class="line">      const date = new Date(iso_date_string)</span><br><span class="line">      return date.toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>现在博客页面大概是这样子的：</p><p><img src="/posts/12498/image-20230328201737241.png" alt="image-20230328201737241"></p><h3 id="3-3-添加页眉页脚">3.3 添加页眉页脚</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/App.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">        {{ tag }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id="footer"&gt;</span><br><span class="line">    &lt;p&gt;http://localhost:5173/&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'App',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article').then(response =&gt; {</span><br><span class="line">      this.info = response.data</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    formatted_time(iso_date_string) {</span><br><span class="line">      const date = new Date(iso_date_string)</span><br><span class="line">      return date.toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app {</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  margin-left: 40px;</span><br><span class="line">  margin-right: 40px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#footer {</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background: whitesmoke;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>现在博客页面大概是这样子的：</p><p><img src="/posts/12498/image-20230328203043454.png" alt="添加页眉页脚"></p><h3 id="3-4-组件化">3.4 组件化</h3><p>组件化是 Vue 的核心思想之一。组件可以把网页分解成一个个的小功能，达到代码解耦及复用。</p><p>在 <code>frontend/src/components/</code> 路径下分别创建 <code>ArticleList.vue</code> / <code>BlogHeader.vue</code> / <code>BlogFooter.vue</code> 三个文件，并且把我们之前在 <code>App.vue</code> 中写的代码分别搬运到对应的位置。</p><p>三个文件的内容如下（注意 <code>export</code> 中的 <code>name</code> 有对应的更改）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/ArticleList.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">        {{ tag }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleList',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article').then(response =&gt; {</span><br><span class="line">      this.info = response.data</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    formatted_time(iso_date_string) {</span><br><span class="line">      const date = new Date(iso_date_string)</span><br><span class="line">      return date.toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader'</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogFooter.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="footer"&gt;</span><br><span class="line">    &lt;p&gt;http://localhost:5173/&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogFooter'</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#footer {</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background: whitesmoke;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/App.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;article-list /&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import ArticleList from '@/components/ArticleList.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'App',</span><br><span class="line">  components: { BlogHeader, BlogFooter, ArticleList }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app {</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  margin-left: 40px;</span><br><span class="line">  margin-right: 40px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>刷新页面，功能虽然与修改前完全相同，但代码变得更加规整。</p><h2 id="4-文章详情">4. 文章详情</h2><h3 id="4-1-优化文件结构">4.1 优化文件结构</h3><p>由于后续页面会越来越多，为了避免 <code>App.vue</code> 越发臃肿，因此必须优化文件结构。</p><p>新建 <code>frontend/src/views/</code> 目录，用来存放现在及将来所有的页面文件。在此目录新建 <code>Home.vue</code> 文件，把之前的首页代码稍加修改搬运过来：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/Home.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;article-list /&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import ArticleList from '@/components/ArticleList.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Home',</span><br><span class="line">  components: { BlogHeader, BlogFooter, ArticleList }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>新增文章详情页面：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleDetail',</span><br><span class="line">  components: { BlogHeader, BlogFooter }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>修改 <code>App.vue</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/App.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'App',</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app {</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  margin-left: 40px;</span><br><span class="line">  margin-right: 40px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>从列表到详情，需要解决页面跳转，采用<strong>前端路由</strong>的方式来实现页面跳转</p><h3 id="4-2-配置路由">4.2 配置路由</h3><p>执行<code>npm install vue-router</code>安装 Vue 的官方前端路由库<code>vue-router</code></p><p>因为 vue-router 会用到文章的 id 作为动态地址，所以修改 <strong>Django 后端</strong>文件<code>article/serializers.py</code>的<code>ArticleBaseSerializer</code>，添加一行 <code>id = serializers.IntegerField(read_only=True)</code> ，简单的把文章的 id 值增加到接口数据中。</p><p>新建 <code>frontend/src/router/index.js</code> 文件用于存放路由相关的文件，写入：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/src/router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleDetail = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleDetail.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'home'</span>,</span><br><span class="line">    <span class="attr">component</span>: Home</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/:id'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleDetail'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleDetail</span><br><span class="line">  },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter({</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">  routes,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>列表 <code>routes</code> 定义了所有需要挂载到路由中的路径，成员为<strong>路径 url</strong> 、<strong>路径名</strong>和<strong>路径的 vue 对象</strong>。详情页面的动态路由采用冒号 <code>:id</code> 的形式来定义。</li><li>接着就用 <code>createRouter()</code> 创建 router。参数里的 <code>history</code> 定义具体的路由形式，<code>createWebHashHistory()</code> 为哈希模式（具体路径在 # 符号后面）；<code>createWebHistory()</code> 为 HTML5 模式（路径中没有丑陋的 # 符号），此为<strong>推荐模式</strong>，但是<strong>部署时需要额外的配置</strong>。</li></ul><blockquote><p><em>各模式的详细介绍看</em><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">文档</a><em>。</em></p></blockquote><p>将 vue-router 加载 Vue 实例中：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = createApp(App)</span><br><span class="line">app.use(router)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>此时，浏览器访问 <a href="http://localhost:5173/">http://localhost:5173/</a> 得到 <strong>Home</strong> 页面</p><h3 id="4-3-文章详情页面">4.3 文章详情页面</h3><p>修改文章列表的组件代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/ArticleList.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">        {{ tag }}</span><br><span class="line">      &lt;/span&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleList',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article').then(response =&gt; {</span><br><span class="line">      this.info = response.data</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    formatted_time(iso_date_string) {</span><br><span class="line">      const date = new Date(iso_date_string)</span><br><span class="line">      return date.toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>调用 vue-router 不再需要常规的 <code>&lt;a&gt;</code> 标签，而是 <code>&lt;router-link&gt;</code> ，<code>:to</code> 属性指定了跳转位置，注意看<strong>动态参数 id</strong> 是如何传递的。</p><p>在 Vue 中，属性前面的冒号 <code>:</code> 表示此属性被”绑定“了。”绑定“的对象可以是某个动态的参数（比如这里的 id 值），也可以是 Vue 所管理的 data，也可以是 methods。冒号 <code>:</code> 实际上是 <code>v-bind:</code> 的缩写。</p><p>Router 骨架就搭建完毕了。此时点击首页的文章标题链接后，应该就顺利跳转到一个只有页眉页脚的详情页面了。</p><p>接下来编写详情页面：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;div v-if="article !== null" class="grid-container"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 id="title"&gt;{{ article.title }}&lt;/h1&gt;</span><br><span class="line">      &lt;p id="subtitle"&gt;本文由 {{ article.author.username }} 发布于 {{ formatted_time(article.created) }}&lt;/p&gt;</span><br><span class="line">      &lt;div v-html="article.body_html" class="article-body"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;目录&lt;/h3&gt;</span><br><span class="line">      &lt;div v-html="article.toc_html" class="toc"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleDetail',</span><br><span class="line">  components: { BlogHeader, BlogFooter },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      article: null</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article/' + this.$route.params.id).then(response =&gt; {</span><br><span class="line">      this.article = response.data</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    formatted_time(iso_date_string) {</span><br><span class="line">      const date = new Date(iso_date_string)</span><br><span class="line">      return date.toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grid-container {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 3fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#title {</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: x-large;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#subtitle {</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: gray;</span><br><span class="line">  font-size: small;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.article-body p img {</span><br><span class="line">  max-width: 100%;</span><br><span class="line">  border-radius: 50px;</span><br><span class="line">  box-shadow: gray 0 0 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.toc ul {</span><br><span class="line">  list-style-type: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.toc a {</span><br><span class="line">  color: gray;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>模板 - template</strong>部分：</p><ul><li>在渲染文章前，逻辑控制语句 <code>v-if</code> 先确认数据是否存在，避免出现<strong>潜在的</strong>调用数据不存在的 bug。</li><li>由于 <code>body_html</code> 、<code>toc_html</code> 都是后端渲染好的 markdown 文本，需要将其直接转换为 HTML ，所以需要用 <code>v-html</code> 标注。</li></ul><p><strong>脚本 - script</strong>部分：</p><ul><li>通过 <code>$route.params.id</code> 可以获得路由中的动态参数，以此拼接为接口向后端请求数据。</li></ul><p><strong>样式 - style</strong>部分：</p><ul><li><code>.grid-container</code> 简单的给文章内容、目录划分了网格区域。</li><li><code>&lt;style&gt;</code> 标签可以有多个，满足“分块强迫症患者”的需求。这里分两个的原因是文章内容、目录都是从原始 HTML 渲染的，不在 <code>scoped</code> 的管理范围内。</li></ul><h2 id="5-翻页与监听">5. 翻页与监听</h2><h3 id="5-1-路由与查询参数">5.1 路由与查询参数</h3><p>详情页面跳转，用到了 vue-router 动态匹配路由的能力。而翻页功能通常不会直接改变当前路由，而是修改 url 中的查询参数来实现。区别如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 改变路由</span><br><span class="line">https://abc.com/2</span><br><span class="line"># 改变查询参数</span><br><span class="line">http://abc.com/?page=2</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-实现翻页">5.2 实现翻页</h3><blockquote><p>翻页在 <code>ArticleList.vue</code> 中完成</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/ArticleList.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">        {{ tag }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id="paginator"&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('previous')"&gt;</span><br><span class="line">      &lt;router-link :to="{ name: 'Home', query: { page: get_page_param('previous') } }"&gt;</span><br><span class="line">        Prev</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class="current-page"&gt;</span><br><span class="line">      {{ get_page_param('current') }}</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('next')"&gt;</span><br><span class="line">      &lt;router-link :to="{ name: 'Home', query: { page: get_page_param('next') } }"&gt;</span><br><span class="line">        Next</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleList',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.get_article_data()</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // 判断页面是否存在</span><br><span class="line">    is_page_exists(direction) {</span><br><span class="line">      if (direction === 'next') {</span><br><span class="line">        return this.info.next !== null</span><br><span class="line">      }</span><br><span class="line">      return this.info.previous !== null</span><br><span class="line">    },</span><br><span class="line">    // 获取页码</span><br><span class="line">    get_page_param(direction) {</span><br><span class="line">      try {</span><br><span class="line">        let url_string</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            url_string = this.info.next</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            url_string = this.info.previous</span><br><span class="line">            break</span><br><span class="line">          default:</span><br><span class="line">            if (!('page' in this.$route.query)) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            if (this.$route.query.page === null) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            return this.$route.query.page</span><br><span class="line">        }</span><br><span class="line">        const url = new URL(url_string)</span><br><span class="line">        return url.searchParams.get('page')</span><br><span class="line">      } catch (err) {</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 获取文章列表数据</span><br><span class="line">    get_article_data() {</span><br><span class="line">      let url = '/api/article/'</span><br><span class="line">      const page = Number(this.$route.query.page)</span><br><span class="line">      if (!isNaN(page) &amp;&amp; (page !== 0)) {</span><br><span class="line">        url = url + '?page=' + page</span><br><span class="line">      }</span><br><span class="line">      axios.get(url).then(response =&gt; {</span><br><span class="line">        this.info = response.data</span><br><span class="line">      }).catch(error =&gt; {</span><br><span class="line">        console.log(error)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    // 监听路由变化</span><br><span class="line">    $route() {</span><br><span class="line">      this.get_article_data()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    // 格式化时间</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return timeString =&gt; new Date(timeString).toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#paginator {</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding-top: 50px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">a {</span><br><span class="line">  color: black;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.current-page {</span><br><span class="line">  font-size: x-large;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><code>is_page_exists(...)</code> 用于确认需要跳转的页面是否存在，如果不存在那就不渲染对应的跳转标签。它的唯一参数用于确定页面的方向（当前页、上一页或下一页）。</li><li><code>get_page_param(...)</code> 用于获取页码。</li><li><code>router-link</code> 通过 query 传递参数</li><li><code>try</code> 是为了避免潜在的取值问题（比如网速缓慢时 <code>info</code> 还未获取到数据）， <code>catch</code> 语句向控制台打印报错。</li><li><code>switch</code> 用来控制翻页方向，它默认查询了当前的页码，用于显示。</li><li><code>watch</code> 的作用是监听路由的变化，一旦发生变化则立即根据当前页码更新对应的文章数据。</li><li><code>computed</code> 用来格式化时间，与<code>methods</code>不同之处在于，<strong>competed</strong> 有缓存，在值不变的情况下不会再次计算，而是直接使用缓存中的值。</li></ul><h2 id="6-搜索文章">6. 搜索文章</h2><h3 id="6-1-实现输入框">6.1 实现输入框</h3><p>将搜索框放在页眉，这样用户在博客的所有页面都能找到搜索框。修改<code>BlogHeader.vue</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;div class="search"&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;input v-model="searchText" type="text" placeholder="输入搜索内容..."&gt;</span><br><span class="line">          &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      searchText: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    searchArticle() {</span><br><span class="line">      const text = this.searchText.trim()</span><br><span class="line">      if (text.charAt(0) !== '') {</span><br><span class="line">        this.$router.push({ name: 'Home', query: { search: text } })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search {</span><br><span class="line">  padding-top: 22px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form {</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input,</span><br><span class="line">button {</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 35px;</span><br><span class="line">  padding-left: 13px;</span><br><span class="line">  padding-right: 46px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  width: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  position: absolute;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search input {</span><br><span class="line">  border: 2px solid gray;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  background: transparent;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search button {</span><br><span class="line">  background: gray;</span><br><span class="line">  border-radius: 0 5px 5px 0;</span><br><span class="line">  width: 45px;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search button:before {</span><br><span class="line">  content: "搜索";</span><br><span class="line">  font-size: 13px;</span><br><span class="line">  color: white;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><code>v-model</code> 指令可以在表单控件上创建<strong>双向数据绑定</strong>。具体来说，就是上面的 <code>&lt;input&gt;</code> 中的数据和 Vue 管理的 <code>searchText</code> 数据绑定在一起了，其中一个发生变化，另一个也会改变。</li><li><code>@click</code> 绑定了按钮的<strong>鼠标点击事件</strong>，即点击则触发 <code>searchArticles()</code> 方法。<code>.prevent</code> 用于阻止按钮原本的表单提交功能。</li><li><code>&lt;router-link&gt;</code> 标签实现路由跳转。在必要时候也可以通过脚本来<strong>动态实现</strong>路由跳转，即 <code>this.$router.push(...)</code> 。注意 <code>this.$route</code> 和 <code>this.$router</code> ，前者代表路径对象，后者代表路由器对象。</li></ul><h3 id="6-2-实现搜索">6.2 实现搜索</h3><p>在 <code>ArticleList.vue</code> 里进行修改（主要是 Javascript 部分）。</p><p>旧的翻页 <code>&lt;router-link&gt;</code> 仅考虑了路径参数中的 <code>page</code> 值。为了在翻页后取得包括 <code>page</code> 和 <code>search</code> 的正确路径，新写一个方法 <code>get_path()</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/ArticleList.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">        {{ tag }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id="paginator"&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('previous')"&gt;</span><br><span class="line">      &lt;router-link :to="get_path('previous')"&gt;</span><br><span class="line">        Prev</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class="current-page"&gt;</span><br><span class="line">      {{ get_page_param('current') }}</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('next')"&gt;</span><br><span class="line">      &lt;router-link :to="get_path('next')"&gt;</span><br><span class="line">        Next</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleList',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.get_article_data()</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // 判断页面是否存在</span><br><span class="line">    is_page_exists(direction) {</span><br><span class="line">      if (direction === 'next') {</span><br><span class="line">        return this.info.next !== null</span><br><span class="line">      }</span><br><span class="line">      return this.info.previous !== null</span><br><span class="line">    },</span><br><span class="line">    // 获取页码</span><br><span class="line">    get_page_param(direction) {</span><br><span class="line">      try {</span><br><span class="line">        let url_string</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            url_string = this.info.next</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            url_string = this.info.previous</span><br><span class="line">            break</span><br><span class="line">          default:</span><br><span class="line">            if (!('page' in this.$route.query)) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            if (this.$route.query.page === null) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            return this.$route.query.page</span><br><span class="line">        }</span><br><span class="line">        const url = new URL(url_string)</span><br><span class="line">        return url.searchParams.get('page')</span><br><span class="line">      } catch (err) {</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 获取文章列表数据</span><br><span class="line">    get_article_data() {</span><br><span class="line">      let url = '/api/article/'</span><br><span class="line">      let params = new URLSearchParams()</span><br><span class="line">      if (this.isExists(this.$route.query.page)) {</span><br><span class="line">        params.append('page', this.$route.query.page)</span><br><span class="line">      }</span><br><span class="line">      if (this.isExists(this.$route.query.search)) {</span><br><span class="line">        params.append('search', this.$route.query.search)</span><br><span class="line">      }</span><br><span class="line">      const paramsString = params.toString()</span><br><span class="line">      if (paramsString.charAt(0) !== '') {</span><br><span class="line">        url += '/?' + paramsString</span><br><span class="line">      }</span><br><span class="line">      axios.get(url).then(response =&gt; {</span><br><span class="line">        this.info = response.data</span><br><span class="line">      }).catch(error =&gt; {</span><br><span class="line">        console.log(error)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    // 获取路径</span><br><span class="line">    get_path(direction) {</span><br><span class="line">      let url = ''</span><br><span class="line">      try {</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            if (this.info.next !== undefined) {</span><br><span class="line">              url += (new URL(this.info.next)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            if (this.info.previous !== undefined) {</span><br><span class="line">              url += (new URL(this.info.previous)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">        }</span><br><span class="line">      } catch {</span><br><span class="line">        return url</span><br><span class="line">      }</span><br><span class="line">      return url</span><br><span class="line">    },</span><br><span class="line">    // 检查参数是否存在</span><br><span class="line">    isExists(value) {</span><br><span class="line">      return value !== null &amp;&amp; value !== undefined</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    // 监听路由变化</span><br><span class="line">    $route() {</span><br><span class="line">      this.get_article_data()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    // 格式化时间</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return timeString =&gt; new Date(timeString).toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#paginator {</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding-top: 50px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">a {</span><br><span class="line">  color: black;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.current-page {</span><br><span class="line">  font-size: x-large;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>用于处理路径参数的 <code>URLSearchParams()</code> 对象。为了将路径中已有的参数添加到 <code>URLSearchParams()</code> 中，编写isExists方法<strong>判断值是否存在</strong>，然后用 <code>append()</code> 方法添加到路径。</p><h2 id="7-用户注册">7. 用户注册</h2><p>前面都是实现文章的 GET 请求，接下来实现更新、删除之类的请求，从用户管理入手。</p><h3 id="7-1-注册页面">7.1 注册页面</h3><p>新建 <code>frontend/src/views/Login.vue</code> 文件作为用户注册（以及登录）的页面：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/Login.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id="grid"&gt;</span><br><span class="line">    &lt;div id="signup"&gt;</span><br><span class="line">      &lt;h3&gt;注册账号&lt;/h3&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;账号：&lt;/span&gt;</span><br><span class="line">          &lt;input type="text" v-model="signupName" placeholder="输入用户名"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signupPwd" placeholder="输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;确认密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signupPwdConfirm" placeholder="再次输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;button @click.prevent="signup"&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue';</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: "Login",</span><br><span class="line">  components: { BlogHeader, BlogFooter },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      signupName: '',</span><br><span class="line">      signupPwd: '',</span><br><span class="line">      signupPwdConfirm: '',</span><br><span class="line">      signupResponse: null,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    signup() {</span><br><span class="line">      if (this.signupPwd !== this.signupPwdConfirm) {</span><br><span class="line">        alert("两次密码不一致，请重新输入!")</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">      axios.post('/api/user/', {</span><br><span class="line">        username: this.signupName,</span><br><span class="line">        password: this.signupPwd,</span><br><span class="line">      }).then((response) =&gt; {</span><br><span class="line">        this.signupResponse = response.data</span><br><span class="line">        alert('用户注册成功')</span><br><span class="line">      }).catch((error) =&gt; {</span><br><span class="line">        alert('用户注册失败:', error.message)</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#signup {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.label {</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 80px;</span><br><span class="line">  text-align: justify;</span><br><span class="line">  text-align-last: justify;</span><br><span class="line">  margin-right: 1px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: gray;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 60px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>上面代码的功能是将表单中的用户名和密码 <code>post</code> 到 <code>/api/user/</code> 接口，若创建成功则提醒用户前往登录，失败则将提示信息显示出来。</p><h3 id="7-2-注册路由">7.2 注册路由</h3><p>在<code>frontend/src/router/index.js</code>中添加注册路由</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/src/router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleDetail = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleDetail.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Login = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Login.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Home'</span>,</span><br><span class="line">    <span class="attr">component</span>: Home</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/:id'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleDetail'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleDetail</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Login'</span>,</span><br><span class="line">    <span class="attr">component</span>: Login</span><br><span class="line">  },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter({</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">  routes,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在<code>frontend/src/components/BlogHeader.vue</code>添加入口：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;div class="search"&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;input v-model="searchText" type="text" placeholder="输入搜索内容..."&gt;</span><br><span class="line">          &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class="login"&gt;</span><br><span class="line">      &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      searchText: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    searchArticle() {</span><br><span class="line">      const text = this.searchText.trim()</span><br><span class="line">      if (text.charAt(0) !== '') {</span><br><span class="line">        this.$router.push({ name: 'Home', query: { search: text } })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search {</span><br><span class="line">  padding-top: 22px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form {</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input,</span><br><span class="line">button {</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 35px;</span><br><span class="line">  padding-left: 13px;</span><br><span class="line">  padding-right: 46px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  width: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  position: absolute;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search input {</span><br><span class="line">  border: 2px solid gray;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  background: transparent;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search button {</span><br><span class="line">  background: gray;</span><br><span class="line">  border-radius: 0 5px 5px 0;</span><br><span class="line">  width: 45px;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search botton:before {</span><br><span class="line">  content: "搜索";</span><br><span class="line">  font-size: 13px;</span><br><span class="line">  color: white;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.login {</span><br><span class="line">  text-align: right;</span><br><span class="line">  padding-right: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="8-用户登录">8. 用户登录</h2><p>由于后端的认证方式为 JWT 认证，即后端返回给前端一个 token，前端在请求的 Header 中附带此 token 令牌来证明身份。<strong>token 保存在前端的什么地方？</strong></p><p>本教程将采用 token 保存在 <code>localStorage</code> 中，实现登录功能。</p><blockquote><p><em>此问题有广泛的讨论，因为 token 无论是保存在 localStorage、sessionStorage 或者 cookie 中均存在某些情况下被盗取的可能。网络安全不是本教程重点关注的问题，因此为了入门平滑将 token 保存于 localStorage 中，更深入的对安全的讨论请见</em> <a href="https://hasura.io/blog/best-practices-of-using-jwt-with-graphql/">HASURA</a><em>、</em><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie">MDN</a><em>以及</em><a href="https://stackoverflow.com/questions/26340275/where-to-save-a-jwt-in-a-browser-based-application-and-how-to-use-it">Stackoverflow</a><em>。有关 localStorage 的入门讲解</em><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage">看这里</a><em>。</em></p></blockquote><h3 id="8-1-登录页面">8.1 登录页面</h3><p>在 <code>Login.vue</code> 添加登录的表单的代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/Login.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id="grid"&gt;</span><br><span class="line">    &lt;div id="signup"&gt;</span><br><span class="line">      &lt;h3&gt;注册账号&lt;/h3&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;账号：&lt;/span&gt;</span><br><span class="line">          &lt;input type="text" v-model="signupName" placeholder="输入用户名"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signupPwd" placeholder="输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;确认密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signupPwdConfirm" placeholder="再次输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;button @click.prevent="signup"&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id="signin"&gt;</span><br><span class="line">      &lt;h3&gt;登录账号&lt;/h3&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;账号：&lt;/span&gt;</span><br><span class="line">          &lt;input type="text" v-model="signinName" placeholder="输入用户名"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signinPwd" placeholder="输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;button @click.prevent="signin"&gt;登录&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue';</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: "Login",</span><br><span class="line">  components: { BlogHeader, BlogFooter },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      signupName: '',</span><br><span class="line">      signupPwd: '',</span><br><span class="line">      signupPwdConfirm: '',</span><br><span class="line">      signinName: '',</span><br><span class="line">      signinPwd: '',</span><br><span class="line">      signupResponse: null,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    signup() {</span><br><span class="line">      if (this.signupPwd !== this.signupPwdConfirm) {</span><br><span class="line">        alert("两次密码不一致，请重新输入!")</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">      axios.post('/api/user/', {</span><br><span class="line">        username: this.signupName,</span><br><span class="line">        password: this.signupPwd,</span><br><span class="line">      }).then((response) =&gt; {</span><br><span class="line">        this.signupResponse = response.data</span><br><span class="line">        alert('用户注册成功')</span><br><span class="line">      }).catch((error) =&gt; {</span><br><span class="line">        alert('用户注册失败:', error.message)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    signin() {</span><br><span class="line">      axios.post('/api/token/', {</span><br><span class="line">        username: this.signinName,</span><br><span class="line">        password: this.signinPwd,</span><br><span class="line">      }).then((response) =&gt; {</span><br><span class="line">        const storage = localStorage</span><br><span class="line">        const expiredTime = Date.parse(response.headers.date) + 10800000</span><br><span class="line">        storage.setItem('access.myblog', response.data.access)</span><br><span class="line">        storage.setItem('refresh.myblog', response.data.refresh)</span><br><span class="line">        storage.setItem('expiredTime.myblog', expiredTime)</span><br><span class="line">        storage.setItem('username.myblog', this.signinName)</span><br><span class="line">        this.$router.push({ name: 'Home' })</span><br><span class="line">      }).catch((error) =&gt; {</span><br><span class="line">        alert('用户登录失败:', error.message)</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#signup {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#signin {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.label {</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 80px;</span><br><span class="line">  text-align: justify;</span><br><span class="line">  text-align-last: justify;</span><br><span class="line">  margin-right: 1px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: gray;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 60px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="8-2-显示登录状态">8.2 显示登录状态</h3><p>修改<code>frontend/src/components/Blogheader.vue</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/Blogheader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;div class="search"&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;input v-model="searchText" type="text" placeholder="输入搜索内容..."&gt;</span><br><span class="line">          &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class="login"&gt;</span><br><span class="line">      &lt;div v-if="hasLogin"&gt;欢迎，{{ username }}&lt;/div&gt;</span><br><span class="line">      &lt;div v-else&gt;</span><br><span class="line">        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      searchText: '',</span><br><span class="line">      username: '',</span><br><span class="line">      hasLogin: false,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    searchArticle() {</span><br><span class="line">      const text = this.searchText.trim()</span><br><span class="line">      if (text.charAt(0) !== '') {</span><br><span class="line">        this.$router.push({ name: 'Home', query: { search: text } })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    const storage = localStorage</span><br><span class="line">    const expiredTime = Number(storage.getItem('expiredTime.myblog'))</span><br><span class="line">    const current = (new Date()).getTime()</span><br><span class="line">    const refreshToken = storage.getItem('refresh.myblog')</span><br><span class="line">    this.username = storage.getItem('username.myblog')</span><br><span class="line"></span><br><span class="line">    if (expiredTime &gt; current) {</span><br><span class="line">      this.hasLogin = true</span><br><span class="line">    } else if (refreshToken !== null) {</span><br><span class="line">      axios.post('/api/token/refresh/', { refresh: refreshToken }).then((response) =&gt; {</span><br><span class="line">        const nextExpiredTime = Date.parse(response.headers.date) + 10800000</span><br><span class="line">        storage.setItem('access.myblog', response.data.access)</span><br><span class="line">        storage.setItem('expiredTime.myblog', nextExpiredTime)</span><br><span class="line"></span><br><span class="line">        this.hasLogin = true</span><br><span class="line">      }).catch(() =&gt; {</span><br><span class="line">        storage.clear()</span><br><span class="line">        this.hasLogin = false</span><br><span class="line">        alert('请重新登录')</span><br><span class="line">      })</span><br><span class="line">    } else {</span><br><span class="line">      storage.clear()</span><br><span class="line">      this.hasLogin = false</span><br><span class="line">      alert('请重新登录')</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search {</span><br><span class="line">  padding-top: 22px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form {</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input,</span><br><span class="line">button {</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 35px;</span><br><span class="line">  padding-left: 13px;</span><br><span class="line">  padding-right: 46px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  width: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  position: absolute;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search input {</span><br><span class="line">  border: 2px solid gray;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  background: transparent;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search button {</span><br><span class="line">  background: gray;</span><br><span class="line">  border-radius: 0 5px 5px 0;</span><br><span class="line">  width: 45px;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search button:before {</span><br><span class="line">  content: "搜索";</span><br><span class="line">  font-size: 13px;</span><br><span class="line">  color: white;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.login {</span><br><span class="line">  text-align: right;</span><br><span class="line">  padding-right: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="9-用户资料">9 用户资料</h2><h3 id="9-1-搜索框组件化">9.1 搜索框组件化</h3><p>把搜索框组件化，新建一个<code>SearchButton.vue</code>文件，把<code>BlogHeader.vue</code>中与搜索相关的内容全部搬运过来。</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/SearchButton.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="search"&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input type="text" v-model="searchText" placeholder="输入搜索内容..."&gt;</span><br><span class="line">      &lt;button @click.prevent="searchArticle"&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'SearchButton',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      searchText: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    searchArticle() {</span><br><span class="line">      const text = this.searchText.trim()</span><br><span class="line">      if (text.charAt(0) !== '') {</span><br><span class="line">        this.$router.push({ name: 'Home', query: { search: text } })</span><br><span class="line">      } else {</span><br><span class="line">        this.$router.push({ name: 'Home' })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.search {</span><br><span class="line">  padding-top: 22px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form {</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input,</span><br><span class="line">button {</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 35px;</span><br><span class="line">  padding-left: 13px;</span><br><span class="line">  padding-right: 46px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  width: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  position: absolute;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search input {</span><br><span class="line">  border: 2px solid gray;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  background: transparent;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search button {</span><br><span class="line">  background: gray;</span><br><span class="line">  border-radius: 0 5px 5px 0;</span><br><span class="line">  width: 45px;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.search button:before {</span><br><span class="line">  content: "搜索";</span><br><span class="line">  font-size: 13px;</span><br><span class="line">  color: white;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>把<code>BlogHeader.vue</code>对应搜索的部分删除：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;search-button /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class="login"&gt;</span><br><span class="line">      &lt;div v-if="hasLogin"&gt;欢迎，{{ username }}&lt;/div&gt;</span><br><span class="line">      &lt;div v-else&gt;</span><br><span class="line">        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import SearchButton from '@/components/SearchButton.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      searchText: '',</span><br><span class="line">      username: '',</span><br><span class="line">      hasLogin: false,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    SearchButton</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line"></span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    const storage = localStorage</span><br><span class="line">    const expiredTime = Number(storage.getItem('expiredTime.myblog'))</span><br><span class="line">    const current = (new Date()).getTime()</span><br><span class="line">    const refreshToken = storage.getItem('refresh.myblog')</span><br><span class="line">    this.username = storage.getItem('username.myblog')</span><br><span class="line"></span><br><span class="line">    if (expiredTime &gt; current) {</span><br><span class="line">      this.hasLogin = true</span><br><span class="line">    } else if (refreshToken !== null) {</span><br><span class="line">      axios.post('/api/token/refresh/', { refresh: refreshToken }).then((response) =&gt; {</span><br><span class="line">        const nextExpiredTime = Date.parse(response.headers.date) + 10800000</span><br><span class="line">        storage.setItem('access.myblog', response.data.access)</span><br><span class="line">        storage.setItem('expiredTime.myblog', nextExpiredTime)</span><br><span class="line"></span><br><span class="line">        this.hasLogin = true</span><br><span class="line">      }).catch(() =&gt; {</span><br><span class="line">        storage.clear()</span><br><span class="line">        this.hasLogin = false</span><br><span class="line">        alert('请重新登录')</span><br><span class="line">      })</span><br><span class="line">    } else {</span><br><span class="line">      storage.clear()</span><br><span class="line">      this.hasLogin = false</span><br><span class="line">      alert('请重新登录')</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.login {</span><br><span class="line">  text-align: right;</span><br><span class="line">  padding-right: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="9-2-异步和重构">9.2 异步和重构</h3><ul><li>用户资料页面涉及 POST/PATCH 等操作，需要验证用户的身份和 token 有效性；前面写的 <code>BlogHeader.vue</code> 也有类似的需求。因此需要将<strong>验证代码</strong>重构为一个单独的函数。</li><li>把<strong>验证代码</strong>抽象为单独的函数后，由于 <code>axios</code> 发送的请求是异步的，所以要将此处的异步代码转换为同步代码，否则 localStorage 的存取顺序会因为网速的快慢而不可预测，带来潜在 bug。</li></ul><p>新建路径和文件<code>frontend/src/utils/authorization.js</code>：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/src/utils/authorization.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">authorization</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> storage = <span class="built_in">localStorage</span></span><br><span class="line">  <span class="keyword">let</span> hasLogin = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> username = storage.getItem(<span class="string">'username.myblog'</span>)</span><br><span class="line">  <span class="keyword">const</span> expiredTime = <span class="built_in">Number</span>(storage.getItem(<span class="string">'expiredTime.myblog'</span>))</span><br><span class="line">  <span class="keyword">const</span> current = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()</span><br><span class="line">  <span class="keyword">const</span> refreshToken = storage.getItem(<span class="string">'refresh.myblog'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (expiredTime &gt; current) {</span><br><span class="line">    hasLogin = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'authorization access'</span>)</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (refreshToken !== <span class="literal">null</span>) {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="keyword">let</span> response = <span class="keyword">await</span> axios.post((<span class="string">'/api/token/refresh/'</span>, { <span class="attr">refresh</span>: refreshToken }))</span><br><span class="line">      <span class="keyword">const</span> nextExpiredTime = <span class="built_in">Date</span>.parse(response.headers.date) + <span class="number">10800000</span></span><br><span class="line">      storage.setItem(<span class="string">'access.myblog'</span>, response.data.access)</span><br><span class="line">      storage.setItem(<span class="string">'expiredTime.myblog'</span>, nextExpiredTime)</span><br><span class="line">      hasLogin = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'authorization refresh'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span>(err) {</span><br><span class="line">      storage.clear()</span><br><span class="line">      hasLogin = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'authorization err'</span>)</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    storage.clear()</span><br><span class="line">    hasLogin = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'authorization exp'</span>)</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'authorization done'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [hasLogin, username]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> authorization</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><code>async/await</code> ： <code>async</code> 表示函数里含有异步操作，<code>await</code> 表示紧跟在后面的表达式需要等待结果。<code>await</code> 关键字只能用在 <code>async</code> 函数中，并且由于它返回的 <code>Promise</code> 对象运行的结果可能是 <code>rejected</code> ，所以最好放到 <code>try...catch</code> 语句中。</li><li><code>async</code> 函数返回的不再是 <code>return</code> 后面的数据，而是包含数据的 <code>Promise</code> 对象，因此调用它的位置需要改为 <code>Promise.then().catch()</code> 进行异常处理。（有点像 <code>axios.then().catch()</code>)</li></ul><h3 id="9-3-用户中心">9.3 用户中心</h3><p>新建 <code>frontend/src/views/UserCenter.vue</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/UserCenter.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;div id="user-center"&gt;</span><br><span class="line">    &lt;h3&gt;更新资料信息&lt;/h3&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;用户名：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;新密码：&lt;/span&gt;</span><br><span class="line">        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue';</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue';</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">const storage = localStorage</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'UserCenter',</span><br><span class="line">  components: {</span><br><span class="line">    BlogHeader,</span><br><span class="line">    BlogFooter</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      password: '',</span><br><span class="line">      token: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.username = storage.getItem('username.myblog')</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    changeInfo() {</span><br><span class="line">      authorization().then((resoponse) =&gt; {</span><br><span class="line">        if (!resoponse[0]) {</span><br><span class="line">          alert('登录已过期，请重新登录')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        console.log('Change info start')</span><br><span class="line">        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {</span><br><span class="line">          alert('Password too short')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        const oldName = storage.getItem('username.myblog')</span><br><span class="line">        let data = {}</span><br><span class="line">        if (this.username !== '') {</span><br><span class="line">          data.username = this.username</span><br><span class="line">        }</span><br><span class="line">        if (this.password !== '') {</span><br><span class="line">          data.password = this.password</span><br><span class="line">        }</span><br><span class="line">        this.token = storage.getItem('access.myblog')</span><br><span class="line">        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {</span><br><span class="line">          const name = response.data.username</span><br><span class="line">          storage.setItem('username.myblog', name)</span><br><span class="line">          this.$router.push({ name: 'UserCenter', params: { username: name } })</span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#user-center {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: gray;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 200px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>检查函数返回的数据，如果登录失效，或者密码太短，则拒绝执行后面的逻辑。</li></ul><ul><li>拿到用户填写的表单数据，并取出保存在本地的令牌，发送到后端接口更新用户数据。</li></ul><p>修改<code>BlogHeader.vue</code>代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;search-button /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class="login"&gt;</span><br><span class="line">      &lt;div v-if="hasLogin"&gt;</span><br><span class="line">        &lt;div class="dropdown"&gt;</span><br><span class="line">          &lt;button class="dropbtn"&gt;欢迎，{{ username }}&lt;/button&gt;</span><br><span class="line">          &lt;div class="dropdown-content"&gt;</span><br><span class="line">            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-else&gt;</span><br><span class="line">        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SearchButton from '@/components/SearchButton.vue'</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      hasLogin: false,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    SearchButton</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    logout() {</span><br><span class="line">      localStorage.clear()</span><br><span class="line">      window.location.reload(false)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.login {</span><br><span class="line">  text-align: right;</span><br><span class="line">  padding-right: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropbtn {</span><br><span class="line">  background-color: mediumaquamarine;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 8px 8px 30px 8px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  border: none;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  height: 16px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown {</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content {</span><br><span class="line">  display: none;</span><br><span class="line">  position: absolute;</span><br><span class="line">  background-color: #f9f9f9;</span><br><span class="line">  min-width: 120px;</span><br><span class="line">  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a {</span><br><span class="line">  color: black;</span><br><span class="line">  padding: 12px 16px;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a:hover {</span><br><span class="line">  background-color: #f1f1f1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropdown-content {</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropbtn {</span><br><span class="line">  background-color: darkslateblue;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>路由注册到<code>backend/src/router/index.js</code>：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// backend/src/router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleDetail = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleDetail.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Login = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Login.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> UserCenter = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/UserCenter.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Home'</span>,</span><br><span class="line">    <span class="attr">component</span>: Home</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/:id'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleDetail'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleDetail</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Login'</span>,</span><br><span class="line">    <span class="attr">component</span>: Login</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/user/:username'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'UserCenter'</span>,</span><br><span class="line">    <span class="attr">component</span>: UserCenter</span><br><span class="line">  },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter({</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">  routes,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="9-4-组件通信">9.4 组件通信</h3><p>Vue 中父组件向子组件传递信息的方式就是 <code>Props</code> 了，使用 Props 来实现欢迎词的更新。</p><p>修改<code>UserCenter.vue</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/UserCenter.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header :welcome-name="welcomeName" /&gt;</span><br><span class="line">  &lt;div id="user-center"&gt;</span><br><span class="line">    &lt;h3&gt;更新资料信息&lt;/h3&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;用户名：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;新密码：&lt;/span&gt;</span><br><span class="line">        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue';</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue';</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">const storage = localStorage</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'UserCenter',</span><br><span class="line">  components: {</span><br><span class="line">    BlogHeader,</span><br><span class="line">    BlogFooter</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      password: '',</span><br><span class="line">      token: '',</span><br><span class="line">      welcomeName: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.username = storage.getItem('username.myblog')</span><br><span class="line">    this.welcomeName = storage.get('username.myblog')</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    changeInfo() {</span><br><span class="line">      authorization().then((resoponse) =&gt; {</span><br><span class="line">        if (!resoponse[0]) {</span><br><span class="line">          alert('登录已过期，请重新登录')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        console.log('Change info start')</span><br><span class="line">        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {</span><br><span class="line">          alert('Password too short')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        const oldName = storage.getItem('username.myblog')</span><br><span class="line">        let data = {}</span><br><span class="line">        if (this.username !== '') {</span><br><span class="line">          data.username = this.username</span><br><span class="line">        }</span><br><span class="line">        if (this.password !== '') {</span><br><span class="line">          data.password = this.password</span><br><span class="line">        }</span><br><span class="line">        this.token = storage.getItem('access.myblog')</span><br><span class="line">        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {</span><br><span class="line">          const name = response.data.username</span><br><span class="line">          storage.setItem('username.myblog', name)</span><br><span class="line">          this.$router.push({ name: 'UserCenter', params: { username: name } })</span><br><span class="line">          this.welcomeName = name</span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#user-center {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: gray;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 200px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可以看到组件是可以带参数的（也就是 Props 了），这个参数会传递到<strong>子组件</strong>中使用。</p><p>修改<code>BlogHeader.vue</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;search-button /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class="login"&gt;</span><br><span class="line">      &lt;div v-if="hasLogin"&gt;</span><br><span class="line">        &lt;div class="dropdown"&gt;</span><br><span class="line">          &lt;button class="dropbtn"&gt;欢迎，{{ name }}&lt;/button&gt;</span><br><span class="line">          &lt;div class="dropdown-content"&gt;</span><br><span class="line">            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-else&gt;</span><br><span class="line">        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SearchButton from '@/components/SearchButton.vue'</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  props: ['welcomeName'],</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      hasLogin: false,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    SearchButton</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    logout() {</span><br><span class="line">      localStorage.clear()</span><br><span class="line">      window.location.reload(false)</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    name() {</span><br><span class="line">      return this.welcomeName !== undefined ? this.welcomeName : this.username</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.login {</span><br><span class="line">  text-align: right;</span><br><span class="line">  padding-right: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropbtn {</span><br><span class="line">  background-color: mediumaquamarine;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 8px 8px 30px 8px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  border: none;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  height: 16px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown {</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content {</span><br><span class="line">  display: none;</span><br><span class="line">  position: absolute;</span><br><span class="line">  background-color: #f9f9f9;</span><br><span class="line">  min-width: 120px;</span><br><span class="line">  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a {</span><br><span class="line">  color: black;</span><br><span class="line">  padding: 12px 16px;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a:hover {</span><br><span class="line">  background-color: #f1f1f1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropdown-content {</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropbtn {</span><br><span class="line">  background-color: darkslateblue;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>computed</code> 计算属性：</p><ul><li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要与它有关系的参数没有发生改变，多次访问此计算属性会立即返回之前的计算结果，而不必再次执行函数。相比之下，每当触发重新渲染时，<strong>方法</strong>将<strong>总会</strong>再次执行函数。</li><li>**计算属性默认不接受参数，并且不能产生副作用。**也就是说，在它的执行过程中不能改变任何 Vue 所管理的数据，否则将会报错。计算属性是依赖数据工作的，副作用会使代码不可预测。</li></ul><p>一般来说，能用 <code>computed</code> 就尽量用它，不能的再考虑 <code>methods</code> ，算是用空间（缓存）换取时间（效率）</p><p>Vue 的子<strong>组件给父组件传递信息采用的是事件</strong>的形式。</p><p>Vuex 是一个专为 Vue 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。也就是说，Vuex 把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为。</p><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的；应用够简单，最好不要使用 Vuex。一个简单的 <a href="https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">store 模式</a>就足够了。如果需要构建一个中大型单页应用，Vuex 将会成为自然而然的选择。中小型单页应用也可以使用 Pinia。</p><p>Props 虽然能够解决我们的问题，但总要持有 <code>welcomeName</code> 和 <code>username</code> 两个状态，可以使用 <code>ref</code> 访问子组件来改进。在 <code>BlogHeader.vue</code> 中写一个刷新数据的方法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;search-button /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class="login"&gt;</span><br><span class="line">      &lt;div v-if="hasLogin"&gt;</span><br><span class="line">        &lt;div class="dropdown"&gt;</span><br><span class="line">          &lt;button class="dropbtn"&gt;欢迎，{{ username }}&lt;/button&gt;</span><br><span class="line">          &lt;div class="dropdown-content"&gt;</span><br><span class="line">            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-else&gt;</span><br><span class="line">        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SearchButton from '@/components/SearchButton.vue'</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      hasLogin: false,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    SearchButton</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    logout() {</span><br><span class="line">      localStorage.clear()</span><br><span class="line">      window.location.reload(false)</span><br><span class="line">    },</span><br><span class="line">    refresh() {</span><br><span class="line">      this.username = localStorage.getItem('username.myblog')</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.login {</span><br><span class="line">  text-align: right;</span><br><span class="line">  padding-right: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropbtn {</span><br><span class="line">  background-color: mediumaquamarine;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 8px 8px 30px 8px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  border: none;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  height: 16px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown {</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content {</span><br><span class="line">  display: none;</span><br><span class="line">  position: absolute;</span><br><span class="line">  background-color: #f9f9f9;</span><br><span class="line">  min-width: 120px;</span><br><span class="line">  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a {</span><br><span class="line">  color: black;</span><br><span class="line">  padding: 12px 16px;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a:hover {</span><br><span class="line">  background-color: #f1f1f1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropdown-content {</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropbtn {</span><br><span class="line">  background-color: darkslateblue;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后在 <code>UserCenter.vue</code> 更新用户数据时访问此函数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/UserCenter.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header ref="header" /&gt;</span><br><span class="line">  &lt;div id="user-center"&gt;</span><br><span class="line">    &lt;h3&gt;更新资料信息&lt;/h3&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;用户名：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;新密码：&lt;/span&gt;</span><br><span class="line">        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue';</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue';</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">const storage = localStorage</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'UserCenter',</span><br><span class="line">  components: {</span><br><span class="line">    BlogHeader,</span><br><span class="line">    BlogFooter</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      password: '',</span><br><span class="line">      token: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.username = storage.getItem('username.myblog')</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    changeInfo() {</span><br><span class="line">      authorization().then((resoponse) =&gt; {</span><br><span class="line">        if (!resoponse[0]) {</span><br><span class="line">          alert('登录已过期，请重新登录')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        console.log('Change info start')</span><br><span class="line">        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {</span><br><span class="line">          alert('Password too short')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        const oldName = storage.getItem('username.myblog')</span><br><span class="line">        let data = {}</span><br><span class="line">        if (this.username !== '') {</span><br><span class="line">          data.username = this.username</span><br><span class="line">        }</span><br><span class="line">        if (this.password !== '') {</span><br><span class="line">          data.password = this.password</span><br><span class="line">        }</span><br><span class="line">        this.token = storage.getItem('access.myblog')</span><br><span class="line">        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {</span><br><span class="line">          const name = response.data.username</span><br><span class="line">          storage.setItem('username.myblog', name)</span><br><span class="line">          this.$router.push({ name: 'UserCenter', params: { username: name } })</span><br><span class="line">          this.$refs.header.refresh()</span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#user-center {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: gray;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 200px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="9-5-用户删除">9.5 用户删除</h3><p>删除用户按钮通常会放在用户中心页面，并且为了避免用户误操作，点击后还要进行第二次确认，方可删除。</p><p>修改 <code>UserCenter.vue</code> 文件：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/UserCenter.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header ref="header" /&gt;</span><br><span class="line">  &lt;div id="user-center"&gt;</span><br><span class="line">    &lt;h3&gt;更新资料信息&lt;/h3&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;用户名：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="username" placeholder="输入用户名"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;新密码：&lt;/span&gt;</span><br><span class="line">        &lt;input type="password" v-model="password" placeholder="输入密码"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="changeInfo"&gt;更新&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="showingDeleteAlert = true" class="delete-btn"&gt;删除用户&lt;/button&gt;</span><br><span class="line">        &lt;div :class="{ shake: showingDeleteAlert }"&gt;</span><br><span class="line">          &lt;button v-if="showingDeleteAlert" class="confirm-btn" @click.prevent="confirmDelete"&gt;</span><br><span class="line">            确定？</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue';</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue';</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">const storage = localStorage</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'UserCenter',</span><br><span class="line">  components: {</span><br><span class="line">    BlogHeader,</span><br><span class="line">    BlogFooter</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      password: '',</span><br><span class="line">      token: '',</span><br><span class="line">      showingDeleteAlert: false</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.username = storage.getItem('username.myblog')</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    changeInfo() {</span><br><span class="line">      authorization().then((resoponse) =&gt; {</span><br><span class="line">        if (!resoponse[0]) {</span><br><span class="line">          alert('登录已过期，请重新登录')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        console.log('Change info start')</span><br><span class="line">        if (this.password.length &gt; 0 &amp;&amp; this.password.length &lt; 6) {</span><br><span class="line">          alert('Password too short')</span><br><span class="line">          return</span><br><span class="line">        }</span><br><span class="line">        const oldName = storage.getItem('username.myblog')</span><br><span class="line">        let data = {}</span><br><span class="line">        if (this.username !== '') {</span><br><span class="line">          data.username = this.username</span><br><span class="line">        }</span><br><span class="line">        if (this.password !== '') {</span><br><span class="line">          data.password = this.password</span><br><span class="line">        }</span><br><span class="line">        this.token = storage.getItem('access.myblog')</span><br><span class="line">        axios.patch('/api/user/' + oldName + '/', data, { headers: { Authorization: 'Bearer ' + this.token } }).then((response) =&gt; {</span><br><span class="line">          const name = response.data.username</span><br><span class="line">          storage.setItem('username.myblog', name)</span><br><span class="line">          this.$router.push({ name: 'UserCenter', params: { username: name } })</span><br><span class="line">          this.$refs.header.refresh()</span><br><span class="line">        })</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    confirmDelete() {</span><br><span class="line">      authorization().then((response) =&gt; {</span><br><span class="line">        if (response[0]) {</span><br><span class="line">          this.token = storage.getItem('access.myblog')</span><br><span class="line">          axios.delete('/api/user/' + this.username + '/', { headers: { Authorization: 'Bearer ' + this.token } }).then(() =&gt; {</span><br><span class="line">            storage.clear()</span><br><span class="line">            this.$router.push({ name: 'Home' })</span><br><span class="line">          })</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#user-center {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: gray;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 200px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.confirm-btn {</span><br><span class="line">  width: 80px;</span><br><span class="line">  background-color: darkorange;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.delete-btn {</span><br><span class="line">  background-color: darkred;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.shake {</span><br><span class="line">  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;</span><br><span class="line">  transform: translate3d(0, 0, 0);</span><br><span class="line">  backface-visibility: hidden;</span><br><span class="line">  perspective: 1000px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@keyframes shake {</span><br><span class="line"></span><br><span class="line">  10%,</span><br><span class="line">  90% {</span><br><span class="line">    transform: translate3d(-1px, 0, 0);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  20%,</span><br><span class="line">  80% {</span><br><span class="line">    transform: translate3d(2px, 0, 0);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  30%,</span><br><span class="line">  50%,</span><br><span class="line">  70% {</span><br><span class="line">    transform: translate3d(-4px, 0, 0);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  40%,</span><br><span class="line">  60% {</span><br><span class="line">    transform: translate3d(4px, 0, 0);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="10-文章操作">10. 文章操作</h2><h3 id="10-1-准备工作">10.1 准备工作</h3><p>修改后端文件 <code>user_info/serializers.py</code> ，增加返回<strong>当前用户</strong>是否为<strong>超级用户</strong>的信息</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user_info/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDescSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表中引用的嵌套用户信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'username'</span>,</span><br><span class="line">            <span class="string">'last_login'</span>,</span><br><span class="line">            <span class="string">'date_joined'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRegisterSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户管理序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'user-detail'</span>, lookup_field=<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'is_superuser'</span>]</span><br><span class="line">        extra_kwargs = {<span class="string">'password'</span>: {<span class="string">'write_only'</span>: <span class="literal">True</span>}, <span class="string">'is_superuser'</span>: {<span class="string">'read_only'</span>: <span class="literal">True</span>}}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        user = User.objects.create_user(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'password'</span> <span class="keyword">in</span> validated_data:</span><br><span class="line">            password = validated_data.pop(<span class="string">'password'</span>)</span><br><span class="line">            instance.set_password(password)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(instance, validated_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'username'</span>,</span><br><span class="line">            <span class="string">'first_name'</span>,</span><br><span class="line">            <span class="string">'last_name'</span>,</span><br><span class="line">            <span class="string">'email'</span>,</span><br><span class="line">            <span class="string">'last_login'</span>,</span><br><span class="line">            <span class="string">'date_joined'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>修改后端文件 <code>article/views.py</code> ：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag, Avatar</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> (</span><br><span class="line">    ArticleSerializer,</span><br><span class="line">    CategorySerializer,</span><br><span class="line">    CategoryDetailSerializer,</span><br><span class="line">    TagSerializer,</span><br><span class="line">    ArticleDetailSerializer,</span><br><span class="line">    AvatarSerializer,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvatarViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章标题图视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Avatar.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AvatarSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Tag.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TagSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line">    pagination_class = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Category.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CategorySerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line">    pagination_class = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> CategorySerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CategoryDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    filter_backends = [filters.SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> ArticleSerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ArticleDetailSerializer</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="10-2-发布文章界面">10.2 发布文章界面</h3><p>在用户登录时追加记录用户<strong>是否为超级管理员</strong>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/Login.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id="grid"&gt;</span><br><span class="line">    &lt;div id="signup"&gt;</span><br><span class="line">      &lt;h3&gt;注册账号&lt;/h3&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;账号：&lt;/span&gt;</span><br><span class="line">          &lt;input type="text" v-model="signupName" placeholder="输入用户名"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signupPwd" placeholder="输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;确认密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signupPwdConfirm" placeholder="再次输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;button @click.prevent="signup"&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id="signin"&gt;</span><br><span class="line">      &lt;h3&gt;登录账号&lt;/h3&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;账号：&lt;/span&gt;</span><br><span class="line">          &lt;input type="text" v-model="signinName" placeholder="输入用户名"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;span class="label"&gt;密码：&lt;/span&gt;</span><br><span class="line">          &lt;input type="password" v-model="signinPwd" placeholder="输入密码"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="form-elem"&gt;</span><br><span class="line">          &lt;button @click.prevent="signin"&gt;登录&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue';</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: "Login",</span><br><span class="line">  components: { BlogHeader, BlogFooter },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      signupName: '',</span><br><span class="line">      signupPwd: '',</span><br><span class="line">      signupPwdConfirm: '',</span><br><span class="line">      signinName: '',</span><br><span class="line">      signinPwd: '',</span><br><span class="line">      signupResponse: null,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    signup() {</span><br><span class="line">      if (this.signupPwd !== this.signupPwdConfirm) {</span><br><span class="line">        alert("两次密码不一致，请重新输入!")</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">      axios.post('/api/user/', {</span><br><span class="line">        username: this.signupName,</span><br><span class="line">        password: this.signupPwd,</span><br><span class="line">      }).then((response) =&gt; {</span><br><span class="line">        this.signupResponse = response.data</span><br><span class="line">        alert('用户注册成功')</span><br><span class="line">      }).catch((error) =&gt; {</span><br><span class="line">        alert('用户注册失败:', error.message)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    signin() {</span><br><span class="line">      axios.post('/api/token/', {</span><br><span class="line">        username: this.signinName,</span><br><span class="line">        password: this.signinPwd,</span><br><span class="line">      }).then((response) =&gt; {</span><br><span class="line">        const storage = localStorage</span><br><span class="line">        const expiredTime = Date.parse(response.headers.date) + 10800000</span><br><span class="line">        storage.setItem('access.myblog', response.data.access)</span><br><span class="line">        storage.setItem('refresh.myblog', response.data.refresh)</span><br><span class="line">        storage.setItem('expiredTime.myblog', expiredTime)</span><br><span class="line">        storage.setItem('username.myblog', this.signinName)</span><br><span class="line">        axios.get('/api/user/' + this.signinName + '/').then((response) =&gt; {</span><br><span class="line">          storage.setItem('isSuperuser.myblog', response.data.is_superuser)</span><br><span class="line">          this.$router.push({ name: 'Home' })</span><br><span class="line">        })</span><br><span class="line">      }).catch((error) =&gt; {</span><br><span class="line">        alert('用户登录失败:', error.message)</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#signup {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#signin {</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.label {</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 80px;</span><br><span class="line">  text-align: justify;</span><br><span class="line">  text-align-last: justify;</span><br><span class="line">  margin-right: 1px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: gray;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 60px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>发表文章页面 <code>frontend/src/views/ArticleCreate.vue</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/ArticleCreate.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;div id="article-create"&gt;</span><br><span class="line">    &lt;h3&gt;发表文章&lt;/h3&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;标题：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="title" placeholder="输入标题"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;分类：&lt;/span&gt;</span><br><span class="line">        &lt;span v-for="category in categories" :key="category.id"&gt;</span><br><span class="line">          &lt;button class="category-btn" :style="categoryStyle(category)" @click.prevent="chooseCategory(category)"&gt;</span><br><span class="line">            {{ category.title }}</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;标签：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="tags" placeholder="输入标签，用逗号分隔"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;正文：&lt;/span&gt;</span><br><span class="line">        &lt;textarea v-model="body" placeholder="输入正文" cols="80" rows="20"&gt;&lt;/textarea&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="submit"&gt;提交&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleCreate',</span><br><span class="line">  components: {</span><br><span class="line">    BlogHeader,</span><br><span class="line">    BlogFooter</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      title: '',</span><br><span class="line">      body: '',</span><br><span class="line">      categories: [],</span><br><span class="line">      selectedCategory: null,</span><br><span class="line">      tags: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/category/').then((response) =&gt; {</span><br><span class="line">      this.categories = response.data</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    categoryStyle(category) {</span><br><span class="line">      if (this.selectedCategory !== null &amp;&amp; category.id === this.selectedCategory.id) {</span><br><span class="line">        return {</span><br><span class="line">          backgroundColor: 'black'</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      return {</span><br><span class="line">        backgroundColor: 'lightgrey',</span><br><span class="line">        color: 'black'</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    chooseCategory(category) {</span><br><span class="line">      if (this.selectedCategory !== null &amp;&amp; this.selectedCategory.id === category.id) {</span><br><span class="line">        this.selectedCategory = null</span><br><span class="line">      } else {</span><br><span class="line">        this.selectedCategory = category</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    submit() {</span><br><span class="line">      authorization().then((response) =&gt; {</span><br><span class="line">        if (response[0]) {</span><br><span class="line">          let data = { title: this.title, body: this.body }</span><br><span class="line">          if (this.selectedCategory) {</span><br><span class="line">            data.category_id = this.selectedCategory.id</span><br><span class="line">          }</span><br><span class="line">          data.tags = this.tags.split(/[,，]/).map(x =&gt; x.trim()).filter(x =&gt; x.charAt(0) !== '')</span><br><span class="line">          const token = localStorage.getItem('access.myblog')</span><br><span class="line">          axios.post('/api/article/', data, { headers: { Authorization: 'Bearer ' + token } }).then((response) =&gt; {</span><br><span class="line">            this.$router.push({ name: 'ArticleDetail', params: { id: response.data.id } })</span><br><span class="line">          })</span><br><span class="line">        } else {</span><br><span class="line">          alert('令牌过期，请重新登录。')</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.category-btn {</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#article-create {</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: large;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form {</span><br><span class="line">  text-align: left;</span><br><span class="line">  padding-left: 100px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  width: 50%;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: steelblue;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 60px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>注册发布文章页面的路由：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/src/router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleDetail = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleDetail.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Login = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Login.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> UserCenter = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/UserCenter.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleCreate = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleCreate.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Home'</span>,</span><br><span class="line">    <span class="attr">component</span>: Home</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/:id'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleDetail'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleDetail</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Login'</span>,</span><br><span class="line">    <span class="attr">component</span>: Login</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/user/:username'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'UserCenter'</span>,</span><br><span class="line">    <span class="attr">component</span>: UserCenter,</span><br><span class="line">    <span class="attr">meta</span>: { <span class="attr">requireAuth</span>: <span class="literal">true</span> }</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/create'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleCreate'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleCreate,</span><br><span class="line">  },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter({</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">  routes,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (to.meta.requireAuth) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">'access.myblog'</span>) &amp;&amp; to.params.username === <span class="built_in">localStorage</span>.getItem(<span class="string">'username.myblog'</span>)) {</span><br><span class="line">      next()</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (to.params.username !== <span class="built_in">localStorage</span>.getItem(<span class="string">'username.myblog'</span>)) {</span><br><span class="line">      next({</span><br><span class="line">        <span class="attr">path</span>: <span class="keyword">from</span>.path</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) {</span><br><span class="line">        next()</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        alert(<span class="string">'请先登录！'</span>)</span><br><span class="line">        next({</span><br><span class="line">          <span class="attr">path</span>: <span class="string">'/login'</span></span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    next()</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>页眉的欢迎词下拉框用 <code>v-if</code> 仅对<strong>超级用户</strong>显示入口，普通用户不显示：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/BlogHeader.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="header"&gt;</span><br><span class="line">    &lt;div class="grid"&gt;</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;h1&gt;My Django REST framework-Vue Blog&lt;/h1&gt;</span><br><span class="line">      &lt;search-button /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class="login"&gt;</span><br><span class="line">      &lt;div v-if="hasLogin"&gt;</span><br><span class="line">        &lt;div class="dropdown"&gt;</span><br><span class="line">          &lt;button class="dropbtn"&gt;欢迎，{{ username }}&lt;/button&gt;</span><br><span class="line">          &lt;div class="dropdown-content"&gt;</span><br><span class="line">            &lt;router-link :to="{ name: 'UserCenter', params: { username: username } }"&gt;用户中心&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link :to="{ name: 'ArticleCreate' }" v-if="isSuperuser"&gt;发布文章&lt;/router-link&gt;</span><br><span class="line">            &lt;router-link @click.prevent="logout()" :to="{ name: 'Home' }"&gt;注销&lt;/router-link&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-else&gt;</span><br><span class="line">        &lt;router-link to="/login" class="login-link"&gt;登录&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SearchButton from '@/components/SearchButton.vue'</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'BlogHeader',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      username: '',</span><br><span class="line">      hasLogin: false,</span><br><span class="line">      isSuperuser: JSON.parse(localStorage.getItem('isSuperuser.myblog'))</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    SearchButton</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    authorization().then((data) =&gt; [this.hasLogin, this.username] = data)</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    logout() {</span><br><span class="line">      localStorage.clear()</span><br><span class="line">      window.location.reload(false)</span><br><span class="line">    },</span><br><span class="line">    refresh() {</span><br><span class="line">      this.username = localStorage.getItem('username.myblog')</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#header {</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 4fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.login {</span><br><span class="line">  text-align: right;</span><br><span class="line">  padding-right: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropbtn {</span><br><span class="line">  background-color: mediumaquamarine;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 8px 8px 30px 8px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  border: none;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  height: 16px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown {</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content {</span><br><span class="line">  display: none;</span><br><span class="line">  position: absolute;</span><br><span class="line">  background-color: #f9f9f9;</span><br><span class="line">  min-width: 120px;</span><br><span class="line">  box-shadow: 0 8px 16px 0 rgb(0, 0, 0, 0.2);</span><br><span class="line">  text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a {</span><br><span class="line">  color: black;</span><br><span class="line">  padding: 12px 16px;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown-content a:hover {</span><br><span class="line">  background-color: #f1f1f1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropdown-content {</span><br><span class="line">  display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.dropdown:hover .dropbtn {</span><br><span class="line">  background-color: darkslateblue;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>为了让列表页面也能显示<strong>分类</strong>信息，稍微改一改 <code>ArticleList.vue</code> :</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/ArticleList.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span v-if="article.category !== null" class="category"&gt;{{ article.category.title }}&lt;/span&gt;</span><br><span class="line">      &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">        {{ tag }}</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;</span><br><span class="line">      {{ article.title }}</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id="paginator"&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('previous')"&gt;</span><br><span class="line">      &lt;router-link :to="get_path('previous')"&gt;</span><br><span class="line">        Prev</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class="current-page"&gt;</span><br><span class="line">      {{ get_page_param('current') }}</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('next')"&gt;</span><br><span class="line">      &lt;router-link :to="get_path('next')"&gt;</span><br><span class="line">        Next</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleList',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.get_article_data()</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // 判断页面是否存在</span><br><span class="line">    is_page_exists(direction) {</span><br><span class="line">      if (direction === 'next') {</span><br><span class="line">        return this.info.next !== null</span><br><span class="line">      }</span><br><span class="line">      return this.info.previous !== null</span><br><span class="line">    },</span><br><span class="line">    // 获取页码</span><br><span class="line">    get_page_param(direction) {</span><br><span class="line">      try {</span><br><span class="line">        let url_string</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            url_string = this.info.next</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            url_string = this.info.previous</span><br><span class="line">            break</span><br><span class="line">          default:</span><br><span class="line">            if (!('page' in this.$route.query)) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            if (this.$route.query.page === null) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            return this.$route.query.page</span><br><span class="line">        }</span><br><span class="line">        const url = new URL(url_string)</span><br><span class="line">        return url.searchParams.get('page')</span><br><span class="line">      } catch (err) {</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 获取文章列表数据</span><br><span class="line">    get_article_data() {</span><br><span class="line">      let url = '/api/article/'</span><br><span class="line">      let params = new URLSearchParams()</span><br><span class="line">      if (this.isExists(this.$route.query.page)) {</span><br><span class="line">        params.append('page', this.$route.query.page)</span><br><span class="line">      }</span><br><span class="line">      if (this.isExists(this.$route.query.search)) {</span><br><span class="line">        params.append('search', this.$route.query.search)</span><br><span class="line">      }</span><br><span class="line">      const paramsString = params.toString()</span><br><span class="line">      if (paramsString.charAt(0) !== '') {</span><br><span class="line">        url += '/?' + paramsString</span><br><span class="line">      }</span><br><span class="line">      axios.get(url).then(response =&gt; {</span><br><span class="line">        this.info = response.data</span><br><span class="line">      }).catch(error =&gt; {</span><br><span class="line">        console.log(error)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    // 获取路径</span><br><span class="line">    get_path(direction) {</span><br><span class="line">      let url = ''</span><br><span class="line">      try {</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            if (this.info.next !== undefined) {</span><br><span class="line">              url += (new URL(this.info.next)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            if (this.info.previous !== undefined) {</span><br><span class="line">              url += (new URL(this.info.previous)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">        }</span><br><span class="line">      } catch {</span><br><span class="line">        return url</span><br><span class="line">      }</span><br><span class="line">      return url</span><br><span class="line">    },</span><br><span class="line">    // 检查参数是否存在</span><br><span class="line">    isExists(value) {</span><br><span class="line">      return value !== null &amp;&amp; value !== undefined</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    // 监听路由变化</span><br><span class="line">    $route() {</span><br><span class="line">      this.get_article_data()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    // 格式化时间</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return timeString =&gt; new Date(timeString).toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#paginator {</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding-top: 50px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">a {</span><br><span class="line">  color: black;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.current-page {</span><br><span class="line">  font-size: x-large;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.category {</span><br><span class="line">  padding: 5px 10px 5px 10px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: darkred;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 15px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="10-3-文章更新与删除页面">10.3 文章更新与删除页面</h3><p>新建 <code>frontend/src/views/ArticleEdit.vue</code> 文件：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/ArticleEdit.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;div id="article-create"&gt;</span><br><span class="line">    &lt;h3&gt;更新文章&lt;/h3&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;标题：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="title" placeholder="输入标题"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;分类：&lt;/span&gt;</span><br><span class="line">        &lt;span v-for="category in categories" :key="category.id"&gt;</span><br><span class="line">          &lt;button class="category-btn" :style="categoryStyle(category)" @click.prevent="chooseCategory(category)"&gt;</span><br><span class="line">            {{ category.title }}</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;标签：&lt;/span&gt;</span><br><span class="line">        &lt;input type="text" v-model="tags" placeholder="输入标签，用逗号分隔"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;正文：&lt;/span&gt;</span><br><span class="line">        &lt;textarea v-model="body" placeholder="输入正文" cols="80" rows="20"&gt;&lt;/textarea&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="submit"&gt;提交&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button @click.prevent="deleteArticle" style="background-color: darkred;"&gt;删除&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import axios from 'axios'</span><br><span class="line">import authorization from '@/utils/authorization'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleEdit',</span><br><span class="line">  components: {</span><br><span class="line">    BlogHeader,</span><br><span class="line">    BlogFooter,</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      title: '',</span><br><span class="line">      body: '',</span><br><span class="line">      categories: [],</span><br><span class="line">      selectedCategory: null,</span><br><span class="line">      tags: '',</span><br><span class="line">      articleID: null,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/category/').then(response =&gt; this.categories = response.data)</span><br><span class="line">    axios.get('/api/article/' + this.$route.params.id + '/').then((response) =&gt; {</span><br><span class="line">      this.title = response.data.title</span><br><span class="line">      this.body = response.data.body</span><br><span class="line">      this.selectedCategory = response.data.category</span><br><span class="line">      this.tags = response.data.tags.join(',')</span><br><span class="line">      this.articleID = response.data.id</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    categoryStyle(category) {</span><br><span class="line">      if (this.selectedCategory !== null &amp;&amp; category.id === this.selectedCategory.id) {</span><br><span class="line">        return {</span><br><span class="line">          backgroundColor: 'black',</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      return {</span><br><span class="line">        backgroundColor: 'lightgrey',</span><br><span class="line">        color: 'black'</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    chooseCategory(category) {</span><br><span class="line">      if (this.selectedCategory !== null &amp;&amp; category.id == this.selectedCategory.id) {</span><br><span class="line">        this.selectedCategory = null</span><br><span class="line">      } else {</span><br><span class="line">        this.selectedCategory = category</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    submit() {</span><br><span class="line">      authorization().then((response) =&gt; {</span><br><span class="line">        if (response[0]) {</span><br><span class="line">          let data = {</span><br><span class="line">            title: this.title,</span><br><span class="line">            body: this.body</span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          data.category_id = this.selectedCategory ? this.selectedCategory.id : null</span><br><span class="line">          data.tags = this.tags.split(/[,，]/).map(x =&gt; x.trim()).filter(x =&gt; x.charAt(0) !== '')</span><br><span class="line">          const token = localStorage.getItem('access.myblog')</span><br><span class="line">          axios.put('/api/article/' + this.articleID + '/', data, { headers: { Authorization: 'Bearer ' + token } }).then((response) =&gt; {</span><br><span class="line">            this.$router.push({ name: 'ArticleDetail', params: { id: response.data.id } })</span><br><span class="line">          })</span><br><span class="line">        } else {</span><br><span class="line">          alert('令牌过期，请重新登录')</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    deleteArticle() {</span><br><span class="line">      const token = localStorage.getItem('access.myblog')</span><br><span class="line">      authorization().then((response) =&gt; {</span><br><span class="line">        if (response[0]) {</span><br><span class="line">          axios.delete('/api/article/' + this.articleID + '/', { headers: { Authorization: 'Bearer ' + token } }).then((response) =&gt; {</span><br><span class="line">            this.$router.push({ name: 'Home' })</span><br><span class="line">          })</span><br><span class="line">        } else {</span><br><span class="line">          alert('令牌过期，请重新登录')</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.category-btn {</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#article-create {</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: large;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form {</span><br><span class="line">  text-align: left;</span><br><span class="line">  padding-left: 100px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  width: 50%;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: steelblue;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 60px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>注册路由：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// frontend/src/router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleDetail = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleDetail.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Login = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Login.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> UserCenter = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/UserCenter.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleCreate = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleCreate.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> ArticleEdit = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/ArticleEdit.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Home'</span>,</span><br><span class="line">    <span class="attr">component</span>: Home</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/:id'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleDetail'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleDetail</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/login'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'Login'</span>,</span><br><span class="line">    <span class="attr">component</span>: Login</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/user/:username'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'UserCenter'</span>,</span><br><span class="line">    <span class="attr">component</span>: UserCenter,</span><br><span class="line">    <span class="attr">meta</span>: { <span class="attr">requireAuth</span>: <span class="literal">true</span> }</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/create'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleCreate'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleCreate,</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/article/edit/:id'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'ArticleEdit'</span>,</span><br><span class="line">    <span class="attr">component</span>: ArticleEdit,</span><br><span class="line">  },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter({</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">  routes,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (to.meta.requireAuth) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">'access.myblog'</span>) &amp;&amp; to.params.username === <span class="built_in">localStorage</span>.getItem(<span class="string">'username.myblog'</span>)) {</span><br><span class="line">      next()</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (to.params.username !== <span class="built_in">localStorage</span>.getItem(<span class="string">'username.myblog'</span>)) {</span><br><span class="line">      next({</span><br><span class="line">        <span class="attr">path</span>: <span class="keyword">from</span>.path</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) {</span><br><span class="line">        next()</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        alert(<span class="string">'请先登录！'</span>)</span><br><span class="line">        next({</span><br><span class="line">          <span class="attr">path</span>: <span class="string">'/login'</span></span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    next()</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在文章详情页中放一个更新和删除页面的入口：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;div v-if="article !== null" class="grid-container"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 id="title"&gt;{{ article.title }}&lt;/h1&gt;</span><br><span class="line">      &lt;p id="subtitle"&gt;本文由 {{ article.author.username }} 发布于 {{ formatted_time }}</span><br><span class="line">        &lt;span if="isSuperuser"&gt;</span><br><span class="line">          &lt;router-link :to="{ name: 'ArticleEdit', params: { id: article.id } }"&gt;更新与删除&lt;/router-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;div v-html="article.body_html" class="article-body"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;目录&lt;/h3&gt;</span><br><span class="line">      &lt;div v-html="article.toc_html" class="toc"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleDetail',</span><br><span class="line">  components: { BlogHeader, BlogFooter },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      article: null</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article/' + this.$route.params.id).then(response =&gt; {</span><br><span class="line">      this.article = response.data</span><br><span class="line">    }).catch(error =&gt; {</span><br><span class="line">      console.log(error)</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return new Date(this.article.created).toLocaleDateString()</span><br><span class="line">    },</span><br><span class="line">    isSuperuser() {</span><br><span class="line">      return localStorage.getItem('isSuperuser.myblog') === 'true'</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grid-container {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 3fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#title {</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: x-large;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#subtitle {</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: gray;</span><br><span class="line">  font-size: small;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.article-body p img {</span><br><span class="line">  max-width: 100%;</span><br><span class="line">  border-radius: 50px;</span><br><span class="line">  box-shadow: gray 0 0 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.toc ul {</span><br><span class="line">  list-style-type: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.toc a {</span><br><span class="line">  color: gray;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="10-4-文章标题图">10.4 文章标题图</h3><p><strong>图片提交</strong>的流程：在 <code>multipart/form-data</code> 中发送文件，然后将保存好的文件 id 返回给客户端。客户端拿到文件 id 后，发送带有 id 的 Json 数据，在服务器端将它们关联起来。</p><ul><li>在发表新文章页面中选定图片后，不等待文章的提交而是立即将图片上传。</li><li>图片上传成功后返回图片 id，前端将 id 保存待用。</li><li>提交文章时，将图片 id 一并打包提交即可。</li></ul><p>在 <code>ArticleCreate.vue</code> 中添加代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/ArticleCreate.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- frontend/src/views/ArticleCreate.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;BlogHeader /&gt;</span><br><span class="line">  &lt;div id="article-create"&gt;</span><br><span class="line">    &lt;h3&gt;发表文章&lt;/h3&gt;</span><br><span class="line">    &lt;form id="image-form"&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;图片：&lt;/span&gt;</span><br><span class="line">        &lt;input type="file" id="file" @change="onFileChange"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;标题：&lt;/span&gt;</span><br><span class="line">        &lt;input v-model="title" type="text" placeholder="输入标题"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;分类：&lt;/span&gt;</span><br><span class="line">        &lt;span v-for="category in categories" :key="category.id"&gt;</span><br><span class="line">          &lt;!--样式也可以通过 :style 绑定--&gt;</span><br><span class="line">          &lt;button class="category-btn" :style="categoryStyle(category)" @click.prevent="chooseCategory(category)"&gt;</span><br><span class="line">            {{ category.title }}</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;标签：&lt;/span&gt;</span><br><span class="line">        &lt;input v-model="tags" type="text" placeholder="输入标签，用逗号分隔"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;span&gt;正文：&lt;/span&gt;</span><br><span class="line">        &lt;textarea v-model="body" placeholder="输入正文" rows="20" cols="80"&gt;&lt;/textarea&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class="form-elem"&gt;</span><br><span class="line">        &lt;button v-on:click.prevent="submit"&gt;提交&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;BlogFooter /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import axios from 'axios';</span><br><span class="line">import authorization from '@/utils/authorization';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleCreate',</span><br><span class="line">  components: { BlogHeader, BlogFooter },</span><br><span class="line">  data: function () {</span><br><span class="line">    return {</span><br><span class="line">      // 文章标题</span><br><span class="line">      title: '',</span><br><span class="line">      // 文章正文</span><br><span class="line">      body: '',</span><br><span class="line">      // 数据库中所有的分类</span><br><span class="line">      categories: [],</span><br><span class="line">      // 选定的分类</span><br><span class="line">      selectedCategory: null,</span><br><span class="line">      // 标签</span><br><span class="line">      tags: '',</span><br><span class="line">      // 标题图</span><br><span class="line">      avatarID: null</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    // 页面初始化时获取所有分类</span><br><span class="line">    axios</span><br><span class="line">      .get('/api/category/')</span><br><span class="line">      .then(response =&gt; this.categories = response.data)</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    onFileChange(e) {</span><br><span class="line">      // 将文件二进制数据添加到提交数据中</span><br><span class="line">      const file = e.target.files[0]</span><br><span class="line">      let formData = new FormData()</span><br><span class="line">      formData.append("content", file)</span><br><span class="line">      axios.post('/api/avatar/', formData, { headers: { 'Content-Type': 'multipart/form-data', 'Authorization': 'Bearer ' + localStorage.getItem('access.myblog') } }).then((response) =&gt; {</span><br><span class="line">        this.avatarID = response.data.id</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    // 根据分类是否被选中，按钮的颜色发生变化</span><br><span class="line">    // 这里可以看出 css 也是可以被 vue 绑定的，很方便</span><br><span class="line">    categoryStyle(category) {</span><br><span class="line">      if (this.selectedCategory !== null &amp;&amp; category.id === this.selectedCategory.id) {</span><br><span class="line">        return {</span><br><span class="line">          backgroundColor: 'black',</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      return {</span><br><span class="line">        backgroundColor: 'lightgrey',</span><br><span class="line">        color: 'black',</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 选取分类的方法</span><br><span class="line">    chooseCategory(category) {</span><br><span class="line">      // 如果点击已选取的分类，则将 selectedCategory 置空</span><br><span class="line">      if (this.selectedCategory !== null &amp;&amp; this.selectedCategory.id === category.id) {</span><br><span class="line">        this.selectedCategory = null</span><br><span class="line">      }</span><br><span class="line">      // 如果没选中当前分类，则选中它</span><br><span class="line">      else {</span><br><span class="line">        this.selectedCategory = category;</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 点击提交按钮</span><br><span class="line">    submit() {</span><br><span class="line">      const that = this;</span><br><span class="line">      // 前面封装的验证函数又用上了</span><br><span class="line">      authorization()</span><br><span class="line">        .then(function (response) {</span><br><span class="line">          if (response[0]) {</span><br><span class="line">            // 需要传给后端的数据字典</span><br><span class="line">            let data = {</span><br><span class="line">              title: that.title,</span><br><span class="line">              body: that.body,</span><br><span class="line">            };</span><br><span class="line">            // 添加分类</span><br><span class="line">            if (that.selectedCategory) {</span><br><span class="line">              data.category_id = that.selectedCategory.id</span><br><span class="line">            }</span><br><span class="line">            // 标签预处理</span><br><span class="line">            data.tags = that.tags</span><br><span class="line">              // 用逗号分隔标签</span><br><span class="line">              .split(/[,，]/)</span><br><span class="line">              // 剔除标签首尾空格</span><br><span class="line">              .map(x =&gt; x.trim())</span><br><span class="line">              // 剔除长度为零的无效标签</span><br><span class="line">              .filter(x =&gt; x.charAt(0) !== '');</span><br><span class="line">            data.avatar_id = this.avatarID</span><br><span class="line">            // 将发表文章请求发送至接口</span><br><span class="line">            // 成功后前往详情页面</span><br><span class="line">            const token = localStorage.getItem('access.myblog');</span><br><span class="line">            axios</span><br><span class="line">              .post('/api/article/',</span><br><span class="line">                data,</span><br><span class="line">                {</span><br><span class="line">                  headers: { Authorization: 'Bearer ' + token }</span><br><span class="line">                })</span><br><span class="line">              .then(function (response) {</span><br><span class="line">                that.$router.push({ name: 'ArticleDetail', params: { id: response.data.id } });</span><br><span class="line">              })</span><br><span class="line">          }</span><br><span class="line">          else {</span><br><span class="line">            alert('令牌过期，请重新登录。')</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.category-btn {</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#article-create {</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: large;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form {</span><br><span class="line">  text-align: left;</span><br><span class="line">  padding-left: 100px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.form-elem {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">input {</span><br><span class="line">  height: 25px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  width: 50%;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">button {</span><br><span class="line">  height: 35px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  background: steelblue;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  width: 60px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>新增了一个<strong>表单</strong>（不用表单其实也没关系），表单含有一个提交文件的控件；<code>v-on:change</code> 将控件绑定到 <code>onFileChange()</code> 方法，即只要用户选定了任何图片，都会触发此方法。</li><li><code>onFileChange(e)</code> 中的参数为控件所触发的事件对象。由于图片二进制流不能以简单的字符串数据进行表示，所以将其添加到 <code>FormData</code> 表单对象中，发送到图片上传接口。若接口返回成功，则将返回的 id 值保存待用。</li><li><code>submit()</code> 对应增加了图片 id 的赋值语句。</li></ul><p>接下来在文章列表页面<strong>显示</strong>它，修改 <code>ArticleList.vue</code> 代码。</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for="article in info.results" :key="article.url" id="articles"&gt;</span><br><span class="line">    &lt;div class="grid" :style="gridStyle(article)"&gt;</span><br><span class="line">      &lt;div class="image-container"&gt;</span><br><span class="line">        &lt;img :src="imageIfExists(article)" alt="" class="image" accept="image/gif, image/jpeg"&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;span v-if="article.category !== null" class="category"&gt;{{ article.category.title }}&lt;/span&gt;</span><br><span class="line">          &lt;span v-for="tag in article.tags" :key="tag" class="tag"&gt;</span><br><span class="line">            {{ tag }}</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;router-link :to="{ name: 'ArticleDetail', params: { id: article.id } }" class="article-title"&gt;</span><br><span class="line">          {{ article.title }}</span><br><span class="line">        &lt;/router-link&gt;</span><br><span class="line">        &lt;div&gt;{{ formatted_time(article.created) }}&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id="paginator"&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('previous')"&gt;</span><br><span class="line">      &lt;router-link :to="get_path('previous')"&gt;</span><br><span class="line">        Prev</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class="current-page"&gt;</span><br><span class="line">      {{ get_page_param('current') }}</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span v-if="is_page_exists('next')"&gt;</span><br><span class="line">      &lt;router-link :to="get_path('next')"&gt;</span><br><span class="line">        Next</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleList',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.get_article_data()</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // 判断标题图是否存在并返回图像</span><br><span class="line">    imageIfExists(article) {</span><br><span class="line">      if (article.avatar) {</span><br><span class="line">        return article.avatar.content</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 修改grid样式</span><br><span class="line">    gridStyle(article) {</span><br><span class="line">      if (article.avatar) {</span><br><span class="line">        return {</span><br><span class="line">          display: 'grid',</span><br><span class="line">          gridTemplateColumns: '1fr 7fr'</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 判断页面是否存在</span><br><span class="line">    is_page_exists(direction) {</span><br><span class="line">      if (direction === 'next') {</span><br><span class="line">        return this.info.next !== null</span><br><span class="line">      }</span><br><span class="line">      return this.info.previous !== null</span><br><span class="line">    },</span><br><span class="line">    // 获取页码</span><br><span class="line">    get_page_param(direction) {</span><br><span class="line">      try {</span><br><span class="line">        let url_string</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            url_string = this.info.next</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            url_string = this.info.previous</span><br><span class="line">            break</span><br><span class="line">          default:</span><br><span class="line">            if (!('page' in this.$route.query)) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            if (this.$route.query.page === null) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            return this.$route.query.page</span><br><span class="line">        }</span><br><span class="line">        const url = new URL(url_string)</span><br><span class="line">        return url.searchParams.get('page')</span><br><span class="line">      } catch (err) {</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 获取文章列表数据</span><br><span class="line">    get_article_data() {</span><br><span class="line">      let url = '/api/article/'</span><br><span class="line">      let params = new URLSearchParams()</span><br><span class="line">      if (this.isExists(this.$route.query.page)) {</span><br><span class="line">        params.append('page', this.$route.query.page)</span><br><span class="line">      }</span><br><span class="line">      if (this.isExists(this.$route.query.search)) {</span><br><span class="line">        params.append('search', this.$route.query.search)</span><br><span class="line">      }</span><br><span class="line">      const paramsString = params.toString()</span><br><span class="line">      if (paramsString.charAt(0) !== '') {</span><br><span class="line">        url += '/?' + paramsString</span><br><span class="line">      }</span><br><span class="line">      axios.get(url).then(response =&gt; {</span><br><span class="line">        this.info = response.data</span><br><span class="line">      }).catch(error =&gt; {</span><br><span class="line">        console.log(error)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    // 获取路径</span><br><span class="line">    get_path(direction) {</span><br><span class="line">      let url = ''</span><br><span class="line">      try {</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            if (this.info.next !== undefined) {</span><br><span class="line">              url += (new URL(this.info.next)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            if (this.info.previous !== undefined) {</span><br><span class="line">              url += (new URL(this.info.previous)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">        }</span><br><span class="line">      } catch {</span><br><span class="line">        return url</span><br><span class="line">      }</span><br><span class="line">      return url</span><br><span class="line">    },</span><br><span class="line">    // 检查参数是否存在</span><br><span class="line">    isExists(value) {</span><br><span class="line">      return value !== null &amp;&amp; value !== undefined</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    // 监听路由变化</span><br><span class="line">    $route() {</span><br><span class="line">      this.get_article_data()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    // 格式化时间</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return timeString =&gt; new Date(timeString).toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#articles {</span><br><span class="line">  padding: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.article-title {</span><br><span class="line">  font-size: large;</span><br><span class="line">  font-weight: bolder;</span><br><span class="line">  color: black;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  padding: 5px 0 5px 0;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.tag {</span><br><span class="line">  padding: 2px 5px 2px 5px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: #4e4e4e;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#paginator {</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding-top: 50px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">a {</span><br><span class="line">  color: black;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.current-page {</span><br><span class="line">  font-size: x-large;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.category {</span><br><span class="line">  padding: 5px 10px 5px 10px;</span><br><span class="line">  margin: 5px 5px 5px 0;</span><br><span class="line">  font-family: Georgia, Arial, sans-serif;</span><br><span class="line">  font-size: small;</span><br><span class="line">  background-color: darkred;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 15px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.image {</span><br><span class="line">  width: 180px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  box-shadow: darkslategrey 0 0 12px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.image-container {</span><br><span class="line">  width: 200px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">  padding-bottom: 10px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="11-发布评论">11. 发布评论</h2><h3 id="11-1-发布评论组件">11.1 发布评论组件</h3><p>新建 <code>frontend/src/components/Comments.vue</code>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/Comments.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h3&gt;发表评论&lt;/h3&gt;</span><br><span class="line">  &lt;!-- 评论多行文本输入控件 --&gt;</span><br><span class="line">  &lt;textarea v-model="message" :placeholder="placeholder" name="comment" id="comment-area" cols="60" rows="10"&gt;&lt;/textarea&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click="submit" class="submitBtn"&gt;发布&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;p&gt;已有 {{ comments.length }} 条评论&lt;/p&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 渲染所有评论内容 --&gt;</span><br><span class="line">  &lt;div v-for="comment in comments" :key="comment.id"&gt;</span><br><span class="line">    &lt;div class="comments"&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span class="username"&gt;</span><br><span class="line">          {{ comment.author.username }}</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        于</span><br><span class="line">        &lt;span class="created"&gt;</span><br><span class="line">          {{ formatted_time(comment.created) }}</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span v-if="comment.parent"&gt;</span><br><span class="line">          对</span><br><span class="line">          &lt;span class="parent"&gt;</span><br><span class="line">            {{ comment.parent.author.username }}</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        说道：</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="content"&gt;</span><br><span class="line">        {{ comment.content }}</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button class="commentBtn" @click="replyTo(comment)"&gt;回复&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios';</span><br><span class="line">import authorization from '@/utils/authorization';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Comments',</span><br><span class="line">  // 通过 props 获取当前文章</span><br><span class="line">  props: { article: Object },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      // 所有评论</span><br><span class="line">      comments: [],</span><br><span class="line">      // 评论控件绑定的文本和占位符</span><br><span class="line">      message: '',</span><br><span class="line">      placeholder: '说点啥吧...',</span><br><span class="line">      // 评论的评论</span><br><span class="line">      parentID: null</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  // 监听 article 对象</span><br><span class="line">  // 以便实时更新评论</span><br><span class="line">  watch: {</span><br><span class="line">    article() {</span><br><span class="line">      this.comments = this.article !== null ? this.article.comments : []</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // 提交评论</span><br><span class="line">    submit() {</span><br><span class="line">      authorization().then((response) =&gt; {</span><br><span class="line">        if (response[0]) {</span><br><span class="line">          axios.post('/api/comment/', { content: this.message, article_id: this.article.id, parent_id: this.parentID }, { headers: { Authorization: 'Bearer ' + localStorage.getItem('access.myblog') } }).then((response) =&gt; {</span><br><span class="line">            // 将新评论添加到顶部</span><br><span class="line">            this.comments.unshift(response.data);</span><br><span class="line">            this.message = '';</span><br><span class="line">            alert('留言成功')</span><br><span class="line">          })</span><br><span class="line">        } else {</span><br><span class="line">          alert('请登录后评论。')</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    // 对某条评论进行评论</span><br><span class="line">    // 即二级评论</span><br><span class="line">    replyTo(comment) {</span><br><span class="line">      this.parentID = comment.id;</span><br><span class="line">      this.placeholder = '对' + comment.author.username + '说:'</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    // 格式化时间</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return timeString =&gt; new Date(timeString).toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">button {</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">  color: whitesmoke;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.submitBtn {</span><br><span class="line">  height: 35px;</span><br><span class="line">  background: steelblue;</span><br><span class="line">  width: 60px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.commentBtn {</span><br><span class="line">  height: 25px;</span><br><span class="line">  background: lightslategray;</span><br><span class="line">  width: 40px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.comments {</span><br><span class="line">  padding-top: 10px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.username {</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: darkorange;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.created {</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: darkblue;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.parent {</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: orangered;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.content {</span><br><span class="line">  font-size: large;</span><br><span class="line">  padding: 15px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="11-2-添加发布评论功能">11.2 添加发布评论功能</h3><p>修改 <code>ArticleDetail.vue</code> ，使用 <code>Comments</code> <strong>组件</strong>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/views/ArticleDetail.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;blog-header /&gt;</span><br><span class="line">  &lt;div v-if="article !== null" class="grid-container"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 id="title"&gt;{{ article.title }}&lt;/h1&gt;</span><br><span class="line">      &lt;p id="subtitle"&gt;本文由 {{ article.author.username }} 发布于 {{ formatted_time }}</span><br><span class="line">        &lt;span if="isSuperuser"&gt;</span><br><span class="line">          &lt;router-link :to="{ name: 'ArticleEdit', params: { id: article.id } }"&gt;更新与删除&lt;/router-link&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;div v-html="article.body_html" class="article-body"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;目录&lt;/h3&gt;</span><br><span class="line">      &lt;div v-html="article.toc_html" class="toc"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;comments :article="article" /&gt;</span><br><span class="line">  &lt;blog-footer /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BlogHeader from '@/components/BlogHeader.vue'</span><br><span class="line">import BlogFooter from '@/components/BlogFooter.vue'</span><br><span class="line">import Comments from '@/components/Comments.vue'</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleDetail',</span><br><span class="line">  components: { BlogHeader, BlogFooter, Comments },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      article: null</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    axios.get('/api/article/' + this.$route.params.id).then(response =&gt; {</span><br><span class="line">      this.article = response.data</span><br><span class="line">    }).catch(error =&gt; {</span><br><span class="line">      console.log(error)</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return new Date(this.article.created).toLocaleDateString()</span><br><span class="line">    },</span><br><span class="line">    isSuperuser() {</span><br><span class="line">      return localStorage.getItem('isSuperuser.myblog') === 'true'</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.grid-container {</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 3fr 1fr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#title {</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: x-large;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#subtitle {</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: gray;</span><br><span class="line">  font-size: small;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.article-body p img {</span><br><span class="line">  max-width: 100%;</span><br><span class="line">  border-radius: 50px;</span><br><span class="line">  box-shadow: gray 0 0 20px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.toc ul {</span><br><span class="line">  list-style-type: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.toc a {</span><br><span class="line">  color: gray;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="12-组合式API">12. 组合式API</h2><h3 id="12-1-什么是组合式API">12.1 什么是组合式API</h3><p>之前我们用的是选项式API方式编写Vue组件，Vue还提供组合式API方式编写组件。</p><p><a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">官方文档</a>解释总结：</p><ul><li>选项式API能够很好的胜任任何中小大型项目，但是对于超大型项目（几百个以上的组件）有天生的缺陷，最显著的矛盾是<strong>逻辑关注点分离</strong>：你可能很难短时间分清哪些方法在操作哪些数据、哪些变量又被哪些组件所更改了。</li><li>组合式 API 将相同逻辑关注点代码聚合在了一起，并且很自然的支持代码复用。</li></ul><h3 id="12-2-编写组合式API">12.2 编写组合式API</h3><p>将文章列表页面 <code>ArticleList.vue</code> 的<strong>选项式API</strong>改为<strong>组合式API</strong>，本部分的所有修改只涉及到 <code>ArticleList.vue</code> 的 Javascript 脚本部分，因此先把原代码贴出来：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- frontend/src/components/ArticleList.vue --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from 'axios'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'ArticleList',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      info: '',</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.get_article_data()</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    // 判断标题图是否存在并返回图像</span><br><span class="line">    imageIfExists(article) {</span><br><span class="line">      if (article.avatar) {</span><br><span class="line">        return article.avatar.content</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 修改grid样式</span><br><span class="line">    gridStyle(article) {</span><br><span class="line">      if (article.avatar) {</span><br><span class="line">        return {</span><br><span class="line">          display: 'grid',</span><br><span class="line">          gridTemplateColumns: '1fr 7fr'</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 判断页面是否存在</span><br><span class="line">    is_page_exists(direction) {</span><br><span class="line">      if (direction === 'next') {</span><br><span class="line">        return this.info.next !== null</span><br><span class="line">      }</span><br><span class="line">      return this.info.previous !== null</span><br><span class="line">    },</span><br><span class="line">    // 获取页码</span><br><span class="line">    get_page_param(direction) {</span><br><span class="line">      try {</span><br><span class="line">        let url_string</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            url_string = this.info.next</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            url_string = this.info.previous</span><br><span class="line">            break</span><br><span class="line">          default:</span><br><span class="line">            if (!('page' in this.$route.query)) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            if (this.$route.query.page === null) {</span><br><span class="line">              return 1</span><br><span class="line">            }</span><br><span class="line">            return this.$route.query.page</span><br><span class="line">        }</span><br><span class="line">        const url = new URL(url_string)</span><br><span class="line">        return url.searchParams.get('page')</span><br><span class="line">      } catch (err) {</span><br><span class="line">        return</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 获取文章列表数据</span><br><span class="line">    get_article_data() {</span><br><span class="line">      let url = '/api/article/'</span><br><span class="line">      let params = new URLSearchParams()</span><br><span class="line">      if (this.isExists(this.$route.query.page)) {</span><br><span class="line">        params.append('page', this.$route.query.page)</span><br><span class="line">      }</span><br><span class="line">      if (this.isExists(this.$route.query.search)) {</span><br><span class="line">        params.append('search', this.$route.query.search)</span><br><span class="line">      }</span><br><span class="line">      const paramsString = params.toString()</span><br><span class="line">      if (paramsString.charAt(0) !== '') {</span><br><span class="line">        url += '/?' + paramsString</span><br><span class="line">      }</span><br><span class="line">      axios.get(url).then(response =&gt; {</span><br><span class="line">        this.info = response.data</span><br><span class="line">      }).catch(error =&gt; {</span><br><span class="line">        console.log(error)</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    // 获取路径</span><br><span class="line">    get_path(direction) {</span><br><span class="line">      let url = ''</span><br><span class="line">      try {</span><br><span class="line">        switch (direction) {</span><br><span class="line">          case 'next':</span><br><span class="line">            if (this.info.next !== undefined) {</span><br><span class="line">              url += (new URL(this.info.next)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">          case 'previous':</span><br><span class="line">            if (this.info.previous !== undefined) {</span><br><span class="line">              url += (new URL(this.info.previous)).search</span><br><span class="line">            }</span><br><span class="line">            break</span><br><span class="line">        }</span><br><span class="line">      } catch {</span><br><span class="line">        return url</span><br><span class="line">      }</span><br><span class="line">      return url</span><br><span class="line">    },</span><br><span class="line">    // 检查参数是否存在</span><br><span class="line">    isExists(value) {</span><br><span class="line">      return value !== null &amp;&amp; value !== undefined</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    // 监听路由变化</span><br><span class="line">    $route() {</span><br><span class="line">      this.get_article_data()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    // 格式化时间</span><br><span class="line">    formatted_time() {</span><br><span class="line">      return timeString =&gt; new Date(timeString).toLocaleDateString()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">本文标题： Django-Vue搭建个人博客(4)：前端功能完善</span><br><span class="line">原文链接： https://www.dusaiphoto.com/article/122/ ~ https://www.dusaiphoto.com/article/122/</span><br><span class="line">原文作者： 杜赛</span><br><span class="line">许可协议： 署名-非商业性使用 4.0 国际许可协议</span><br><span class="line">本文对原始作品作了修改，转载请保留原文链接及作者</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(3)：后端功能完善</title>
      <link href="/posts/16431.html"/>
      <url>/posts/16431.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-过滤文章">1. 过滤文章</h2><p>用户需要某个特定范围的文章时，后端需要把返回的数据进行过滤。最简单的过滤方法是修改视图集中的<code>queryset</code>属性：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">filter</span>(author__username=<span class="string">'admin'</span>)</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>这样会导致原本正常的列表也都过滤了</p><h3 id="1-1-参数过滤">1.1 参数过滤</h3><p>假设有如下带有参数 GET 的请求：</p><blockquote><p><a href="http://127.0.0.1:8000/api/article/?username=admin">http://127.0.0.1:8000/api/article/?username=admin</a></p></blockquote><p>可以通过覆写<code>get_queryset()</code>的方式实现过滤：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        queryset = self.queryset</span><br><span class="line">        username = self.request.query_params.get(<span class="string">'username'</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            queryset = queryset.<span class="built_in">filter</span>(author__username=username)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-通用过滤">1.2 通用过滤</h3><p><code>django-filter</code>库可以用于通用过滤，要使用这个库，首先执行<code>pip install django-filter==23.1</code>安装，然后修改配置文件：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/settings.py</span></span><br><span class="line">...</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'article'</span>,</span><br><span class="line">    <span class="string">'user_info'</span>,</span><br><span class="line">    <span class="string">'django_filters'</span>,</span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: [<span class="string">'django-filter.rest_framework.DjangoFilterBackend'</span>],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line">    </span><br><span class="line">    filterset_fields = [<span class="string">'author__username'</span>, <span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>也可以将其单独配置在特定的视图中，不在<code>setting.py</code>中配置 REST_FRAMEWORK 相关内容：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line">    </span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    filterset_fields = [<span class="string">'author__username'</span>, <span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>完全匹配示例url：<a href="http://127.0.0.1:8000/api/article/?author__username=dusai&amp;title=newtest">http://127.0.0.1:8000/api/article/?author__username=dusai&amp;title=newtest</a></p><p>如果要实现模糊搜索，可以使用<code>SearchFilter</code>来做。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters, viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    filter_backends = [filters.SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>模糊搜索示例url：<a href="http://127.0.0.1:8000/api/article/?search=post">http://127.0.0.1:8000/api/article/?search=post</a></p><h2 id="2-文章分类">2. 文章分类</h2><p>博客文章通常需要分类，方便用户快速识别文章的类型，或者进行某种关联操作。</p><h3 id="2-1-增加模型">2.1 增加模型</h3><p>首先在<code>article/models.py</code>增加一个分类的模型，并且将其和博文称为一对多的外键：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章分类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    created = models.DateTimeField(default=timezone.now</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    category = models.ForeignKey(</span><br><span class="line">        Category,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 分类</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">"articles"</span></span><br><span class="line">    )                                                     <span class="comment"># 作者</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>进行数据迁移：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py makemigrations</span><br><span class="line">(venv) &gt; python manage.py migrate</span><br></pre></td></tr></tbody></table></figure><blockquote><p><em>教程把分类的 model 放到 article app中了。实际项目应根据情况考虑是否需要另起一个单独的分类 app。</em></p></blockquote><h3 id="2-2-序列化器">2.2 序列化器</h3><p>编写和修改序列化器：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Category.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">f"Category with id <span class="subst">{value}</span> not exits."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>CategorySerializer</code> ：</p><ul><li><code>HyperlinkedIdentityField</code> 前面章节有讲过，作用是将路由间的表示转换为超链接。<code>view_name</code> 参数是路由名，你必须显示指定。 <code>category-detail</code> 是自动注册路由时，<code>Router</code> 默认帮你设置的详情页面的名称，类似的还有 <code>category-list</code> 等，更多规则参考<a href="https://www.django-rest-framework.org/api-guide/routers/#defaultrouter">文档</a>。</li><li>创建日期不需要后期修改，所以设置为 <code>read_only_fields</code>。</li></ul><p><code>ArticleSerializer</code>：</p><ul><li>文章接口不仅仅只返回分类的 id ，需要显式指定 <code>category</code> ，将其变成一个嵌套数据，与之前的 <code>author</code> 类似。</li><li>DRF 框架原生没有实现<strong>可写的嵌套数据</strong>，想<strong>创建/更新</strong>文章和分类的外键关系时：一种方法是自己去实现序列化器的 <code>create()/update()</code> 方法；另一种就是 DRF 框架提供的修改外键的快捷方式，即显式指定 <code>category_id</code> 字段，则此字段会自动链接到 <code>category</code> 外键，以便你更新外键关系。</li><li>再看 <code>category_id</code> 内部。<code>write_only</code> 表示此字段仅需要可写；<code>allow_null</code> 表示允许将其设置为空；<code>required</code> 表示在<strong>创建/更新</strong>时可以不设置此字段。</li></ul><p>如果用户提交了一个不存在的分类外键，后端会返回外键数据不存在的 500 错误，解决方法就是对数据预先进行<strong>验证</strong>。</p><p>验证方式又有如下几种：</p><ul><li>覆写序列化器的 <code>.validate(...)</code> 方法。这是个全局的验证器，其接收的唯一参数是所有字段值的字典。当你需要同时对多个字段进行验证时，这是个很好的选择。</li><li>另一种就是教程用到的，即 <code>.validate_{field_name}(...)</code> 方法，它会只验证某个特定的字段，比如 <code>category_id</code> 。</li></ul><p><code>validate_category_id</code> 检查了两样东西：</p><ul><li>数据库中是否包含了对应 id 值的数据。</li><li>传入值是否为 None。这是为了能够将已有的外键置空。</li></ul><h3 id="2-3-视图与路由">2.3 视图与路由</h3><p>编写视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer, CategorySerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Category.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CategorySerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    filter_backends = [filters.SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>编写路由：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'article'</span>, views.ArticleViewSet)</span><br><span class="line">router.register(<span class="string">r'category'</span>, views.CategoryViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/'</span>, include(router.urls)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-测试">2.4 测试</h3><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1.创建分类</span></span><br><span class="line">(venv) &gt; http <span class="literal">-a</span> admin:admin POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/category/ title=Django      </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">116</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Mon, <span class="number">27</span> Mar <span class="number">2023</span> <span class="number">15</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Location: http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/category/<span class="number">2</span>/</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T23:52:17.604118+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Django"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/category/2/"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.更新已有分类</span></span><br><span class="line">(venv) &gt; http <span class="literal">-a</span> admin:admin PUT http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/category/<span class="number">2</span>/ title=Flask</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">115</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Mon, <span class="number">27</span> Mar <span class="number">2023</span> <span class="number">15</span>:<span class="number">53</span>:<span class="number">12</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T23:52:17.604118+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Flask"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/category/2/"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建文章时指定分类</span></span><br><span class="line">(venv) &gt; http <span class="literal">-a</span> admin:admin POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/ category_id=<span class="number">2</span> title=ILoveDRF body=WishYouToo!</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">437</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Mon, <span class="number">27</span> Mar <span class="number">2023</span> <span class="number">15</span>:<span class="number">54</span>:<span class="number">05</span> GMT</span><br><span class="line">Location: http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/<span class="number">9</span>/</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"author"</span>: {</span><br><span class="line">        <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"last_login"</span>: <span class="string">"2023-03-27T23:24:54.504055+08:00"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"body"</span>: <span class="string">"WishYouToo!"</span>,</span><br><span class="line">    <span class="string">"category"</span>: {</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T23:52:17.604118+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"Flask"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/category/2/"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T23:54:05.550915+08:00"</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"ILoveDRF"</span>,</span><br><span class="line">    <span class="string">"updated"</span>: <span class="string">"2023-03-27T23:54:05.550915+08:00"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/9/"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.把已有的分类置空</span></span><br><span class="line">(venv) &gt; http <span class="literal">-a</span> admin:admin PATCH http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/<span class="number">9</span>/ category_id:=null</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">326</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Mon, <span class="number">27</span> Mar <span class="number">2023</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">26</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"author"</span>: {</span><br><span class="line">        <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"last_login"</span>: <span class="string">"2023-03-27T23:24:54.504055+08:00"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"body"</span>: <span class="string">"WishYouToo!"</span>,</span><br><span class="line">    <span class="string">"category"</span>: null,</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T23:54:05.550915+08:00"</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"ILoveDRF"</span>,</span><br><span class="line">    <span class="string">"updated"</span>: <span class="string">"2023-03-27T23:55:26.915902+08:00"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/9/"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在更新资源时用到了 <code>POST</code> 、<code>PUT</code> 、 <code>PATCH</code> 三种请求方法</p><ul><li><code>POST</code> ：创建新的资源。</li><li><code>PUT</code> ： 整体更新特定资源，默认情况下你需要完整给出所有必须的字段。</li><li><code>PATCH</code>： 部分更新特定资源，仅需要给出需要更新的字段，未给出的字段默认不更改。</li></ul><h3 id="2-5-完善分类详情">2.5 完善分类详情</h3><p>现在希望分类的<strong>列表页面</strong>不显示其链接的文章，以保持数据简洁，但是详情页面则展示出链接的所有文章，方便接口的使用。因此就需要同一个视图集用到两个不同的序列化器，可以使用 <code>get_serializer_class()</code> 。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Category.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">f"Category with id <span class="subst">{value}</span> not exits."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给分类详情的文章嵌套序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'article-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    articles = ArticleCategoryDetailSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">            <span class="string">'created'</span>,</span><br><span class="line">            <span class="string">'articles'</span>,</span><br><span class="line">        ]</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>然后修改视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer, CategorySerializer, CategoryDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Category.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CategorySerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> CategorySerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CategoryDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    filter_backends = [filters.SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h2 id="3-文章标签">3. 文章标签</h2><p>文章通常还有<strong>标签</strong>功能，作为分类的补充。分类对文章一般是<strong>一对多</strong>的关系，标签对文章时<strong>多对多</strong>的关系。</p><h3 id="3-1-增加模型">3.1 增加模型</h3><p>先创建标签的 model 并进行数据迁移</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章标签</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章分类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    created = models.DateTimeField(default=timezone.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    category = models.ForeignKey(</span><br><span class="line">        Category,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 分类</span></span><br><span class="line">    tags = models.ManyToManyField(</span><br><span class="line">        Tag,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 标签</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">"articles"</span></span><br><span class="line">    )                                                     <span class="comment"># 作者</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>进行数据迁移：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py makemigrations</span><br><span class="line">(venv) &gt; python manage.py migrate</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-序列化器">3.2 序列化器</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSerializer</span>(<span class="params">serializers.HyperlinkedIdentityField</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    tag = serializers.SlugRelatedField(query_set=Tag.objects.<span class="built_in">all</span>(), many=<span class="literal">True</span>, required=<span class="literal">False</span>, slug_field=<span class="string">'text'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Category.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">f"Category with id <span class="subst">{value}</span> not exits."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给分类详情的文章嵌套序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'article-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    articles = ArticleCategoryDetailSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">            <span class="string">'created'</span>,</span><br><span class="line">            <span class="string">'articles'</span>,</span><br><span class="line">        ]</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p><code>SlugRelatedField</code> 直接显示其 <code>text</code> 字段的内容。</p><p>多对多关系，DRF 默认你必须先得有这个外键对象，才能指定其关系。</p><p>现在希望在创建、更新文章时，程序会<strong>自动检查</strong>数据库里是否存在当前标签。如果存在则指向它，如果不存在则创建一个并指向它。可以覆写<code>to_internal_value()</code>方法。<code>to_internal_value()</code> 方法原本作用是将请求中的原始 Json 数据转化为 Python 表示形式（期间还会对字段有效性做初步检查）。它的执行时间比默认验证器的字段检查更早，因此有机会在此方法中将需要的数据创建好，然后等待检查的降临。<code>isinstance()</code> 确定标签数据是列表，才会循环并创建新数据。</p><p>除此之外，因为标签仅有 <code>text</code> 字段是有用的，两个 <code>id</code> 不同但是 <code>text</code> 相同的标签没有任何意义。更重要的是，<code>SlugRelatedField</code> 是不允许有重复的 <code>slug_field</code> 。因此还需要覆写 <code>TagSerializer</code> 的 <code>create()/update()</code> 方法。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_tag_obj_exists</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        text = validated_data.get(<span class="string">'text'</span>)</span><br><span class="line">        <span class="keyword">if</span> Tag.objects.<span class="built_in">filter</span>(text=text).exists():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">f'Tag with text <span class="subst">{text}</span> exists.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        self.check_tag_obj_exists(validated_data)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().create(validated_data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        self.check_tag_obj_exists(validated_data)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(instance, validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    tags = serializers.SlugRelatedField(queryset=Tag.objects.<span class="built_in">all</span>(), many=<span class="literal">True</span>, required=<span class="literal">False</span>, slug_field=<span class="string">'text'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Category.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">f"Category with id <span class="subst">{value}</span> not exits."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        tags_data = data.get(<span class="string">'tags'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tags_data, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">for</span> text <span class="keyword">in</span> tags_data:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Tag.objects.<span class="built_in">filter</span>(text=text).exists():</span><br><span class="line">                    Tag.objects.create(text=text)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().to_internal_value(data)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给分类详情的文章嵌套序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'article-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    articles = ArticleCategoryDetailSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">            <span class="string">'created'</span>,</span><br><span class="line">            <span class="string">'articles'</span>,</span><br><span class="line">        ]</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-视图与路由">3.3 视图与路由</h3><p>编写视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer, CategorySerializer, CategoryDetailSerializer, TagSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Tag.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TagSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Category.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CategorySerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> CategorySerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CategoryDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    filter_backends = [filters.SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>编写路由：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'article'</span>, views.ArticleViewSet)</span><br><span class="line">router.register(<span class="string">r'category'</span>, views.CategoryViewSet)</span><br><span class="line">router.register(<span class="string">r'tag'</span>, views.TagViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/'</span>, include(router.urls)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>当然也可以简化代码，可以直接设置 tag 模型的 text 字段唯一, 即<code>unique=True</code>，然后执行数据迁移，再简化 Tag 的序列化器中唯一性的检查：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章标签</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章分类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    created = models.DateTimeField(default=timezone.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    category = models.ForeignKey(</span><br><span class="line">        Category,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 分类</span></span><br><span class="line">    tags = models.ManyToManyField(</span><br><span class="line">        Tag,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 标签</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">"articles"</span></span><br><span class="line">    )                                                     <span class="comment"># 作者</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">        </span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    tags = serializers.SlugRelatedField(queryset=Tag.objects.<span class="built_in">all</span>(), many=<span class="literal">True</span>, required=<span class="literal">False</span>, slug_field=<span class="string">'text'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Category.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">f"Category with id <span class="subst">{value}</span> not exits."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        tags_data = data.get(<span class="string">'tags'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tags_data, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">for</span> text <span class="keyword">in</span> tags_data:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Tag.objects.<span class="built_in">filter</span>(text=text).exists():</span><br><span class="line">                    Tag.objects.create(text=text)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().to_internal_value(data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        category_id = validated_data.pop(<span class="string">'category_id'</span>)</span><br><span class="line">        validated_data[<span class="string">'category'</span>] = Category.objects.get(<span class="built_in">id</span>=category_id)</span><br><span class="line">        tags = Tag.objects.<span class="built_in">filter</span>(text__in=validated_data[<span class="string">'tags'</span>])</span><br><span class="line">        validated_data.pop(<span class="string">'tags'</span>)</span><br><span class="line">        article = Article.objects.create(**validated_data)</span><br><span class="line">        article.tags.<span class="built_in">set</span>(tags)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给分类详情的文章嵌套序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'article-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    articles = ArticleCategoryDetailSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">            <span class="string">'created'</span>,</span><br><span class="line">            <span class="string">'articles'</span>,</span><br><span class="line">        ]</span><br></pre></td></tr></tbody></table></figure><h2 id="4-Markdown正文">4. Markdown正文</h2><p>Markdown 是一种排版标注规则，”渲染“ Markdown 也就是把原始文本中的注释转化为前端中真正被用户看到的 HTML 排版文字。渲染过程可以在前端也可以在后端，本文将使用后端渲染，以便你理解 DRF 的相关知识。</p><h3 id="1-1-修改模型">1.1 修改模型</h3><p><code>markdown</code>库可Markdown渲染，要使用这个库，首先执行<code>pip install markdown==3.4.3</code>， 给文章模型添加一个 <code>get_md()</code> 方法：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> markdown <span class="keyword">import</span> Markdown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章标签</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章分类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    created = models.DateTimeField(default=timezone.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    category = models.ForeignKey(</span><br><span class="line">        Category,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 分类</span></span><br><span class="line">    tags = models.ManyToManyField(</span><br><span class="line">        Tag,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 标签</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">"articles"</span></span><br><span class="line">    )                                                     <span class="comment"># 作者</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_md</span>(<span class="params">self</span>):</span></span><br><span class="line">        md = Markdown(</span><br><span class="line">            extensions=[</span><br><span class="line">                <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">                <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">                <span class="string">'markdown.extensions.toc'</span>,</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">        md_body = md.convert(self.body)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> md_body, md.toc</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>方法返回了包含了两个元素的元组，分别为已渲染为 html 的<strong>正文</strong>和<strong>目录</strong>。</p><h3 id="1-2-序列化器">1.2 序列化器</h3><p>重构代码，添加文章序列化器父类，在列表接口传入 <code>extra_kwargs</code> 使其变成仅可写却不显示的字段，然后写新的 <code>ArticleDetailSerializer</code> ：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleBaseSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器父类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    tags = serializers.SlugRelatedField(queryset=Tag.objects.<span class="built_in">all</span>(), many=<span class="literal">True</span>, required=<span class="literal">False</span>, slug_field=<span class="string">'text'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Category.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">f"Category with id <span class="subst">{value}</span> not exits."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        tags_data = data.get(<span class="string">'tags'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tags_data, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">for</span> text <span class="keyword">in</span> tags_data:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Tag.objects.<span class="built_in">filter</span>(text=text).exists():</span><br><span class="line">                    Tag.objects.create(text=text)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().to_internal_value(data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        category_id = validated_data.pop(<span class="string">'category_id'</span>)</span><br><span class="line">        validated_data[<span class="string">'category'</span>] = Category.objects.get(<span class="built_in">id</span>=category_id)</span><br><span class="line">        tags = Tag.objects.<span class="built_in">filter</span>(text__in=validated_data[<span class="string">'tags'</span>])</span><br><span class="line">        validated_data.pop(<span class="string">'tags'</span>)</span><br><span class="line">        article = Article.objects.create(**validated_data)</span><br><span class="line">        article.tags.<span class="built_in">set</span>(tags)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">ArticleBaseSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        extra_kwargs = {<span class="string">'body'</span>: {<span class="string">'write_only'</span>: <span class="literal">True</span>}}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailSerializer</span>(<span class="params">ArticleBaseSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    body_html = serializers.SerializerMethodField()</span><br><span class="line">    toc_html = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_body_html</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_md()[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_toc_html</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_md()[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给分类详情的文章嵌套序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'article-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    articles = ArticleCategoryDetailSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">            <span class="string">'created'</span>,</span><br><span class="line">            <span class="string">'articles'</span>,</span><br><span class="line">        ]</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p><code>body_html</code> 、 <code>toc_html</code> 这两个渲染后的字段是经过加工后的数据，不存在于原始的数据中。为了将这类只读的附加字段添加到接口里，可以用<code>SerializerMethodField()</code> 字段。比如说上面代码中的 <code>body_html</code> 字段，它会自动去调用 <code>get_body_html()</code> 方法，并将其返回结果作为需要序列化的数据。方法中的 <code>obj</code> 参数是序列化器获取到的 model 实例，即文章对象。</p><h3 id="1-3-修复视图">1.3 修复视图</h3><p>渲染后的数据，在文章<strong>详情接口</strong>是需要的，但是在<strong>列表接口</strong>却没必要，因此视图集根据请求方式动态获取序列化器：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer, CategorySerializer, CategoryDetailSerializer, TagSerializer, ArticleDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Tag.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TagSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Category.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CategorySerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> CategorySerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CategoryDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    filter_backends = [filters.SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> ArticleSerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ArticleDetailSerializer</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h2 id="5-文章标题图">5. 文章标题图</h2><p>博客可能会有文件的上传与下载，但是 JSON 格式的载体是字符串，不能够直接处理文件流。</p><p>Django 用 <code>multipart/form-data</code> 表单发送夹杂着元数据的文件，DRF中也可以这样做，这种方法可行，但在主要接口中发送编码文不太好，还有其他方法：</p><ul><li>方法1：用 Base64 对文件进行编码（将文件变成字符串）。这种方法简单粗暴，并且只靠 Json 接口就可以实现。代价是数据传输大小增加了约 33％，并在服务器和客户端中增加了编码/解码的开销。</li><li>方法2：首先在 <code>multipart/form-data</code> 中单独发送文件，然后后端将保存好的文件 id 返回给客户端。客户端拿到文件 id 后，发送带有文件 id 的 Json 数据，在服务器端将它们关联起来。</li><li>方法3：首先单独发送 Json 数据，然后后端保存好这些元数据后将其 id 返回给客户端。接着客户端发送带有元数据 id 的文件，在服务器端将它们关联起来。</li></ul><p>三种方法各有优劣，具体用哪种方法应当视实际情况确定。</p><p>本文将使用第二种方法来实现博文标题图的功能。</p><h3 id="5-1-增加模型">5.1 增加模型</h3><p><code>Pillow</code>库可用于处理图片字段，要使用这个库，首先执行<code>pip install Pillow==9.4.0</code>，添加标题图模型：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> markdown <span class="keyword">import</span> Markdown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Avatar</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.ImageField(upload_to=<span class="string">'avatar/%Y%m%d'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章标签</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-id'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章分类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    created = models.DateTimeField(default=timezone.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    avatar = models.ForeignKey(</span><br><span class="line">        Avatar,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'article'</span></span><br><span class="line">    )</span><br><span class="line">    category = models.ForeignKey(</span><br><span class="line">        Category,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 分类</span></span><br><span class="line">    tags = models.ManyToManyField(</span><br><span class="line">        Tag,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        related_name=<span class="string">'articles'</span></span><br><span class="line">    )                                                     <span class="comment"># 标签</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">"articles"</span></span><br><span class="line">    )                                                     <span class="comment"># 作者</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_md</span>(<span class="params">self</span>):</span></span><br><span class="line">        md = Markdown(</span><br><span class="line">            extensions=[</span><br><span class="line">                <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">                <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">                <span class="string">'markdown.extensions.toc'</span>,</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">        md_body = md.convert(self.body)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> md_body, md.toc</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>Avatar</code> 模型仅包含一个图片字段。接收的图片将保存在 <code>media/avatar/年月日/</code> 的路径中。</p><p>执行迁移：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py makemigrations</span><br><span class="line">(venv) &gt; python manage.py migrate</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-序列化器">5.2 序列化器</h3><p>用户的操作流程如下：</p><ul><li>发表新文章时，标题图需要先上传，添加一个单独的序列化器，DRF 对图片的处理进行了封装，通常不需要你关心实现的细节。</li><li>标题图上传完成会返回其数据（比如图片数据的 id）到前端并暂存，前端将图片的信息以嵌套结构表示到文章接口中，并在适当的时候将其链接到文章数据中，等待新文章完成后一起提交。</li><li>提交新文章时，序列化器对标题图进行检查，如果无效则返回错误信息。</li></ul><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag, Avatar</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvatarSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'avatar-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Avatar</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleBaseSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器父类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    tags = serializers.SlugRelatedField(queryset=Tag.objects.<span class="built_in">all</span>(), many=<span class="literal">True</span>, required=<span class="literal">False</span>, slug_field=<span class="string">'text'</span>)</span><br><span class="line">    avatar = AvatarSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    avatar_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    default_error_messages = {</span><br><span class="line">        <span class="string">'incorrect_avatar_id'</span>: <span class="string">'Avatar with id {value} not exits.'</span>,</span><br><span class="line">        <span class="string">'incorrect_category_id'</span>: <span class="string">'Category with id {value} not exits.'</span>,</span><br><span class="line">        <span class="string">'default'</span>: <span class="string">'No more message here...'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_obj_exists_or_fail</span>(<span class="params">self, model, value, message=<span class="string">'default'</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.default_error_messages.get(message, <span class="literal">None</span>):</span><br><span class="line">            message = <span class="string">'default'</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> model.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.fail(message, value=value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.check_obj_exists_or_fail(model=Category, value=value, message=<span class="string">'incorrect_category_id'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_avatar_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.check_obj_exists_or_fail(model=Avatar, value=value, message=<span class="string">'incorrect_avatar_id'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        tags_data = data.get(<span class="string">'tags'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tags_data, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">for</span> text <span class="keyword">in</span> tags_data:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Tag.objects.<span class="built_in">filter</span>(text=text).exists():</span><br><span class="line">                    Tag.objects.create(text=text)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().to_internal_value(data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        category_id = validated_data.pop(<span class="string">'category_id'</span>)</span><br><span class="line">        validated_data[<span class="string">'category'</span>] = Category.objects.get(<span class="built_in">id</span>=category_id)</span><br><span class="line">        tags = Tag.objects.<span class="built_in">filter</span>(text__in=validated_data[<span class="string">'tags'</span>])</span><br><span class="line">        validated_data.pop(<span class="string">'tags'</span>)</span><br><span class="line">        article = Article.objects.create(**validated_data)</span><br><span class="line">        article.tags.<span class="built_in">set</span>(tags)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">ArticleBaseSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        extra_kwargs = {<span class="string">'body'</span>: {<span class="string">'write_only'</span>: <span class="literal">True</span>}}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailSerializer</span>(<span class="params">ArticleBaseSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    body_html = serializers.SerializerMethodField()</span><br><span class="line">    toc_html = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_body_html</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_md()[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_toc_html</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_md()[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给分类详情的文章嵌套序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'article-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    articles = ArticleCategoryDetailSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">            <span class="string">'created'</span>,</span><br><span class="line">            <span class="string">'articles'</span>,</span><br><span class="line">        ]</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-视图与路由">5.3 视图与路由</h3><p>编写视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag, Avatar</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> (</span><br><span class="line">    ArticleSerializer,</span><br><span class="line">    CategorySerializer,</span><br><span class="line">    CategoryDetailSerializer,</span><br><span class="line">    TagSerializer,</span><br><span class="line">    ArticleDetailSerializer,</span><br><span class="line">    AvatarSerializer,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvatarViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章标题图视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Avatar.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AvatarSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Tag.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TagSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Category.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CategorySerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> CategorySerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CategoryDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    filter_backends = [filters.SearchFilter]</span><br><span class="line">    search_fields = [<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> ArticleSerializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ArticleDetailSerializer</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>还需要修改配置文件，配置图片存放的路径</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/settings.py</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">MEDIA_URL =  <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = BASE_DIR / <span class="string">'media'</span></span><br></pre></td></tr></tbody></table></figure><p>最后编写路由：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'article'</span>, views.ArticleViewSet)</span><br><span class="line">router.register(<span class="string">r'category'</span>, views.CategoryViewSet)</span><br><span class="line">router.register(<span class="string">r'tag'</span>, views.TagViewSet)</span><br><span class="line">router.register(<span class="string">r'avatar'</span>, views.AvatarViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/'</span>, include(router.urls)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-测试">5.4 测试</h3><blockquote><p><em>Postman 操作文件接口需要将</em> <code>Content-Type</code> <em>改为</em> <code>multipart/form-data</code> <em>，并在</em> <code>Body</code> <em>中上传图片文件。</em></p></blockquote><p>可浏览器打开http://127.0.0.1:8000/api/avatar/"进行测试</p><h2 id="6-评论">6. 评论</h2><p>有很多方式可以将评论功能托管给第三方（推荐这么做），不过也可以自己实现简单的评论接口。</p><p>评论功能比较独立，因此新增一个 <code>comment</code> 的 App：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py startapp comment</span><br></pre></td></tr></tbody></table></figure><p>将App注册到配置文件</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/settings.py</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'article'</span>,</span><br><span class="line">    <span class="string">'user_info'</span>,</span><br><span class="line">    <span class="string">'django_filters'</span>,</span><br><span class="line">    <span class="string">'comment'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="6-1-添加模型">6.1 添加模型</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># comment/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">'comments'</span></span><br><span class="line">    )</span><br><span class="line">    article = models.ForeignKey(</span><br><span class="line">        Article,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">'comments'</span></span><br><span class="line">    )</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    created = models.DateTimeField(default=timezone.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.content[:<span class="number">20</span>]</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>模型包含一对多的作者外键、一对多的文章外键、评论实际内容、评论时间这4个字段。</p><p>执行 <code>python manage.py makemigrations</code> 和 <code>python manage.py migrate</code> 。</p><h3 id="6-2-序列化器">6.2 序列化器</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># comment/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> comment.models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    评论序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'comment-detail'</span>)</span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Comment</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        extra_kwargs = {<span class="string">'created'</span>: {<span class="string">'read_only'</span>: <span class="literal">True</span>}}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>url</code> 超链接字段让接口的跳转更方便，<code>author</code> 嵌套序列化器让显示的内容更丰富，让评论通过文章接口显示出来：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article, Category, Tag, Avatar</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"><span class="keyword">from</span> comment.serializers <span class="keyword">import</span> CommentSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvatarSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'avatar-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Avatar</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    标签序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Tag</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'category-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        read_only_fields = [<span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleBaseSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章序列化器父类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category = CategorySerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    category_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    tags = serializers.SlugRelatedField(queryset=Tag.objects.<span class="built_in">all</span>(), many=<span class="literal">True</span>, required=<span class="literal">False</span>, slug_field=<span class="string">'text'</span>)</span><br><span class="line">    avatar = AvatarSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    avatar_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    default_error_messages = {</span><br><span class="line">        <span class="string">'incorrect_avatar_id'</span>: <span class="string">'Avatar with id {value} not exits.'</span>,</span><br><span class="line">        <span class="string">'incorrect_category_id'</span>: <span class="string">'Category with id {value} not exits.'</span>,</span><br><span class="line">        <span class="string">'default'</span>: <span class="string">'No more message here...'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_obj_exists_or_fail</span>(<span class="params">self, model, value, message=<span class="string">'default'</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.default_error_messages.get(message, <span class="literal">None</span>):</span><br><span class="line">            message = <span class="string">'default'</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> model.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=value).exists() <span class="keyword">and</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.fail(message, value=value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_category_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.check_obj_exists_or_fail(model=Category, value=value, message=<span class="string">'incorrect_category_id'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_avatar_id</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.check_obj_exists_or_fail(model=Avatar, value=value, message=<span class="string">'incorrect_avatar_id'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_internal_value</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        tags_data = data.get(<span class="string">'tags'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tags_data, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">for</span> text <span class="keyword">in</span> tags_data:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Tag.objects.<span class="built_in">filter</span>(text=text).exists():</span><br><span class="line">                    Tag.objects.create(text=text)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().to_internal_value(data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        category_id = validated_data.pop(<span class="string">'category_id'</span>)</span><br><span class="line">        validated_data[<span class="string">'category'</span>] = Category.objects.get(<span class="built_in">id</span>=category_id)</span><br><span class="line">        tags = Tag.objects.<span class="built_in">filter</span>(text__in=validated_data[<span class="string">'tags'</span>])</span><br><span class="line">        validated_data.pop(<span class="string">'tags'</span>)</span><br><span class="line">        article = Article.objects.create(**validated_data)</span><br><span class="line">        article.tags.<span class="built_in">set</span>(tags)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">ArticleBaseSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        extra_kwargs = {<span class="string">'body'</span>: {<span class="string">'write_only'</span>: <span class="literal">True</span>}}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailSerializer</span>(<span class="params">ArticleBaseSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    comments = CommentSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    body_html = serializers.SerializerMethodField()</span><br><span class="line">    toc_html = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_body_html</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_md()[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_toc_html</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_md()[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给分类详情的文章嵌套序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'article-detail'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分类详情</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    articles = ArticleCategoryDetailSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Category</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'title'</span>,</span><br><span class="line">            <span class="string">'created'</span>,</span><br><span class="line">            <span class="string">'articles'</span>,</span><br><span class="line">        ]</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-权限、视图与路由">6.3 权限、视图与路由</h3><p>评论对用户身份的要求比文章宽松，<strong>非安全请求</strong>只需要是本人操作就可以了。</p><p>因此自定义一个所有人都可查看、仅本人可更改的权限：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># comment/permissions.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission, SAFE_METHODS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line">    message = <span class="string">'You must be the owner to update.'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_methods_or_owner</span>(<span class="params">self, request, func</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.safe_methods_or_owner(</span><br><span class="line">            request,</span><br><span class="line">            <span class="keyword">lambda</span>: request.user.is_authenticated</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.safe_methods_or_owner(</span><br><span class="line">            request,</span><br><span class="line">            <span class="keyword">lambda</span>: obj.author == request.user</span><br><span class="line">        )</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>进行<strong>非安全请求</strong>时，需要验证当前评论的作者和当前登录的用户是否为同一个人，这里用到了 <code>def has_object_permission(...)</code> 这个钩子方法，方法参数中的 <code>obj</code> 即为评论模型的实例。</p><p>看起来只需要实现这个 <code>def has_object_permission(...)</code> 就可以了，但还有一点点小问题：此方法是晚于视图集中的 <code>def perform_create(author=self.request.user)</code> 执行的。如果用户未登录时新建评论，由于用户不存在，接口会抛出 500 错误。</p><p>本着即使出错也要做出正确错误提示的原则，增加了 <code>def has_permission(...)</code> 方法。此方法早于 <code>def perform_create(...)</code> 执行，因此能够对用户登录状态做一个预先检查。</p><p>编写视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># comment/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> comment.models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> comment.serializers <span class="keyword">import</span> CommentSerializer</span><br><span class="line"><span class="keyword">from</span> comment.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    评论视图集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br><span class="line">    permission_classes = [IsOwnerOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>注册路由：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> comment.views <span class="keyword">import</span> CommentViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'article'</span>, views.ArticleViewSet)</span><br><span class="line">router.register(<span class="string">r'category'</span>, views.CategoryViewSet)</span><br><span class="line">router.register(<span class="string">r'tag'</span>, views.TagViewSet)</span><br><span class="line">router.register(<span class="string">r'avatar'</span>, views.AvatarViewSet)</span><br><span class="line">router.register(<span class="string">r'comment'</span>, CommentViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/'</span>, include(router.urls)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可浏览器打开http://127.0.0.1:8000/api/comment/"进行测试</p><h3 id="6-4-多级评论">6.4 多级评论</h3><p>多级评论，也就是让评论模型和自身相关联，使其可以有一个父级。</p><p>修改评论模型，新增 <code>parent</code> 字段：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># comment/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    parent = models.ForeignKey(</span><br><span class="line">        <span class="string">'self'</span>,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'children'</span></span><br><span class="line">    )</span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">'comments'</span></span><br><span class="line">    )</span><br><span class="line">    article = models.ForeignKey(</span><br><span class="line">        Article,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">'comments'</span></span><br><span class="line">    )</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    created = models.DateTimeField(default=timezone.now)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.content[:<span class="number">20</span>]</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><ul><li>一个父评论可以有多个子评论，而一个子评论只能有一个父评论，因此用了一对多外键。</li><li>之前的一对多外键，第一个参数直接引用了对应的模型，但是由于语法规则限制，这里显然不能够自己引用自己，因此用了传递字符串 <code>self</code> 的方式，作用都是一样的。</li></ul><p>执行 <code>python manage.py makemigrations</code> 和 <code>python manage.py migrate</code> 进行迁移。</p><p>修改序列化器：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># comment/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> comment.models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentChildrenSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    子评论序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'comment-detail'</span>)</span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Comment</span><br><span class="line">        exclude = [<span class="string">'parent'</span>, <span class="string">'article'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    评论序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'comment-detail'</span>)</span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    article = serializers.HyperlinkedRelatedField(view_name=<span class="string">'article-detail'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    article_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">False</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    parent = CommentChildrenSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    parent_id = serializers.IntegerField(write_only=<span class="literal">True</span>, allow_null=<span class="literal">True</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        validated_data.pop(<span class="string">'parent_id'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(instance, validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Comment</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        extra_kwargs = {<span class="string">'created'</span>: {<span class="string">'read_only'</span>: <span class="literal">True</span>}}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>新增代码大致可以分为三块：</p><ul><li>将 <code>article</code> 改为超链接字段用了 <code>HyperlinkedRelatedField</code> ，它同 <code>HyperlinkedIdentityField</code> 差别很小，可以简化理解为 <code>HyperlinkedRelatedField</code> 用于对外键关系，而 <code>HyperlinkedIdentityField</code> 用于对当前模型自身。（完整的解释<a href="https://stackoverflow.com/questions/31566675/for-django-rest-framework-what-is-the-difference-in-use-case-for-hyperlinkedrel">看这里</a>）</li><li><code>parent</code> 为父评论，用了嵌套序列化器 <code>CommentChildrenSerializer</code> 。注意这个序列化器的 <code>Meta</code> 用 <code>exclude</code> 来定义不需要的字段。</li><li>由于希望父评论只能在创建时被关联，后续不能更改，因此覆写 <code>def update(...)</code> ，使得在更新评论时忽略掉 <code>parent_id</code> 参数。</li></ul><p>可浏览器打开http://127.0.0.1:8000/api/comment/"，在界面上进行评论的增删改查测试</p><h2 id="7-JWT身份认证">7. JWT身份认证</h2><p>Web 程序是使用 HTTP 协议传输的，而 HTTP 协议是<strong>无状态</strong>的协议，对于事务没有记忆能力。如果没有其他形式的帮助，服务器是没办法知道前后两次请求是否是同一个用户发起的，也不具有对用户进行身份验证的能力。</p><p>传统 web 开发中，身份验证<strong>通常</strong>是基于 Session 会话机制的。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。 Session 通常是存储在服务器当中的，如果 Session 过多，会对服务器产生压力。</p><p>另一种比较常用的身份验证方式是 <strong>JWT (JSON Web Token)</strong> 令牌。JWT 是一种开放标准，它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。由于 Token 是经过数字签名的，因此可以被验证和信任。<strong>JWT 非常适合用于身份验证和服务器到服务器授权</strong>。与 Session 不同，JWT 的 <strong>Token</strong> 是保存在用户端的，即摆脱了对服务器的依赖。在进行某些需要验证身份的业务中，用户需要把令牌一并提交。</p><p>JWT令牌组成如图所示：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(3)%EF%BC%9A%E5%90%8E%E7%AB%AF%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/image-20230328162558878.png" alt="JWT令牌"></p><blockquote><p><em>详细的</em> <a href="https://jwt.io/introduction">JWT 工作方式讲解</a><em>。</em></p></blockquote><h3 id="7-1-JWT引入">7.1 JWT引入</h3><p><code>djangorestframework-simplejwt</code>库可用于 JWT ，要使用这个库，首先执行<code>pip install djangorestframework-simplejwt==5.2.2</code>，修改配置文件，使用 JWT 为默认验证机制，同时配置token的有效期：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/settings.py</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_simplejwt.authentication.JWTAuthentication'</span>,</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">SIMPLE_JWT = {</span><br><span class="line">    <span class="string">'ACCESS_TOKEN_LIFETIME'</span>: timedelta(hours=<span class="number">3</span>),</span><br><span class="line">    <span class="string">'REFRESH_TOKEN_LIFETIME'</span>: timedelta(days=<span class="number">1</span>),</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>Token 一旦泄露，任何人都可以获得该令牌的所有权限。出于安全考虑，Token 的有效期通常不应该设置得太长。</p></blockquote><p>更多配置项请查看<a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html">官方文档</a>。</p><p>在路由中添加Token的获取和刷新地址</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> comment.views <span class="keyword">import</span> CommentViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> (</span><br><span class="line">    TokenObtainPairView,</span><br><span class="line">    TokenRefreshView,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'article'</span>, views.ArticleViewSet)</span><br><span class="line">router.register(<span class="string">r'category'</span>, views.CategoryViewSet)</span><br><span class="line">router.register(<span class="string">r'tag'</span>, views.TagViewSet)</span><br><span class="line">router.register(<span class="string">r'avatar'</span>, views.AvatarViewSet)</span><br><span class="line">router.register(<span class="string">r'comment'</span>, CommentViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/'</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">'api/token/'</span>, TokenObtainPairView.as_view(), name=<span class="string">'token_obtain_pair'</span>),</span><br><span class="line">    path(<span class="string">'api/token/refresh'</span>, TokenRefreshView.as_view(), name=<span class="string">'token_refresh'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="7-2-测试">7.2 测试</h3><p>浏览器打开页面 <a href="http://127.0.0.1:8000/api/token/">http://127.0.0.1:8000/api/token/</a> ，填入你的用户名和密码，点击 <strong>POST</strong> 即可得到 Access Token 和 Refresh Token 。如：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">HTTP <span class="number">200</span> OK</span><br><span class="line">Allow: POST, OPTIONS</span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Vary: Accept</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"refresh"</span>: <span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4MDA3OTMwMiwiaWF0IjoxNjc5OTkyOTAyLCJqdGkiOiI2ZWZmYzRhODJjZDY0ZjZiYjk3MDlmZTUzNDE2N2M1NSIsInVzZXJfaWQiOjF9.A2Z0oqu_TB-eLwCFgBkYMjjE71utzPa492VV9hX_zS0"</span>,</span><br><span class="line">    <span class="string">"access"</span>: <span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjgwMDAzNzAyLCJpYXQiOjE2Nzk5OTI5MDIsImp0aSI6ImYyMDNkNmMxMGY5ZDQ4MmJiNGI4ZjQwNGFhNzJlMjQ3IiwidXNlcl9pZCI6MX0.lN3ThGRBGg0Kz3u1vPrUJoYzlEFgoTNy_fyciPHxNRo"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>拿到 Token 后，就可以用 Access Token 作为你的身份令牌，进行正常的资源请求了：</p><blockquote><p>Postman 有一个专门的标签页 (Authorization) 用于填写令牌。此标签页的 Type 栏选择 Bearer Token 即可。</p></blockquote><p>当 Access Token 过期后，可使用 Refresh Token 访问 <a href="http://127.0.0.1:8000/api/token/refresh/">http://127.0.0.1:8000/api/token/refresh/</a> 再获取一个新的令牌 Access Token ，当 Refresh Token 也过期后，之后浏览器打开页面 <a href="http://127.0.0.1:8000/api/token/">http://127.0.0.1:8000/api/token/</a> ，填入你的用户名和密码，获取新的Token了。</p><p>功能与用 Session 相同，并且成功切换到 JWT 方式了，非安全类的请求必须携带 Access Token。</p><blockquote><p>开启 JWT 后，Session 验证就自动失效了。也就是说，除了申请 Token 时会用到账户密码，其他时候的身份验证都不再需要它们了。</p></blockquote><p>Session V.S. JWT: JWT将会话移至客户端意味着摆脱了对服务器端会话的依赖，但这会带来如何安全存储、运输令牌等一系列挑战。不能够一概而论，而是要根据你的项目实际需求。关于这个话题更深入的讨论，请移步<a href="https://stackoverflow.com/questions/43452896/authentication-jwt-usage-vs-session">Stackoverflow</a>。</p><h2 id="8-用户管理">8. 用户管理</h2><h3 id="8-1-序列化器">8.1 序列化器</h3><p>用户管理涉及到对密码的操作，因此新写一个序列化器，覆写 <code>def create(...)</code> 和 <code>def update(...)</code> 方法：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user_info/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDescSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表中引用的嵌套用户信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'username'</span>,</span><br><span class="line">            <span class="string">'last_login'</span>,</span><br><span class="line">            <span class="string">'date_joined'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRegisterSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户管理序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'user-detail'</span>, lookup_field=<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>]</span><br><span class="line">        extra_kwargs = {<span class="string">'password'</span>: {<span class="string">'write_only'</span>: <span class="literal">True</span>}}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        user = User.objects.create_user(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'password'</span> <span class="keyword">in</span> validated_data:</span><br><span class="line">            password = validated_data.pop(<span class="string">'password'</span>)</span><br><span class="line">            instance.set_password(password)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(instance, validated_data)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>注意 <code>def update(...)</code> 时，密码需要单独拿出来通过 <code>set_password()</code> 方法加密后存入数据库，而不能以明文的形式保存。</li><li>超链接字段的参数有一条 <code>lookup_field</code>，这是指定了解析超链接关系的字段。直观来说，将其配置为 <code>username</code> 后，用户详情接口的地址表示为用户名而不是主键。</li></ul><h3 id="8-2-权限、视图与路由">8.2 权限、视图与路由</h3><p>新增权限：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user_info/permissions.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission, SAFE_METHODS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsSelfOrReadOnly</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> obj == request.user</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>新增视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user_info/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny, IsAuthenticatedOrReadOnly</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserRegisterSerializer</span><br><span class="line"><span class="keyword">from</span> user_info.permissions <span class="keyword">import</span> IsSelfOrReadOnly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户管理视图</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserRegisterSerializer</span><br><span class="line">    lookup_field = <span class="string">'username'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">'POST'</span>:</span><br><span class="line">            self.permission_classes = [AllowAny]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.permission_classes = [IsAuthenticatedOrReadOnly, IsSelfOrReadOnly]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().get_permissions()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>注册用户的 POST 请求是允许所有人都可以操作的，但其他类型的请求（比如修改、删除）就必须是本人才行了，因此可以覆写 <code>def get_permissions(...)</code> 定义不同情况下所允许的权限。 <code>permission_classes</code> 接受列表，因此可以同时定义多个权限，权限之间是 and 关系。</li><li>注意这里的 <code>lookup_field</code> 属性，和序列化器中对应起来。</li></ul><p>修改路由：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> comment.views <span class="keyword">import</span> CommentViewSet</span><br><span class="line"><span class="keyword">from</span> user_info.views <span class="keyword">import</span> UserViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> (</span><br><span class="line">    TokenObtainPairView,</span><br><span class="line">    TokenRefreshView,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'article'</span>, views.ArticleViewSet)</span><br><span class="line">router.register(<span class="string">r'category'</span>, views.CategoryViewSet)</span><br><span class="line">router.register(<span class="string">r'tag'</span>, views.TagViewSet)</span><br><span class="line">router.register(<span class="string">r'avatar'</span>, views.AvatarViewSet)</span><br><span class="line">router.register(<span class="string">r'comment'</span>, CommentViewSet)</span><br><span class="line">router.register(<span class="string">r'user'</span>, UserViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/'</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">'api/token/'</span>, TokenObtainPairView.as_view(), name=<span class="string">'token_obtain_pair'</span>),</span><br><span class="line">    path(<span class="string">'api/token/refresh'</span>, TokenRefreshView.as_view(), name=<span class="string">'token_refresh'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可用浏览器打开 <a href="http://127.0.0.1:8000/api/user/">http://127.0.0.1:8000/api/user/</a> 进行用户列表查看和创建用户测试。</p><p>可以看到详情地址不是主键值而是用户名了，这就是 <code>lookup_field</code> 发挥的作用。</p><h3 id="8-3-自定义动作">8.3 自定义动作</h3><p>视图集除了默认的增删改查外，还可以有其他的自定义动作。</p><p>为了测试，先写一个信息更加丰富的用户序列化器：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user_info/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDescSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表中引用的嵌套用户信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'username'</span>,</span><br><span class="line">            <span class="string">'last_login'</span>,</span><br><span class="line">            <span class="string">'date_joined'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRegisterSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户管理序列化器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">'user-detail'</span>, lookup_field=<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>]</span><br><span class="line">        extra_kwargs = {<span class="string">'password'</span>: {<span class="string">'write_only'</span>: <span class="literal">True</span>}}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        user = User.objects.create_user(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'password'</span> <span class="keyword">in</span> validated_data:</span><br><span class="line">            password = validated_data.pop(<span class="string">'password'</span>)</span><br><span class="line">            instance.set_password(password)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(instance, validated_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'username'</span>,</span><br><span class="line">            <span class="string">'first_name'</span>,</span><br><span class="line">            <span class="string">'last_name'</span>,</span><br><span class="line">            <span class="string">'email'</span>,</span><br><span class="line">            <span class="string">'last_login'</span>,</span><br><span class="line">            <span class="string">'date_joined'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>接着在视图集中新增自定义动作的代码：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user_info/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny, IsAuthenticatedOrReadOnly</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserRegisterSerializer, UserDetailSerializer</span><br><span class="line"><span class="keyword">from</span> user_info.permissions <span class="keyword">import</span> IsSelfOrReadOnly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户管理视图</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserRegisterSerializer</span><br><span class="line">    lookup_field = <span class="string">'username'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">'POST'</span>:</span><br><span class="line">            self.permission_classes = [AllowAny]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.permission_classes = [IsAuthenticatedOrReadOnly, IsSelfOrReadOnly]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().get_permissions()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span>, methods=[<span class="string">'get'</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">self, request, username=<span class="literal">None</span></span>):</span></span><br><span class="line">        queryset = User.objects.get(username=username)</span><br><span class="line">        serializer = UserDetailSerializer(queryset, many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sorted</span>(<span class="params">self, reqeust</span>):</span></span><br><span class="line">        users = User.objects.<span class="built_in">all</span>().order_by(<span class="string">'-username'</span>)</span><br><span class="line">        page = self.paginate_queryset(users)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line">        </span><br><span class="line">        serializer = self.get_serializer(users, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>魔法都在装饰器 <code>@action</code> 里，它的参数可以定义是否为详情的动作、请求类型、url 地址、url 解析名等常规需求。</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http get http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/user/admin/info/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">183</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Tue, <span class="number">28</span> Mar <span class="number">2023</span> <span class="number">09</span>:<span class="number">50</span>:<span class="number">04</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"admin@example.com"</span>,</span><br><span class="line">    <span class="string">"first_name"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"last_login"</span>: <span class="string">"2023-03-27T23:24:54.504055+08:00"</span>,</span><br><span class="line">    <span class="string">"last_name"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">(venv) &gt; http get http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/user/sorted/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">197</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Tue, <span class="number">28</span> Mar <span class="number">2023</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">41</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"next"</span>: null,</span><br><span class="line">    <span class="string">"previous"</span>: null,</span><br><span class="line">    <span class="string">"results"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/user/test/"</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"test"</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/user/admin/"</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>默认情况下，方法名就是此动作的路由路径。返回的 Json 也正确显示为方法中所封装的数据。</p><blockquote><p><em>关于自定义动作详见</em><a href="https://www.django-rest-framework.org/api-guide/viewsets/#marking-extra-actions-for-routing">官方文档</a><em>。</em></p></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">本文标题： Django-Vue搭建个人博客(3)：后端功能完善</span><br><span class="line">原文链接： https://www.dusaiphoto.com/article/112/ ~ https://www.dusaiphoto.com/article/120/</span><br><span class="line">原文作者： 杜赛</span><br><span class="line">许可协议： 署名-非商业性使用 4.0 国际许可协议</span><br><span class="line">本文对原始作品作了修改，转载请保留原文链接及作者</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(2)：DRF的使用</title>
      <link href="/posts/8442.html"/>
      <url>/posts/8442.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-初识Django-REST-framework-DRF">1. 初识Django REST framework (DRF)</h2><h3 id="1-1-DRF开发预备">1.1 DRF开发预备</h3><p>首先在命令行创建博客文章的App：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py startapp article</span><br></pre></td></tr></tbody></table></figure><p>创建一个简单的博客文章模型：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>Django有一个非常优秀的库 <a href="https://www.django-rest-framework.org/">Django REST framework</a> (简称 <strong>DRF</strong> )，可以帮助我们封装好序列化的底层实现，让开发人员专注于业务本身。</p><p>安装 DRF 及其他依赖库：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; pip install djangorestframework=<span class="number">3.14</span>.<span class="number">0</span></span><br><span class="line">(venv) &gt; pip install markdown==<span class="number">3.4</span>.<span class="number">3</span></span><br><span class="line">(venv) &gt; pip install django<span class="literal">-filter</span>==<span class="number">23.1</span></span><br></pre></td></tr></tbody></table></figure><p>然后将App注册到列表：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/settings.py</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'article'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>接着添加 DRF 的登录视图，以便 DRF 自动为你的可视化接口页面生成一个用户登录的入口：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>最后进行数据迁移：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py makemigrations</span><br><span class="line">(venv) &gt; python manage.py migrate</span><br></pre></td></tr></tbody></table></figure><p>准备工作做好了。</p><h3 id="1-2-序列化与Django">1.2 序列化与Django</h3><p>前后端分离的核心思想之一是两端交互不通过模板语言，而只传输需要的数据。</p><p>在 Django 程序的运行过程中，变量都是存储在服务器的内存中，而且，后端 Django 程序存储的是 Python 变量，而前端浏览器中是 Javascript 变量，两者是无法直接通过网络进行传递和交流的，因此需要规定一个“标准格式”，前后端都根据这个标准格式，对资源进行保存、读取、传输等操作。</p><p><code>JSON</code>就是这种标准格式之一，它很轻量，表示出来就是个字符串，可以直接被几乎所有的语言读取、转换，非常方便。</p><p>举个例子，把 Python 对象转化为 JSON 的过程叫做<strong>序列化</strong>（Serialization），把 JSON 对象转化为 Python 对象的过程叫做<strong>反序列化</strong>（Deserialization）。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person = <span class="built_in">dict</span>(name=<span class="string">'Trump'</span>, age=<span class="number">82</span>)  <span class="comment"># Python对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(person)  <span class="comment"># 序列化</span></span><br><span class="line"><span class="string">'{"name": "Trump", "age": 82}'</span>  <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_str = <span class="string">'{"name": "Trump", "age": 82}'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(json_str)  <span class="comment"># 反序列化</span></span><br><span class="line">{<span class="string">'name'</span>: <span class="string">'Trump'</span>, <span class="string">'age'</span>: <span class="number">82</span>}  <span class="comment"># Python对象</span></span><br></pre></td></tr></tbody></table></figure><p>总之，把变量从内存中变为可存储或传输的过程称之为<strong>序列化</strong>，反过来把变量内容从序列化对象重新读到内存中称之为<strong>反序列化</strong>。</p><p>回顾 Django 传统流程对一个网络请求的处理：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    articles = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(..., context={<span class="string">'articles'</span>: articles})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>视图函数将数据作为上下文返回，通过模板引擎将上下文渲染为页面中的数据。</p><p><strong>Restful</strong> 的处理流程仅增加了一步，即对数据<strong>序列化</strong>处理：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    articles = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 序列化数据</span></span><br><span class="line">    serializer = Serializer(article, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>数据被序列化为 JSON 字符串，直接交由前端处理。这就是前后端分离的雏形，后端提供数据，前端专注于操作数据、渲染页面。</p><blockquote><p><em>前后端分离关联的新概念：Rest（表现层状态转化） 和 Restful。Restful 架构是指客户端和服务器之间的交互、操作符合 Rest 规范，即：每一个URI代表一种资源；客户端和服务器之间，传递资源的表现层；客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。</em></p></blockquote><h3 id="1-3-编写文章列表接口">1.3 编写文章列表接口</h3><p>按照该思路，写一个文章列表的接口：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer  <span class="comment"># ArticleListSerializer 后面会写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    articles = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer = ArticleListSerializer(articles, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>接口代码一共就三行：</p><ul><li>取出所有文章的<code>QuerySet</code></li><li>根据<code>QuerySet</code>数据，创建一个序列化器</li><li>将序列化后的数据以 JSON 的形式返回</li></ul><p>因此，返回的数据不再是传统的模板数据，而是 JSON 数据。</p><p>补充<code>ArticleListSerializer</code>的代码：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleListSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表序列化类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(allow_blank=<span class="literal">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    body = serializers.CharField(allow_blank=<span class="literal">True</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line">    updated = serializers.DateTimeField()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>序列化类看起来类似 Django 的 Form 表单类型，它指定了接口数据中各个字段的具体类型，自动对请求和响应中的数据进行序列化和反序列化转换。其底层实现逻辑已经由 DRF 框架封装好了。</p><p>接下来将各级 <code>urls.py</code> 配置好。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'api/article/'</span>, include(<span class="string">'article.urls'</span>, namespace=<span class="string">'article'</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'article'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.article_list, name=<span class="string">'list'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>接下来创建一个管理员用户:</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(env) &gt; python manage.py createsuperuser</span><br><span class="line">Username: admin</span><br><span class="line">Email address: admin@example.com</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></tbody></table></figure><p>将<code>Artile</code>数据表注册到后台中</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/admin.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Article)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>命令行执行<code>python manage.py runserver</code>启动服务器，并在浏览器中访问 <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a> ，登录后在后台中随意给 <code>article</code> 添加几个测试数据，并在浏览器中访问 <a href="http://127.0.0.1:8000/api/article/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%BF%94%E5%9B%9E%E7%9A%84">http://127.0.0.1:8000/api/article/，可以看到页面中返回的</a> Json 字符串如下：</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[{<span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"title"</span>: <span class="string">"My first post"</span>, <span class="attr">"body"</span>: <span class="string">"First post body ..."</span>, <span class="attr">"created"</span>: <span class="string">"2023-03-27T00:07:00+08:00"</span>, <span class="attr">"updated"</span>: <span class="string">"2023-03-27T00:09:26.036519+08:00"</span>}, {<span class="attr">"id"</span>: <span class="number">2</span>, <span class="attr">"title"</span>: <span class="string">"Another post"</span>, <span class="attr">"body"</span>: <span class="string">"Another post body ..."</span>, <span class="attr">"created"</span>: <span class="string">"2023-03-27T00:09:00+08:00"</span>, <span class="attr">"updated"</span>: <span class="string">"2023-03-27T00:09:52.545659+08:00"</span>}, {<span class="attr">"id"</span>: <span class="number">3</span>, <span class="attr">"title"</span>: <span class="string">"3rd article"</span>, <span class="attr">"body"</span>: <span class="string">"The 3rd article body ..."</span>, <span class="attr">"created"</span>: <span class="string">"2023-03-27T00:09:00+08:00"</span>, <span class="attr">"updated"</span>: <span class="string">"2023-03-27T00:10:14.199362+08:00"</span>}]</span><br></pre></td></tr></tbody></table></figure><p>到此，你已经完成了一个简单的接口。</p><h2 id="2-序列化器与视图">2. 序列化器与视图</h2><h3 id="2-1-ModelSerializer">2.1 ModelSerializer</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleListSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表序列化类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(allow_blank=<span class="literal">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    body = serializers.CharField(allow_blank=<span class="literal">True</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line">    updated = serializers.DateTimeField()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>上文中<code>ArticleListSerializer</code>序列化器类长得跟<code>Artile</code>类模型非常像，如果可以再简化下就好了，DRF提供了<code>ModelSerializer</code>用于简化序列化器。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleListSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'created'</span>]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>ModelSerializer</code>的功能与<code>Serializer</code>基本一致，不同的是它还做了额外的工作：</p><ul><li>自动推断需要序列化的字段及类型</li><li>提供对字段数据的验证器的默认实现</li><li>提供了修改数据需要用到的<code>.create()</code>、<code>.update()</code>方法的默认实现</li><li>在<code>fields</code>列表中挑选出需要的数据，可减少数据的体积</li></ul><p>重新访问 <a href="http://127.0.0.1:8000/api/article/%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">http://127.0.0.1:8000/api/article/，页面呈现的数据如下：</a></p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[{<span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"title"</span>: <span class="string">"My first post"</span>, <span class="attr">"created"</span>: <span class="string">"2023-03-27T00:07:00+08:00"</span>}, {<span class="attr">"id"</span>: <span class="number">2</span>, <span class="attr">"title"</span>: <span class="string">"Another post"</span>, <span class="attr">"created"</span>: <span class="string">"2023-03-27T00:09:00+08:00"</span>}, {<span class="attr">"id"</span>: <span class="number">3</span>, <span class="attr">"title"</span>: <span class="string">"3rd article"</span>, <span class="attr">"created"</span>: <span class="string">"2023-03-27T00:09:00+08:00"</span>}]</span><br></pre></td></tr></tbody></table></figure><p>可以看到 JSON 数据仅包含<code>fields</code>规定的字段。</p><h3 id="2-2-APIView">2.2 APIView</h3><p>除了对序列化器的支持以外，DRF 还提供了对视图的扩展，以便视图更好的为接口服务，将文章的视图修改如下：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        articles = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = ArticleListSerializer(articles, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        serializer = ArticleListSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>主要的变化如下：</p><ul><li><code>@api_view</code> 装饰器允许视图接收 <code>GET</code> 、<code>POST</code> 请求，以及提供如 <code>405 Method Not Allowed</code> 等默认实现，以便在不同的请求下进行正确的响应。</li><li>返回了 <code>Response</code> ，该对象由 Django 原生响应体扩展而来，它可以根据<strong>内容协商</strong>来确定返回给客户端的正确内容类型。如果数据验证有误，还可以返回适当的状态码以表示当前的情况。</li></ul><p>刷新文章列表接口，出现了可视化的接口界面：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)%EF%BC%9ADRF%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230327003942171.png" alt="可视化的接口界面"></p><p>这是因为视图中 <code>Response</code> 提供的<strong>内容协商</strong>能力，Django 后端根据客户端请求响应的内容类型不同，自动选择适合的表现形式；浏览器请求资源时，就返回可视化的 HTML 资源表示，其他形式请求时，又可以返回 Json 纯数据的形式，给开发人员带来极大的方便。</p><h3 id="2-3-测试接口">2.3 测试接口</h3><p>验证它是不是真的会返回 JSON 数据，可以从命令行使用诸如 <code>curl</code> 或<code>httpie</code>访问，如：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; <span class="built_in">curl</span> http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article</span><br><span class="line">[{<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"title"</span>:<span class="string">"My first post"</span>,<span class="string">"created"</span>:<span class="string">"2023-03-27T00:07:00+08:00"</span>},{<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"title"</span>:<span class="string">"Another post"</span>,<span class="string">"created"</span>:<span class="string">"2023-03-27T00:09:00+08:00"</span>},{<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"3rd article"</span>,<span class="string">"created"</span>:<span class="string">"2023-03-27T00:09:00+08:00"</span>}]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; pip install httpie</span><br><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: OPTIONS, GET, POST</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">211</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">49</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T00:07:00+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"My first post"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T00:09:00+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"Another post"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T00:09:00+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"3rd article"</span></span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>再试试新建文章：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/ title=PostByJson body=HelloWorld!</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</span><br><span class="line">Allow: OPTIONS, GET, POST</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">74</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">33</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T00:53:33.637185+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"PostByJson"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>浏览文章列表、新建文章接口就完成了。</p><p>推荐使用<a href="https://www.postman.com/">Postman</a>进行可视化接口测试和管理。</p><h2 id="3-基于类的视图">3. 基于类的视图</h2><h3 id="3-1-类视图">3.1 类视图</h3><p><strong>DRF</strong> 中也有<strong>基于类的视图</strong>的存在，可用于实现功能的模块化继承、封装，减少重复代码。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer, ArticleDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetail</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情视图，处理文章的`get`, `put`, `delete`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span>(<span class="params">self, pk</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Article.objects.get(pk=pk)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        article = self.get_object(pk)</span><br><span class="line">        serializer = ArticleDetailSerializer(article)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        article = self.get_object(pk)</span><br><span class="line">        serializer = ArticleDetailSerializer(article, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        article = self.get_object(pk)</span><br><span class="line">        article.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        articles = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = ArticleListSerializer(articles, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        serializer = ArticleListSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>代码中提供了对文章详情的<strong>获取、修改和删除</strong>的3个方法，以及1个用户获取单个文章的辅助方法，DRF 类视图与传统的 Django 的区别是<code>.get()</code>和<code>.put()</code>多了一个将对象序列化（反序列化）的步骤，而<code>.delete()</code>方法因为不用返回实际数据，因此执行完删除动作就OK。</p><blockquote><p>从这个地方就可以看出，序列化器 <code>serializer</code> 不仅可以将数据进行序列化、反序列化，还包含数据验证、错误处理、数据库操作等能力。</p><p>序列化这个概念与具体语言无关。Python 或 JavaScript 对象转换为 Json 都称为序列化，反之为反序列化。Json 是两种语言传输信息的桥梁，一但信息到达，对方都需要将其还原为自身的数据结构。</p></blockquote><p>由于详情接口需要返回完整的数据，所以新增一个序列化器：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleListSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'created'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>配置<code>urls.py</code>:</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'article'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.article_list, name=<span class="string">'list'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:pk&gt;/'</span>, views.ArticleDetail.as_view(), name=<span class="string">'detail'</span>)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 测试请求文章接口</span></span><br><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/<span class="number">1</span>/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, DELETE, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">70</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">50</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"><span class="string">"body"</span>: <span class="string">"First post body ..."</span>,</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T00:07:00+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"My first post"</span>,</span><br><span class="line">    <span class="string">"updated"</span>: <span class="string">"2023-03-27T00:07:00+08:00"</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试修改文章接口</span></span><br><span class="line">(venv) &gt; http PUT http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/<span class="number">1</span>/ title=somthing... body=changed...</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, PUT, DELETE, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">133</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">17</span>:<span class="number">20</span>:<span class="number">06</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"body"</span>: <span class="string">"changed..."</span>,</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T00:07:00+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"somthing..."</span>,</span><br><span class="line">    <span class="string">"updated"</span>: <span class="string">"2023-03-27T01:20:06.079919+08:00"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试删除文章接口</span></span><br><span class="line">(venv) &gt; http DELETE http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/<span class="number">1</span>/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">204</span> No Content</span><br><span class="line">Allow: GET, PUT, DELETE, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">17</span>:<span class="number">21</span>:<span class="number">13</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-通用视图">3.2 通用视图</h3><p>对数据的增删改查是几乎每个项目的通用操作，因此可以通过 DRF 提供的 Mixin 类直接集成对应的功能。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status, mixins, generics</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer, ArticleDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetail</span>(<span class="params">mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情视图，处理文章的`get`, `put`, `delete`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleDetailSerializer</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表视图，处理文章的`post`和文章列表的`get`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        articles = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = ArticleListSerializer(articles, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_200_OK)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        serializer = ArticleListSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>还可以进一步简化</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer, ArticleDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetail</span>(<span class="params">generics.RetrieveUpdateDestroyAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情视图，处理文章的`get`, `put`, `delete`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleDetailSerializer</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleList</span>(<span class="params">generics.ListCreateAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表视图，处理文章的`post`和文章列表的展示请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleListSerializer</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>功能和最开头那个继承 <code>APIView</code> 的视图是完全相同的。</p><blockquote><p><em>除了上述介绍的以外，框架还提供</em> <code>ListModelMixin</code><em>、</em><code>CreateModelMixin</code> <em>等混入类或通用视图，覆盖了基础的增删改查需求。</em></p></blockquote><h2 id="4-用户权限">4. 用户权限</h2><p><strong>权限</strong>是Web应用的重要组成部分，在 DRF 中可以进行权限管理。</p><h3 id="4-1-文章与用户">4.1 文章与用户</h3><p>依靠用户身份来限制权限，作者与文章是一对多的关系，需要给文章模型添加用户外键，确定每篇文章的作者。保险起见，首先删除现有的所有文章数据。</p><p>修改文章的 <strong>model</strong>，让每篇文章都对应一个作者：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">"articles"</span></span><br><span class="line">    )                                                     <span class="comment"># 作者</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>执行迁移</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py makemigrations</span><br><span class="line">(venv) &gt; python manage.py migrate</span><br></pre></td></tr></tbody></table></figure><p>启动服务后查看当前文章列表：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/                                </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">2</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">07</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">[]</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-权限控制">4.2 权限控制</h3><p>DRF 内置了<code>IsAuthenticated</code>、<code>IsAdminUser</code>、<code>AllowAny</code>等权限控制类，个人博客只允许管理员发布文章。修改文章列表视图如下：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAdminUser</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer, ArticleDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetail</span>(<span class="params">generics.RetrieveUpdateDestroyAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情视图，处理文章的`get`, `put`, `delete`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleDetailSerializer</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleList</span>(<span class="params">generics.ListCreateAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表视图，处理文章的`post`和文章列表的`get`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleListSerializer</span><br><span class="line">    permission_classes = [IsAdminUser]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试一下</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/   </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">43</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">30</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"detail"</span>: <span class="string">"Authentication credentials were not provided."</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">(venv) &gt; http POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/ title=may body=notSuccess</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">43</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">02</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"detail"</span>: <span class="string">"Authentication credentials were not provided."</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，权限控制确实起作用了，但是目前只有管理员才能查看文章，因此可以<strong>自定义</strong>一个权限类，新建<code>article/permissions.py</code>文件，写入：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/permissions.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsAdminUserOrReadOnly</span>(<span class="params">permissions.BasePermission</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    允许管理员进行修改，其他用户仅可查看</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> request.user.is_superuser</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>定义的权限类继承了 <code>BasePermission</code> 类，并实现了父类中的钩子方法 <code>def has_permission</code>。此方法在每次请求到来时被唤醒执行，里面简单判断了请求的种类是否安全（即不更改数据的请求），如果安全则直接通过，不安全则只允许管理员用户通过。</p><p>再次修改视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer, ArticleDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetail</span>(<span class="params">generics.RetrieveUpdateDestroyAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情视图，处理文章的`get`, `put`, `delete`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleDetailSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleList</span>(<span class="params">generics.ListCreateAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表视图，处理文章的`post`和文章列表的`get`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleListSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试用户未登录时：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) D:\WebProject\my_blog\backend&gt;http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">2</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">14</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(venv) D:\WebProject\my_blog\backend&gt;http POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/ title=<span class="string">"post with permission"</span> body=<span class="string">"new test"</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">43</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">23</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"detail"</span>: <span class="string">"Authentication credentials were not provided."</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在后台中创建一个普通用户 <strong>test</strong>，用普通用户身份进行请求：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 普通用户 test，密码 test123321</span></span><br><span class="line"></span><br><span class="line">(venv) &gt; http <span class="literal">-a</span> test:test123321 http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">2</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">09</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(venv) &gt;http <span class="literal">-a</span> test:test123321 POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/ title=<span class="string">"post with permission"</span> body=<span class="string">"new test"</span> </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">49</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">26</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    “detail<span class="string">": "</span>Authentication credentials were not provided.<span class="string">"</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><p>最后，再用管理员用户 <strong>admin</strong> 测试：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 普通用户 admin，密码 admin</span></span><br><span class="line"></span><br><span class="line">(venv) &gt; http <span class="literal">-a</span> admin:admin http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/                 </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">2</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">24</span>:<span class="number">09</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(venv) &gt; http <span class="literal">-a</span> admin:admin POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/ title=<span class="string">"post with permission"</span> body=<span class="string">"new test"</span>      </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">84</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">24</span>:<span class="number">27</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T02:24:27.017416+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"post with permission"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最终，任何人都可以查看资源；但是新增（CREATE）、更新（PUT）、删除（DELETE）等修改操作就只允许管理员执行。</p><h2 id="5-文章关联用户">5. 文章关联用户</h2><h3 id="5-1-提取用户信息">5.1 提取用户信息</h3><p>上文用户以外键关联到文章中，由于<code>author</code>字段允许为空，因此理论上可以发布没有作者的文章。但是，我们可以从<code>Request</code>提取用户信息，把额外的用户信息注入到已有的数据中。</p><p>修改视图：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># author/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleListSerializer, ArticleDetailSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetail</span>(<span class="params">generics.RetrieveUpdateDestroyAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章详情视图，处理文章的`get`, `put`, `delete`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleDetailSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleList</span>(<span class="params">generics.ListCreateAPIView</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表视图，处理文章的`post`和文章列表的`get`请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">        </span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleListSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>新增的这个 <code>perform_create()</code> 从父类 <code>ListCreateAPIView</code> 继承而来，它在序列化数据真正保存之前调用，因此可以在这里添加额外的数据（即用户对象）。</li><li><code>serializer</code> 参数是 <code>ArticleListSerializer</code> 序列化器实例，并且已经携带着验证后的数据。它的 <code>save()</code> 方法可以接收关键字参数作为额外的需要保存的数据。</li></ul><p>在命令行测试：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http <span class="literal">-a</span> admin:admin POST http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/ title=<span class="string">"post with user"</span> body=<span class="string">"new test again"</span> </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">78</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">33</span>:<span class="number">54</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T02:33:54.420714+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"post with user"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/<span class="number">2</span>/                             </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">144</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">18</span>:<span class="number">43</span>:<span class="number">32</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"author"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"body"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"created"</span>: <span class="string">"2023-03-27T02:33:54.420714+08:00"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"post with user"</span>,</span><br><span class="line">    <span class="string">"updated"</span>: <span class="string">"2023-03-27T02:33:54.420714+08:00"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是用户依然可以手动传入一个错误的 <code>author</code>，修改 <code>ArticleListSerializer</code>，序列化器允许你指定只读字段。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleListSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'created'</span>]</span><br><span class="line">        read_only_fields = [<span class="string">'author'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-显示用户信息">5.2 显示用户信息</h3><p>虽然作者外键已经出现在序列化数据中了，但是仅仅显示作者的 id 不太有用，我们更想要的是比如名字、性别等更具体的结构化信息。所以就需要将序列化数据<strong>嵌套</strong>起来。</p><p>新创建一个用户 app：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; python manage.py startapp user_info</span><br></pre></td></tr></tbody></table></figure><p>并将新app添加到注册列表：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># backend/settings.py</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    'user_info',</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>新建<code>user_info/serializers.py</code>文件，写入：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user_info/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDescSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章列表中引用的嵌套用户信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">'id'</span>,</span><br><span class="line">            <span class="string">'username'</span>,</span><br><span class="line">            <span class="string">'last_login'</span>,</span><br><span class="line">            <span class="string">'date_joined'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这个序列化器专门用在文章列表中，展示用户的基本信息，最后修改文章列表的序列化器，把它们嵌套到一起：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleListSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'created'</span>]</span><br><span class="line">        <span class="comment"># 嵌套序列化器已经设置了只读</span></span><br><span class="line">        <span class="comment"># read_only_fields = ['author']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>在命令行测试一下：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/   </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">1355</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">19</span>:<span class="number">03</span>:<span class="number">18</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"author"</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:24:27.017416+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"post with permission"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:33:54.420714+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"post with user"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:36:12.859805+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"post with user"</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:37:48.969211+08:00"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"test body"</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h2 id="6-超链接与分页">6. 超链接与分页</h2><h3 id="6-1-超链接">6.1 超链接</h3><p>目前文章数据看不出每篇文章的实际url地址，最好 JSON 数据直接提供每篇文件的 url，以后前端用起来就更方便了。实现超链接可以用DRF框架提供的<code>HyperlinkedIdentityField</code>:</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleListSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    url = serializers.HyperlinkedIdentityField(view_name=<span class="string">"article:detail"</span>)</span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'title'</span>, <span class="string">'created'</span>, <span class="string">'author'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><ul><li><code>HyperlinkedIdentityField</code> 是 DRF 框架提供的超链接字段，只需要你在参数里提供路由的名称，它就自动帮你完成动态地址的映射。</li><li><code>view_name</code> 是路由的名称，也就是我们在 <code>path(... name='xxx')</code> 里的那个 name</li><li>别忘了在序列化器的 <code>fields</code> 列表里加上 <code>url</code></li></ul><p>在命令行测试：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/   </span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">1355</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">19</span>:<span class="number">03</span>:<span class="number">18</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/1/"</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"post with permission"</span>,</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:24:27.017416+08:00"</span>,</span><br><span class="line">        <span class="string">"author"</span>: <span class="type">null</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/2/"</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"post with user"</span>,</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:33:54.420714+08:00"</span>,</span><br><span class="line">        <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">            <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">            <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/3/"</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"post with user"</span>,</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:36:12.859805+08:00"</span>,</span><br><span class="line">        <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">            <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">            <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/4/"</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"test body"</span>,</span><br><span class="line">        <span class="string">"created"</span>: <span class="string">"2023-03-27T02:37:48.969211+08:00"</span>,</span><br><span class="line">        <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">            <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">            <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><blockquote><p><em>DRF 框架还提供了一个专门的超链接序列化器</em> <code>HyperlinkedModelSerializer</code><em>，大体上跟普通序列化器差不多，不同的是默认以超链接来表示关系字段。详情见</em><a href="https://www.django-rest-framework.org/api-guide/serializers/#hyperlinkedmodelserializer">官方文档</a><em>。</em></p></blockquote><h3 id="6-2-分页">6.2 分页</h3><p>DRF 框架继承了 Django 方便易用的传统，分页这种常见功能提供了默认实现。</p><p>你只需要在 <code>settings.py</code> 里配置一下就行了：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/settings.py</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">2</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在命令行测试：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) &gt; http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">478</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">19</span>:<span class="number">44</span>:<span class="number">49</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"next"</span>: <span class="string">"http://127.0.0.1:8000/api/article/?page=2"</span>,</span><br><span class="line">    <span class="string">"previous"</span>: null,</span><br><span class="line">    <span class="string">"results"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"author"</span>: <span class="type">null</span>,</span><br><span class="line">            <span class="string">"created"</span>: <span class="string">"2023-03-27T02:24:27.017416+08:00"</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"post with permission"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/1/"</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"author"</span>: {</span><br><span class="line">                <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">                <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">                <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"created"</span>: <span class="string">"2023-03-27T02:33:54.420714+08:00"</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"post with user"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/2/"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>DRF 封装了分页相关的元信息：</p><ul><li>count：文章总数</li><li>next：下一页的 url</li><li>previous：上一页的 url</li><li>results：实际的数据</li></ul><p>试着获取第二页的数据：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">(venv) D:\WebProject\my_blog\backend&gt;http http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/api/article/?page=<span class="number">2</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Connection: close</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">619</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Cross<span class="literal">-Origin</span><span class="literal">-Opener</span><span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Date: Sun, <span class="number">26</span> Mar <span class="number">2023</span> <span class="number">19</span>:<span class="number">46</span>:<span class="number">41</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: same<span class="literal">-origin</span></span><br><span class="line">Server: WSGIServer/<span class="number">0.2</span> CPython/<span class="number">3.10</span>.<span class="number">6</span></span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"next"</span>: null,</span><br><span class="line">    <span class="string">"previous"</span>: <span class="string">"http://127.0.0.1:8000/api/article/"</span>,</span><br><span class="line">    <span class="string">"results"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"author"</span>: {</span><br><span class="line">                <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">                <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">                <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"created"</span>: <span class="string">"2023-03-27T02:36:12.859805+08:00"</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"post with user"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/3/"</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"author"</span>: {</span><br><span class="line">                <span class="string">"date_joined"</span>: <span class="string">"2023-03-27T02:08:41.097951+08:00"</span>,</span><br><span class="line">                <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">"last_login"</span>: <span class="string">"2023-03-27T02:08:50.601981+08:00"</span>,</span><br><span class="line">                <span class="string">"username"</span>: <span class="string">"admin"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"created"</span>: <span class="string">"2023-03-27T02:37:48.969211+08:00"</span>,</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"test body"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8000/api/article/4/"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7-视图集">7. 视图集</h2><p>DRF 框架提供了<strong>视图集</strong>作为更高层的抽象，可以让代码量进一步的减少。</p><p>因为大部分对接口的操作，都是在增删改查的基础上衍生出来的。既然这样，<strong>视图集</strong>就将这些通用操作集成在一起了。</p><p>将之前写的与文章有关的<strong>序列化器</strong>都注释掉，新增一个提供给视图集的新序列化器：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> user_info.serializers <span class="keyword">import</span> UserDescSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ArticleListSerializer(serializers.ModelSerializer):</span></span><br><span class="line"><span class="comment">#     url = serializers.HyperlinkedIdentityField(view_name="article:detail")</span></span><br><span class="line"><span class="comment">#     author = UserDescSerializer(read_only=True)</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = Article</span></span><br><span class="line"><span class="comment">#         fields = ['url', 'title', 'created', 'author']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ArticleDetailSerializer(serializers.ModelSerializer):</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = Article</span></span><br><span class="line"><span class="comment">#         fields = '__all__'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    author = UserDescSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Article</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>序列化器继承的 <code>HyperlinkedModelSerializer</code> 基本上与之前用的 <code>ModelSerializer</code> 差不多，区别是它自动提供了外键字段的超链接，并且默认不包含模型对象的 id 字段。</p><p>把之前写的文章<strong>视图</strong>也全注释掉，并新增代码：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/view.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from rest_framework import generics</span></span><br><span class="line"><span class="keyword">from</span> article.permissions <span class="keyword">import</span> IsAdminUserOrReadOnly</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> article.models <span class="keyword">import</span> Article</span><br><span class="line"><span class="comment"># from article.serializers import ArticleListSerializer, ArticleDetailSerializer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ArticleDetail(generics.RetrieveUpdateDestroyAPIView):</span></span><br><span class="line"><span class="comment">#     """</span></span><br><span class="line"><span class="comment">#     文章详情视图，处理文章的`get`, `put`, `delete`请求</span></span><br><span class="line"><span class="comment">#     """</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     queryset = Article.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = ArticleDetailSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = [IsAdminUserOrReadOnly]</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># class ArticleList(generics.ListCreateAPIView):</span></span><br><span class="line"><span class="comment">#     """</span></span><br><span class="line"><span class="comment">#     文章列表视图，处理文章的`post`和文章列表的`get`请求</span></span><br><span class="line"><span class="comment">#     """</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def perform_create(self, serializer):</span></span><br><span class="line"><span class="comment">#         serializer.save(author=self.request.user)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     queryset = Article.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = ArticleListSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = [IsAdminUserOrReadOnly]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> article.serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br><span class="line">    permission_classes = [IsAdminUserOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span>(<span class="params">self, serializer</span>):</span></span><br><span class="line">        serializer.save(author=self.request.user)</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p>视图集类把前面章节写的列表、详情等逻辑都集成到一起，并且提供了默认的增删改查的实现。<code>perform_create()</code> 跟之前一样，在创建文章前，提供了视图集无法自行推断的用户外键字段。</p><p>由于使用了视图集，使用框架提供的 <code>Router</code> 类自动处理视图和 url 的连接。</p><p>修改<strong>项目根路由</strong>：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># backend/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'article'</span>, views.ArticleViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api/'</span>, include(router.urls)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># article/urls.py 可以全注释掉，不需要了</span></span><br><span class="line">    <span class="comment"># path('api/article/', include('article.urls', namespace='article')),</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>最后为了让分页更准确，给模型类规定好查询排序：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># article/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    博客文章</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">"articles"</span></span><br><span class="line">    )                                                     <span class="comment"># 作者</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)              <span class="comment"># 标题</span></span><br><span class="line">    body = models.TextField()                             <span class="comment"># 正文</span></span><br><span class="line">    created = models.DateTimeField(default=timezone.now)  <span class="comment"># 创建时间</span></span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)         <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'-created'</span>]</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>浏览器访问<code>http://127.0.0.1:8000/api/</code>，访问到<code>Router</code> 类送给我们的接口导航！</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)%EF%BC%9ADRF%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230327041110622.png" alt="接口导航"></p><p>顺着导航里给的链接：</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)%EF%BC%9ADRF%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230327041046174.png" alt="文章列表"></p><p><strong>视图集</strong>最大程度地减少需要编写的代码量，并允许你专注于 API 提供的交互和表示形式，而不是 URL 的细节。但并不意味着用它总是比构建单独的视图更好。<strong>原因是</strong>它的抽象程度太高了。如果你对 DRF 框架的理解不深并且需要做某种定制化业务，可能让你一时间无从下手。</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">本文标题： Django-Vue搭建个人博客(2)：DRF的使用</span><br><span class="line">原文链接： https://www.dusaiphoto.com/article/105/</span><br><span class="line">原文作者： 杜赛</span><br><span class="line">许可协议： 署名-非商业性使用 4.0 国际许可协议</span><br><span class="line">本文对原始作品作了修改，转载请保留原文链接及作者</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(1)：搭建开发环境</title>
      <link href="/posts/39175.html"/>
      <url>/posts/39175.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-开发环境">1. 开发环境</h2><p>本教程的前端开发环境为：</p><ul><li><p><strong>Vue 3.2.47</strong></p></li><li><p><strong>Vite 4.1.4</strong></p></li><li><p><strong>npm 9.5.1</strong></p></li></ul><p>本教程的后端开发环境为：</p><ul><li><strong>Win 11（64位）</strong></li><li><strong>Python 3.10.6</strong></li><li><strong>Django 4.1.7</strong></li><li><strong>Django REST framework 3.14.0</strong></li></ul><h2 id="2-前端开发准备">2. 前端开发准备</h2><p>开发前端时会用到 <strong>npm</strong> （类似Python的包管理工具pip），这是 Node.js 官方提供的包管理工具，而 Node.js 可以使用 nvm 来进行安装和管理，所以准备工作的第一步，安装 nvm，下载地址在<a href="https://nvm.uihtm.com/">官网</a>，安装时基本就是一路 next。</p><p>完毕后打开命令行（依旧默认是 PowerShell），输入：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">&gt; nvm <span class="literal">-v</span></span><br><span class="line"><span class="number">1.1</span>.<span class="number">10</span></span><br><span class="line"></span><br><span class="line">&gt; nvm install <span class="number">19.8</span>.<span class="number">1</span></span><br><span class="line">Downloading node.js version <span class="number">19.8</span>.<span class="number">1</span> (<span class="number">64</span><span class="literal">-bit</span>)...</span><br><span class="line">Extracting node and npm...</span><br><span class="line">Complete</span><br><span class="line">npm v9.<span class="number">5.1</span> installed successfully.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Installation complete. <span class="keyword">If</span> you want to use this version, <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">nvm use <span class="number">19.8</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt; nvm use <span class="number">19.8</span>.<span class="number">1</span></span><br><span class="line">Now <span class="keyword">using</span> node v19.8.1 (64-bit)</span><br><span class="line"></span><br><span class="line">&gt; nvm list</span><br><span class="line">  * <span class="number">19.8</span>.<span class="number">1</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">  </span><br><span class="line">&gt; node <span class="literal">-v</span></span><br><span class="line"><span class="number">19.8</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt; npm <span class="literal">-v</span></span><br><span class="line"><span class="number">9.5</span>.<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>显示版号就表示安装成功了。</p><blockquote><p><em>npm 站点在国外，如果你遇到安装速度慢的问题，可以用指令</em> <code>npm config set registry https://registry.npm.taobao.org</code> <em>修改为国内镜像源。</em></p></blockquote><p>在命令行中允许一下命令：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">&gt; npm init vue@latest</span><br><span class="line">Need to install the following packages:</span><br><span class="line">  create<span class="literal">-vue</span>@<span class="number">3.6</span>.<span class="number">1</span></span><br><span class="line">Ok to proceed? (y) y</span><br><span class="line"></span><br><span class="line">Vue.js - The Progressive JavaScript Framework</span><br></pre></td></tr></tbody></table></figure><p>该指令会安装并执行 <strong>create-vue</strong>，它是 Vue 官方的项目脚手架工具，你将看到一些诸如TypeScript和测试支持之类的可选功能提示：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">✔ Project name: … frontend</span><br><span class="line">✔ Add TypeScript? … No / Yes</span><br><span class="line">✔ Add JSX Support? … No / Yes</span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … No / Yes</span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No / Yes</span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit testing? … No / Yes</span><br><span class="line">✔ Add Cypress <span class="keyword">for</span> both Unit and <span class="keyword">End</span><span class="literal">-to</span><span class="literal">-End</span> testing? … No / Yes</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … No / Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No / Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> ./&lt;your<span class="literal">-project</span><span class="literal">-name</span>&gt;...</span><br><span class="line"></span><br><span class="line">Done. Now run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> frontend</span><br><span class="line">  npm install</span><br><span class="line">  npm run dev</span><br></pre></td></tr></tbody></table></figure><p>如果不确定是否要开启某个功能，你可以直接按下回车键选择 <code>No</code>。在项目被创建后，通过以下步骤安装依赖并启动开发服务器：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> frontend</span><br><span class="line">&gt; npm install <span class="comment"># 耐心等待包安装完毕</span></span><br><span class="line">&gt; npm run dev</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&gt; frontend@<span class="number">0.0</span>.<span class="number">0</span> dev</span><br><span class="line">&gt; vite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  VITE v4.<span class="number">2.1</span>  ready <span class="keyword">in</span> <span class="number">283</span> ms</span><br><span class="line"></span><br><span class="line">  ➜  Local:   http://localhost:<span class="number">5173</span>/</span><br><span class="line">  ➜  Network: use -<span class="literal">-host</span> to expose</span><br><span class="line">  ➜  press <span class="built_in">h</span> to show help</span><br></pre></td></tr></tbody></table></figure><p>打开 Chrome 浏览器，输入http://localhost:5173/ ，即可看到 Vue 的欢迎页面了，前端项目已经正常运行了。</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20230326221239847.png" alt="Vue欢迎页面"></p><h2 id="3-后端开发准备">3. 后端开发准备</h2><p>python的安装比较简单，首先找到<a href="https://www.python.org/">Python官方网站</a>，选择 python 3.10.6 的 windows 版本，下载并安装。</p><p><strong>安装时注意勾选python到环境变量</strong>，如果没有找到，请安装完毕后自行添加python的环境变量。</p><p>安装完成后打开命令行，输入<code>python -V</code>，打印出正确的版本号则说明安装成功了：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">&gt; python <span class="literal">-V</span></span><br><span class="line">Python <span class="number">3.10</span>.<span class="number">6</span></span><br></pre></td></tr></tbody></table></figure><p>python 的<strong>虚拟环境</strong>是 python 多版本管理工具，可以使每个项目环境与其他项目隔离起来，解决包冲突的问题。</p><p><strong>python3.3 版本开始就自带了虚拟环境安装指令，配置一下就可以用了。</strong></p><p>在CMD命令行中运行下面指令（poweshell上可能修改执行策略才能运行成功）：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">D:\&gt; mkdir my_blog &amp;&amp; <span class="built_in">cd</span> my_blog</span><br><span class="line">D:\my_blog&gt;</span><br><span class="line">D:\my_blog&gt; python <span class="literal">-m</span> venv venv</span><br><span class="line">D:\my_blog&gt; venv\Scripts\activate</span><br><span class="line">(venv) D:\my_blog&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>盘符前有<code>(venv)</code>标识说明进入venv成功。</strong></p><blockquote><p><em>若上述方法不成功，则可以通过</em> <code>virtualenv</code> <em>库创建虚拟环境。</em></p></blockquote><p>在虚拟环境下，输入命令：</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Django</span></span><br><span class="line">(venv) D:\my_blog&gt; pip install django==<span class="number">4.1</span>.<span class="number">7</span></span><br><span class="line"><span class="comment"># 新建项目</span></span><br><span class="line">(venv) D:\my_blog&gt; django<span class="literal">-admin</span> startproject backend</span><br><span class="line">(venv) D:\my_blog&gt; <span class="built_in">cd</span> backend</span><br><span class="line">(venv) D:\WebProject\my_blog\backend&gt;</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">(venv) D:\WebProject\my_blog\backend&gt; python manage.py runserver</span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line">...</span><br><span class="line">Django version <span class="number">4.1</span>.<span class="number">7</span>, <span class="keyword">using</span> settings <span class="string">'backend.settings'</span></span><br><span class="line">Starting development server at http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/</span><br><span class="line">Quit the server with CTRL<span class="literal">-BREAK</span>.</span><br></pre></td></tr></tbody></table></figure><p>系统打印出这些信息，说明服务器启动成功了。</p><p>查看<code>my_blog</code>文件，发现多了<code>backend</code>文件夹，其结构应该为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">backend</span><br><span class="line">│  manage.py</span><br><span class="line">│  db.sqlite3</span><br><span class="line">└─backend</span><br><span class="line">|  __init__.py</span><br><span class="line">|  asgi.py</span><br><span class="line">    │  settings.py</span><br><span class="line">    │  urls.py</span><br><span class="line">    └─ wsgi.py</span><br></pre></td></tr></tbody></table></figure><p>打开 Chrome 浏览器，输入http://127.0.0.1:8000/ ，即可看到 Django 的欢迎页面了，项目已经正常运行了。</p><p><img src="Django-Vue%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)%EF%BC%9A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20230326223920457.png" alt="Django欢迎页面"></p><h2 id="4-工具推荐">4. 工具推荐</h2><ul><li>代码编辑器 - 推荐使用 <a href="https://code.visualstudio.com/">VS Code</a></li><li>浏览器 - 推荐 <a href="https://www.google.com/chrome/">Chrome</a></li></ul><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">本文标题： Django-Vue搭建个人博客：前言</span><br><span class="line">原文链接： https://www.dusaiphoto.com/article/104/</span><br><span class="line">原文作者： 杜赛</span><br><span class="line">许可协议： 署名-非商业性使用 4.0 国际许可协议</span><br><span class="line">本文对原始作品作了修改，转载请保留原文链接及作者</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Vue搭建个人博客(0)：前言</title>
      <link href="/posts/63190.html"/>
      <url>/posts/63190.html</url>
      
        <content type="html"><![CDATA[<p>本教程是一个以<strong>前后端分离</strong>模式开发个人博客的教程，目的是快速搭建现代化个人博客网站。</p><p>教程基于 Django 3 和 Vue 3。</p><blockquote><p>在 Win11 系统上开发，用Mac 或 Linux 也 OK。</p></blockquote><h2 id="1-什么是Django-Vue">1. 什么是Django/Vue</h2><p><strong>Django</strong> 是一个由 <strong>Python</strong> 写成的开源 <strong>Web</strong> 后端框架，可以帮助开发者以<strong>更高的效率、更少的代码</strong>来搭建<strong>高性能</strong>网站，本教程主要讲解 Django REST framework  — 一个用于构建 Web API 的强大且灵活的 Django 库。</p><p><strong>Vue</strong> 是一个组件化、现代化的前端框架，上手简单且功能强大，从 Vue 3 开始支持组合式 API 等重要新功能，使得 Vue 在处理从微型到大型项目都更加得心应手。</p><p>因为 Django 和 Vue 均易于学习、功能强大的优势，非常适合作为<strong>前后端分离</strong>开发的组合。</p><h2 id="2-什么是前后端分离">2. 什么是前后端分离</h2><p><strong>传统的开发协作模式</strong>：</p><ul><li>前端开发人员写好静态的HTML页面交付给后端开发人员</li><li>后端开发人员使用模板引擎去套模板，同时内嵌模板变量和逻辑</li><li>前后端开发人员集成对接，遇到问题时前后端开发人员都有返工</li><li>集成调优，直到没有出现问题</li></ul><p>其<strong>问题</strong>在于：</p><ul><li>前端开发人员调试要安装完整的后端开发工具，并且遇到问题需要后端开发人员帮忙调试</li><li>前后端耦合，甚至要求后端开发人员掌握 Javascript 等前端开发语言</li><li>前端页面里嵌入后端的代码，一旦后端换了语言，就要重做</li><li>前后端开发效率不高，职责不分明，沟通成本高</li></ul><p>而在<strong>前后端分离模式</strong>下，前后端开发人员只需要通过简单的接口（API）进行数据交流，只要约定好数据接口，可以并行开发互不影响。即使其中一个需求变更，只有接口不变，对方就不需要更改代码。</p><p>前后端分离模式摆脱了笨重的模板引擎，是当前 web 开发的大趋势之一。</p><h2 id="3-开发环境">3. 开发环境</h2><p>本教程的开发环境如下：</p><ul><li>后端：<strong>Django 4</strong></li><li>前端：<strong>Vue 3</strong></li><li>系统：<strong>Win11</strong></li></ul><p>保持<strong>大版本号</strong>相同就没太大问题，即 Django 4 和 Vue 3 即可</p><p>本教程面向人群：<strong>掌握 Django 基础和 Javascript 语法基础的入门开发者</strong></p><h2 id="4-资源列表">4. 资源列表</h2><p>学习过程中需要经常查询的文档有：</p><ul><li><a href="https://docs.djangoproject.com/zh-hans/4.1/">Django 文档</a></li><li><a href="https://www.django-rest-framework.org/">DRF 文档</a></li><li><a href="https://cn.vuejs.org/">Vue 3 文档</a></li></ul><h2 id="5-许可协议">5. 许可协议</h2><p>本教程（包括且不限于文章、代码、图片等内容）遵守 <strong>署名-非商业性使用 4.0 国际 (CC BY-NC 4.0) 协议</strong>。协议内容如下。</p><p><strong>您可以自由地：</strong></p><ul><li><strong>共享</strong> — 在任何媒介以任何形式复制、发行本作品。</li><li><strong>演绎</strong> — 修改、转换或以本作品为基础进行创作。</li></ul><p>只要你遵守许可协议条款，许可人就无法收回你的这些权利。</p><p><strong>惟须遵守下列条件：</strong></p><ul><li><strong>署名</strong> — 您必须给出<strong>适当的署名</strong>，提供指向本许可协议的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。</li><li><strong>非商业性使用</strong> — 您不得将本作品用于<strong>商业目的</strong>。</li><li><strong>没有附加限制</strong> — 您不得适用法律术语或者技术措施从而限制其他人做许可协议允许的事情。</li></ul><blockquote><p>适当的署名：您必须提供创作者和署名者的姓名或名称、版权标识、许可协议标识、免责标识和作品链接。</p><p>商业目的：主要目的为获得商业优势或金钱回报。</p></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">本文标题： Django-Vue搭建个人博客：前言</span><br><span class="line">原文链接： https://www.dusaiphoto.com/article/103/</span><br><span class="line">原文作者： 杜赛</span><br><span class="line">许可协议： 署名-非商业性使用 4.0 国际许可协议</span><br><span class="line">本文对原始作品作了修改，转载请保留原文链接及作者</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django &amp; Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Django REST framework </tag>
            
            <tag> Vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker进阶教程学习笔记</title>
      <link href="/posts/47611.html"/>
      <url>/posts/47611.html</url>
      
        <content type="html"><![CDATA[<h2 id="容器数据卷">容器数据卷</h2><h3 id="什么是容器数据卷">什么是容器数据卷</h3><p><strong>Docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像，可以快速部署在不同的平台。</p><p>问题：如果数据都在容器中，那么如果我们删除容器，数据就会丢失！</p><p>需求：数据可持续化，数据可以存储在宿主机。</p><p>引入：容器之间可以有一个数据共享的技术，Docker容器中产生的数据，同步到宿主机，这就是容器数据卷技术。</p><p>总结：将容器内的目录挂载在宿主机上，实现容器数据的持久化和同步操作，容器间的数据共享。</p><p><img src="/posts/47611/image-20221030155110222.png" alt="容器数据卷"></p><h3 id="使用数据卷">使用数据卷</h3><blockquote><p>挂载数据卷方式1：运行容器时直接使用命令 -v来挂载</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@xizou /]# cd /home/</span><br><span class="line">[root@xizou home]# ls</span><br><span class="line">[root@xizou home]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ctrl +p +q退出容器</span></span><br><span class="line">[root@xizou /]# cd /home/</span><br><span class="line">[root@xizou home]# ls</span><br><span class="line">ceshi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 docker inspect 容器id 查看容器挂载信息</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/47611/image-20221030160156530.png" alt="双向绑定挂载数据卷"></p><p>测试文件的同步</p><p><img src="/posts/47611/image-20221030161728773.png" alt="数据卷挂载测试"></p><p>就算容器停止，宿主机上修改文件，修改后的文件也能同步到容器内。</p><h3 id="实战：安装MySQL">实战：安装MySQL</h3><p>思考：MySQL的数据持久化的问题</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取镜像</span></span><br><span class="line">[root@xizou /]# docker pull mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器，需要做数据挂载，安装MySql上需要配置密码，参考Docker Hub的官方指令 docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run 命令</span></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">4dc2e63a55e463168c39249dd4c4cdec2a1d43a1c4fa6f9045da2dd4099fa3a9</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功之后，就可以使用 Navicat Premium 或任意数据库连接软件远程连接到容器内的MySQL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Navicat Premium - 连接到服务器的3310端口 -- 服务器的3310端口与容器内的3306端口映射，因此就能连接到服务器启动的容器内部的MySQL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在Navicat Premium创建一个数据库<span class="built_in">test</span>，可以发现服务器/home/mysql/data目录下会多一个<span class="built_in">test</span>目录，并且容器内/var/lib/mysql目录下也会多一个<span class="built_in">test</span>目录</span></span><br></pre></td></tr></tbody></table></figure><p>将容器删除，发现挂载到服务器的数据卷依旧没有丢失，这体现了容器数据持久化功能。</p><h3 id="具名挂载和匿名挂载">具名挂载和匿名挂载</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">[root@xizou /]# docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line">e5b3b9b6b45b916a91ab149604bea917995cdea321ba3158be51503010624c90</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器卷的情况</span></span><br><span class="line">[root@xizou /]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     18ae53d1715fed2dd0250ae1dc8ab0a5a06bd6efcf801f7c46e9ed9bd7ffdd3d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这种就是匿名挂载，在 -v 只写了容器内的路径，没有写容器外的路径</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">[root@xizou /]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">dbcd1852923d857b825f9afff4429e79c29617e45402ae54e12b8861638c1c7e</span><br><span class="line">[root@xizou /]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     18ae53d1715fed2dd0250ae1dc8ab0a5a06bd6efcf801f7c46e9ed9bd7ffdd3d</span><br><span class="line">local     juming-nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 卷名:容器内路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看该卷</span></span><br><span class="line">[root@xizou /]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "CreatedAt": "2022-10-30T16:53:03+08:00",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": null,</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/juming-nginx/_data",</span><br><span class="line">        "Name": "juming-nginx",</span><br><span class="line">        "Options": null,</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">[root@xizou /]# cd /var/lib/docker/volumes/juming-nginx/_data/</span><br><span class="line">[root@xizou _data]# ls</span><br><span class="line">conf.d          mime.types  nginx.conf   uwsgi_params</span><br><span class="line">fastcgi_params  modules     scgi_params</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>所有的Docker容器内的卷，没有指定宿主机目录的情况下都是放在宿主机的 <code>/var/lib/docker/volumes/xxx/_data</code>下。</p><p>通过具名挂载可以方便的找到我们的一个卷，大多数情况下使用<strong>具名挂载</strong>。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如何区分具名挂载和匿名挂载</span></span><br><span class="line">-v 容器内路径    # 匿名挂载</span><br><span class="line">-v 卷名:容器内路径  # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径  # 指定路径挂载</span><br></pre></td></tr></tbody></table></figure><p><strong>拓展</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径，ro、rw改变读写权限</span></span><br><span class="line">ro    readonly  # 只读</span><br><span class="line">rw    readwrite # 可读可写</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro说明该路径的文件只能通过宿主机来改变，容器内部无法操作</span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始Dockerfile">初始Dockerfile</h3><p>Dockerfile是用来构建Docker镜像的构建文件。</p><blockquote><p>挂载数据卷方式2：Dockerfile文件内定义</p></blockquote><p>如，创建一个dockerfile1文件，内容为：</p><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个dockerfile文件，名字可以随意，建议为Dockerfile</span></span><br><span class="line"><span class="comment"># 文件中的内容 指令(大写) 参数</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"volume01"</span>, <span class="string">"volume02"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"----end----"</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></tbody></table></figure><p>生成镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou docker-test-volume]# docker build -f dockerfile1 -t xizou/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5d0da3dc9764</span></span><br><span class="line">Step 2/4 : VOLUME ["volume01", "volume02"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 6cc1bc751006</span></span><br><span class="line">Removing intermediate container 6cc1bc751006</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f3475e56ea65</span></span><br><span class="line">Step 3/4 : CMD echo "----end----"</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 3eeb578f3d3d</span></span><br><span class="line">Removing intermediate container 3eeb578f3d3d</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 3db916284cfc</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> d0b660ad310f</span></span><br><span class="line">Removing intermediate container d0b660ad310f</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> ee034a44e231</span></span><br><span class="line">Successfully built ee034a44e231</span><br><span class="line">Successfully tagged xizou/centos:1.0</span><br><span class="line"></span><br><span class="line">[root@xizou docker-test-volume]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">xizou/centos          1.0       ee034a44e231   27 seconds ago   231MB</span><br><span class="line">tomcat02              1.0       600af0d3c7c9   20 hours ago     684MB</span><br><span class="line">elasticsearch         8.4.3     ce2b9dc7fe85   3 weeks ago      1.26GB</span><br><span class="line">nginx                 latest    605c77e624dd   10 months ago    141MB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器</span></span><br><span class="line">[root@xizou docker-test-volume]# docker run -it ee034a44e231 /bin/bash</span><br><span class="line">[root@6d21590582da /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  360 Oct 30 09:23 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Oct 30 09:23 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Sep 15  2021 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 130 root root    0 Oct 30 09:23 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Sep 15  2021 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Sep 15  2021 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Oct 30 09:23 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Sep 15  2021 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Sep 15  2021 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Sep 15  2021 var</span><br><span class="line">drwxr-xr-x   2 root root 4096 Oct 30 09:23 volume01</span><br><span class="line">drwxr-xr-x   2 root root 4096 Oct 30 09:23 volume02</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看见生成挂载的两个数据卷目录 volume01和volume02</span></span><br></pre></td></tr></tbody></table></figure><p>验证：这个卷和外部一定有一个同步的目录</p><p>在容器的volume01内创建一个container.txt文件</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@09423fb0f1d5 /]# cd volume01/</span><br><span class="line">[root@09423fb0f1d5 volume01]# ls    </span><br><span class="line">[root@09423fb0f1d5 volume01]# touch container.txt</span><br><span class="line">[root@09423fb0f1d5 volume01]# ls</span><br><span class="line">container.txt</span><br></pre></td></tr></tbody></table></figure><p>查看下卷挂载的路径 docker inspect 容器id，如可以看到信息：</p><p><img src="/posts/47611/image-20221030172818939.png" alt="卷挂载路径"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# cd /var/lib/docker/volumes/6fc2791f3e981e53c16a71d17d36c8279fda6210956603e69c9f75ccc9c0669c/_data</span><br><span class="line">[root@xizou _data]# ls</span><br><span class="line">container.txt</span><br></pre></td></tr></tbody></table></figure><p>容器间数据共享实现多个MySQL数据同步。</p><p><img src="/posts/47611/image-20221030173514724.png" alt="数据卷容器"></p><p>启动第1个容器docker01</p><p><img src="/posts/47611/image-20221030174028615.png" alt="父容器"></p><p>启动第2个容器docker02，数据卷继承自docker01，docker01成为数据卷容器。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --name docker02 --volumes-from docker01 xizou/centos:1.0</span><br></pre></td></tr></tbody></table></figure><p>删掉容器docker01，docker02依旧可以访问数据卷。数据卷之间是拷贝的概念。</p><p>多个MySQL实现数据共享</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br></pre></td></tr></tbody></table></figure><p><strong>结论</strong>：</p><p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦持久化到了本地，本地的数据是不会自动删除的。</p><h2 id="Dockerfile">Dockerfile</h2><h3 id="Dockerfile介绍">Dockerfile介绍</h3><p>Dockerfile是用来构建Docker镜像的文件，是一个命令参数脚本文件。</p><p><strong>构建步骤</strong>：</p><p>1、编写Dockerfile文件</p><p>2、docker build构建为一个镜像</p><p>3、docker run 运行镜像</p><p>4、docker push 发布镜像（Docker Hub、阿里云镜像仓库）</p><p>示例：CentOS7的Dockerfile文件，点击tag可跳转到Github，看到其Dockerfile文件。</p><p><img src="/posts/47611/image-20221030184828837.png" alt="Docker Hub CentOS7界面"></p><p><img src="/posts/47611/image-20221030185422824.png" alt="CentOS7的Dockerfile文件"></p><p>很多官方镜像都是基础包，很多功能没有，通常需要自己搭建自己的镜像。</p><h3 id="Dockerfile构建过程">Dockerfile构建过程</h3><p><strong>基础知识：</strong></p><p>1、每个保留关键字（指令）都必须是大写字母</p><p>2、执行从上到下顺序执行</p><p>3、#表示注释</p><p>4、每一个指令都会创建和提交一个镜像层</p><p><img src="/posts/47611/image-20221030185924855.png" alt="Docker镜像制作"></p><p>Dockerfile是面向开发的，发布项目制作镜像就需要写Dockerfile文件，Docker镜像逐渐成为企业交付的标准，必须掌握。</p><p>Dockerfile：构建文件，定义了一切的步骤，源代码，用来构建镜像。</p><p>Docker镜像：发布和运行的产品，可以通过commit指令或Dockerfile来制作。</p><p>Docker容器：镜像运行起来提供服务的服务器。</p><h3 id="Dockerfile命令">Dockerfile命令</h3><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="comment"># 基础镜像，一切从这里开始构建</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="comment"># 镜像是谁写的，姓名+邮箱</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="comment"># 镜像构建时需要运行的指令</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="comment"># 步骤，添加内容</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="comment"># 镜像的工作目录</span></span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> <span class="comment"># 挂载的目录</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="comment"># 暴露端口配置</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="comment"># 指定这个容器启动的时候要运行的命令，只有最后一个CMD命令会生效，可被替换</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="comment"># 指定这个容器启动的时候要运行的命令，可以追加命令</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="comment"># 当构建一个被继承的Dockerfile时就会运行ONBUILD的指令，触发指令</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="comment"># 类似ADD，将文件拷贝到镜像中</span></span></span><br><span class="line"><span class="keyword">ENV</span> <span class="comment"># 构建的时候设置环境变量</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/47611/image-20221030190914783.png" alt="Dockerfile命令比喻"></p><h3 id="Dockerfile实战">Dockerfile实战</h3><p>Docker Hub 中大部分镜像是从基础镜像 <code>scratch</code> 开始的，然后配置需要的软件来进行构建的。</p><blockquote><p>创建自己的CentOS镜像</p></blockquote><p>CentOS镜像默认的根目录为/，且没有ifconfig</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 编写Dockerfile镜像</span></span><br><span class="line">[root@xizou dockerfile]# cat mydockerfile-centos </span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER xizou&lt;xiongbinzou@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "---end---"</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令是 docker build -f dockerfile文件路径 -t 镜像名[:tag] .</span></span><br><span class="line">[root@xizou dockerfile]# docker build -f mydockerfile-centos -t centos:0.1 .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建成功</span></span><br><span class="line">.....</span><br><span class="line">Successfully built 0fc60a3f44de</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"></span><br><span class="line">[root@xizou dockerfile]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">mycentos              0.1       0fc60a3f44de   2 minutes ago    626MB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 测试运行，发现默认目录变更且ifconfig和vim指令都能够支持</span></span><br><span class="line">[root@xizou ~]# docker run -it mycentos:0.1</span><br><span class="line">[root@c7cad6e52fd3 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@c7cad6e52fd3 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@c7cad6e52fd3 local]# vim --help</span><br><span class="line">VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec 15 2020 16:44:08)</span><br><span class="line"></span><br><span class="line">usage: vim [arguments] [file ..]       edit specified file(s)</span><br><span class="line">   or: vim [arguments] -               read text from stdin</span><br><span class="line">   or: vim [arguments] -t tag          edit file where tag is defined</span><br><span class="line">   or: vim [arguments] -q [errorfile]  edit file with first error</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 查看指定image构建历史（先回到宿主机）</span></span><br><span class="line">[root@xizou dockerfile]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mycentos              0.1       0fc60a3f44de   2 hours ago     626MB</span><br><span class="line">xizou/centos          1.0       ee034a44e231   5 hours ago     231MB</span><br><span class="line">tomcat02              1.0       600af0d3c7c9   24 hours ago    684MB</span><br><span class="line"></span><br><span class="line">[root@xizou dockerfile]# docker history 0fc60a3f44de</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">0fc60a3f44de   2 hours ago     /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        </span><br><span class="line">87d94a5cd7db   2 hours ago     /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span><br><span class="line">701f4da62eda   2 hours ago     /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span><br><span class="line">a28bd4c7b6d4   2 hours ago     /bin/sh -c #(nop)  EXPOSE 80                    0B        </span><br><span class="line">15d49edff70d   2 hours ago     /bin/sh -c yum -y install net-tools             183MB     </span><br><span class="line">565a95d30b44   2 hours ago     /bin/sh -c yum -y install vim                   238MB     </span><br><span class="line">1dda317404d4   2 hours ago     /bin/sh -c #(nop) WORKDIR /usr/local            0B        </span><br><span class="line">ca7984844f10   2 hours ago     /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B        </span><br><span class="line">6e566e3aace3   2 hours ago     /bin/sh -c #(nop)  MAINTAINER xizou&lt;xiongbin…   0B        </span><br><span class="line">eeb6ee3f44bd   13 months ago   /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B        </span><br><span class="line">&lt;missing&gt;      13 months ago   /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      13 months ago   /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB  </span><br></pre></td></tr></tbody></table></figure><p>拿到一个镜像后，可以通过docker history 镜像id查看镜像的构建历史，分析该镜像Dockerfile文件的组成。</p><blockquote><p>CMD和ENREYPOINT的区别</p></blockquote><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="comment"># 指定这个容器启动的时候要运行的命令，只有最后一个CMD命令会生效，可被替换</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="comment"># 指定这个容器启动的时候要运行的命令，可以追加命令</span></span></span><br></pre></td></tr></tbody></table></figure><p>测试 CMD 命令</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.进入文件</span></span><br><span class="line">[root@xizou /]# cd /home/dockerfile/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.创建dockerfile</span></span><br><span class="line">[root@xizou dockerfile]# cat dockerfile-cmd-test</span><br><span class="line">FROM centos:7</span><br><span class="line">CMD ["ls","-a"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.构建镜像</span></span><br><span class="line">[root@xizou dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos:7</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> eeb6ee3f44bd</span></span><br><span class="line">Step 2/2 : CMD ["ls","-a"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 850c034e822a</span></span><br><span class="line">Removing intermediate container 850c034e822a</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0b3e53a3ddc6</span></span><br><span class="line">Successfully built 0b3e53a3ddc6</span><br><span class="line">Successfully tagged cmdtest:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.运行，发现 ls -a 命令生效</span></span><br><span class="line">[root@xizou dockerfile]# docker run 0b3e53a3ddc6</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">anaconda-post.log</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令-l，ls -al</span></span><br><span class="line">[root@xizou dockerfile]# docker run 0b3e53a3ddc6 -l</span><br><span class="line">docker: Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "-l": executable file not found in $PATH: unknown.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的清理下 -l 替换了CMD [<span class="string">"ls"</span>,<span class="string">"-a"</span>]命令，-l 不是命令，所以报错</span></span><br></pre></td></tr></tbody></table></figure><p>测试 ENTRYPOINT 命令</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.进入文件</span></span><br><span class="line">[root@xizou /]# cd /home/dockerfile/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.创建dockerfile</span></span><br><span class="line">[root@xizou dockerfile]# cat dockerfile-entrypoint-test</span><br><span class="line">FROM centos:7</span><br><span class="line">ENTRYPOINT ["ls","-a"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.构建镜像</span></span><br><span class="line">[root@xizou dockerfile]# docker build -f dockerfile-entrypoint-test -t entrypointtest .</span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos:7</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> eeb6ee3f44bd</span></span><br><span class="line">Step 2/2 : ENTRYPOINT ["ls","-a"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 6ebfea05232f</span></span><br><span class="line">Removing intermediate container 6ebfea05232f</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 16b996a429de</span></span><br><span class="line">Successfully built 16b996a429de</span><br><span class="line">Successfully tagged entrypointtest:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.运行，发现 ls -a 命令生效</span></span><br><span class="line">[root@xizou dockerfile]# docker run 16b996a429de</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">anaconda-post.log</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令-l，ls -al，entrypoint没有替换命令，命令是拼接在后面</span></span><br><span class="line">[root@xizou dockerfile]# docker run 16b996a429de -l</span><br><span class="line">total 64</span><br><span class="line">drwxr-xr-x  1 root root  4096 Oct 30 14:21 .</span><br><span class="line">drwxr-xr-x  1 root root  4096 Oct 30 14:21 ..</span><br><span class="line">-rwxr-xr-x  1 root root     0 Oct 30 14:21 .dockerenv</span><br><span class="line">-rw-r--r--  1 root root 12114 Nov 13  2020 anaconda-post.log</span><br><span class="line">lrwxrwxrwx  1 root root     7 Nov 13  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x  5 root root   340 Oct 30 14:21 dev</span><br><span class="line">drwxr-xr-x  1 root root  4096 Oct 30 14:21 etc</span><br><span class="line">drwxr-xr-x  2 root root  4096 Apr 11  2018 home</span><br><span class="line">lrwxrwxrwx  1 root root     7 Nov 13  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx  1 root root     9 Nov 13  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x  2 root root  4096 Apr 11  2018 media</span><br><span class="line">drwxr-xr-x  2 root root  4096 Apr 11  2018 mnt</span><br><span class="line">drwxr-xr-x  2 root root  4096 Apr 11  2018 opt</span><br><span class="line">dr-xr-xr-x 99 root root     0 Oct 30 14:21 proc</span><br><span class="line">dr-xr-x---  2 root root  4096 Nov 13  2020 root</span><br><span class="line">drwxr-xr-x 11 root root  4096 Nov 13  2020 run</span><br><span class="line">lrwxrwxrwx  1 root root     8 Nov 13  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x  2 root root  4096 Apr 11  2018 srv</span><br><span class="line">dr-xr-xr-x 13 root root     0 Oct 30 09:23 sys</span><br><span class="line">drwxrwxrwt  7 root root  4096 Nov 13  2020 tmp</span><br><span class="line">drwxr-xr-x 13 root root  4096 Nov 13  2020 usr</span><br><span class="line">drwxr-xr-x 18 root root  4096 Nov 13  2020 var</span><br></pre></td></tr></tbody></table></figure><blockquote><p>创建自己的Tomcat镜像</p></blockquote><p>1、准备镜像文件 tomcat压缩包和jdk压缩包</p><p>本教程使用的是 <code>apache-tomcat-9.0.68.tar.gz</code> 和 <code>jdk-8u161-linux-x64.tar.gz</code>。需要自己本地下载，然后上传到服务器。</p><p>2、编写Dockerfile文件</p><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> xizou&lt;xiongbinzou@<span class="number">163</span>.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> readme.txt /usr/<span class="built_in">local</span>/readme.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u161-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-9.0.68.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_161</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">68</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">68</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/<span class="built_in">local</span>/apache-tomcat-9.0.68/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.68/bin/logs/catalina.out</span></span><br></pre></td></tr></tbody></table></figure><p>3、构建镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou tomcat]# docker build -t diytomcat .</span><br><span class="line">......</span><br><span class="line">Successfully built 1a0b96225372</span><br><span class="line">Successfully tagged diytomcat:latest</span><br><span class="line">[root@xizou tomcat]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">diytomcat             latest    1a0b96225372   About a minute ago   843MB</span><br></pre></td></tr></tbody></table></figure><p>4、运行容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用自定义的tomcat镜像构建容器</span></span><br><span class="line">[root@xizou tomcat]# docker run -d -p 9090:8080 --name xizoutomcat -v /home/xizou/build/tomcat/test:/usr/local/apache-tomcat-9.0.68/webapps/test -v /home/xizou/build/tomcat/logs/:/usr/local/apache-tomcat-9.0.68/logs diytomcat</span><br><span class="line">3a3378620c68d7619622f4914c801bec41686d4f8caabdcdfe97ca867657b40a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录</span></span><br><span class="line">[root@xizou tomcat]# ls</span><br><span class="line">apache-tomcat-9.0.68.tar.gz  logs</span><br><span class="line">Dockerfile                   readme.txt</span><br><span class="line">jdk-8u161-linux-x64.tar.gz   test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@xizou tomcat]# docker exec -it 3a3378620c68 /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看目录</span></span><br><span class="line">[root@3a3378620c68 local]# ls</span><br><span class="line">aegis                 etc      jdk1.8.0_161  libexec     share</span><br><span class="line">apache-tomcat-9.0.68  games    lib           readme.txt  src</span><br><span class="line">bin                   include  lib64         sbin</span><br><span class="line">[root@3a3378620c68 local]# cd apache-tomcat-9.0.68/</span><br><span class="line">[root@3a3378620c68 apache-tomcat-9.0.68]# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  lib   webapps</span><br><span class="line">CONTRIBUTING.md  README.md      bin          logs  work</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         temp</span><br></pre></td></tr></tbody></table></figure><p>5、访问测试</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# curl localhost:9090</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以正常访问</span></span><br></pre></td></tr></tbody></table></figure><p>6、发布项目（由于做了卷挂载，直接在本地可以发布）</p><p>进入test目录，创建WEB-INF目录和index.jsp，进入WEB-INF目录创建web.xml</p><p>index.jsp:</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;小邹同学(xiongbinzou.github.io)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello World!&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">System.out.println(<span class="string">"---Welcome to my blog---"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>web.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>打开浏览器，输入 你的服务器ip地址+端口/test/ ，就能看到Hello World!</p><p><img src="/posts/47611/image-20221031003643740.png" alt="访问成功"></p><h3 id="发布自己的镜像">发布自己的镜像</h3><blockquote><p>发布到DockerHub网站</p></blockquote><p>1、在<a href="https://hub.docker.com/">DockerHub网站</a>注册自己的账号</p><p>2、确定账号可以登陆</p><p>3、在我们的服务器上提交自己的镜像到DockerHub</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou tomcat]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line">  </span><br><span class="line">[root@xizou tomcat]# docker login -u xizou1995</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>4、登陆完毕后</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">Login Succeeded</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> push自己的镜像到服务器上！</span></span><br><span class="line">[root@xizou tomcat]# docker push diytomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">5132fa4d71f7: Preparing </span><br><span class="line">61502ae68a5a: Preparing </span><br><span class="line">09ef56b9dc63: Preparing </span><br><span class="line">6d92c54bcf47: Preparing </span><br><span class="line">174f56854903: Preparing </span><br><span class="line">denied: requested access to the resource is denied # 被拒绝</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改镜像名为 Dockerhub上你的用户名/镜像名:tag</span></span><br><span class="line">[root@xizou tomcat]# docker tag hello-world xizou1995/hello-world:1.0</span><br><span class="line">[root@xizou tomcat]# docker push xizou1995/hello-world:1.0</span><br><span class="line">The push refers to repository [docker.io/xizou1995/hello-world]</span><br><span class="line">e07ee1baac5f: Mounted from library/hello-world </span><br><span class="line">1.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525</span><br></pre></td></tr></tbody></table></figure><p>5、在DockerHub网站你的页面上可以看到</p><p><img src="/posts/47611/image-20221031010328248.png" alt="Docker镜像库"></p><blockquote><p>发布到阿里云镜像服务上</p></blockquote><p>1、登陆阿里云</p><p>2、找到容器镜像服务</p><p>3、找到镜像仓库，如果没有需要自己创建个人实例，在个人实例里能找到镜像仓库</p><p>4、在个人实例里创建命名空间</p><p><img src="/posts/47611/image-20221031011109470.png" alt="创建命名空间"></p><p>5、创建镜像仓库，选择本地仓库</p><p><img src="/posts/47611/image-20221031011642998.png" alt="创建镜像仓库"></p><p>6、点击仓库名称浏览信息</p><p><img src="/posts/47611/image-20221031011754689.png" alt="阿里云镜像操作指南"></p><h3 id="小结-2">小结</h3><p><img src="/posts/47611/image-20221031013807233.png" alt="Dockerfile操作流程"></p><h2 id="Docker网络原理">Docker网络原理</h2><h3 id="理解Docker0">理解Docker0</h3><p>先清空所有的容器和镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>测试</p></blockquote><p><img src="/posts/47611/image-20221031100729238.png" alt="ip addr"></p><p>三个网络</p><p>问题：Docker是如何处理容器网络访问的？比如容器内的tomcat访问容器内的mysql。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker run -d -P --name tomcat01 tomcat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器的内部网络地址 ip addr</span></span><br><span class="line">[root@xizou /]# docker exec -it tomcat ip addr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果执行失败，进入容器内部安装工具 apt update &amp;&amp; apt -y install iproute2，然后再退出容器</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: eth0@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器启动时会得到一个 eth0@if5 ip地址，docker分配的</span></span><br><span class="line"></span><br><span class="line">[root@xizou /]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.058 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.044 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.046 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.055 ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> linux可以ping通docker容器内部</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>原理</p></blockquote><p>1、每启动一个docker容器，docker就会给docker容器分配一个ip，只要安装了docker，就会有一个网卡docker0桥接技术，使用的是evth-pair技术</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:06:ad:10 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.20.179.171/20 brd 172.20.191.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 315327838sec preferred_lft 315327838sec</span><br><span class="line">    inet6 fe80::216:3eff:fe06:ad10/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:46:b8:0a:f8 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:46ff:feb8:af8/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: veth33d487b@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 36:f0:95:72:d4:2b brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::34f0:95ff:fe72:d42b/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></tbody></table></figure><p>ip地址多了一个<code>5: veth33d487b@if4</code>，是为容器内网卡对应的网卡。</p><p>发现容器带来的网卡都是成对出现的，一个在容器内部，一个在宿主机，evth-pair技术充当一个桥梁，让宿主机可以与容器内部通信。</p><p>按照相同的方式创建tomcat02容器，然后让tomcat01容器ping tomcat02容器，可以发现能够ping通。</p><p>tomcat01与tomcat02容器网络通过宿主机内的docker0连接。</p><p><img src="/posts/47611/image-20221031104809950.png" alt="tomcat01与tomcat02网络通信示意"></p><p>所有的容器在不指定网络的情况下，都是docker0路由的，docker会给容器分配一个默认的可用IP。</p><blockquote><p>结论</p></blockquote><p>Docker通过宿主机的Docker0进行桥接，Docker中所有的网络接口都是虚拟的，转发效率高。只要容器删除，虚拟网卡也会消失。</p><p><img src="/posts/47611/image-20221031105208672.png" alt="Docker桥接示意"></p><h3 id="–link">–link</h3><blockquote><p>编写一个微服务，database url=ip，项目不启动，数据库ip换掉了，可以通过名字来访问容器，实现高可用。</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker exec -it tomcat02 ping tomcat01</span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如何解决？</span></span><br><span class="line">[root@xizou /]# docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br><span class="line">6a603a98a0de2fbe2504b01bfb2b40cab602feffcc9d379c5887f2364e6ff5df</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时tomcat3可以ping通tomcat02</span></span><br><span class="line">[root@xizou /]# docker exec -it tomcat03 ping tomcat02</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示ping命令不存在，请执行</span></span><br><span class="line">docker exec -it tomcat03 apt-get update</span><br><span class="line">docker exec -it tomcat03 apt install iputils-ping</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat02能够ping同tomcat03吗？ 不能</span></span><br><span class="line">[root@xizou /]# docker exec -it tomcat02 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">8e9b37aaa9ce   bridge    bridge    local</span><br><span class="line">0673ec2aaa1c   host      host      local</span><br><span class="line">9ba9f05fc241   none      null      local</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker network inspect 8e9b37aaa9ce</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Name": "bridge",</span><br><span class="line">        "Id": "8e9b37aaa9ce5bb9d88f68daa4f3eea16d1c8cbfe62a127a7e019ef931687391",</span><br><span class="line">        "Created": "2022-10-31T01:31:03.542724354+08:00",</span><br><span class="line">        "Scope": "local",</span><br><span class="line">        "Driver": "bridge",</span><br><span class="line">        "EnableIPv6": false,</span><br><span class="line">        "IPAM": {</span><br><span class="line">            "Driver": "default",</span><br><span class="line">            "Options": null,</span><br><span class="line">            "Config": [</span><br><span class="line">                {</span><br><span class="line">                    "Subnet": "172.17.0.0/16",</span><br><span class="line">                    "Gateway": "172.17.0.1"</span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        "Internal": false,</span><br><span class="line">        "Attachable": false,</span><br><span class="line">        "Ingress": false,</span><br><span class="line">        "ConfigFrom": {</span><br><span class="line">            "Network": ""</span><br><span class="line">        },</span><br><span class="line">        "ConfigOnly": false,</span><br><span class="line">        "Containers": {</span><br><span class="line">            "3b8af7fbc37fd2905b411a9e0a3b4bbc57c2685a555aea6482ac7948858a01aa": {</span><br><span class="line">                "Name": "tomcat01",</span><br><span class="line">                "EndpointID": "db565d8188ff9fd69be16c86d193199eed1934b9ae416cdf903a12755b20fbe4",</span><br><span class="line">                "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">                "IPv4Address": "172.17.0.2/16",</span><br><span class="line">                "IPv6Address": ""</span><br><span class="line">            },</span><br><span class="line">            "6a603a98a0de2fbe2504b01bfb2b40cab602feffcc9d379c5887f2364e6ff5df": {</span><br><span class="line">                "Name": "tomcat03",</span><br><span class="line">                "EndpointID": "40fb946ba46cba96573646ed6374272b1c27c490c1a1c7f14b084ddb9296f1c3",</span><br><span class="line">                "MacAddress": "02:42:ac:11:00:04",</span><br><span class="line">                "IPv4Address": "172.17.0.4/16",</span><br><span class="line">                "IPv6Address": ""</span><br><span class="line">            },</span><br><span class="line">            "92a91f9faa29e067d006ace0b4a1c32245b4521ab71098db1503c78f023e45c6": {</span><br><span class="line">                "Name": "tomcat02",</span><br><span class="line">                "EndpointID": "a0a96ea13aaef24383be2abd638422cfb59cfda4e670ec2a392418d7f96d4c5e",</span><br><span class="line">                "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">                "IPv4Address": "172.17.0.3/16",</span><br><span class="line">                "IPv6Address": ""</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "Options": {</span><br><span class="line">            "com.docker.network.bridge.default_bridge": "true",</span><br><span class="line">            "com.docker.network.bridge.enable_icc": "true",</span><br><span class="line">            "com.docker.network.bridge.enable_ip_masquerade": "true",</span><br><span class="line">            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",</span><br><span class="line">            "com.docker.network.bridge.name": "docker0",</span><br><span class="line">            "com.docker.network.driver.mtu": "1500"</span><br><span class="line">        },</span><br><span class="line">        "Labels": {}</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/47611/image-20221031111104405-16671858903321.png" alt="docker network inspect 8e9b37aaa9ce"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED             STATUS             PORTS                                         NAMES</span><br><span class="line">6a603a98a0de   tomcat    "catalina.sh run"   6 minutes ago       Up 6 minutes       0.0.0.0:49155-&gt;8080/tcp, :::49155-&gt;8080/tcp   tomcat03</span><br><span class="line">92a91f9faa29   tomcat    "catalina.sh run"   41 minutes ago      Up 41 minutes      0.0.0.0:49154-&gt;8080/tcp, :::49154-&gt;8080/tcp   tomcat02</span><br><span class="line">3b8af7fbc37f   tomcat    "catalina.sh run"   About an hour ago   Up About an hour   0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp   tomcat01</span><br><span class="line">[root@xizou /]# docker inspect tomcat03</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在HostConfig的Links字段里能看到link到tomcat02，如：</span></span><br><span class="line">"Links": ["/tomcat02:/tomcat03/tomcat02"],</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以查看/etc/hosts文件</span></span><br><span class="line">[root@xizou /]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.3      tomcat02 92a91f9faa29</span><br><span class="line">172.17.0.4      6a603a98a0de</span><br></pre></td></tr></tbody></table></figure><p>本质：–link 就是在容器tomcat03的hosts配置在中增加了一个tomcat02的映射</p><p>不建议使用–link实现网络映射</p><h3 id="自定义网络">自定义网络</h3><blockquote><p>查看所有的docker网络</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">8e9b37aaa9ce   bridge    bridge    local</span><br><span class="line">0673ec2aaa1c   host      host      local</span><br><span class="line">9ba9f05fc241   none      null      local</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run 'docker network COMMAND --help' for more information on a command.</span><br></pre></td></tr></tbody></table></figure><p><strong>网络模式</strong></p><p>bridge：桥接 docker（默认）</p><p>none：不配置网络</p><p>host：和宿主机共享网络</p><p>container：容器网络连通（不常用）</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接启动命令 --net bridge，这个就是docker0</span></span><br><span class="line">docker run -d -P --name tomcat01 tomcat</span><br><span class="line">等价于</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0的特点：默认，域名不能访问。--link可以打通</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个自定义网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --driver bridge</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --subnet 192.168.0.0/16</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --gateway 192.168.0.1</span> </span><br><span class="line">[root@xizou /]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">8870e01ec415be0a02e181760b6bec5040edb660762903ec3c6dac14ffd368dd</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">8e9b37aaa9ce   bridge    bridge    local</span><br><span class="line">0673ec2aaa1c   host      host      local</span><br><span class="line">8870e01ec415   mynet     bridge    local</span><br><span class="line">9ba9f05fc241   none      null      local</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Name": "mynet",</span><br><span class="line">        "Id": "8870e01ec415be0a02e181760b6bec5040edb660762903ec3c6dac14ffd368dd",</span><br><span class="line">        "Created": "2022-10-31T11:31:39.986065834+08:00",</span><br><span class="line">        "Scope": "local",</span><br><span class="line">        "Driver": "bridge",</span><br><span class="line">        "EnableIPv6": false,</span><br><span class="line">        "IPAM": {</span><br><span class="line">            "Driver": "default",</span><br><span class="line">            "Options": {},</span><br><span class="line">            "Config": [</span><br><span class="line">                {</span><br><span class="line">                    "Subnet": "192.168.0.0/16",</span><br><span class="line">                    "Gateway": "192.168.0.1"</span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        "Internal": false,</span><br><span class="line">        "Attachable": false,</span><br><span class="line">        "Ingress": false,</span><br><span class="line">        "ConfigFrom": {</span><br><span class="line">            "Network": ""</span><br><span class="line">        },</span><br><span class="line">        "ConfigOnly": false,</span><br><span class="line">        "Containers": {},</span><br><span class="line">        "Options": {},</span><br><span class="line">        "Labels": {}</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用自定义网络</span></span><br><span class="line">[root@xizou /]# docker run -d -P --name tomcat01 --net mynet tomcat</span><br><span class="line">5a311d6ef0e2fdd71afc8595de172cd54f7b51cb500f7040aebf562efea4896f</span><br><span class="line">[root@xizou /]# docker run -d -P --name tomcat02 --net mynet tomcat</span><br><span class="line">5459203e0fb8dcf80a79d24ad6dbf07765b0d8103f879c03aef3e20ec806a4a6</span><br><span class="line">[root@xizou /]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Name": "mynet",</span><br><span class="line">        "Id": "8870e01ec415be0a02e181760b6bec5040edb660762903ec3c6dac14ffd368dd",</span><br><span class="line">        "Created": "2022-10-31T11:31:39.986065834+08:00",</span><br><span class="line">        "Scope": "local",</span><br><span class="line">        "Driver": "bridge",</span><br><span class="line">        "EnableIPv6": false,</span><br><span class="line">        "IPAM": {</span><br><span class="line">            "Driver": "default",</span><br><span class="line">            "Options": {},</span><br><span class="line">            "Config": [</span><br><span class="line">                {</span><br><span class="line">                    "Subnet": "192.168.0.0/16",</span><br><span class="line">                    "Gateway": "192.168.0.1"</span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        "Internal": false,</span><br><span class="line">        "Attachable": false,</span><br><span class="line">        "Ingress": false,</span><br><span class="line">        "ConfigFrom": {</span><br><span class="line">            "Network": ""</span><br><span class="line">        },</span><br><span class="line">        "ConfigOnly": false,</span><br><span class="line">        "Containers": {</span><br><span class="line">            "5459203e0fb8dcf80a79d24ad6dbf07765b0d8103f879c03aef3e20ec806a4a6": {</span><br><span class="line">                "Name": "tomcat02",</span><br><span class="line">                "EndpointID": "ee8fe045e89d3c7c20ee1ea48f1f6fbb6877967fa67e8ccaa69bab2b9ed29694",</span><br><span class="line">                "MacAddress": "02:42:c0:a8:00:03",</span><br><span class="line">                "IPv4Address": "192.168.0.3/16",</span><br><span class="line">                "IPv6Address": ""</span><br><span class="line">            },</span><br><span class="line">            "5a311d6ef0e2fdd71afc8595de172cd54f7b51cb500f7040aebf562efea4896f": {</span><br><span class="line">                "Name": "tomcat01",</span><br><span class="line">                "EndpointID": "30d69fc865bc8020da370fd3a0e810e2f7a4e51f7ecc80a88c8bc1bfe66ce541",</span><br><span class="line">                "MacAddress": "02:42:c0:a8:00:02",</span><br><span class="line">                "IPv4Address": "192.168.0.2/16",</span><br><span class="line">                "IPv6Address": ""</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "Options": {},</span><br><span class="line">        "Labels": {}</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次测试ping连接，使用ip和使用容器名都可以ping成功</span></span><br><span class="line">[root@xizou ~]# docker exec -it tomcat01 ping tomcat02</span><br><span class="line">PING tomcat02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.047 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.062 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.042 ms</span><br></pre></td></tr></tbody></table></figure><p>自定义网络的docker都已经维护好了对应的关系，推荐平时使用这样的网络</p><p>好处：不同的集群使用不同的网络，保证集群是安全和健康的。</p><h3 id="网络连通">网络连通</h3><p><img src="/posts/47611/image-20221031125301011.png" alt="网络连通"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou ~]# docker network connect --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line"></span><br><span class="line">Connect a container to a network</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --alias strings           Add network-scoped alias</span><br><span class="line">                                for the container</span><br><span class="line">      --driver-opt strings      driver options for the network</span><br><span class="line">      --ip string               IPv4 address (e.g.,</span><br><span class="line">                                172.30.100.104)</span><br><span class="line">      --ip6 string              IPv6 address (e.g.,</span><br><span class="line">                                2001:db8::33)</span><br><span class="line">      --link list               Add link to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address</span><br><span class="line">                                for the container</span><br></pre></td></tr></tbody></table></figure><p>让使用Docker0作为桥接的容器和使用自定义网络mynet作为桥接的容器连通。</p><p>假设：</p><p>使用Docker0作为桥接的容器有：tomcat01、tomcat02</p><p>使用自定义网络mynet作为桥接的容器有：tomcat-net-01、tomcat-net-02</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker network connect mynet tomcat01</span><br><span class="line">[root@xizou /]# docker network inspect mynet</span><br><span class="line">可以发现Containes字段里多了tomcat01</span><br><span class="line">[root@xizou /]# docker exec -it tomcat01 ping tomcat-net-01</span><br></pre></td></tr></tbody></table></figure><h3 id="实战：Redis集群">实战：Redis集群</h3><p><img src="/posts/47611/image-20221031130410644.png" alt="Redis集群"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建6个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-${port}/conf</span><br><span class="line">touch /mydata/redis/node-${port}/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-${port}/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1${port}</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动docker</span></span><br><span class="line">docker run -p 6371:6379 -p 16371:16739 --name redis-1 -v /mydate/redis/node-1/data:/data -v /mydate/redis/node-1/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6372:6379 -p 16372:16739 --name redis-2 -v /mydate/redis/node-2/data:/data -v /mydate/redis/node-2/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6373:6379 -p 16373:16739 --name redis-3 -v /mydate/redis/node-3/data:/data -v /mydate/redis/node-3/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6374:6379 -p 16374:16739 --name redis-4 -v /mydate/redis/node-4/data:/data -v /mydate/redis/node-4/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6375:6379 -p 16375:16739 --name redis-5 -v /mydate/redis/node-5/data:/data -v /mydate/redis/node-5/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6376:6379 -p 16376:16739 --name redis-6 -v /mydate/redis/node-6data:/data -v /mydate/redis/node-6/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入任一个容器内</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建集群</span></span><br><span class="line">/data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line">/data # redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">观察发现已经创建了6个redis服务，其中3个主机，3个从机，主机的数据会同步到对应的从机，主机挂掉后，从机会替代挂掉的主机工作</span><br></pre></td></tr></tbody></table></figure><h3 id="实战：SpringBoot微服务打包成Docker镜像">实战：SpringBoot微服务打包成Docker镜像</h3><p><strong>步骤：</strong></p><p>1、构建SpringBoot项目</p><p>2、打包应用</p><p>3、编写Dockerfile</p><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> xizou&lt;xiongbinzou@<span class="number">163</span>.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--server.port=8080"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/app.jar"</span>]</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>4、构建镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker build -t helloworld .</span><br><span class="line">docker images</span><br><span class="line">docker run -d -P --name helloworld-web helloword</span><br><span class="line">curl localhost:32779</span><br></pre></td></tr></tbody></table></figure><p>5、发布运行</p><h2 id="扩展">扩展</h2><h3 id="什么是容器编排">什么是容器编排</h3><p><strong>问题</strong>：将应用程序打包到了Docker容器中后，如何在生产环境中运行它，如果应用程序有依赖于其他容器，如数据库、消息服务或其他后端服务容器，该怎么办？如果用户数量增加并且你需要扩展你的应用程序怎么办？如果要缩小规模减少负载该怎么做？</p><p><strong>思考</strong>：需要有一个具有一组资源和功能的底层平台，这个平台能够统筹容器之间的连接，并且根据负载可自动扩展或缩减容器。</p><p><strong>方案</strong>：这种自动部署和管理容器的整个过程称为<strong>容器编排</strong>，Docker有自己的容器编排工具，叫做Docker Swarm，但是缺少复杂应用程序所需的一些高级功能，MESOS也是一种容器编排技术，虽然支持许多高级功能，但是很难设置和上手。Kubernets是一种容器编排技术，设置和入门有点困难，提供了许多自定义部署的选项和支持复杂架构的部署，目前所有的公有云服务供应商都支持了Kubernetes。</p><p><strong>容器编排</strong>的优势：</p><ul><li><strong>应用程序高可用</strong>。硬件故障不会导致应用程序停机，因为容器编排技术使我们在不同节点上运行了应用程序的多个实例。</li><li><strong>用户流量在容器间负载均衡</strong>。</li><li><strong>需求增加时，可轻松、快速部署更多应用程序实例</strong>。</li></ul><p><img src="/posts/47611/image-20221101233701289.png" alt="容器编排"></p><p>Kubernetes是一种容器编排技术，用于编排数百个应用程序的部署和管理。</p><h3 id="Kubernetes架构">Kubernetes架构</h3><p>在设置Kubernetes集群前，先介绍一些Kubernetes的术语。</p><p><strong>节点Nodes</strong>：节点是安装了Kubernetes的物理或虚拟机器，节点是工作机器，是Kubernetes将容器启动的地方。过去也叫Minions。</p><img src="/posts/47611/image-20221102002124876.png" alt="节点Node" style="zoom: 33%;"><p><strong>集群Cluster</strong>：集群是一组组合在一起的节点，即使一个节点发生故障，依然可以从其他节点访问你的应用程序，此外节点也有助于分担负载，</p><img src="/posts/47611/image-20221102002510040.png" alt="集群Cluster" style="zoom:33%;"><p><strong>Master</strong>：Master是另一个安装了Kubernetes的节点，被配置为Master，负责监视集群中的节点并负责工作节点上容器的编排，存储着集群成员的信息。当一个节点发生故障时，Master负责将节点的工作负载转移到另一个工作节点。</p><img src="/posts/47611/image-20221102004639106.png" alt="Master" style="zoom:33%;"><p><strong>Kubernetes</strong>：在系统上安装Kubernetes时，实际上是在安装以下组件</p><ul><li><strong>API Server</strong>：充当Kubernetes的前端，包括用户、管理设备、命令行界面、从API服务器到Kubernets集群。</li><li><strong>etcd</strong>：是Kubernetes使用可靠键值来存储用于管理集群的所有数据，当集群中有多个节点和多个Master时，etcd会以分布式的方式在集群的所有节点上存储着所有这些信息。etcd负责在集群内实现锁，以确保Master之间不存在冲突。</li><li><strong>Scheduler</strong>：负责跨多个节点分发工作或容器，它查找新创建的容器并将它们分配给节点。</li><li><strong>Controller</strong>：是编排背后的大脑，它负责在节点、容器或端点出现故障时进行统通知和响应，负责决定在这种情况下启动新容器。</li><li><strong>Container Runtime</strong>：是运行容器的底层软件，如Docker。</li><li><strong>Kubelet</strong>：是在集群中每个节点上运行的代理，负责保证容器按预期在节点上运行。</li></ul><p><strong>Pod</strong>：Kubernetes不直接在工作节点上部署容器，容器封装进而成为Pod的Kubernetes对象，Pod是应用程序的单个实例，Pod是你可以在Kubernetes创建的最小对象。</p><p><img src="/posts/47611/image-20221102020138628.png" alt="POD"></p><p><img src="/posts/47611/image-20221102020313836.png" alt="Kubernetes容器编排"></p><p><strong>Pod</strong> 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。</p><p><strong>Pod</strong>（就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个）容器； 这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。</p><p>POD定义文件：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">appVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">front-end</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nigix-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create -f pod-definition.yml</span></span><br><span class="line"><span class="comment"># kubectl get pods</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Replica Set</strong>：ReplicaSet 的目的是维护一组在任何时候都处于运行状态的 Pod 副本的稳定集合。 因此，它通常用来保证给定数量的、完全相同的 Pod 的可用性。ReplicaSet 是通过一组字段来定义的，包括一个用来识别可获得的 Pod 的集合的选择算符、一个用来标明应该维护的副本个数的数值、一个用来指定应该创建新 Pod 以满足副本个数条件时要使用的 Pod 模板等等。 每个 ReplicaSet 都通过根据需要创建和删除 Pod 以使得副本个数达到期望值， 进而实现其存在价值。当 ReplicaSet 需要创建新的 Pod 时，会使用所提供的 Pod 模板。</p><p>ReplicaSet 定义文件：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-replicaset</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">front-end</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">      <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">            <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">front-end</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">      <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">front-end</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># kubectl create -f replicaset-definition.yml</span></span><br><span class="line"><span class="comment"># kubectl get replicaset</span></span><br><span class="line"><span class="comment"># kubectl get pods</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Deployment</strong>：Deployment 是一个更高级的概念，它管理 ReplicaSet，并向 Pod 提供声明式的更新以及许多其他有用的功能。 因此，我们建议使用 Deployment 而不是直接使用 ReplicaSet， 除非你需要自定义更新业务流程或根本不需要更新。</p><p>你负责描述 Deployment 中的目标状态，而 Deployment控制器（Controller）以受控速率更改实际状态， 使其变为期望状态。你可以定义 Deployment 以创建新的 ReplicaSet，或删除现有 Deployment， 并通过新的 Deployment 更新其资源。</p><p>应用：</p><p>1.当你有一个需要部署在生产环境中的Web服务器，你需要运行的不是一个而是多个Web服务器实例</p><p>2.每当应用程序需要更新版本时，你需要无缝升级Docker实例，但是当你升级实例时，不希望一次升级所有实例，因为会影响正在访问你应用程序的用户，因此你希望一个接一个升级他们，这种升级称为滚动更新。</p><p>3.当你执行的升级之一导致了意外错误，并且你被要求撤销最近的更改，你希望能够回滚最近执行的更改。</p><p>4.当对环境进行多项更改，例如升级底层Web服务器版本以及扩展你的环境并修改资源等，你不想在命令运行后立即应用每个更改，而是希望暂停应用进行更改，然后恢复，以便一起推出所有更改。</p><p>Deployment定义文件：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">front-end</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">      <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">front-end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create -f deployment-definition.yml</span></span><br><span class="line"><span class="comment"># kubectl get deployments</span></span><br><span class="line"><span class="comment"># kubectl get replicaset</span></span><br><span class="line"><span class="comment"># kubectl get pods</span></span><br><span class="line"><span class="comment"># kubectl get all</span></span><br></pre></td></tr></tbody></table></figure><p><strong>POD、Replica Set、Deployment关系</strong></p><p><img src="/posts/47611/image-20221102143342986.png" alt="POD、Replica Set、Deployment关系"></p><p>工作节点拥有Container Runtime、Kubelet</p><p>Master节点拥有API Server、etcd、Controller、Scheduler</p><p><img src="/posts/47611/image-20221102010926832.png" alt="Master VS Worker Nodes"></p><p><strong>Kubernetes网络设置</strong></p><p>IP地址指定给POD：</p><img src="/posts/47611/image-20221102164749931.png" alt="IP地址指定给POD" style="zoom:50%;"><p>Kubernetes网络需求：</p><ul><li>Pod 能够与所有其他节点上的 Pod 通信， 且不需要网络地址转译（NAT）</li><li>节点上的代理（比如：系统守护进程、kubelet）可以和节点上的所有 Pod 通信</li></ul><img src="/posts/47611/image-20221102170611783.png" alt="Kubernetes网络模型解决方案之一" style="zoom: 80%;"><p><strong>Kubernetes服务类型</strong></p><ul><li><strong>NodePort Server</strong></li></ul><img src="/posts/47611/image-20221102171636882.png" alt="NodePort Server" style="zoom:50%;"><img src="/posts/47611/image-20221102172918003.png" alt="NodePort Server-多个Pods" style="zoom:50%;"><img src="/posts/47611/image-20221102173055489.png" alt="NodePort Server-多个Nodes" style="zoom: 80%;"><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30008</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">front-end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create -f service-definition.yml</span></span><br><span class="line"><span class="comment"># kubectl get services</span></span><br></pre></td></tr></tbody></table></figure><p>外部执行指令http://192.168.1.2:30008即可以访问节点里POD应用</p><ul><li><strong>ClusterIP Server</strong></li></ul><img src="/posts/47611/image-20221102173713245.png" alt="ClusterIP Server" style="zoom:50%;"><p>为每种应用服务创建一个单独的Service，这个Service可定义提供相同应当服务节点的网络地址、端口配置。</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">back-end</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">back-end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># kubectl create -f service-definition.yml</span></span><br><span class="line"><span class="comment"># kubectl get services</span></span><br></pre></td></tr></tbody></table></figure><ul><li><strong>LoadBalancer Server</strong></li></ul><p><img src="/posts/47611/image-20221102175051051.png" alt="LoadBalancer Server"></p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30008</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># kubectl create -f service-definition.yml</span></span><br><span class="line"><span class="comment"># kubectl search sevices</span></span><br></pre></td></tr></tbody></table></figure><h3 id="kubectl工具">kubectl工具</h3><p>kubectl工具在Kubernetes集群上部署和管理应用程序，获取集群信息，获取集群中其他节点的状态并管理许多其他事情。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">kubectl run hello-minikube  # 在集群上部署应用程序</span><br><span class="line">kubectl cluster-info  # 查看集群信息</span><br><span class="line">kubectl get nodes  # 用于列出集群的所有节点部分</span><br></pre></td></tr></tbody></table></figure><p><strong>可以通过<a href="https://minikube.sigs.k8s.io/docs/start/">Minicube</a>项目体验kubernetes的部署与应用。</strong></p><h3 id="实战：Kubernetes部署投票应用">实战：Kubernetes部署投票应用</h3><p><img src="/posts/47611/image-20221102180743427.png" alt="投票应用"></p><p>解释：</p><ul><li><p>voting-app: 前端页面，用户通过该页面进行投票，python</p></li><li><p>redis：数据库，用户的投票数据暂存在内存的redis里，redis</p></li><li><p>worker：从redis里读取用户投票数据，统计计算后存入持久性数据库，.Net</p></li><li><p>postgress：数据库，持久化存储用户的投票数据跟统计结果，postgress</p></li><li><p>result-app: 前端页面，显示投票统计数据，Javascript</p></li></ul><p>部署的目标</p><p>1、运行容器</p><p>2、容器间的连通</p><p>3、外部访问</p><p><strong>解决方案1</strong>（不使用Deployment，不建议）：</p><p><img src="/posts/47611/image-20221102181935376.png" alt="投票应用解决方案1"></p><p>voting-app-pod.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">voting-app</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">kodekcloud/examplevotingapp_vote:v1</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>result-app-pod.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">result-app-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">result-app-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">result-app</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">kodekcloud/examplevotingapp_result:v1</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>redis-pod.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br></pre></td></tr></tbody></table></figure><p>postgres-pod.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">postgres-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_USER</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"postgres"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"postgres"</span></span><br></pre></td></tr></tbody></table></figure><p>worker-app-pod.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">worker-app-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">worker-app-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">worker-app</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">kodekcloud/examplevotingapp_worker:v1</span></span><br></pre></td></tr></tbody></table></figure><p>redis-service.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-service</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-pod</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>postgres-service.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">postgres-service</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">5432</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">postgres-pod</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>voting-app-service.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">voting-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">voting-service</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30004</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>result-app-service.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">result-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">result-service</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30005</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">result-app-pod</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>将上面所有文件放入voting-app文件夹下</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd voting-app</span><br><span class="line">kubectl get pods,svc</span><br><span class="line">kuberctl create -f voting-app-pod.yaml</span><br><span class="line">kuberctl create -f voting-app-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看投票服务的url</span></span><br><span class="line">minikube service voting-service --url</span><br><span class="line">kuberctl create -f redis-pod.yaml</span><br><span class="line">kuberctl create -f redis-service.yaml</span><br><span class="line">kubectl get pods,svc</span><br><span class="line">kuberctl create -f postgres-pod.yaml</span><br><span class="line">kuberctl create -f postgres-service.yaml</span><br><span class="line">kubectl get pods,svc</span><br><span class="line">kuberctl create -f worker-app-pod.yaml</span><br><span class="line">kubectl get pods,svc</span><br><span class="line">kuberctl create -f result-app-pod.yaml</span><br><span class="line">kuberctl create -f result-app-service.yaml</span><br><span class="line">kubectl get pods,svc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看投票结果服务的url</span></span><br><span class="line">minikube service voting-service --url</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方案2</strong>（使用Deployment）</p><p><img src="/posts/47611/image-20221102184937776.png" alt="投票应用解决方案2"></p><p>voting-app-deployment.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">voting-app-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">voting-app-deployment</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">voting-app</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kodekcloud/examplevotingapp_vote:v1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>redis-deployment.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-deployment</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">postgres-pod</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">postgres-pod</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_USER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">"postgres"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_PASSWORD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">"postgres"</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>postgress-deployment.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">postgres-deployment</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-pod</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis-pod</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">postgres-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>worker-deployment.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">worker-app-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">worker-app-deployment</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">worker-app-pod</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">worker-app-pod</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">worker-app</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kodekcloud/examplevotingapp_worker:v1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">worker-app-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>result-app-deployment.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">result-app-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">result-app-deployment</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">voting-app-pod</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">voting-app</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kodekcloud/examplevotingapp_result:v1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">result-app-pod</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo-voting-app</span></span><br></pre></td></tr></tbody></table></figure><p>确保所有文件放入voting-app文件夹下，包括方案1的文件</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd voting-app</span><br><span class="line">kubectl get pods,svc</span><br><span class="line">kuberctl create -f voting-app-deployment.yaml</span><br><span class="line">kuberctl create -f voting-app-service.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看投票服务的url</span></span><br><span class="line">minikube service voting-service --url</span><br><span class="line">kuberctl create -f redis-deployment.yaml</span><br><span class="line">kuberctl create -f redis-service.yaml</span><br><span class="line">kubectl get deployments</span><br><span class="line">kuberctl create -f postgres-deployment.yaml</span><br><span class="line">kuberctl create -f postgres-service.yaml</span><br><span class="line">kubectl get deployments</span><br><span class="line">kuberctl create -f worker-app-deployment.yaml</span><br><span class="line">kubectl get deployments</span><br><span class="line">kuberctl create -f result-app-deployment.yaml</span><br><span class="line">kuberctl create -f result-app-service.yaml</span><br><span class="line">kubectl get deployments,svc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看投票结果服务的url</span></span><br><span class="line">minikube service voting-service --url</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改投票和结果服务的集群为3</span></span><br><span class="line">kubectl scale deployment voting-app-deployment --replicas=3</span><br><span class="line">kubectl scale deployment result-app-deployment --replicas=3</span><br></pre></td></tr></tbody></table></figure><h3 id="为什么Podman比Docker更安全">为什么Podman比Docker更安全</h3><p>Docker必须由root用户启动一个守护进程才能使用<code>systemctl start docker</code>，其次，普通用户需要加入容器组，才能够运行和启动Docker，如此会存在一些安全问题，如普通用户可以通过容器进行提权。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看docker版本</span></span><br><span class="line">[root@xizou /]# docker --version</span><br><span class="line">Docker version 20.10.21, build baeda1f</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> root用户启动docker服务进程</span></span><br><span class="line">[root@xizou /]# systemctl start docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker服务状态</span></span><br><span class="line">[root@xizou /]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2022-11-02 12:24:26 CST; 47s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 31905 (dockerd)</span><br><span class="line">    Tasks: 7</span><br><span class="line">   Memory: 27.9M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─31905 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"></span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.199751948+08:00" level=info m...ing"</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.431287299+08:00" level=info m...ing"</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.475634500+08:00" level=info m...ing"</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.676136067+08:00" level=info m...ess"</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.778914793+08:00" level=info m...ing"</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.891111549+08:00" level=info m...ne."</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.907790255+08:00" level=info m...0.21</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.907847502+08:00" level=info m...ion"</span><br><span class="line">Nov 02 12:24:26 xizou systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">Nov 02 12:24:26 xizou dockerd[31905]: time="2022-11-02T12:24:26.924507836+08:00" level=info m...ock"</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前所有镜像</span></span><br><span class="line">[root@xizou /]# docker images -a</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像</span></span><br><span class="line">[root@xizou /]# docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">a1d0c7532777: Pull complete </span><br><span class="line">Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br><span class="line">[root@xizou /]# docker images -a</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">centos       latest    5d0da3dc9764   13 months ago   231MB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建并切换用户</span></span><br><span class="line">[root@xizou /]# adduser test -G docker</span><br><span class="line">[root@xizou /]# su - test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 普通用户能看到root用户下载的镜像，如果使用podman则不会显示</span></span><br><span class="line">[test@xizou ~]$ docker images -a</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">centos       latest    5d0da3dc9764   13 months ago   231MB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 普通用户运行centos应用的容器，挂载根目录到容器内的/host目录，并把容器内的/host目录作为容器的根目录</span></span><br><span class="line">[test@xizou ~]$ docker run -it --privileged -v /:/host centos chroot /host</span><br><span class="line">sh-4.2# </span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器内能够执行命令获取原本普通用户没有权限的内容</span></span><br><span class="line">sh-4.2# head -1 /etc/shadow</span><br><span class="line">root:$6$8Ufh0Fb6$tpjmUtcq0r36xLc.q9tDb.5/ECL5cS6iOmglyETI23.C0BbGO0uHLtS7c97O6YvKV.CBQvufaP7mHJ25P.J6X/:19293:0:99999:7:::</span><br><span class="line">sh-4.2# exit</span><br><span class="line">exit</span><br><span class="line">[test@xizou ~]$ head -1 /etc/shadow</span><br><span class="line">head: cannot open ‘/etc/shadow’ for reading: Permission denied</span><br><span class="line">[test@xizou ~]$ exit</span><br><span class="line">logout</span><br><span class="line">[root@xizou /]# head -1 /etc/shadow</span><br><span class="line">root:$6$8Ufh0Fb6$tpjmUtcq0r36xLc.q9tDb.5/ECL5cS6iOmglyETI23.C0BbGO0uHLtS7c97O6YvKV.CBQvufaP7mHJ25P.J6X/:19293:0:99999:7:::</span><br></pre></td></tr></tbody></table></figure><p>上面例子举证了Docker造成的安全隐患，通过挂载数据卷的方式，普通用户能够在容器内获得root权限，能够随意更改文件。另外，容器内创建的用户，退出容器后居然存在于宿主机中。容器的隔离性被破坏。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解决方案：</span></span><br><span class="line">方案1. 使用podman替代docker</span><br><span class="line">alias docker=podman</span><br><span class="line">方案2. 限制只有root用户才能使用docker</span><br><span class="line">将docker.sock文件的属组改成root组</span><br><span class="line">[root@xizou /]# cd /var/run/</span><br><span class="line">[root@xizou run]# chown root:root docker.sock </span><br></pre></td></tr></tbody></table></figure><h2 id="后续学习方向">后续学习方向</h2><ul><li>IDEA整合Docker</li><li>Docker Compose、yaml</li><li>Docker Swarm、Kubernetes</li><li>CI/CD Jenkins</li></ul><h2 id="参考文章-4">参考文章</h2><p>本文是笔者通过下列视频教程和文档进行Docker进阶学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.bilibili.com/video/BV1og4y1q7M4/">【B站up主-遇见狂神说】</a></p><p>2.<a href="https://kubernetes.io/zh-cn/">【kubernetes官网】</a></p><p>3.<a href="https://www.udemy.com/course/learn-kubernetes/">【Udemy学院-Kubernetes初学者教程视频】</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Docker技术 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> 进阶教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门教程学习笔记</title>
      <link href="/posts/38460.html"/>
      <url>/posts/38460.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker概述">Docker概述</h2><h3 id="Docker为什么会出现？">Docker为什么会出现？</h3><p>一款应用从开发到上线，一般会有<strong>开发环境、测试环境和生产环境</strong>。</p><p><strong>Docker</strong>的出现是<strong>为了解决不同环境中应用开发、测试和部署时配置重复且繁琐，且环境不同引发应用出现崩溃、不兼容的问题</strong>，Docker<strong>通过隔离机制，将应用运行的必要环境和应用打包在一起，可以让应用轻松、快速地部署成功</strong>。</p><h3 id="Docker历史">Docker历史</h3><p>2010年，dotCloud公司创始人Solomon Hykes发起了Docker项目，2013年，Docker项目开源。<strong>Docker使用Go语言进行开发实现，对进程进行封装隔离，是属于操作系统层面的虚拟化技术</strong>。</p><p>由于隔离的进程独立于宿主和其他的隔离的进程，因此也称其为容器。</p><h3 id="Docker为什么会流行？">Docker为什么会流行？</h3><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个<strong>轻量级、可移植的、自给自足</strong>的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack集群和其他的基础应用平台。</p><p><strong>Docker可以解决的问题：</strong></p><ul><li><strong>上线流程繁琐</strong>，需要经历开发-&gt;测试-&gt;申请资源-&gt;审批-&gt;部署-&gt;测试等环节</li><li><strong>资源利用率低</strong>，普通服务器利用率低，造成过多浪费</li><li><strong>扩容/缩容不及时</strong>，业务高峰期扩容流程繁琐，上线不及时</li><li><strong>服务环境臃肿</strong>，对维护、迁移带来困难</li><li><strong>环境不一致</strong></li></ul><p><strong>Docker常用于如下场景：</strong></p><ul><li>Web应用的自动打包和发布；</li><li>自动化测试的持续集成、发布；</li><li>在服务型环境中部署和调整数据库或其他的后台应用；</li><li>从头编译或扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS服务。</li></ul><p><strong>Docker资料</strong>：</p><ul><li>Docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></li><li>Docker文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></li><li>Docker仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li></ul><h3 id="虚拟机VS容器">虚拟机VS容器</h3><p>传统虚拟机：虚拟出一套硬件后，在其上运行一个完整的操作系统，然后在这个系统安装和运行软件。</p><p><img src="/posts/38460/image-20200603212030911.png" alt="传统虚拟化"></p><p>Docker：应用直接运行在宿主机的内核，容器没有自己的内核，也没有虚拟硬件，所以更轻量，每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响。</p><p><img src="/posts/38460/image-20200603212030936.png" alt="Docker"></p><p>所以说，新建一个容器的时候，<strong>Docker不需要像虚拟机一样需要重新加载一个操作系统的内核，避免引导</strong>。虚拟机是加载了Guest OS，而Docker是利用宿主机的操作系统，省略了这个过程。</p><p><img src="/posts/38460/image-20221101232401351.png" alt="Containers VS VM"></p><table><thead><tr><th></th><th>Docker容器</th><th>VM传统虚拟机</th></tr></thead><tbody><tr><td>虚拟化类型</td><td>操作系统虚拟化</td><td>硬件虚拟化</td></tr><tr><td>性能</td><td>=宿主机性能</td><td>5%-20%损耗</td></tr><tr><td>隔离性</td><td>NS隔离</td><td>强</td></tr><tr><td>QoS</td><td>Cgroup弱</td><td>强</td></tr><tr><td>安全性</td><td>中</td><td>强</td></tr></tbody></table><h3 id="Docker基本组成">Docker基本组成</h3><p><img src="/posts/38460/image-20200603212031036.png" alt="Docker基本组成"></p><h3 id="Docker名词">Docker名词</h3><p><strong>镜像 image</strong>：Docker镜像好比一个模板，可以通过这个模板来创建容器服务，如：tomcat镜像–&gt;docker run–&gt;tomcat01容器，通过这个镜像可以创建多个容器。</p><p><strong>容器 container</strong>：Docker利用容器技术，以镜像为模板来创建独立运行的一个或一组应用，容器有启动、停止、删除等基本命令。</p><p><strong>仓库 repository</strong>：Docker仓库是存放镜像的地方，仓库分为公有仓库和私有仓库，公有仓库有：Docker Hub（默认放在国外），阿里云代理（配置镜像加速）。</p><h2 id="Docker安装">Docker安装</h2><blockquote><p>环境准备</p></blockquote><p>1、需要会Linux基本指令</p><p>2、一台服务器（本文使用阿里云服务器，宿主机操作系统是CentOS 7）</p><p>3、连接远程服务器进行操作（本文使用的远程连接软件是SecureCRT）</p><blockquote><p>环境查看</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统内核是 3.10 以上的</span></span><br><span class="line">[root@xizou /]# uname -r</span><br><span class="line">3.10.0-1160.76.1.el7.x86_64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统版本</span></span><br><span class="line">[root@xizou ~]# cat /etc/os-release</span><br><span class="line">NAME="CentOS Linux"</span><br><span class="line">VERSION="7 (Core)"</span><br><span class="line">ID="centos"</span><br><span class="line">ID_LIKE="rhel fedora"</span><br><span class="line">VERSION_ID="7"</span><br><span class="line">PRETTY_NAME="CentOS Linux 7 (Core)"</span><br><span class="line">ANSI_COLOR="0;31"</span><br><span class="line">CPE_NAME="cpe:/o:centos:centos:7"</span><br><span class="line">HOME_URL="https://www.centos.org/"</span><br><span class="line">BUG_REPORT_URL="https://bugs.centos.org/"</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT="CentOS-7"</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION="7"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT="centos"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION="7"</span><br></pre></td></tr></tbody></table></figure><blockquote><p>安装Docker</p></blockquote><p>帮助文档 <a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载旧的版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br><span class="line">          </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo # 默认是国外的</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 推荐设置阿里云的镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.安装docker docker-ce指社区版 docker-ee指企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.使用docker version查看是否安装成功</span></span><br><span class="line">[root@xizou /]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.21</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.18.7</span><br><span class="line"> Git commit:        baeda1f</span><br><span class="line"> Built:             Tue Oct 25 18:04:24 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.21</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.18.7</span><br><span class="line">  Git commit:       3056208</span><br><span class="line">  Built:            Tue Oct 25 18:02:38 2022</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.9</span><br><span class="line">  GitCommit:        1c90a442489720eec95342e1789ee8a5e1b9536f</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.测试</span></span><br><span class="line">[root@xizou /]# docker run hello-world</span><br><span class="line">Unable to find image 'hello-world:latest' locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">2db29710123e: Pull complete </span><br><span class="line">Digest: sha256:e18f0a777aefabe047a671ab3ec3eed05414477c951ab1a6f352a06974245fe7</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8.查看镜像</span></span><br><span class="line">[root@xizou /]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   13 months ago   13.3kB</span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/38460/image-20221029005556639.png" alt="run的运行流程图"></p><blockquote><p>卸载Docker</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></tbody></table></figure><blockquote><p>配置阿里云镜像加速（前提是购买了阿里云服务器）</p></blockquote><p>登陆阿里云–&gt;阿里云控制台–&gt;搜索容器镜像服务–&gt;点击容器镜像服务–&gt;点击镜像工具的镜像加速器–&gt;按照CentOS页签下的教程在服务器里配置容器镜像加速</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://2tq3dbmj.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><blockquote><p>底层原理</p></blockquote><p><strong>Docker是怎么工作的？</strong></p><p>Docker是一个C/S结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问，Docker Server接收到Docker Client的指令，就会执行这个指令。</p><p><img src="/posts/38460/image-20221029010008163.png" alt="Docker工作示意图"></p><h2 id="Docker命令">Docker命令</h2><h3 id="帮助命令">帮助命令</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker version# 显示docker的版本信息</span><br><span class="line">docker info# 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker &lt;command&gt; --help    # 帮助命令</span><br></pre></td></tr></tbody></table></figure><blockquote><p>命令帮助文档地址：<a href="https://docs.docker.com/engine/reference/commandline/">https://docs.docker.com/engine/reference/commandline/</a></p></blockquote><h3 id="镜像命令">镜像命令</h3><p><strong>docker images</strong> 查看所有本地的主机上的镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   13 months ago   13.3kB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG        镜像的标签</span><br><span class="line">IMAGE ID   镜像的id</span><br><span class="line">CREATED   镜像的创建时间</span><br><span class="line">SIZE   镜像的大小</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">  -a, --all             # 显示所有的镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像的ID</span><br></pre></td></tr></tbody></table></figure><p><strong>docker search</strong> 搜索镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker search mysql</span><br><span class="line">NAME                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                           MySQL is a widely used, open-source relation…   13400     [OK]       </span><br><span class="line">mariadb                         MariaDB Server is a high performing open sou…   5113      [OK]   </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don't truncate output</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如，通过收藏来过滤</span></span><br><span class="line">[root@xizou /]# docker search mysql --filter=STARS=300</span><br><span class="line">NAME         DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql        MySQL is a widely used, open-source relation…   13400     [OK]       </span><br><span class="line">mariadb      MariaDB Server is a high performing open sou…   5113      [OK]       </span><br><span class="line">phpmyadmin   phpMyAdmin - A web interface for MySQL and M…   669       [OK]       </span><br><span class="line">percona      Percona Server is a fork of the MySQL relati…   592       [OK] </span><br></pre></td></tr></tbody></table></figure><p><strong>docker pull 镜像名[:tag]</strong> 下载镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker pull mysql</span><br><span class="line">Using default tag: latest  # 不写tag，默认是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete  # 分层下载，docker image的核心 联合文件系统</span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  # 真实地址</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等价于</span></span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@xizou /]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists  # 分层下载，已经存在的layers不会重复下载</span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists </span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有镜像</span></span><br><span class="line">[root@xizou /]# docker images -a</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql         5.7       c20987f18b13   10 months ago   448MB</span><br><span class="line">mysql         latest    3218b38490ce   10 months ago   516MB</span><br><span class="line">hello-world   latest    feb5d9fea6a5   13 months ago   13.3kB</span><br></pre></td></tr></tbody></table></figure><p><strong>docker rmi</strong>  删除镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker rmi -f 镜像id    # 删除指定的镜像</span><br><span class="line">[root@xizou /]# docker rmi -f 镜像id 镜像id 镜像id    # 删除指多个指定的镜像</span><br><span class="line">[root@xizou /]# docker rmi -f $(docker images -aq)  # 删除所有的镜像</span><br></pre></td></tr></tbody></table></figure><h3 id="容器命令">容器命令</h3><p><strong>说明</strong>：有了镜像才能够创建容器，linux下载一个centos镜像来学习</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></tbody></table></figure><p><strong>docker run</strong> 新建容器并启动</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name="Name"  容器名字，用来区分容器</span><br><span class="line">-d   后台方式运行</span><br><span class="line">-it   使用交互方式运行，进入容器查看内容</span><br><span class="line">-p   指定容器的端口 -p 8080:8080</span><br><span class="line">-p 主机端口:容器端口 (常用)</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P   随机指定端口</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@xizou /]# docker run -it centos /bin/bash</span><br><span class="line">[root@c2fc79886fec /]# ls# 查看容器内的centos，基础版本，很多命令不完善</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@c2fc79886fec /]# exit     # 从容器中退回主机</span><br><span class="line">[root@xizou /]# ls</span><br><span class="line">bin   dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class="line">boot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></tbody></table></figure><p><strong>docker ps</strong> 列出所有运行的容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出当前正在运行的容器</span></span><br><span class="line">-a  # 列出当前正在运行的容器+历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器</span><br><span class="line">-q  # 只显示容器的ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED             STATUS                         PORTS     NAMES</span><br><span class="line">c2fc79886fec   centos         "/bin/bash"   5 minutes ago       Exited (130) 3 minutes ago               competent_gagarin</span><br><span class="line">3c84dcf43e4e   feb5d9fea6a5   "/hello"      About an hour ago   Exited (0) About an hour ago             peaceful_pare</span><br></pre></td></tr></tbody></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">exit  # 直接容器停止并退出</span><br><span class="line">Ctrl + P + Q  # 容器不停止退出</span><br></pre></td></tr></tbody></table></figure><p><strong>dockers rm</strong> 删除容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker rm 容器id  # 删除指定的容器，不能删除正在运行的容器，强制删除为docker rm -f 容器id</span><br><span class="line">docker rm -f $(docker ps -aq)  # 删除所有的容器</span><br><span class="line">docker ps -aq|xargs docker rm -f  # 删除所有的容器</span><br></pre></td></tr></tbody></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker start 容器id    # 启动容器</span><br><span class="line">docker restart 容器id  # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在进行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></tbody></table></figure><h3 id="常用其他命令">常用其他命令</h3><p><strong>docker run -d 镜像名</strong> 后台启动容器</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@xizou /]# docker run -d centos</span><br><span class="line">c2b6244be6c43e1bd6f1e54c1cc7b5b6d0f8c5183c335bf40befafaa4319179c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题：输入docker ps, 发现刚刚后台运行的容器停止了</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如启动nginx，容器启动后，发现自己没有提供服务，就会立即停止，就是没有程序了</span></span><br></pre></td></tr></tbody></table></figure><p><strong>docker logs</strong> 查看日志</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker logs -tf --tail number 容器id</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker logs -tf --tail 10 d839  # 容器没有日志</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自己编写一个Shell脚本：每隔1秒打印一个xizou</span></span><br><span class="line">"while true;do echo xizou;sleep 1;done"</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker run -d centos /bin/sh -c "while true;do echo xizou;sleep 1;done"</span><br><span class="line">817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">817124ceef29   centos    "/bin/sh -c 'while t…"   12 minutes ago   Up 12 minutes             amazing_panini</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志</span></span><br><span class="line">-tf   # 显示日志</span><br><span class="line">--tail number # 要显示日志条数</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker logs -tf --tail 10 817124ceef29</span><br><span class="line">2022-10-29T06:33:43.399390864Z xizou</span><br><span class="line">2022-10-29T06:33:44.401304775Z xizou</span><br><span class="line">2022-10-29T06:33:45.403554366Z xizou</span><br><span class="line">2022-10-29T06:33:46.405484682Z xizou</span><br><span class="line">2022-10-29T06:33:47.407427195Z xizou</span><br><span class="line">2022-10-29T06:33:48.409551746Z xizou</span><br><span class="line">2022-10-29T06:33:49.411679644Z xizou</span><br><span class="line">2022-10-29T06:33:50.413887957Z xizou</span><br><span class="line">2022-10-29T06:33:51.415868562Z xizou</span><br><span class="line">2022-10-29T06:33:52.417886027Z xizou</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>docker top 容器id</strong> 查看容器中的进程</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@xizou /]# docker top 817124ceef29</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                16181               16163               0                   14:18               ?                   00:00:00            /bin/sh -c while true;do echo xizou;sleep 1;done</span><br><span class="line">root                17492               16181               0                   14:38               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></tbody></table></figure><p><strong>docker inspect 容器id</strong> 查看容器的元数据</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@xizou /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">817124ceef29   centos    "/bin/sh -c 'while t…"   22 minutes ago   Up 22 minutes             amazing_panini</span><br><span class="line">[root@xizou /]# docker inspect 817124ceef29</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Id": "817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc",</span><br><span class="line">        "Created": "2022-10-29T06:18:50.373286723Z",</span><br><span class="line">        "Path": "/bin/sh",</span><br><span class="line">        "Args": [</span><br><span class="line">            "-c",</span><br><span class="line">            "while true;do echo xizou;sleep 1;done"</span><br><span class="line">        ],</span><br><span class="line">        "State": {</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 16181,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2022-10-29T06:18:50.580743276Z",</span><br><span class="line">            "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">        },</span><br><span class="line">        "Image": "sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/hosts",</span><br><span class="line">        "LogPath": "/var/lib/docker/containers/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc/817124ceef29bb3d5a06e6c713de0266d83cd46bd2acdbd49c98c5009559f5cc-json.log",</span><br><span class="line">        "Name": "/amazing_panini",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "Platform": "linux",</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": {</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": {</span><br><span class="line">                "Type": "json-file",</span><br><span class="line">                "Config": {}</span><br><span class="line">            },</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": {},</span><br><span class="line">            "RestartPolicy": {</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            },</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "CgroupnsMode": "host",</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "private",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": [],</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DeviceCgroupRules": null,</span><br><span class="line">            "DeviceRequests": null,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "KernelMemoryTCP": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": null,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": null,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0,</span><br><span class="line">            "MaskedPaths": [</span><br><span class="line">                "/proc/asound",</span><br><span class="line">                "/proc/acpi",</span><br><span class="line">                "/proc/kcore",</span><br><span class="line">                "/proc/keys",</span><br><span class="line">                "/proc/latency_stats",</span><br><span class="line">                "/proc/timer_list",</span><br><span class="line">                "/proc/timer_stats",</span><br><span class="line">                "/proc/sched_debug",</span><br><span class="line">                "/proc/scsi",</span><br><span class="line">                "/sys/firmware"</span><br><span class="line">            ],</span><br><span class="line">            "ReadonlyPaths": [</span><br><span class="line">                "/proc/bus",</span><br><span class="line">                "/proc/fs",</span><br><span class="line">                "/proc/irq",</span><br><span class="line">                "/proc/sys",</span><br><span class="line">                "/proc/sysrq-trigger"</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        "GraphDriver": {</span><br><span class="line">            "Data": {</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501-init/diff:/var/lib/docker/overlay2/01b2cb186859ddce9e097143c46cc783da485186a234c8ef6c0827b83b7c389a/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/7956a7380425fad866c0faca3fbc9c1f5cd3612322621295eb37dbedd3fd9501/work"</span><br><span class="line">            },</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        },</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": {</span><br><span class="line">            "Hostname": "817124ceef29",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "while true;do echo xizou;sleep 1;done"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "centos",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": {</span><br><span class="line">                "org.label-schema.build-date": "20210915",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS"</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "NetworkSettings": {</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "06aa425cd028f11073bf21ac726cd4490fa5eaee627aa9fadc7aedea8ca2644e",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": {},</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/06aa425cd028",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "6add7586334f9a3e87d60eb62da7145029d5977a07c61cf63ba409b7407e060d",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.2",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">            "Networks": {</span><br><span class="line">                "bridge": {</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "8f02c5589dd1b4b73a11b84188936b90056ca5a1d18676ffb55935132312468f",</span><br><span class="line">                    "EndpointID": "6add7586334f9a3e87d60eb62da7145029d5977a07c61cf63ba409b7407e060d",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.2",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">                    "DriverOpts": null</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通常容器都是使用后台方式运行的，需要进入容器，修改一些配置时</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1</span></span><br><span class="line">docker exec -it 容器id /bin/bash  # 进入正在运行的容器</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@xizou /]# docker exec -it 817124ceef29 /bin/bash</span><br><span class="line">[root@817124ceef29 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 06:18 ?        00:00:00 /bin/sh -c while true;do echo xi</span><br><span class="line">root      1859     0  0 06:49 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1916     1  0 06:50 ?        00:00:00 /usr/bin/coreutils --coreutils-p</span><br><span class="line">root      1917  1859  0 06:50 pts/0    00:00:00 ps -ef</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2</span></span><br><span class="line">docker attach 容器id # 进入正在运行的容器</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@xizou /]# docker attach 817124ceef29</span><br><span class="line">xizou</span><br><span class="line">xizou</span><br><span class="line">xizou</span><br><span class="line">xizou</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是死循环导致停不掉容器，新开一个连接后执行 docker stop 容器id</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span>    进入容器后开启一个新的终端，可以在里面操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker attach  进入容器正在执行的终端，不会启用新的进程</span></span><br></pre></td></tr></tbody></table></figure><p><strong>docker cp</strong> 从容器内拷贝文件到主机上</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@xizou /]# docker ps -aq | xargs docker rm -f</span><br><span class="line">817124ceef29</span><br><span class="line">[root@xizou /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到容器内(重新创建一个容器，或者使用docker attach)</span></span><br><span class="line">[root@xizou /]# docker run -it centos /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内创建一个文件</span></span><br><span class="line">[root@736731cb9072 /]# cd /home</span><br><span class="line">[root@736731cb9072 home]# ls</span><br><span class="line">[root@736731cb9072 home]# touch test.py</span><br><span class="line">[root@736731cb9072 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@xizou /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@xizou /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS                     PORTS     NAMES</span><br><span class="line">736731cb9072   centos    "/bin/bash"   About a minute ago   Exited (0) 7 seconds ago             recursing_chatelet</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件拷贝到主机上</span></span><br><span class="line">[root@xizou /]# docker cp 736731cb9072:/home/test.py /home</span><br><span class="line">[root@xizou /]# cd /home</span><br><span class="line">[root@xizou home]# ls</span><br><span class="line">test.py</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用 -v 卷的技术可以实现自动同步/home目录</span></span><br></pre></td></tr></tbody></table></figure><h3 id="小结"><strong>小结</strong></h3><p><img src="/posts/38460/image-20221029151114773.png" alt="Docker命令小结"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker --help</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释指令</span></span><br><span class="line">attachAttach to a running container# 在当前shell下attach连接指定运行的容器</span><br><span class="line">buildBuild an image from a Dockerfile# 通过Dockerifle定制镜像</span><br><span class="line">commitCreate a new image from a container changes  # 提交当前容器为新的镜像</span><br><span class="line">cpCopy files/folders from the container filesystem to the host path# 从容器中拷贝指定文件或目录到宿主机中</span><br><span class="line">createCreate a new container# 创建一个新的容器，同run，但不启动容器</span><br><span class="line">diffInspect changes on a container's filesystem# 查看docker容器变化</span><br><span class="line">eventsGet real time events from the server# 从docker服务获取容器实时事件</span><br><span class="line">execRun a command in an existing container# 在已存在的容器上运行命令</span><br><span class="line">exportStream the contents of a container as a star archive# 导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line">historyShow the history of an image# 展示一个镜像形成历史</span><br><span class="line">imagesList images# 列出系统当前镜像</span><br><span class="line">importCreate a new filesystem image from the contents of a barball# 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">infoDisplay system-wide information# 显示系统相关信息</span><br><span class="line">inspectReturn low-level information on a container# 查看容器详细信息</span><br><span class="line">killKill a running container# kill指定docker容器</span><br><span class="line">loadLoad an image from a tar archive# 从一个tar包中加载一个镜像[对应save]</span><br><span class="line">loginRegister or login to the docker registry server# 注册或登陆一个docker源服务器</span><br><span class="line">logoutLog out from a docker registry server# 从当前docker源服务器退出</span><br><span class="line">logsFetch the logs of a container# 输出当前容器日志信息</span><br><span class="line">portLookup the public-facing port with is NAT-ed to PRIVATE_PORT# 查看映像端口对应的容器内部源端口</span><br><span class="line">pausePause all processes within a container# 暂停容器</span><br><span class="line">psList container# 列出容器列表</span><br><span class="line">pull        Pull an image or a repository from a registry# 从docker镜像源拉取指定镜像或库镜像</span><br><span class="line">push        Push an image or a repository to a registry# 推送指定镜像或库镜像到docker源服务器</span><br><span class="line">rename      Rename a container# 重命名一个容器</span><br><span class="line">restart     Restart one or more containers# 重启一个或多个运行的容器</span><br><span class="line">rm          Remove one or more containers# 移除一个或多个容器</span><br><span class="line">rmi         Remove one or more images# 移除一个或多个镜像</span><br><span class="line">run         Run a command in a new container# 创建一个新的容器并运行一个命令</span><br><span class="line">save        Save one or more images to a tar archive (streamed to STDOUT by default)# 保存一个镜像为一个tar包[对应load]</span><br><span class="line">search      Search the Docker Hub for images# 在docker hub中搜索镜像</span><br><span class="line">start       Start one or more stopped containers# 启动容器</span><br><span class="line">stats       Display a live stream of container(s) resource usage statistics# 展示活动的容器资源使用统计</span><br><span class="line">stop        Stop one or more running containers# 停止容器</span><br><span class="line">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE# 给源中镜像打标签</span><br><span class="line">top         Display the running processes of a container# 查看容器中运行的进程信息</span><br><span class="line">unpause     Unpause all processes within one or more containers# 取消暂停容器</span><br><span class="line">update      Update configuration of one or more containers# 更新一个或多个容器配置</span><br><span class="line">version     Show the Docker version information# 查看docker版本号</span><br><span class="line">wait        Block until one or more containers stop, then print their exit codes# 截取容器停止时的退出状态值</span><br></pre></td></tr></tbody></table></figure><h3 id="作业练习"><strong>作业练习</strong></h3><blockquote><p>部署Nginx</p></blockquote><p>扩展：<a href="https://nginx.org/en/">Nginx</a>是一个高性能的Web服务器，整体功能十分强大，不单单可以用来做Web服务器，还可以用来做反向代理、负载均衡、域名重定向、动静分离、缓存、邮件代理、微服务网关等。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.搜索nginx镜像文件, 建议去docker hub网站搜索，可以看到详细信息</span></span><br><span class="line">[root@xizou /]# docker search nginx</span><br><span class="line">NAME                                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">nginx                                             Official build of Nginx.                        17590     [OK]       </span><br><span class="line">linuxserver/nginx                                 An Nginx container, brought to you by LinuxS…   179                  </span><br><span class="line">bitnami/nginx                                     Bitnami nginx Docker Image                      141                  [OK]</span><br><span class="line">ubuntu/nginx                                      Nginx, a high-performance reverse proxy &amp; we…   64                   </span><br><span class="line">bitnami/nginx-ingress-controller                  Bitnami Docker Image for NGINX Ingress Contr…   20                   [OK]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.拉取nginx镜像到主机</span></span><br><span class="line">[root@xizou /]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Pull complete </span><br><span class="line">a9edb18cadd1: Pull complete </span><br><span class="line">589b7251471a: Pull complete </span><br><span class="line">186b1aaa4aa6: Pull complete </span><br><span class="line">b4df32aa5a72: Pull complete </span><br><span class="line">a0bcbecc962e: Pull complete </span><br><span class="line">Digest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   10 months ago   141MB</span><br><span class="line">centos       latest    5d0da3dc9764   13 months ago   231MB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.启动后台启动，以nginx01命名容器，容器内部80端口映射到主机3344端口，使用nginx镜像文件</span></span><br><span class="line">[root@xizou /]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">6bbf807ce91f70a496f31850538b3f77076841195330575288e32efd225b56b0</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                                   NAMES</span><br><span class="line">6bbf807ce91f   nginx     "/docker-entrypoint.…"   About a minute ago   Up About a minute   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.本机自测</span></span><br><span class="line">[root@xizou /]# curl localhost:3344</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html { color-scheme: light dark; }</span><br><span class="line">body { width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.远程测试</span></span><br><span class="line">打开浏览器，输入120.77.233.13:3344测试，（注：需要配置服务器的安全组策略，放行3344端口）会看到nginx欢迎界面。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.进入容器</span></span><br><span class="line">[root@xizou /]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@6bbf807ce91f:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@6bbf807ce91f:/# cd /etc/nginx</span><br><span class="line">root@6bbf807ce91f:/etc/nginx# ls</span><br><span class="line">conf.d          mime.types  nginx.conf   uwsgi_params</span><br><span class="line">fastcgi_params  modules     scgi_params</span><br><span class="line">root@6bbf807ce91f:/etc/nginx# exit</span><br><span class="line">[root@xizou /]# docker stop nginx01</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/38460/image-20221029160632606.png" alt="端口暴露的概念"></p><p>思考问题：每次改动nginx配置文件都需要进入容器内部，十分的麻烦，如果在容器外部提供一个映射路径，达到在容器外部修改文件，容器内部就可以自动修改的目的  -v 数据卷技术</p><blockquote><p>部署tomcat</p></blockquote><p>扩展：<a href="https://tomcat.apache.org/">Tomcat</a>是一款Apache下面的开源的Servlet容器，实现了对Servlet和JSP规范的支持。另外 Tomcat本身内含了一个 HTTP 服务器，所以也可以被当作一个 Web 服务器来使用。但是Tomcat作为一个Web服务器，它对静态资源的处理能力要比Apache或者Nginx这类的Web服务器差很多，所以我们经常将Apache和Tomcat（或者是Nginx和Tomcat）组合使用，Apache来充当Web服务器处理静态资源的请求，Tomcat充当Servlet容器来处理动态请求。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方的使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 之前的启动都是后台，停止了容器之后，容器还可以查看，而 docker run -it --rm，一般用来测试，用完即删除</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.下载</span></span><br><span class="line">[root@xizou /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   10 months ago   141MB</span><br><span class="line">centos       latest    5d0da3dc9764   13 months ago   231MB</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker pull tomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/tomcat</span><br><span class="line">0e29546d541c: Pull complete </span><br><span class="line">9b829c73b52b: Pull complete </span><br><span class="line">cb5b7ae36172: Pull complete </span><br><span class="line">6494e4811622: Pull complete </span><br><span class="line">668f6fcc5fa5: Pull complete </span><br><span class="line">dc120c3e0290: Pull complete </span><br><span class="line">8f7c0eebb7b1: Pull complete </span><br><span class="line">77b694f83996: Pull complete </span><br><span class="line">0f611256ec3a: Pull complete </span><br><span class="line">4f25def12f23: Pull complete </span><br><span class="line">Digest: sha256:9dee185c3b161cdfede1f5e35e8b56ebc9de88ed3a79526939701f3537a52324</span><br><span class="line">Status: Downloaded newer image for tomcat:latest</span><br><span class="line">docker.io/library/tomcat:latest</span><br><span class="line"></span><br><span class="line">[root@xizou /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   10 months ago   141MB</span><br><span class="line">tomcat       latest    fb5657adc892   10 months ago   680MB</span><br><span class="line">centos       latest    5d0da3dc9764   13 months ago   231MB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.启动运行</span></span><br><span class="line">[root@xizou /]# docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line">4f66acd6a158a84bfc0793e9b1c72e9a8a4f7439b2bcf3ea70e330a2dbc2afde</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.测试访问没有问题，但是会有404错误</span></span><br><span class="line">[root@xizou /]# curl localhost:3355</span><br><span class="line">&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style type="text/css"&gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class="line" /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class="line" /&gt;&lt;h3&gt;Apache Tomcat/10.0.14&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.进入容器</span></span><br><span class="line">[root@xizou /]# docker exec -it tomcat01 /bin/bash</span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat# ll</span><br><span class="line">bash: ll: command not found</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现问题：1) linux命令变少了，2) 没有webapps，因为默认是最小的镜像，所有不必要的都剔除了，保证了最小可运行的环境。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决方法：将webapps.dist所有文件拷贝到 webapps即可</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果访问仍然失败，记得进入阿里云配置设置安全组策略，开放3355端口访问</span></span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt     NOTICE         RUNNING.txt  lib             temp          work</span><br><span class="line">CONTRIBUTING.md  README.md      bin          logs            webapps</span><br><span class="line">LICENSE          RELEASE-NOTES  conf         native-jni-lib  webapps.dist</span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat# cd webapps.dist/</span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat/webapps.dist# cd ..</span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat# cd webapps</span><br><span class="line">root@4f66acd6a158:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>思考问题：每次部署项目，都需要进入容器内部，十分的麻烦，如果在容器外部提供一个映射路径，webapps，在容器外部放置项目，就自动同步到内部就好了  -v 数据卷技术</p><blockquote><p>部署ElasticSearch + Kibana</p></blockquote><p>扩展：</p><ul><li>ElasticSearch是一个实时的分布式存储、搜索、分析的引擎，它能很方便的使大量数据具有搜索、分析和探索的能力。</li><li>Kibana 是为 Elasticsearch设计的开源分析和可视化平台。你可以使用 Kibana 来搜索，查看存储在 Elasticsearch 索引中的数据并与之交互。你可以很容易实现高级的数据分析和可视化，以图表的形式展现出来。</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Elasticsearch 暴露的端口很多、十分的耗内存、数据一般需要放置到安全目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --net somenetwork 网络配置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载启动Elasticsearch</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:8.4.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动之后发现linux服务器非常卡  1核1G，建议1核4G</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker状态  docker stats</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试一下Elasticsearch启动成功了</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭后，给Elasticsearch增加内存限制，修改配置文件 -e 环境配置修改</span></span><br><span class="line">docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx256m" elasticsearch:8.4.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看stats</span></span><br><span class="line">[root@xizou ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDS</span><br><span class="line">e66569515371   elasticsearch02   0.16%     79.62MiB / 941.5MiB   8.46%     586B / 0B   78.4MB / 0B   15</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDS</span><br><span class="line">e66569515371   elasticsearch02   99.94%    83.38MiB / 941.5MiB   8.86%     586B / 0B   78.9MB / 0B   15</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDS</span><br><span class="line">e66569515371   elasticsearch02   99.94%    83.38MiB / 941.5MiB   8.86%     586B / 0B   78.9MB / 0B   15</span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O     PIDS</span><br><span class="line">e66569515371   elasticsearch02   99.94%    83.38MiB / 941.5MiB   8.86%     586B / 0B   78.9MB / 0B   15</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用Kibana访问ES</p></blockquote><p><img src="/posts/38460/image-20221029173040102.png" alt="使用Kibana访问ES"></p><h3 id="可视化">可视化</h3><ul><li>portainer</li><li>Rancher (CI/CD)</li><li>Openshift</li></ul><p><strong>什么是portainer</strong></p><p>portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作(包括上传下载镜像，创建容器等操作)、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载运行</span></span><br><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 网站访问测试（如果访问失败，记得进入阿里云配置设置安全组策略，开放8088端口访问）</span></span><br><span class="line">http://120.77.223.13:8088/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要等待一段时间待界面加载完毕</span></span><br></pre></td></tr></tbody></table></figure><p>使用教程 <a href="https://www.cnblogs.com/JerryMouseLi/p/15571897.html">https://www.cnblogs.com/JerryMouseLi/p/15571897.html</a></p><p><img src="/posts/38460/image-20221029174910162.png" alt="Portainer操作面板"></p><h2 id="Docker镜像">Docker镜像</h2><h3 id="镜像是什么">镜像是什么</h3><p>docker镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>所有的应用，直接打包成docker镜像，可以在docker中运行起来。</p><p>如何获得镜像：</p><ul><li>从远程仓库下载</li><li>别人分享拷贝</li><li>自己制作一个镜像DockerFile</li></ul><h3 id="Docker镜像加载原理">Docker镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>UnionFS（联合文件系统）：Union文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改，作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite serveral directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特型：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>Docker的镜像实际上是由一层一层的文件组成，这种层级的文件系统就是UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层就是bootfs。这一层与典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内核中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs(root file system)在bootfs之上，包含的就是典型Linux系统中的/dev、/proc、/bin、/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu、Centos等待。</p><blockquote><p><img src="/posts/38460/image-20221029180804154.png" alt="Docker镜像加载"></p></blockquote><p>平时我们按照进虚拟机的CentOS都是好几个G、为什么Docker才200M？</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@xizou /]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">centos                latest    5d0da3dc9764   13 months ago   231MB</span><br></pre></td></tr></tbody></table></figure><p>对于一个精简的OS，rootfs可以很小，只包含最基本的命令、工具和程序库就可以了，因为底层直接用宿主机的内核，自己只要提供rootfs即可，因此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会有差别。因此不同的发行版可以共用bootfs。</p><p>虚拟机是分钟级别的，容器是秒级的。</p><blockquote><p>分层的镜像</p></blockquote><p>可以去下载一个镜像，观察下载的日志输出，可以发现是一层一层在下载。</p><p>比如：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载redis</span></span><br><span class="line">[root@xizou /]# docker pull redis</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">a2abf6c4d29d: Already exists </span><br><span class="line">c7a4e4382001: Pull complete</span><br><span class="line">4044b9ba67c9: Pull complete </span><br><span class="line">c8388a79482f: Pull complete </span><br><span class="line">413c8bb60be2: Pull complete </span><br><span class="line">1abfd3011519: Pull complete </span><br><span class="line">Digest: sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像的元数据</span></span><br><span class="line">[root@xizou /]# docker image inspect redis:latest</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Id": "sha256:7614ae9453d1d87e740a2056257a6de7135c84037c367e1fffa92ae922784631",</span><br><span class="line">        "RepoTags": [</span><br><span class="line">            "redis:latest"</span><br><span class="line">        ],</span><br><span class="line">        "RepoDigests": [</span><br><span class="line">            "redis@sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339"</span><br><span class="line">        ],</span><br><span class="line">        "Parent": "",</span><br><span class="line">        "Comment": "",</span><br><span class="line">        "Created": "2021-12-21T12:42:49.755107412Z",</span><br><span class="line">        "Container": "13d25f53410417c5220c8dfe8bd49f06abdbcd69faa62a9b877de02464bb04a3",</span><br><span class="line">        "ContainerConfig": {</span><br><span class="line">            "Hostname": "13d25f534104",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": {</span><br><span class="line">                "6379/tcp": {}</span><br><span class="line">            },</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.2.6",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.2.6.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=5b2b8b7a50111ef395bf1c1d5be11e6e167ac018125055daa8b5c2317ae131ab"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "#(nop) ",</span><br><span class="line">                "CMD [\"redis-server\"]"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "sha256:e093f59d716c95cfce82c676f099b960cc700432ab531388fcedf79932fc81ec",</span><br><span class="line">            "Volumes": {</span><br><span class="line">                "/data": {}</span><br><span class="line">            },</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": {}</span><br><span class="line">        },</span><br><span class="line">        "DockerVersion": "20.10.7",</span><br><span class="line">        "Author": "",</span><br><span class="line">        "Config": {</span><br><span class="line">            "Hostname": "",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": {</span><br><span class="line">                "6379/tcp": {}</span><br><span class="line">            },</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.2.6",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.2.6.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=5b2b8b7a50111ef395bf1c1d5be11e6e167ac018125055daa8b5c2317ae131ab"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "redis-server"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "sha256:e093f59d716c95cfce82c676f099b960cc700432ab531388fcedf79932fc81ec",</span><br><span class="line">            "Volumes": {</span><br><span class="line">                "/data": {}</span><br><span class="line">            },</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": null</span><br><span class="line">        },</span><br><span class="line">        "Architecture": "amd64",</span><br><span class="line">        "Os": "linux",</span><br><span class="line">        "Size": 112691373,</span><br><span class="line">        "VirtualSize": 112691373,</span><br><span class="line">        "GraphDriver": {</span><br><span class="line">            "Data": {</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/c972eb0db5fc093c31e9cc9313a6f37ae4c14b41d9d54c44b624efb95eea9348/diff:/var/lib/docker/overlay2/85907f4146eae6f77b7a36316676b53e254038e243a893a9d0b8804fdbfb7499/diff:/var/lib/docker/overlay2/1d2a6a063a36c936689bb84b800821d8a9d154b7cd35f950892b4dafc2286c4d/diff:/var/lib/docker/overlay2/2425fa0f80b5ebeb0675c4938fb4aa32a0073c38d36184989ca39e7bd3aa4556/diff:/var/lib/docker/overlay2/0eb7de4be3f166f2f05d9894a151610ee2952e5cf43175faf1ee2f9e1d0ff737/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/e4a684ba8173df23ed7622b4989678e85ed756b3cc7130ac7f643b1c6cc3db48/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/e4a684ba8173df23ed7622b4989678e85ed756b3cc7130ac7f643b1c6cc3db48/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/e4a684ba8173df23ed7622b4989678e85ed756b3cc7130ac7f643b1c6cc3db48/work"</span><br><span class="line">            },</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        },</span><br><span class="line">        "RootFS": {</span><br><span class="line">            "Type": "layers",</span><br><span class="line">            "Layers": [</span><br><span class="line">                "sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f",</span><br><span class="line">                "sha256:9b24afeb7c2f21e50a686ead025823cd2c6e9730c013ca77ad5f115c079b57cb",</span><br><span class="line">                "sha256:4b8e2801e0f956a4220c32e2c8b0a590e6f9bd2420ec65453685246b82766ea1",</span><br><span class="line">                "sha256:529cdb636f61e95ab91a62a51526a84fd7314d6aab0d414040796150b4522372",</span><br><span class="line">                "sha256:9975392591f2777d6bf4d9919ad1b2c9afa12f9a9b4d260f45025ec3cc9b18ed",</span><br><span class="line">                "sha256:8e5669d8329116b8444b9bbb1663dda568ede12d3dbcce950199b582f6e94952"</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        "Metadata": {</span><br><span class="line">            "LastTagTime": "0001-01-01T00:00:00Z"</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>可以发现在RootFS的Layers有分层。</p><p>分层最大的好处在于<strong>资源共享</strong>，比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需要在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p><strong>理解</strong>：</p><p>所有的Docker的镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，例如基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层，如果在该镜像中添加Python包，就会在基础镜像层上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>如下图所示，该镜像当前已经包含3个镜像层。</p><p><img src="/posts/38460/image-20221029183753214.png" alt="镜像分层01"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src="/posts/38460/image-20221029184603268.png" alt="镜像分层02"></p><p>上面中的镜像层跟之前的图中略有区别，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层的文件7是文件5的一个更新版本。</p><p><img src="/posts/38460/image-20221029184904109.png" alt="镜像分层03"></p><p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件，这样就使得文件的更新版本作为一个新的镜像层添加到镜像中。</p><p>Docker通过存储引擎（快照机制）的方式来实现镜像层的堆栈，并保持多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都是基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。</p><p>Docker在Windows仅支持Windowsfilter一种存储引擎，该引擎基于NTFS系统之上分层和CoW。</p><p>下图展示了与系统显示相同的三层镜像，所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="/posts/38460/image-20221029185525138.png" alt="镜像统一视图"></p><blockquote><p>特点</p></blockquote><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。</p><p>这一层就是通常所说的容器层，容器之下的都叫镜像层。</p><p><img src="/posts/38460/image-20221029185820930.png" alt="镜像层"></p><h3 id="Commit镜像">Commit镜像</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker commit  提交容器成为一个新的镜像</span><br><span class="line"></span><br><span class="line">docker commit -m="提交的描述信息" -a="作者名称" 容器id 目标镜像名:[tag]</span><br></pre></td></tr></tbody></table></figure><p>实战测试</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.启动一个默认的tomcat</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.发现这个默认的tomcat是没有webapps应用的，因为官方的镜像默认webapps下面为空</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.我们自己拷贝进去基本的文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.通过commit提交为一个新的镜像</span></span><br><span class="line">[root@xizou ~]# docker commit -a="xizou" -m="add webapps app" 978a547e22ad tomcat02:1.0</span><br><span class="line">sha256:600af0d3c7c965fe45b24d9019b1289d24dc55241ff19935f390a36621f123ea</span><br><span class="line">[root@xizou ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat02              1.0       600af0d3c7c9   5 seconds ago   684MB</span><br><span class="line">elasticsearch         8.4.3     ce2b9dc7fe85   3 weeks ago     1.26GB</span><br><span class="line">nginx                 latest    605c77e624dd   10 months ago   141MB</span><br><span class="line">tomcat                latest    fb5657adc892   10 months ago   680MB</span><br><span class="line">redis                 latest    7614ae9453d1   10 months ago   113MB</span><br><span class="line">centos                latest    5d0da3dc9764   13 months ago   231MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   19 months ago   79.1MB</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>当想保持容器的状态，可以通过commit来提交，获得一个镜像，就好比虚拟机的快照。</p><h2 id="参考文章-3">参考文章</h2><p>本文是笔者通过下列视频教程进行Docker入门学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.bilibili.com/video/BV1og4y1q7M4/">【B站up主-遇见狂神说】</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Docker技术 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> 入门教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-链表专题</title>
      <link href="/posts/28131.html"/>
      <url>/posts/28131.html</url>
      
        <content type="html"><![CDATA[<h2 id="6-从尾到头打印链表">6. 从尾到头打印链表</h2><h3 id="题目描述-17">题目描述</h3><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值。（用数组返回）</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{1, 2, 3}</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-19">题解</h3><p><strong>思路1（辅助数组）：</strong><br>创建辅助数组，从头到尾遍历链表，将节点的值存入辅助数组，最后将辅助数组逆序即可。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_list_from_tail_to_head</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            res.append(head.val)</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[::-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">2</span>)</span><br><span class="line">    b = ListNode(<span class="number">3</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    <span class="built_in">print</span>(Solution().print_list_from_tail_to_head(head))</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><pre><code>[3, 2, 1]</code></pre><p><strong>思路2（反转链表）：</strong><br>先将链表反转，然后遍历链表，将节点的值加入数组。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_list_from_tail_to_head</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        cur = head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            temp = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line">        res = []</span><br><span class="line">        point = pre</span><br><span class="line">        <span class="keyword">while</span> point:</span><br><span class="line">            res.append(point.val)</span><br><span class="line">            point = point.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">2</span>)</span><br><span class="line">    b = ListNode(<span class="number">3</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    <span class="built_in">print</span>(Solution().print_list_from_tail_to_head(head))</span><br></pre></td></tr></tbody></table></figure><pre><code>[3, 2, 1]</code></pre><h2 id="18-1-删除链表节点">18.1 删除链表节点</h2><h3 id="题目描述-18">题目描述</h3><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点，返回删除后的链表的头节点。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{2, 5, 1, 9}, 5</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">{2, 1, 9}</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-20">题解</h3><p><strong>思路（穿针引线）：</strong><br>先找到要删除的元素，然后删除点，需要考虑要删除的节点为头节点的特殊情况。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_node</span>(<span class="params">self, head, val</span>):</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">if</span> cur.val == val:</span><br><span class="line">            <span class="keyword">return</span> head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">and</span> cur.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val == val:</span><br><span class="line">                cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">2</span>)</span><br><span class="line">    a = ListNode(<span class="number">5</span>)</span><br><span class="line">    b = ListNode(<span class="number">1</span>)</span><br><span class="line">    c = ListNode(<span class="number">9</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    val = <span class="number">5</span></span><br><span class="line">    cur = Solution().delete_node(head, val)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>219</code></pre><h2 id="18-2-删除链表中重复的结点">18.2 删除链表中重复的结点</h2><h3 id="题目描述-19">题目描述</h3><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{1, 2, 3, 3, 4, 4, 5}</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">{1, 2, 5}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="题解-21">题解</h3><p><strong>思路1（直接比较删除）：</strong><br>因为排序的链表中，重复的结点都是连在一起的，因此比较容易找到重复的结点，然后将所有连续相同的结点都跳过，连接不相同的第一个结点。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_duplication</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        res = ListNode(<span class="number">0</span>)</span><br><span class="line">        res.<span class="built_in">next</span> = head</span><br><span class="line">        cur = res</span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span> <span class="keyword">and</span> cur.<span class="built_in">next</span>.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val == cur.<span class="built_in">next</span>.<span class="built_in">next</span>.val:</span><br><span class="line">                temp = cur.<span class="built_in">next</span>.val</span><br><span class="line">                <span class="keyword">while</span> cur.<span class="built_in">next</span> <span class="keyword">and</span> cur.<span class="built_in">next</span>.val == temp:</span><br><span class="line">                    cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">2</span>)</span><br><span class="line">    b = ListNode(<span class="number">3</span>)</span><br><span class="line">    c = ListNode(<span class="number">3</span>)</span><br><span class="line">    d = ListNode(<span class="number">4</span>)</span><br><span class="line">    e = ListNode(<span class="number">4</span>)</span><br><span class="line">    f = ListNode(<span class="number">5</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    d.<span class="built_in">next</span> = e</span><br><span class="line">    e.<span class="built_in">next</span> = f</span><br><span class="line">    cur = Solution().delete_duplication(head)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>125</code></pre><p><strong>思路2（哈希表）：</strong><br>使用哈希表辅助统计是否重复。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_duplication</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        hash_map = <span class="built_in">dict</span>()</span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.val <span class="keyword">not</span> <span class="keyword">in</span> hash_map:</span><br><span class="line">                hash_map[cur.val] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hash_map[cur.val] += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            </span><br><span class="line">        res = ListNode(<span class="number">0</span>)</span><br><span class="line">        res.<span class="built_in">next</span> = head</span><br><span class="line">        cur = res</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">and</span> cur.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> hash_map[cur.<span class="built_in">next</span>.val] != <span class="number">1</span>:</span><br><span class="line">                cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">2</span>)</span><br><span class="line">    b = ListNode(<span class="number">3</span>)</span><br><span class="line">    c = ListNode(<span class="number">3</span>)</span><br><span class="line">    d = ListNode(<span class="number">4</span>)</span><br><span class="line">    e = ListNode(<span class="number">4</span>)</span><br><span class="line">    f = ListNode(<span class="number">5</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    d.<span class="built_in">next</span> = e</span><br><span class="line">    e.<span class="built_in">next</span> = f</span><br><span class="line">    cur = Solution().delete_duplication(head)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>125</code></pre><h2 id="22-链表中倒数第K个结点">22. 链表中倒数第K个结点</h2><h3 id="题目描述-20">题目描述</h3><p>输入一个长度为n的链表，返回链表中倒数第k个结点，如果链表长度小于k，则返回None。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{1, 2, 3, 4, 5}, 2</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">{4, 5}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="题解-22">题解</h3><p><strong>思路（快慢指针）：</strong><br>创建快慢两个指针，首先快指针先走k步，然后快慢指针同时走，知道快指针走到链表尾部，此时，慢指针指向的就是链表的倒数第k个结点。需要注意的是链表长度小于k时的处理。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_kth_to_tail</span>(<span class="params">self, head, k</span>):</span></span><br><span class="line">        fast = head</span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="keyword">if</span> fast:</span><br><span class="line">                fast = fast.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">2</span>)</span><br><span class="line">    b = ListNode(<span class="number">3</span>)</span><br><span class="line">    c = ListNode(<span class="number">4</span>)</span><br><span class="line">    d = ListNode(<span class="number">5</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    cur = Solution().find_kth_to_tail(head, k)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>45</code></pre><h2 id="23-链表中环的入口结点">23. 链表中环的入口结点</h2><h3 id="题目描述-21">题目描述</h3><p>请判断链表是否有环，如果没有则返回None，如果有则返回该链表的环的入口结点。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{1, 6}, {3, 5, 2, 4}</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="题解-23">题解</h3><p><strong>思路（快慢指针）：</strong><br>创建快慢两个指针，快指针每次走2步，慢指针每次走1步，当快慢指针相遇且不为空时，说明链表有环。</p><p>假设快指针在环中走了n圈，慢指针在环中走了m圈才相遇，且进入环之前的距离为x，环入口到相遇点的距离为y，相遇点到环入口的距离为z，则：</p><p>快指针走过的路程=x+n(y+z)+y，慢指针走过的路程=x+m(y+z)+y,而快指针走过的路程=2倍慢指针走过的路程，得到：x=(n-2m)(y+z)-y=(n-2m-1)(y+z)+z.</p><p>此时，设置一指针从头出发，每次走一步，另一指针从相遇点出发，每次也走一步，两指针会在环的入口结点相遇。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220330/397721558_1648627978736/C56F671FC2966A5E586BD6E56E19D3E3" alt="快慢指针"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">entry_node_of_loop</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        fast = head</span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.<span class="built_in">next</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> fast != slow:</span><br><span class="line">            fast = fast.<span class="built_in">next</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">6</span>)</span><br><span class="line">    b = ListNode(<span class="number">3</span>)</span><br><span class="line">    c = ListNode(<span class="number">5</span>)</span><br><span class="line">    d = ListNode(<span class="number">2</span>)</span><br><span class="line">    e = ListNode(<span class="number">4</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    d.<span class="built_in">next</span> = e</span><br><span class="line">    e.<span class="built_in">next</span> = b</span><br><span class="line">    cur = Solution().entry_node_of_loop(head)</span><br><span class="line">    <span class="built_in">print</span>(cur.val)</span><br></pre></td></tr></tbody></table></figure><pre><code>3</code></pre><h2 id="24-反转链表">24. 反转链表</h2><h3 id="题目描述-22">题目描述</h3><p>给定一个单链表的头结点head，长度为n，反转该链表后，返回新链表的表头。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{2, 1, 5, 3, 4}</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">{4, 3, 5, 1, 2}</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-24">题解</h3><p><strong>思路1（迭代）：</strong><br>设置两个指针，一个指针指向当前结点，一个指针指向当前结点的上一个结点。设置指向上一个结点的指针初始为空。遍历原始链表，每到一个结点，将遇到的结点指针逆向。断掉当前结点向后的指针，改为向前。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20211001/397721558_1633084777359/E53A90674EDC6B8D31549D8DF4E7B38E" alt="反转链表"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            temp = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">2</span>)</span><br><span class="line">    a = ListNode(<span class="number">1</span>)</span><br><span class="line">    b = ListNode(<span class="number">5</span>)</span><br><span class="line">    c = ListNode(<span class="number">3</span>)</span><br><span class="line">    d = ListNode(<span class="number">4</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    cur = Solution().reverse_list(head)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>43512</code></pre><h3 id="题解-25">题解</h3><p><strong>思路2（递归）：</strong><br>对于每个结点，递归向下遍历到最后的尾结点，然后往上依次逆转两个结点，将逆转后的本层结点指向None，返回最底层上来的头部结点。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        temp = head.<span class="built_in">next</span></span><br><span class="line">        head.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        new_head = self.reverse_list(temp)</span><br><span class="line">        temp.<span class="built_in">next</span> = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> new_head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = ListNode(<span class="number">2</span>)</span><br><span class="line">    a = ListNode(<span class="number">1</span>)</span><br><span class="line">    b = ListNode(<span class="number">5</span>)</span><br><span class="line">    c = ListNode(<span class="number">3</span>)</span><br><span class="line">    d = ListNode(<span class="number">4</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    cur = Solution().reverse_list(head)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>43512</code></pre><h2 id="25-合并两个排序的链表">25. 合并两个排序的链表</h2><h3 id="题目描述-23">题目描述</h3><p>输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的结点仍然是递增的。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{1, 3, 4, 10, 18}, {2, 3, 7, 8, 9}</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">{1, 2, 3, 3, 4, 7, 8, 9, 10, 18}</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-26">题解</h3><p><strong>思路1（双指针迭代）：</strong><br>定义两个指针分别指向两个链表的头部，比较两个指针指向的结点值，从中取出最小的元素，然后指向最小元素的指针向后走，直到两个指针中任一个走到尾部。最后在将另一个链表的剩余部分全部取出。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20211001/397721558_1633086591658/82953D04639BD2356F6032F90DAF845F" alt="双指针"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, head1, head2</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head1:</span><br><span class="line">            <span class="keyword">return</span> head2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head2:</span><br><span class="line">            <span class="keyword">return</span> head1</span><br><span class="line">        p = ListNode(-<span class="number">1</span>)</span><br><span class="line">        q = p</span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">and</span> head2:</span><br><span class="line">            <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">                p.<span class="built_in">next</span> = head1</span><br><span class="line">                head1 = head1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p.<span class="built_in">next</span> = head2</span><br><span class="line">                head2 = head2.<span class="built_in">next</span></span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> head1:</span><br><span class="line">            p.<span class="built_in">next</span> = head1</span><br><span class="line">        <span class="keyword">if</span> head2:</span><br><span class="line">            p.<span class="built_in">next</span> = head2</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head1 = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">3</span>)</span><br><span class="line">    b = ListNode(<span class="number">4</span>)</span><br><span class="line">    c = ListNode(<span class="number">10</span>)</span><br><span class="line">    d = ListNode(<span class="number">18</span>)</span><br><span class="line">    head1.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    </span><br><span class="line">    head2 = ListNode(<span class="number">2</span>)</span><br><span class="line">    e = ListNode(<span class="number">3</span>)</span><br><span class="line">    f = ListNode(<span class="number">7</span>)</span><br><span class="line">    g = ListNode(<span class="number">8</span>)</span><br><span class="line">    h = ListNode(<span class="number">9</span>)</span><br><span class="line">    head2.<span class="built_in">next</span> = e</span><br><span class="line">    e.<span class="built_in">next</span> = f</span><br><span class="line">    f.<span class="built_in">next</span> = g</span><br><span class="line">    g.<span class="built_in">next</span> = h</span><br><span class="line">    </span><br><span class="line">    cur = Solution().merge(head1, head2)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>123347891018</code></pre><h3 id="题解-27">题解</h3><p><strong>思路2（双指针递归）：</strong><br>每次比较两个链表当前结点的值，然后取较小值的链表指针往后，另一个不变，两段子链表作为新的链表送入递归中，递归回来的结果加在较小值的结点的后面，当两个链表有一个为空时，递归终止。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, head1, head2</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head1:</span><br><span class="line">            <span class="keyword">return</span> head2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head2:</span><br><span class="line">            <span class="keyword">return</span> head1</span><br><span class="line">        <span class="keyword">if</span> head1.val &lt; head2.val:</span><br><span class="line">            head1.<span class="built_in">next</span> = self.merge(head1.<span class="built_in">next</span>, head2)</span><br><span class="line">            <span class="keyword">return</span> head1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head2.<span class="built_in">next</span> = self.merge(head1, head2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> head2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head1 = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">3</span>)</span><br><span class="line">    b = ListNode(<span class="number">4</span>)</span><br><span class="line">    c = ListNode(<span class="number">10</span>)</span><br><span class="line">    d = ListNode(<span class="number">18</span>)</span><br><span class="line">    head1.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    b.<span class="built_in">next</span> = c</span><br><span class="line">    c.<span class="built_in">next</span> = d</span><br><span class="line">    </span><br><span class="line">    head2 = ListNode(<span class="number">2</span>)</span><br><span class="line">    e = ListNode(<span class="number">3</span>)</span><br><span class="line">    f = ListNode(<span class="number">7</span>)</span><br><span class="line">    g = ListNode(<span class="number">8</span>)</span><br><span class="line">    h = ListNode(<span class="number">9</span>)</span><br><span class="line">    head2.<span class="built_in">next</span> = e</span><br><span class="line">    e.<span class="built_in">next</span> = f</span><br><span class="line">    f.<span class="built_in">next</span> = g</span><br><span class="line">    g.<span class="built_in">next</span> = h</span><br><span class="line">    </span><br><span class="line">    cur = Solution().merge(head1, head2)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>123347891018</code></pre><h2 id="35-复杂链表的复制">35. 复杂链表的复制</h2><h3 id="题目描述-24">题目描述</h3><p>输入一个复杂链表（每个结点中有节点值，以及两个指针，一个指向下一个结点，另一个特殊指针random指向一个随机结点，请对此链表进行深拷贝，并返回拷贝后的头结点。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{1, 2, 3, 3, 1, 1}</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">{1, 2, 3, 3, 1, 1}</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-28">题解</h3><p><strong>思路（双指针）：</strong><br>先遍历链表，对每个结点新建一个拷贝结点，并插入到该结点之后，然后使用双指针再次遍历链表，两个指针每次都一共两步，一个指针遍历原始结点，另一个指针遍历拷贝结点，拷贝结点的随机指针跟随原始结点，指向原始结点随机指针的下一位。最后再次使用双指针遍历链表，每次越过后一位相连，即拆分为两个链表。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220423/397721558_1650683274480/D83430A7F5827D198AD11AAFBBF96B0C" alt="双指针"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.label = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.random = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clone</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            clone = RandomListNode(cur.label)</span><br><span class="line">            clone.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = clone</span><br><span class="line">            cur = clone.<span class="built_in">next</span></span><br><span class="line">        cur = head</span><br><span class="line">        clone = head.<span class="built_in">next</span></span><br><span class="line">        res = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur.random:</span><br><span class="line">                clone.random = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                clone.random = cur.random.<span class="built_in">next</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> clone.<span class="built_in">next</span>:</span><br><span class="line">                clone = clone.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        cur = head</span><br><span class="line">        clone = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> clone.<span class="built_in">next</span>:</span><br><span class="line">                clone.<span class="built_in">next</span> = clone.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            clone = clone.<span class="built_in">next</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head = RandomListNode(<span class="number">1</span>)</span><br><span class="line">    a = RandomListNode(<span class="number">2</span>)</span><br><span class="line">    b = RandomListNode(<span class="number">3</span>)</span><br><span class="line">    head.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    head.random = b</span><br><span class="line">    a.random = head</span><br><span class="line">    b.ramdom = head</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    p = Solution().clone(head)</span><br><span class="line">    cur = p</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.label)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">while</span> p:</span><br><span class="line">        <span class="keyword">if</span> p.random:</span><br><span class="line">            <span class="built_in">print</span>(p.random.label)</span><br><span class="line">        p = p.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>12331</code></pre><h2 id="52-两个链表的第一个公共结点">52. 两个链表的第一个公共结点</h2><h3 id="题目描述-25">题目描述</h3><p>输入两个无环的单向链表，找出他们的第一个公共结点，如果没有公共节点则返回空。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">{1,2,3},{4,5},{6,7}</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">{6, 7}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="题解-29">题解</h3><p><strong>思路（双指针法）：</strong><br>创建两个指针分别指向两链表的初始结点，然后让指针A遍历链表1，让指针B遍历链表2，当指针A和指针B都遍历完各自的节点后，让指针A遍历链表2，让指针B遍历链表1，直到两个指针指向的结点先相等。</p><p>时间复杂度O(m+n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_first_common_node</span>(<span class="params">self, head1, head2</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head1 <span class="keyword">or</span> <span class="keyword">not</span> head2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        p, q = head1, head2</span><br><span class="line">        <span class="keyword">while</span> p != q:</span><br><span class="line">            p = p.<span class="built_in">next</span> <span class="keyword">if</span> p <span class="keyword">else</span> head2</span><br><span class="line">            q = q.<span class="built_in">next</span> <span class="keyword">if</span> q <span class="keyword">else</span> head1</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    head1 = ListNode(<span class="number">1</span>)</span><br><span class="line">    a = ListNode(<span class="number">2</span>)</span><br><span class="line">    b = ListNode(<span class="number">3</span>)</span><br><span class="line">    head1.<span class="built_in">next</span> = a</span><br><span class="line">    a.<span class="built_in">next</span> = b</span><br><span class="line">    head2 = ListNode(<span class="number">4</span>)</span><br><span class="line">    c = ListNode(<span class="number">5</span>)</span><br><span class="line">    head2.<span class="built_in">next</span> = c</span><br><span class="line">    e = ListNode(<span class="number">6</span>)</span><br><span class="line">    f = ListNode(<span class="number">7</span>)</span><br><span class="line">    b.<span class="built_in">next</span> = e</span><br><span class="line">    e.<span class="built_in">next</span> = f</span><br><span class="line">    c.<span class="built_in">next</span> = e</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    cur = Solution().find_first_common_node(head1, head2)</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="built_in">print</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><pre><code>67</code></pre><h2 id="参考文章-10">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-双指针专题</title>
      <link href="/posts/57152.html"/>
      <url>/posts/57152.html</url>
      
        <content type="html"><![CDATA[<h2 id="57-1-和为S的两个数字">57.1 和为S的两个数字</h2><h3 id="题目描述">题目描述</h3><p>在有序数组中找出两个数，使得和为给定的数S。如果有多对数字的和等于S，输出两个数的乘积最小的。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[1, 2, 4, 7, 11, 15], 15</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[4, 11]</span><br></pre></td></tr></tbody></table></figure><h3 id="题解">题解</h3><p><strong>思路（双指针法）：</strong><br>使用双指针，一个指针指向元素较小的值，一个指针指向元素较大的值。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220420/397721558_1650457554074/06BDB11626D2FD0CA1EBF6C2777FD95C" alt="双指针法"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_numbers_with_sum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        i, j = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                <span class="keyword">return</span> [nums[i], nums[j]]</span><br><span class="line">            <span class="keyword">elif</span> nums[i] + nums[j] &lt; target:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">    target = <span class="number">15</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().find_numbers_with_sum(nums, target))</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><pre><code>[4, 11]</code></pre><h2 id="57-2-和为S的连续正数序列">57.2 和为S的连续正数序列</h2><h3 id="题目描述-2">题目描述</h3><p>输出所有和为S的连续整数序列，数据范围为0到100。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[[2, 3, 4], [4, 5]]</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-2">题解</h3><p><strong>思路（滑动窗口）：</strong><br>区间从[1, 2]开始，两个指针分别指向区间首和尾，使用公式计算区间内子元素之和，如果等于目标数，则记录下该区间的所有数字，同时左区间指针向右，若区间内的序列和小于目标数，则右区间扩展。若区间内的序列和大于目标数，则左区间向右。</p><p>时间复杂度O(n)，空间复杂度O(sqrt(n))</p><p><img src="https://uploadfiles.nowcoder.com/images/20211203/397721558_1638516207843/20A9A4EB486B238F2B1D5DCE1BDF64B6" alt="滑动窗口"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_continuous_sequence</span>(<span class="params">self, target_sum</span>):</span></span><br><span class="line">        l = <span class="number">1</span></span><br><span class="line">        r = <span class="number">2</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            total = (l + r) * (r - l + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> total == target_sum:</span><br><span class="line">                res.append([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l, r+<span class="number">1</span>)])</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> total &lt; target_sum:</span><br><span class="line">                r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">print</span>(Solution().find_continuous_sequence(<span class="number">9</span>))</span><br></pre></td></tr></tbody></table></figure><pre><code>[[2, 3, 4], [4, 5]]</code></pre><h2 id="58-1-翻转单词序列">58.1 翻转单词序列</h2><h3 id="题目描述-3">题目描述</h3><p>给定一个句子，翻转单词的顺序，然后输出。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">"This is a sample"</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">"sample a is This"</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="题解-3">题解</h3><p><strong>思路：</strong><br>先翻转整个句子，再翻转每个单词</p><p>时间复杂度O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20211009/397721558_1633768032973/7269932FDD7F8BA760B50D8A119A60C0" alt="翻转单词序列"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_sentence</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        strs = strs[::-<span class="number">1</span>]</span><br><span class="line">        s = strs.split(<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" "</span>.join(s[i][::-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    strs = <span class="string">"This is a sample"</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().reverse_sentence(strs))</span><br></pre></td></tr></tbody></table></figure><pre><code>sample a is This</code></pre><h2 id="左旋转字符串">左旋转字符串</h2><h3 id="题目描述-4">题目描述</h3><p>将字符串S从第K位置分隔成两个子字符串，并交换这两个子字符串的位置</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">Input:</span><br><span class="line">S = "abcXYZdef"</span><br><span class="line">K = 3</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">"XYZdefabc"</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-4">题解</h3><p><strong>思路1（三次翻转）：</strong><br>先整个字符串翻转，然后将按K分割字符串，len(字符串)-k左侧的子字符串翻转，再将len(字符串)-k右侧子字符串翻转</p><p>时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_rotate_string</span>(<span class="params">self, strs, k</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(strs)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; k:</span><br><span class="line">            k = k % n</span><br><span class="line">        strs = strs[::-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> strs[:n-k][::-<span class="number">1</span>] + strs[n-k:][::-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    strs = <span class="string">"abcXYZdef"</span></span><br><span class="line">    k = <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().left_rotate_string(strs, k))</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><pre><code>XYZdefabc</code></pre><p><strong>思路2（拼接）：</strong></p><p>将字符串后面再加一个字符串，然后取K到K+len(字符串)部分即可，注意保证K要小于len(字符串)。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_rotate_string</span>(<span class="params">self, strs, k</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(strs)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; k:</span><br><span class="line">            k = k % n</span><br><span class="line">        strs = strs * <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> strs[k:n+k]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    strs = <span class="string">"abcXYZdef"</span></span><br><span class="line">    k = <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().left_rotate_string(strs, k))</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><pre><code>XYZdefabc</code></pre><h2 id="参考文章-5">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-栈队列堆专题</title>
      <link href="/posts/275.html"/>
      <url>/posts/275.html</url>
      
        <content type="html"><![CDATA[<h2 id="9-用两个栈实现队列">9. 用两个栈实现队列</h2><h3 id="题目描述-10">题目描述</h3><p>用两个栈来实现一个队列，完成队列的push和pop操作</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">["push 1", "push 2", "pop", "pop"]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1, 2</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-10">题解</h3><p><strong>思路（双栈法）：</strong><br>元素进栈后，只能优先弹出末尾元素，但是队列每次弹出的却是最先进去的元素，如果能够将栈中元素全部取出来，才能访问到最前面的元素，因此，使用另一个栈来辅助取出。</p><p>插入与删除的时间复杂度都是O(1)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack1 = []</span><br><span class="line">        self.stack2 = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.stack1.append(node)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> self.stack1:</span><br><span class="line">            self.stack2.append(self.stack1.pop())</span><br><span class="line">        res = self.stack2.pop()</span><br><span class="line">        <span class="keyword">while</span> self.stack2:</span><br><span class="line">            self.stack1.append(self.stack2.pop())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    queue = Solution()</span><br><span class="line">    queue.push(<span class="number">1</span>)</span><br><span class="line">    queue.push(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(queue.pop())</span><br><span class="line">    <span class="built_in">print</span>(queue.pop())</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><pre><code>12</code></pre><h2 id="30-包含min函数的栈">30. 包含min函数的栈</h2><h3 id="题目描述-11">题目描述</h3><p>实现一个包含min()函数的栈，该方法返回当前栈中最小的值。此栈包含的方法有：</p><p>push(value)：将value压入栈中<br>pop()：弹出栈顶元素<br>top()：获取栈顶元素<br>min()：获取栈中最小元素</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">["push -1", "push 2", "min", "top", "pop", "push 1", "top", "min"]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">-1, 2, 1, -1</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-11">题解</h3><p><strong>思路1（双栈法）：</strong><br>初始化一个原始栈和最小值栈，最小栈存储每次跟原栈中元素比较后的最小元素。</p><p>时间复杂度O(1)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        self.min_stack = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.stack.append(node)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.min_stack:</span><br><span class="line">            self.min_stack.append(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.min_stack[-<span class="number">1</span>] &lt; node:</span><br><span class="line">                self.min_stack.append(self.min_stack[-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.min_stack.append(node)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack.pop()</span><br><span class="line">        self.min_stack.pop()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.min_stack[-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    stack = Solution()</span><br><span class="line">    stack.push(-<span class="number">1</span>)</span><br><span class="line">    stack.push(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(stack.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(stack.top())</span><br><span class="line">    stack.pop()</span><br><span class="line">    stack.push(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(stack.top())</span><br><span class="line">    <span class="built_in">print</span>(stack.<span class="built_in">min</span>())</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><pre><code>-121-1</code></pre><p><strong>思路2（元组）：</strong><br>使用一个栈，栈中元素是元组，元组的第一个元素是数值，第二个元素是最小值。</p><p>时间复杂度O(1)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack:</span><br><span class="line">            self.stack.append((node, node))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stack.append((node, <span class="built_in">min</span>(node, self.stack[-<span class="number">1</span>][<span class="number">1</span>])))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack.pop()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    stack = Solution()</span><br><span class="line">    stack.push(-<span class="number">1</span>)</span><br><span class="line">    stack.push(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(stack.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(stack.top())</span><br><span class="line">    stack.pop()</span><br><span class="line">    stack.push(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(stack.top())</span><br><span class="line">    <span class="built_in">print</span>(stack.<span class="built_in">min</span>())</span><br></pre></td></tr></tbody></table></figure><pre><code>-121-1</code></pre><h2 id="31-栈的压入、弹出序列">31. 栈的压入、弹出序列</h2><h3 id="题目描述-12">题目描述</h3><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为栈的弹出顺序，假设压入的所有数字均不相等。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[1, 2, 3, 4, 5], [4, 5, 3, 2, 1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">True</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-12">题解</h3><p><strong>思路1（辅助栈）：</strong><br>使用一个辅助栈来模拟，对于入栈序列，只要栈为空，则序列依次入栈，如果遇到一个栈等于出栈序列的元素，则放弃入栈，先让该元素出来。如果按照这样的方式两个序列都访问完，则说明是可以匹配入栈出栈次序的。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220421/397721558_1650532143383/7F25B229A4900F6E066BE03E92B0492E" alt="辅助栈"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_pop_order</span>(<span class="params">self, push_v, pop_v</span>):</span></span><br><span class="line">        stack = []</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        n = <span class="built_in">len</span>(push_v)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> j &lt; n <span class="keyword">and</span> (<span class="built_in">len</span>(stack) == <span class="number">0</span> <span class="keyword">or</span> stack[-<span class="number">1</span>] != pop_v[i]):</span><br><span class="line">                stack.append(push_v[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> stack[-<span class="number">1</span>] == pop_v[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    push_v = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    pop_v = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(Solution().is_pop_order(push_v, pop_v))</span><br></pre></td></tr></tbody></table></figure><pre><code>True</code></pre><h3 id="题解-13">题解</h3><p><strong>思路2（原地栈）：</strong><br>遍历push数组时，用下标n表示栈空间，用j表示出栈序列的下标，遍历每一个待入栈的元素，加入栈顶，当栈不为空时，栈顶等于当前出栈序列，就出栈，同时减少n，最后如果栈空间大小n为0时，代表全部出栈完成，否则不匹配。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_pop_order</span>(<span class="params">self, push_v, pop_v</span>):</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> push_v:</span><br><span class="line">            push_v[n] = num</span><br><span class="line">            <span class="keyword">while</span> n &gt;= <span class="number">0</span> <span class="keyword">and</span> push_v[n] == pop_v[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    push_v = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    pop_v = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(Solution().is_pop_order(push_v, pop_v))</span><br></pre></td></tr></tbody></table></figure><pre><code>True</code></pre><h2 id="40-最小的k个数">40. 最小的k个数</h2><h3 id="题目描述-13">题目描述</h3><p>给定一个长度为n的可能有重复值的数组，找出其中不去重的最小的k个数。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4, 5, 1, 6, 2, 7, 3, 8], 4</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[1, 2, 3, 4]</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-14">题解</h3><p><strong>思路1（堆排序）：</strong><br>要找到最小的k个元素，只需要准备k个数字，之后每次遇到一个数字能够快速的与这k个数字中最大的值进行比较，每次将最大的值替换掉，那么最后剩余的就是k个最小的数字了。优先考虑大根堆，限制堆的大小为k，那么堆顶就是k个数字的最大值，如果需要替换，则将这个最大值拿出，加入新的元素就行。</p><p>时间复杂度O(nlogk), 空间复杂度O(k)</p><p><img src="https://uploadfiles.nowcoder.com/images/20210722/397721558_1626945012109/6A105C4B5BE11C9FE59934C5B4E772BF" alt="堆排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_least_numbers</span>(<span class="params">self, nums, k</span>):</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &gt;= k <span class="keyword">and</span> k != <span class="number">0</span>:</span><br><span class="line">            pq = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                heapq.heappush(pq, (-<span class="number">1</span> * nums[i]))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> (-<span class="number">1</span> * pq[<span class="number">0</span>]) &gt; nums[i]:</span><br><span class="line">                    heapq.heapreplace(pq, (-<span class="number">1</span> * nums[i]))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                res.append(-<span class="number">1</span> * pq[<span class="number">0</span>])</span><br><span class="line">                heapq.heappop(pq)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>]</span><br><span class="line">    k = <span class="number">4</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().get_least_numbers(nums, k))</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><pre><code>[4, 3, 2, 1]</code></pre><p><strong>思路2（sort排序法）：</strong><br>对数组按照递增顺序进行排序，取前k个元素。</p><p>时间复杂度O(nlogn), 空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_least_numbers</span>(<span class="params">self, nums, k</span>):</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sorted</span>(nums)[:k]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>]</span><br><span class="line">    k = <span class="number">4</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().get_least_numbers(nums, k))</span><br></pre></td></tr></tbody></table></figure><pre><code>[1, 2, 3, 4]</code></pre><h2 id="41-1-数据流中的中位数">41.1 数据流中的中位数</h2><h3 id="题目描述-14">题目描述</h3><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[5,2,3,4,1,6,7,0,8]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5.00, 3.50, 3.00, 3.50, 3.00, 3.50, 4.00, 3.50, 4.00]</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-15">题解</h3><p><strong>思路1（插入排序）：</strong><br>使用插入排序的思路，对每个输入的元素，遍历已经有序的数组，将其插入到属于它的位置。</p><p>插入的时间复杂度是O(n)，获取中位数的时间复杂度是O(1)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.val = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.val) == <span class="number">0</span>:</span><br><span class="line">            self.val.append(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(self.val):</span><br><span class="line">                <span class="keyword">if</span> num &lt;= self.val[i]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            self.val.insert(i, num)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_median</span>(<span class="params">self</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(self.val)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> self.val[n // <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.val[n // <span class="number">2</span>] + self.val[n // <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2.0</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    s.insert(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">7</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">8</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br></pre></td></tr></tbody></table></figure><pre><code>53.533.533.543.54</code></pre><h3 id="题解-16">题解</h3><p><strong>思路2（插入排序）：</strong><br>中位数是数组中间的数字或两个数字的均值，他是数组较小的一半元素中最大的一个，同时也是较大的一半元素中最小的一个，因此可以使用堆排序。约定奇数个元素时取大顶堆的顶部值，偶数个元素时取两堆顶的平均值。</p><p>插入的时间复杂度是O(logn)，获取中位数的时间复杂度是O(1)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.<span class="built_in">max</span> = []</span><br><span class="line">        self.<span class="built_in">min</span> = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        heapq.heappush(self.<span class="built_in">min</span>, (-<span class="number">1</span> * num))</span><br><span class="line">        heapq.heappush(self.<span class="built_in">max</span>, -<span class="number">1</span> * self.<span class="built_in">min</span>[<span class="number">0</span>])</span><br><span class="line">        heapq.heappop(self.<span class="built_in">min</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">min</span>) &lt; <span class="built_in">len</span>(self.<span class="built_in">max</span>):</span><br><span class="line">            heapq.heappush(self.<span class="built_in">min</span>, -<span class="number">1</span> * self.<span class="built_in">max</span>[<span class="number">0</span>])</span><br><span class="line">            heapq.heappop(self.<span class="built_in">max</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_median</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">min</span>) &gt; <span class="built_in">len</span>(self.<span class="built_in">max</span>):</span><br><span class="line">            <span class="keyword">return</span> self.<span class="built_in">min</span>[<span class="number">0</span>] * -<span class="number">1.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (-<span class="number">1</span> * self.<span class="built_in">min</span>[<span class="number">0</span>] + self.<span class="built_in">max</span>[<span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    s.insert(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">7</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br><span class="line">    s.insert(<span class="number">8</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.get_median())</span><br></pre></td></tr></tbody></table></figure><pre><code>5.03.53.03.53.03.54.03.54.0</code></pre><h2 id="41-2-字符流中第一个不重复的字符">41.2 字符流中第一个不重复的字符</h2><h3 id="题目描述-15">题目描述</h3><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">"google"</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">"ggg#ll"</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-17">题解</h3><p><strong>思路（哈希表）：</strong><br>使用哈希表统计字符出现的次数，在insert函数中对输入的字符，加到字符串最后，然后统计出现次数。在first_appearing_once函数中遍历该字符串，对于每个字符查找哈希表，返回第一个计数为1的字符，如果遍历完字符串后都没，则返回#。</p><p>插入的时间复杂度是O(1)，查询的时间复杂度是O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.strs = <span class="string">""</span></span><br><span class="line">        self.hash_map = <span class="built_in">dict</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, char</span>):</span></span><br><span class="line">        self.strs += char</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> self.hash_map:</span><br><span class="line">            self.hash_map[char] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hash_map[char] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_appearing_once</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.strs:</span><br><span class="line">            <span class="keyword">if</span> self.hash_map[c] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> c</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'#'</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    s.insert(<span class="string">"g"</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.first_appearing_once())</span><br><span class="line">    s.insert(<span class="string">"o"</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.first_appearing_once())</span><br><span class="line">    s.insert(<span class="string">"o"</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.first_appearing_once())</span><br><span class="line">    s.insert(<span class="string">"g"</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.first_appearing_once())</span><br><span class="line">    s.insert(<span class="string">"l"</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.first_appearing_once())</span><br><span class="line">    s.insert(<span class="string">"e"</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.first_appearing_once())</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>ggg#ll</code></pre><h2 id="59-滑动窗口的最大值">59. 滑动窗口的最大值</h2><h3 id="题目描述-16">题目描述</h3><p>给定一个长度为n的数组num和滑动窗口的大小size，找出所有滑动窗口里数值的最大值。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[2, 3, 4, 2, 6, 2, 5, 1], 3</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[4, 4, 6, 6, 6, 5]</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-18">题解</h3><p><strong>思路（暴力法）：</strong><br>直接遍历数组，遍历起始位置为0，终止位置为n-size，求取该区间最大值即可</p><p>时间复杂度O(mn)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_in_windows</span>(<span class="params">self, nums, size</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt; size <span class="keyword">or</span> size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - size + <span class="number">1</span>):</span><br><span class="line">            res.append(<span class="built_in">max</span>(nums[i: i + size]))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">    size = <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().max_in_windows(nums, size))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>[4, 4, 6, 6, 6, 5]</code></pre><h2 id="参考文章-9">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 栈队列堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer-数组与矩阵专题</title>
      <link href="/posts/54318.html"/>
      <url>/posts/54318.html</url>
      
        <content type="html"><![CDATA[<h2 id="3-数组中重复的数字">3. 数组中重复的数字</h2><h3 id="题目描述-5">题目描述</h3><p>在一个长度为n的数组里，所有数字在0到n-1的范围内。数组中某些数字是重复的，但是不知道有几个数字重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[2, 3, 1, 0, 2, 5]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-5">题解</h3><p><strong>思路1（位置重排）：</strong><br>数组长度在0到n-1的范围内，如果数字没有重复，则这些数字排序后将会和下标一一对应。因此，可遍历数组，每次检查数字与下标是否一致，一致说明它在属于它的位置上，如果不一致则将其交换到该数字作为下标的位置上，如果交换过程中，那个位置已经出现等于它下标的数字，则出现了重复。</p><p>时间复杂度 O(n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20220421/397721558_1650511844449/985457EF766F228F555A31DC0363FE81" alt="位置重排"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">duplicate</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == i:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[i] == nums[nums[i]]:</span><br><span class="line">                    <span class="keyword">return</span> nums[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nums[nums[i]], nums[i] = nums[i], nums[nums[i]]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="built_in">print</span>(Solution().duplicate(nums))            </span><br></pre></td></tr></tbody></table></figure><pre><code>2</code></pre><p><strong>思路2（哈希表）：</strong><br>使用哈希表记录元素出现的次数，如果遇到元素已经在哈希表上出现过，则它就重复了。</p><p>时间复杂度 O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_duplicate</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        hash_map = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> hash_map:</span><br><span class="line">                <span class="keyword">return</span> num</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hash_map[num] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="built_in">print</span>(Solution().is_duplicate(nums))            </span><br></pre></td></tr></tbody></table></figure><pre><code>2</code></pre><h2 id="4-二维数组中的查找">4. 二维数组中的查找</h2><h3 id="题目描述-6">题目描述</h3><p>给定一个二维数组，其每一行从左到右递增排序，从上到下也是递增排序。给定一个数，判断这个数是否在二维数组中。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">Input:</span><br><span class="line">array = [</span><br><span class="line">  [1,2,8,9],</span><br><span class="line">  [2,4,9,12],</span><br><span class="line">  [4,7,10,13],</span><br><span class="line">  [6,8,11,15]</span><br><span class="line">]</span><br><span class="line">target = 7</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">True</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-6">题解</h3><p><strong>思路（二分查找）：</strong><br>根据题意，二维数组的左下元素要大于它上方的元素，小于它右方的元素，而右上元素要大于它左方的元素，小于它下方的元素，利用此心智，将查找部分分成一个大区间和一个小区间。先获取数组的两个边长，判断特殊情况，然后以左下角元素为起点，若它是小于目标元素，则往右移动索引，若大于目标元素，则向上移动索引，如果移动到数组边界也没找到，则说明数组中不存在目标元素。</p><p>时间复杂度 O(m + n)，空间复杂度O(1)</p><p><img src="https://uploadfiles.nowcoder.com/images/20210727/397721558_1627369615572/81B83FAE4B34DCEFE9C1EB670AE1CCB0" alt="二分查找"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_target</span>(<span class="params">self, target, array</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(array) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(array[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        row, col = <span class="built_in">len</span>(array), <span class="built_in">len</span>(array[<span class="number">0</span>])</span><br><span class="line">        i, j = row - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &lt; col:</span><br><span class="line">            <span class="keyword">if</span> target == array[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> target &lt; array[i][j]:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    array = [</span><br><span class="line">      [<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">      [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">12</span>],</span><br><span class="line">      [<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>],</span><br><span class="line">      [<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">15</span>]</span><br><span class="line">    ]</span><br><span class="line">    target = <span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().find_target(target, array))</span><br></pre></td></tr></tbody></table></figure><pre><code>True</code></pre><h2 id="5-替换空格">5. 替换空格</h2><h3 id="题目描述-7">题目描述</h3><p>将一个字符串中的空格替换成"%20"</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">"We Are Happy"</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">"We%20Are%20Happy"</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-7">题解</h3><p><strong>思路（字符串相加）</strong>：<br>遍历字符串，如果字符为空格，则替换成%20，如果不是，则直接复制。</p><p><img src="https://uploadfiles.nowcoder.com/images/20210929/397721558_1632892080952/E442EF47D02F00479CB49CA6A2F75337" alt="字符串相加"></p><p>时间复杂度 O(n)，空间复杂度O(n)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replace_space</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        res = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">" "</span>:</span><br><span class="line">                res += <span class="string">"%20"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += ch</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = <span class="string">"We Are Happy"</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().replace_space(s))</span><br></pre></td></tr></tbody></table></figure><pre><code>We%20Are%20Happy</code></pre><h2 id="29-顺时针打印矩阵">29. 顺时针打印矩阵</h2><h3 id="题目描述-8">题目描述</h3><p>按照顺时针的方向，从外到里打印矩阵的值。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1, 2, 3, 4],</span><br><span class="line">  [5, 6, 7, 8],</span><br><span class="line">  [9, 10, 11, 12],</span><br><span class="line">  [13, 14, 15, 16]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-8">题解</h3><p><strong>思路（模拟）：</strong><br>一层一层从外到里打印，观察可知每一层打印都有相同的处理方式，唯一不同的是上下左右边界的不同。打印顺序为：从左到右打印一行-&gt;从上到下打印一行-&gt;从右到左打印一行-&gt;从下到上打印一行。</p><p>时间复杂度O(mn)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_matrix</span>(<span class="params">self, matrix</span>):</span></span><br><span class="line">        res = []</span><br><span class="line">        r1, r2, c1, c2 = <span class="number">0</span>, <span class="built_in">len</span>(matrix) - <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">len</span>(matrix[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> r1 &lt;= r2 <span class="keyword">and</span> c1 &lt;= c2:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(c1, c2 + <span class="number">1</span>):</span><br><span class="line">                res.append(matrix[r1][i])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(r1 + <span class="number">1</span>, r2 + <span class="number">1</span>):</span><br><span class="line">                res.append(matrix[j][c2])</span><br><span class="line">            <span class="keyword">if</span> r1 != r2:</span><br><span class="line">                <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(c2 - <span class="number">1</span>, c1 - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                    res.append(matrix[r2][w])</span><br><span class="line">            <span class="keyword">if</span> c1 != c2:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(r2 - <span class="number">1</span>, r1, -<span class="number">1</span>):</span><br><span class="line">                    res.append(matrix[k][c1])</span><br><span class="line">            r1 += <span class="number">1</span></span><br><span class="line">            r2 -= <span class="number">1</span></span><br><span class="line">            c1 += <span class="number">1</span></span><br><span class="line">            c2 -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    matrix = [</span><br><span class="line">      [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">      [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">      [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">      [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="built_in">print</span>(Solution().print_matrix(matrix))</span><br><span class="line">                </span><br></pre></td></tr></tbody></table></figure><pre><code>[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]</code></pre><h2 id="50-第一个只出现一次的字符">50. 第一个只出现一次的字符</h2><h3 id="题目描述-9">题目描述</h3><p>在一个长为n的字符串中找到第一个只出现一次的字符，并返回它的位置，如果没有则返回-1。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">"google"</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">4</span><br></pre></td></tr></tbody></table></figure><h3 id="题解-9">题解</h3><p><strong>思路（哈希表）：</strong><br>首先遍历字符串，使用哈希表对每个字符出现次数进行统计，然后再遍历字符，遇到哈希表统计次数为1的字符就是第一个只出现一次的字符。</p><p>时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_not_repeating_char</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        hash_map = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> hash_map:</span><br><span class="line">                hash_map[s] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hash_map[s] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">            <span class="keyword">if</span> hash_map[strs[i]] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    strs = <span class="string">"google"</span></span><br><span class="line">    <span class="built_in">print</span>(Solution().first_not_repeating_char(strs))</span><br><span class="line">                </span><br></pre></td></tr></tbody></table></figure><pre><code>4</code></pre><h2 id="参考文章-7">参考文章</h2><p>本文是笔者通过下列网站学习的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3/%E5%89%91%E6%8C%87%20Offer%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">【CS-Notes剑指Offer题解】</a></li><li><a href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">【牛客网剑指Offer】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组与矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法</title>
      <link href="/posts/22092.html"/>
      <url>/posts/22092.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-选择排序">1. 选择排序</h2><p>思路：首先从序列中选择最小元素，将它与序列的第一个元素交换位置，再从序列剩下的元素中选择最小的元素，将它与序列的第二个元素交换位置，不断进行这样的操作，直到将整个序列排序。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="选择排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            idx = i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> arr[idx] &gt; arr[j]:</span><br><span class="line">                    idx = j</span><br><span class="line">            <span class="keyword">if</span> idx != i:</span><br><span class="line">                arr[idx], arr[i] = arr[i], arr[idx]</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().select_sort(arr)}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="2-冒泡排序">2. 冒泡排序</h2><p>思路：从左到右不断交换序列相邻逆序的元素，在一轮的循环之后，可以让未排序的最大元素上浮到右侧，持续每次对越来越少的元素重复上面的步骤。优化：在一轮循环中，如果没有发生交换，则说明序列已经是有序的，此时可以直接退出。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="冒泡排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n - i):</span><br><span class="line">                <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">                    arr[j],  arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                 <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前: <span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().bubble_sort(arr)}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>排序前: [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="3-插入排序">3. 插入排序</h2><p>思路：插入元素时，在左侧已排序序列中从后到前扫描，找到相应位置并插入，插入到左侧已经排序的序列中，使得插入之后左侧序列依旧有序。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="插入排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> arr[j] &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">                    arr[j], arr[j - <span class="number">1</span>] = arr[j - <span class="number">1</span>], arr[j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().insert_sort(arr)}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="4-希尔排序">4. 希尔排序</h2><p>思路：对于大规模的序列，插入排序很慢，因为它只能交换相邻元素，每次只能将逆序数量减1。希尔排序先将整个待排序的序列分割为若干个子序列分别进行直接插入排序，通过交换不相邻的元素，每次减少的逆序数量大于1。希尔排序使用插入排序对间隔h的序列进行排序，通过不断减少h，最后令h=1，可以使整个序列有序。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        h = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> h &lt; n // <span class="number">3</span>:</span><br><span class="line">            h = <span class="number">3</span> * h + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> h &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h, n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, h - <span class="number">1</span>, -h):</span><br><span class="line">                    <span class="keyword">if</span> arr[j] &lt; arr[j - h]:</span><br><span class="line">                        arr[j], arr[j - h] = arr[j - h], arr[j]</span><br><span class="line">            h = h // <span class="number">3</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().shell_sort(arr)}</span>"</span>)</span><br><span class="line">                    </span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="5-归并排序">5. 归并排序</h2><p>思路：归并排序采用的是分治法，即将序列分为两部分，分别进行排序，然后归并起来。首先申请空间用来存放合并后的序列，其大小为两个已排序序列之和，然后设定两个指针，分别指向为两个已排序序列的起始位置，比较两个指针所指向的元素，选择相对较小的元素存入合并空间，并移动指针到下一个位置，重复上述操作直到某一指针到达序列尾，将另一序列剩下的所有元素直接复制到合并序列尾。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif" alt="归并排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        mid_idx = n // <span class="number">2</span></span><br><span class="line">        left, right = arr[:mid_idx], arr[mid_idx:]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.merge(self.merge_sort(left), self.merge_sort(right))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, left, right</span>):</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">                result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> left:</span><br><span class="line">            result += left</span><br><span class="line">        <span class="keyword">if</span> right:</span><br><span class="line">            result += right</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().merge_sort(arr)}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="6-快速排序">6. 快速排序</h2><p>思路：快速排序通过从数列中挑出一个元素作为基准，将序列分为两个子序列，左子序列所有元素小于等于切分元素，右子序列所有元素大于等于切分元素，然后再将这两个子序列切分排序重复上述操作，最终得到排序好的序列。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="快速排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">self, arr, left_idx, right_idx</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left_idx &lt; right_idx:</span><br><span class="line">            partition_idx = self.partition(arr, left_idx, right_idx)</span><br><span class="line">            self.quick_sort(arr, left_idx, partition_idx - <span class="number">1</span>)</span><br><span class="line">            self.quick_sort(arr, partition_idx + <span class="number">1</span>, right_idx)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">self, arr, left_idx, right_idx</span>):</span></span><br><span class="line">        pivot = arr[right_idx]</span><br><span class="line">        i = left_idx - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(left_idx, right_idx):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt;= pivot:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">        arr[i + <span class="number">1</span>], arr[right_idx] = arr[right_idx], arr[i + <span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().quick_sort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span>)}</span>"</span>)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="7-堆排序">7. 堆排序</h2><p>思路：利用堆这种数据结构所设计的一种排序算法，堆是一棵完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）其父节点，即大顶堆（小顶堆）。把最大元素和当前堆中序列的最后一个元素交换位置，并且不删除它。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif" alt="堆排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        self.length = <span class="built_in">len</span>(arr)</span><br><span class="line">        self.build_max_heap(arr)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_max_heap</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.length // <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self.heapify(arr, i)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span>(<span class="params">self, arr, i</span>):</span></span><br><span class="line">        left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">        largest = i</span><br><span class="line">        <span class="keyword">if</span> left &lt; self.length <span class="keyword">and</span> arr[left] &gt; arr[largest]:</span><br><span class="line">            largest = left</span><br><span class="line">        <span class="keyword">if</span> right &lt; self.length <span class="keyword">and</span> arr[right] &gt; arr[largest]:</span><br><span class="line">            largest = right</span><br><span class="line">        <span class="keyword">if</span> largest != i:</span><br><span class="line">            arr[i], arr[largest] = arr[largest], arr[i]</span><br><span class="line">            self.heapify(arr, largest)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.length - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            arr[<span class="number">0</span>], arr[i] = arr[i], arr[<span class="number">0</span>]</span><br><span class="line">            self.length -= <span class="number">1</span></span><br><span class="line">            self.heapify(arr, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution(arr).heap_sort(arr)}</span>"</span>)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="8-计数排序">8. 计数排序</h2><p>思路：核心在于将输入的数据值转化为键存储在额外开辟的数组空间，先找出待排序数组中最大和最小的元素，统计数组中每个值为i的元素出现的次数，存入数组的第i项，对所有的计数累加，反向填充目标数组，将每个元素i放在新数组的第i项，每放一个元素就将对应位置减去1。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/countingSort.gif" alt="计数排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counting_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        max_value = <span class="built_in">max</span>(arr)</span><br><span class="line">        bucket = [<span class="number">0</span>] * (max_value + <span class="number">1</span>)</span><br><span class="line">        sort_idx = <span class="number">0</span></span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> bucket[arr[i]]:</span><br><span class="line">                bucket[arr[i]] = <span class="number">0</span></span><br><span class="line">            bucket[arr[i]] += <span class="number">1</span> </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(max_value + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">while</span> bucket[j] &gt; <span class="number">0</span>:</span><br><span class="line">                arr[sort_idx] = j</span><br><span class="line">                sort_idx += <span class="number">1</span></span><br><span class="line">                bucket[j] -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().counting_sort(arr)}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="9-桶排序">9. 桶排序</h2><p>思路：桶排序是计数排序的升级版，利用了函数的映射关系。需要注意，在额外空间充足的情况下，尽量增大桶的数量，尽量使用映射函数能够将n个数据均匀的分配到k个桶中。</p><p>元素分布在桶中：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_1.svg_.png" alt="桶排序-a"></p><p>元素在每个桶中排序:</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_2.svg_.png" alt="桶排序-b"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        max_value = <span class="built_in">max</span>(arr)</span><br><span class="line">        bucket = {i: [] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_value + <span class="number">1</span>)}</span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            num = arr[i]</span><br><span class="line">            bucket[num].append(num)</span><br><span class="line">        arr = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_value + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> bucket[i]:</span><br><span class="line">                arr += <span class="built_in">sorted</span>(bucket[i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().bucket_sort(arr)}</span>"</span>)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="10-基数排序">10. 基数排序</h2><p>思路：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/radixSort.gif" alt="基数排序"></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        max_value = <span class="built_in">max</span>(arr)</span><br><span class="line">        iter_cnt = <span class="built_in">len</span>(<span class="built_in">str</span>(max_value))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iter_cnt):</span><br><span class="line">            bucket = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> arr:</span><br><span class="line">                idx = (n // <span class="number">10</span> ** i) % <span class="number">10</span></span><br><span class="line">                bucket[idx].append(n)</span><br><span class="line">            arr.clear()</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> bucket:</span><br><span class="line">                arr += b</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序前：<span class="subst">{arr}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"排序后：<span class="subst">{Solution().radix_sort(arr)}</span>"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><pre><code>排序前：[3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]排序后：[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</code></pre><h2 id="11-小结">11. 小结</h2><table><thead><tr><th>排序算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>选择排序</td><td>×</td><td>N^2</td><td>1</td><td></td></tr><tr><td>冒泡排序</td><td>√</td><td>N^2</td><td>1</td><td></td></tr><tr><td>插入排序</td><td>√</td><td>N^2</td><td>1</td><td>时间复杂度和初始顺序有关</td></tr><tr><td>希尔排序</td><td>×</td><td>NlogN</td><td>1</td><td>改进版插入排序</td></tr><tr><td>归并排序</td><td>√</td><td>NlogN</td><td>N</td><td></td></tr><tr><td>快速排序</td><td>×</td><td>NlogN</td><td>logN</td><td></td></tr><tr><td>堆排序</td><td>×</td><td>NlogN</td><td>1</td><td>无法利用局部性原理</td></tr><tr><td>计数排序</td><td>√</td><td>n + k</td><td>k</td><td></td></tr><tr><td>桶排序</td><td>√</td><td>n + k</td><td>n + k</td><td></td></tr><tr><td>基数排序</td><td>√</td><td>n x k</td><td>n + k</td><td></td></tr></tbody></table><h2 id="参考文章-8">参考文章</h2><p>本文是笔者通过下列网站学习排序算法的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><ol><li><a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.html">【CS-Notes】</a></li><li><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">【菜鸟教程排序算法】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令记录</title>
      <link href="/posts/13057.html"/>
      <url>/posts/13057.html</url>
      
        <content type="html"><![CDATA[<h2 id="仓库">仓库</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 在当前目录初始化一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 从远程下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="配置">配置</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name "[your_name]"</span><br><span class="line">$ git config [--global] user.email "[your_email]"</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="增加-删除文件">增加/删除文件</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入缓存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="代码提交">代码提交</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 提交缓存区到仓库区</span><br><span class="line">$ git commit -m "[message]"</span><br><span class="line"></span><br><span class="line"># 提交缓存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] .. -m "[message]"</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，提到上一次的提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m "[message]"</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="分支">分支</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit-id]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit-id]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [remote-branch]</span><br><span class="line">$ git branch -dr [remote-branch]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="标签">标签</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag-name]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag-name] [commit-id]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag-name]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tag-name]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag-name]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag-name]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag-name]</span><br></pre></td></tr></tbody></table></figure><h2 id="查看信息">查看信息</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 根据关键词搜索提交历史</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其“提交说明”必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git watchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一个diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件时什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示你今天写了多少行代码</span><br><span class="line">$ git diff --shortstate "@{0 day ago}"</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit-id]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="远程同步">远程同步</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [name] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="撤销">撤销</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置缓存区和工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置缓存区，但工作区不变</span><br><span class="line">$ git reset [commit-id]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置缓存区和工作区，与指定comiit一致</span><br><span class="line">$ git reset --hard [commit-id]</span><br><span class="line"></span><br><span class="line"># 重置当前指针为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit-id]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit-id]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，并且保存</span><br><span class="line">$ git stash save "tag"</span><br><span class="line"></span><br><span class="line"># 将保存的未提交的变化移入工作区</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> Git命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语言进阶学习笔记</title>
      <link href="/posts/16133.html"/>
      <url>/posts/16133.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-特性">1. 特性</h2><p><strong>特性（Attribute）是一种用于在程序运行时传递各种元素（例如类、方法、结构、枚举等）行为信息的声明性代码</strong>。使用特性可以将元数据（例如编译器指令、注释、描述、方法和类等信息）添加到程序中。<strong>.Net Framework</strong> 提供了两种类型的特性，分别是预定义特性和自定义特性。</p><p>在C#中，特性具有以下属性：</p><ul><li>使用特性可以向程序中添加元数据，元数据是指程序中各种元素的相关信息，所有.NET程序中都包含一组指定的元数据；</li><li>可以将一个或多个特性应用于整个程序、模块或者较小的程序元素（例如类或属性）中；</li><li>特性可以像方法和属性一样接收自变量；</li><li>程序可使用反射来检查自己的元数据或其他程序中的元数据</li></ul><p>定义特性的语法如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">[attribute(positional_parameters, name_parameter=value, ...)]</span><br><span class="line">element</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>[]</code>中用来定义特性的名称和值，<code>positional_parameters</code>用来指定基本信息，<code>name_parameter</code>用来指定可选信息</p><h3 id="1-1-预定义特性">1.1 预定义特性</h3><p><strong>.Net Framework</strong>中提供了三个预定义的属性：<code>AttributeUsage</code>、<code>Conditional</code>和<code>Obsolete</code>。</p><p><strong>AttributeUsage</strong></p><p>预定义特性<code>AttributeUsage</code>用来描述如何使用自定义特性类，其中定义了可以引用特性的项目类型。其语法如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">[AttributeUsage(</span><br><span class="line">    validon,</span><br><span class="line">    AllowMultiple = allowmultiple,</span><br><span class="line">    Inherited = inherited</span><br><span class="line">)]</span><br></pre></td></tr></tbody></table></figure><ul><li>参数<code>validon</code>用来定义特性可被放置的语言元素，它是枚举器<strong>AttributeTargets</strong>的值的集合，默认是<strong>AttributeTargets.All</strong></li><li>参数<code>allowmultiple</code>（可选参数）用来为该特性的<strong>AllowMultiple</strong>属性（property）提供一个布尔值，默认为false，单用的，如果为true表示多用的</li><li>参数<code>inherited</code>（可选参数）用来对该特性的Inherited属性（property）提供一个布尔值，默认为false，不被继承的，如果为true表示可被派生类继承</li></ul><p>示例代码：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class |</span></span><br><span class="line"><span class="meta">                AttributeTargets.Constructor | </span></span><br><span class="line"><span class="meta">                AttributeTargets.Field | </span></span><br><span class="line"><span class="meta">                AttributeTargets.Method |</span></span><br><span class="line"><span class="meta">                AttributeTargets.Property,</span></span><br><span class="line"><span class="meta">                AllowMultiple=true)</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>Conditional</strong></p><p>预定义特性<code>Conditional</code>用来定义条件方法。<code>Conditional</code>属性通过测试条件编译符号来确定适用的条件，当运行到一个条件方法调用时，是否执行该调用，要根据出现该调用时是否已定义了此符号来确定。使用<code>Conditional</code>是封闭<code>#if</code>和<code>#endif</code>内部方法的替代方法，它更整洁、别致、减少出错的机会。其语法如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">[Conditional(conditionalSymbol)]</span><br></pre></td></tr></tbody></table></figure><p>示例代码：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConditionalTest</span></span><br><span class="line">    {</span><br><span class="line">        [<span class="meta">Conditional(<span class="meta-string">"DEBUG"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Func1</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            MyClass.Message(<span class="string">"Func1函数"</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        [<span class="meta">Conditional(<span class="meta-string">"BUG"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Func2</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            MyClass.Message(<span class="string">"Func2函数"</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            MyClass.Message(<span class="string">"Main函数"</span>);</span><br><span class="line">            Func1();</span><br><span class="line">            Func2();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Message</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(msg);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// Main函数</span></span><br><span class="line">    <span class="comment">// Func1函数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Obsolete</strong></p><p>预定义特性<code>Obsolete</code>用来标记不应该被使用的程序，可以使用它来通知编译器放弃某个目标元素。例如当你需要使用一个新方法来代替类中的某个旧方法时，就可以使用该特性将旧方法标记为<code>Obsolete</code>（过时）的并输出一条信息，来提示我们应该使用新方法替代旧方法。其语法格式如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">[Obsolete(message)]</span><br><span class="line"></span><br><span class="line">[Obsolete(message, iserror)]</span><br></pre></td></tr></tbody></table></figure><ul><li>参数<code>message</code>是一个用来描述项目为什么过时以及用什么替代的字符串</li><li>参数<code>iserror</code>是一个布尔值，默认值为false，如果设置为true，则编译器会把该项目当做一个错误</li></ul><p>示例代码：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ObsoleteTest</span></span><br><span class="line">    {</span><br><span class="line">        [<span class="meta">Obsolete(<span class="meta-string">"OldMethod已弃用，请改用NewMethod"</span>, true)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OldMethod</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"已弃用的函数"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">NewMethod</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"新定义的函数"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            OldMethod();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Main.cs(17,13): error CS0619: `Application.ObsoleteTest.OldMethod()' is obsolete: `OldMethod已弃用，请改用NewMethod'</span></span><br><span class="line">        <span class="comment">// Compilation failed: 1 error(s), 0 warnings</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-自定义特性">1.2 自定义特性</h3><p><strong>.Net Framework</strong>允许创建自定义特性，自定义特性不仅可以用于存储声明性的信息，还可以在运行时被检索。创建并使用自定义特性分为四个步骤：</p><ul><li>声明自定义特性</li><li>构建自定义特性</li><li>在目标程序上应用自定义特性</li><li>通过反射访问自定义特性</li></ul><p>最后一步涉及编写一个简单的程序来读取元数据以便查找各种符号。元数据是有关数据或用于描述其他数据信息的数据，该程序应在运行时使用反射来访问属性。</p><p><strong>声明自定义特性</strong></p><p>自定义特性应该继承System.Attribute类，如下所示：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line">[<span class="meta">AttributeUsage(</span></span><br><span class="line"><span class="meta">    AttributeTargets.All,</span></span><br><span class="line"><span class="meta">    AllowMultiple = true,</span></span><br><span class="line"><span class="meta">    Inherited = true</span></span><br><span class="line"><span class="meta">)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SomethingAttribute</span> : <span class="title">Attribute</span> {}</span><br></pre></td></tr></tbody></table></figure><p><strong>构建自定义特性</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SomethingAttribute</span> : <span class="title">Attribute</span> </span><br><span class="line">{</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> data;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">get</span> { <span class="keyword">return</span> name; }</span><br><span class="line">        <span class="keyword">set</span> { name = <span class="keyword">value</span>; }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Data</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">get</span> { <span class="keyword">return</span> data; }</span><br><span class="line">        <span class="keyword">set</span> { data = <span class="keyword">value</span>; }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomethingAttribute</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> data</span>)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>应用自定义特性</strong></p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-attr">[SomethingAttribute(<span class="string">"Amy"</span>, data = <span class="string">"Name is Amy"</span>)]</span></span><br><span class="line"><span class="selector-attr">[SomethingAttribute(<span class="string">"Tom"</span>, data = <span class="string">"Name is Tom"</span>)]</span></span><br><span class="line">class Test {}</span><br></pre></td></tr></tbody></table></figure><p><strong>访问自定义特性</strong></p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line">Type t = <span class="keyword">typeof</span>(Test);</span><br><span class="line"><span class="keyword">var</span> something = t.GetCustomAttributes(<span class="keyword">typeof</span>(SomethingAttribute), <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">foreach</span>(SomethingAttribute each <span class="keyword">in</span> something)</span><br><span class="line">{</span><br><span class="line">    Console.WriteLine(<span class="string">"Name: {0}"</span>, each.Name);</span><br><span class="line">    Console.WriteLine(<span class="string">"Data: {0}"</span>, each.Data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-反射">2. 反射</h2><p>**反射（Reflection）是指程序可以访问、检查、修改它本身行为或状态的一种能力。**反射中提供了用来描述程序集、模块和类型的对象，可以使用反射动态地创建类型的实例，并将类型绑定到现有对象，或者从现有对象中获取类型，然后调用其方法或访问其字段和属性。如果代码中使用了特性，也可以利用反射来访问。</p><h3 id="2-1-反射优缺点">2.1 反射优缺点</h3><p>优点：</p><ul><li>反射提高了程序的灵活性和扩展性</li><li>降低耦合性，提高自适应能力</li><li>运行程序创建和控制任何类的对象，无需提前硬编码目标类</li></ul><p>缺点：</p><ul><li>性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和扩展性要求高的系统框架上，普通程序不建议使用</li><li>使用反射会模糊程序内部逻辑，程序希望在源代码中看到程序逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂</li></ul><h3 id="2-2-反射用途">2.2 反射用途</h3><ul><li>允许在运行时查看特性信息</li><li>允许审查集合中的各种类型，以及实例化这些类型</li><li>允许延迟绑定的方法和属性</li><li>允许在运行时创建新类型，然后使用这些类型执行一些任务</li></ul><h3 id="2-3-查看元数据">2.3 查看元数据</h3><p>使用反射可以查看特性信息，<strong>System.Reflection</strong>类的 <strong>MemberInfo</strong> 对象需要被初始化，用于发现与类相关的特性，为此可以定义目标类的一个对象：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.All)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelpAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">string</span> Url;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Topic</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> topic;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        {</span><br><span class="line">            topic = <span class="keyword">value</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelpAttribute</span>(<span class="params"><span class="built_in">string</span> url</span>)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">this</span>.Url = url;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> topic;</span><br><span class="line">}</span><br><span class="line">[<span class="meta">HelpAttribute(<span class="meta-string">"Infomation to the class MyClass"</span>)</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            System.Reflection.MemberInfo info = <span class="keyword">typeof</span>(MyClass);</span><br><span class="line">            <span class="built_in">object</span>[] attributes = info.GetCustomAttributes(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; attributes.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                System.Console.WriteLine(attributes[i]);  <span class="comment">// HelpAttribute</span></span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="3-属性">3. 属性</h2><p><strong>属性（Property）是类、结构和接口的命名成员</strong>。类或结构中的成员变量或方法称为域，属性是域的扩展，且可以使用相同的语法来访问，他们使用访问器让私有域的值可被读写或操作。</p><p>属性不会确定存储位置，他们具有可读写或计算他们值的访问器。</p><p>例如，一个名为Student的类，带有age、name或code的私有域，我们不能在类的范围外直接访问这些域，但是可以拥有访问这些私有域的属性。</p><h3 id="3-1-get-set访问器">3.1 get/set访问器</h3><p>属性的访问器包括获取或写入属性的可执行语句，访问器可包含一个<strong>get访问器</strong>或一个<strong>set访问器</strong>，或者两种都包含。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> name = <span class="string">"NAN"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> age = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span> </span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            {</span><br><span class="line">                name = <span class="keyword">value</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 简写形式</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Name = "</span> + Name + <span class="string">", Age = "</span> + Age;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PropertiesTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">            t.Name = <span class="string">"Zhang"</span>;</span><br><span class="line">            t.Age = <span class="number">26</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"Teacher Info: {0}"</span>, t);</span><br><span class="line">            t.Age += <span class="number">1</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"Teacher Info: {0}"</span>, t);</span><br><span class="line">            <span class="comment">// Teacher Info: Name = Zhang, Age = 26</span></span><br><span class="line">            <span class="comment">// Teacher Info: Name = Zhang, Age = 27</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-抽象属性">3.2 抽象属性</h3><p>在抽象类中可以拥有抽象属性，这些属性会在派生类中实现。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">int</span> Age { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">Person</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Project { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="string">"NAN"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="string">"NAN"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> Age { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$"Project = <span class="subst">{Project}</span>, Name = <span class="subst">{Name}</span>, Age = <span class="subst">{Age}</span>"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">AbstractPropertiesTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> Teacher()</span><br><span class="line">            {</span><br><span class="line">                Project = <span class="string">"Math"</span>,</span><br><span class="line">                Name = <span class="string">"Zhang"</span>,</span><br><span class="line">                Age = <span class="number">26</span></span><br><span class="line">            };</span><br><span class="line">            Console.WriteLine(<span class="string">$"Teacher Info: <span class="subst">{t}</span>"</span>);</span><br><span class="line">            t.Age++;</span><br><span class="line">            Console.WriteLine(<span class="string">$"Teacher Info: <span class="subst">{t}</span>"</span>);</span><br><span class="line"><span class="comment">// Teacher Info: Project = Math, Name = Zhang, Age = 26</span></span><br><span class="line"><span class="comment">// Teacher Info: Project = Math, Name = Zhang, Age = 27</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-索引器">4. 索引器</h2><p><strong>索引器（Indexer）是类中的一个特殊成员，他能够让对象以类似数组的形式来操作</strong>，使程序看起来更直观、更易编写。索引器与属性类似，在定义索引器时同样会get和set访问器，不同的是，访问索引器需要提供相应的参数。</p><h3 id="4-1-索引器定义">4.1 索引器定义</h3><p>索引器允许对象使用下标的方式来访问，定义时，该类的行为会像一个虚拟数组一样，可以使用数组访问符<code>[ ]</code>来访问类的成员。</p><p>其语法为：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">element-type this[int index]</span><br><span class="line">{</span><br><span class="line">    // get访问器</span><br><span class="line">    get</span><br><span class="line">    {</span><br><span class="line">        // 返回index指定的值</span><br><span class="line">    }</span><br><span class="line">    // set访问器</span><br><span class="line">    set</span><br><span class="line">    {</span><br><span class="line">        // 设置index指定的值</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-索引器用途">4.2 索引器用途</h3><p>索引器实例数据分为更小的部分，并索引每部分，获取或设置每部分。索引器定义时不带名称，但带this关键字，它指向对象实例。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">IndexedNames</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>[] nameList = <span class="keyword">new</span> <span class="built_in">string</span>[size];</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">public</span> <span class="built_in">int</span> size = <span class="number">5</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IndexedNames</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            {</span><br><span class="line">                nameList[i] = <span class="string">"NAN"</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">string</span> tmp;</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size - <span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    tmp = nameList[index];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                    tmp = <span class="string">""</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> ( tmp );</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size - <span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    nameList[index] = <span class="keyword">value</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            IndexedNames names = <span class="keyword">new</span> IndexedNames();</span><br><span class="line">            names[<span class="number">0</span>] = <span class="string">"AAA"</span>;</span><br><span class="line">            names[<span class="number">1</span>] = <span class="string">"BBB"</span>;</span><br><span class="line">            names[<span class="number">2</span>] = <span class="string">"CCC"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; IndexedNames.size; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(names[i]);</span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// AAA</span></span><br><span class="line">        <span class="comment">// BBB</span></span><br><span class="line">        <span class="comment">// CCC</span></span><br><span class="line">        <span class="comment">// NAN</span></span><br><span class="line">        <span class="comment">// NAN</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-重载索引器">4.3 重载索引器</h3><p>索引器可以被重载，而且在声明索引器时也可以带多个参数，每个参数可以是不同的类型，另外，索引器的索引不必是整数，也可以是其他类型，例如字符串类型。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">IndexedNames</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>[] nameList = <span class="keyword">new</span> <span class="built_in">string</span>[size];</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">public</span> <span class="built_in">int</span> size = <span class="number">5</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IndexedNames</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            {</span><br><span class="line">                nameList[i] = <span class="string">"NAN"</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">string</span> tmp;</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size - <span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    tmp = nameList[index];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                    tmp = <span class="string">""</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> ( tmp );</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size - <span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    nameList[index] = <span class="keyword">value</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">string</span> name]</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; size)</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">if</span> (nameList[index] == name)</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">return</span> index;</span><br><span class="line">                    }</span><br><span class="line">                    index++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">var</span> names = <span class="keyword">new</span> IndexedNames();</span><br><span class="line">            names[<span class="number">0</span>] = <span class="string">"AAA"</span>;</span><br><span class="line">            names[<span class="number">1</span>] = <span class="string">"BBB"</span>;</span><br><span class="line">            names[<span class="number">2</span>] = <span class="string">"CCC"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; IndexedNames.size; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(names[i]);</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine(<span class="string">"'BBB'的索引为: {0}"</span>, names[<span class="string">"BBB"</span>]);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// AAA</span></span><br><span class="line">        <span class="comment">// BBB</span></span><br><span class="line">        <span class="comment">// CCC</span></span><br><span class="line">        <span class="comment">// NAN</span></span><br><span class="line">        <span class="comment">// NAN</span></span><br><span class="line">        <span class="comment">// 'BBB'的索引为: 1</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-委托">5. 委托</h2><p>**委托（Delegate）类似于C或C++中函数的指针，是存有对某个方法的引用的一种引用类型的变量。**引用可在运行时被改变。</p><p>委托特别用于实现事件和回调方法，所有的委托都派生自<strong>System.Delegate</strong>类。</p><h3 id="5-1-声明委托">5.1 声明委托</h3><p>委托声明决定了可由委托引用的方法。委托可指向一个与其具有相同标签的方法。</p><p>声明委托的语法如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">delegate <span class="tag">&lt;<span class="name">return</span> <span class="attr">type</span>&gt;</span> <span class="tag">&lt;<span class="name">delegate-name</span>&gt;</span> <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-实例化委托">5.2 实例化委托</h3><p>声明委托类型后，委托对象必须由<code>new</code>关键字来创建，且与一个特定的方法关联。当创建委托时，传递到new语句的参数就像方法调用一样书写，但是不带参数。</p><p>示例如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="comment">// 声明委托</span></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DelegateTest1</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num += p;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MulNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num *= q;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 实例化委托</span></span><br><span class="line">            NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">            NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MulNum);</span><br><span class="line">            <span class="comment">// 使用委托对象调用方法</span></span><br><span class="line">            nc1(<span class="number">25</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Value of Num: {0}"</span>, getNum());  <span class="comment">// Value of Num: 35</span></span><br><span class="line">            nc2(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Value of Num: {0}"</span>, getNum());  <span class="comment">// Value of Num: 175</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-委托多播">5.3 委托多播</h3><p>委托对象可以使用<code>+</code>运算符进行合并。一个合并委托调用它所合并的两个委托，只有同类型的委托才能被合并。<code>-</code>运算符可用于从合并的委托中移除组件委托。</p><p>使用委托合并或移除的操作，可以创建一个委托被调用时要调用的方法的调用类别，这称为委托的多播。</p><p>示例如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="comment">// 声明委托</span></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DelegateTest2</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num += p;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MulNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num *= q;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 实例化委托</span></span><br><span class="line">            NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">            NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MulNum);</span><br><span class="line">            NumberChanger nc = nc1 + nc2;</span><br><span class="line">            <span class="comment">// 调用多播</span></span><br><span class="line">            nc(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Value of Num: {0}"</span>, getNum());  <span class="comment">// Value of Num: 75</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-事件">6. 事件</h2><p><strong>事件（Event）基本上说是一个用户操作</strong>，例如按键、点击、鼠标移动等，或者<strong>是一些提示信息</strong>，如系统生成的通知。<strong>应用程序需要在事件发生时响应事件</strong>。C#中使用事件机制实现线程间的通信。</p><h3 id="6-1-声明事件">6.1 声明事件</h3><p>在类的内部声明事件，首先必须声明该事件的委托类型，如：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">LogHandler</span>(<span class="params"><span class="built_in">string</span> status</span>)</span>;</span><br></pre></td></tr></tbody></table></figure><p>然后，声明事件本身，使用<code>event</code>关键字：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> LogHandler EventLog;</span><br></pre></td></tr></tbody></table></figure><p>上面代码定义了一个名为<strong>EventLog</strong>的事件和一个名为<strong>LogHandler</strong>的委托，该事件在生成时会调用委托。</p><h3 id="6-2-使用事件">6.2 使用事件</h3><p>示例1：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyEvent</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 定义一个委托</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"></span>)</span>;</span><br><span class="line">        <span class="comment">// 定义一个事件</span></span><br><span class="line">        <span class="keyword">public</span> MyDelegate MyDelegateEvent;</span><br><span class="line">        <span class="comment">// 定义一个事件的触发函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnMyDelegateEvent</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (MyDelegateEvent != <span class="literal">null</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 执行事件</span></span><br><span class="line">                MyDelegateEvent();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">EventTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PutOutChar</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"I was fired"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PutOutChar2</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            COnsole.WriteLine(<span class="string">"I was fired too"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 实例化MyEvent类</span></span><br><span class="line">            MyEvent myEvent = <span class="keyword">new</span> MyEvent();</span><br><span class="line">            <span class="comment">// 注册一个事件</span></span><br><span class="line">            myEvent.MyDelegateEvent += <span class="keyword">new</span> MyEvent.MyDelegate(PutOutChar);</span><br><span class="line">            myEvent.MyDelegateEvent += <span class="keyword">new</span> MyEvent.MyDelegate(PutOutChar2); </span><br><span class="line">            <span class="comment">// 执行触发事件的函数</span></span><br><span class="line">            myEvent.OnMyDelegateEvent();</span><br><span class="line">            <span class="comment">// 解绑一个事件</span></span><br><span class="line">            myEvent.MyDelegateEvent -= <span class="keyword">new</span> MyEvent.MyDelegate(putOutChar);</span><br><span class="line">            <span class="comment">// 再次执行触发事件的函数</span></span><br><span class="line">            myEvent.OnMyDelegateEvent();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// I was fired</span></span><br><span class="line"><span class="comment">// I was fired too</span></span><br><span class="line"><span class="comment">// I was fired too</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>示例2：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 发布器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Publisher</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> <span class="keyword">value</span>;</span><br><span class="line">        <span class="comment">// 定义一个委托</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line">        <span class="comment">// 定义一个事件</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> MyDelegate MyEvent;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">value</span> = s;</span><br><span class="line">            <span class="comment">// 触发事件</span></span><br><span class="line">            MyEvent(<span class="keyword">value</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 订阅器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subscriber</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintF</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Publisher p = <span class="keyword">new</span> Publisher();</span><br><span class="line">            Subscriber s = <span class="keyword">new</span> Subscriber();</span><br><span class="line">            p.MyEvent += <span class="keyword">new</span> Publisher.MyDelegate(s.PrintF);</span><br><span class="line">            p.SetValue(<span class="string">"Hello"</span>);  <span class="comment">// Hello</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7-集合">7. 集合</h2><p><strong>集合（Collection）类是专门用于数据存储和检索的类，这些类提供了对栈（Stack）、队列（Queue）、列表（List）和哈希表（Hashtable）的支持。大多数集合类实现了相同的接口。</strong></p><p>集合类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等，这些类创建Object类的对象的集合，<strong>在C#在，Object类是所有数据类型的基类</strong>。</p><h3 id="7-1-动态数组ArrayList">7.1 动态数组ArrayList</h3><p><strong>动态数组ArrayList代表了可被单独索引的对象的有序集合</strong>，它基本上可以替代一个数组。与数组不同的是，可以使用索引在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。</p><p>下表为ArrayList类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Capacity</code></td><td>获取或设置ArrayList可包含的元素个数</td><td><code>Count</code></td><td>获取ArrayList中实际包含的元素个数</td></tr><tr><td><code>IsFixedSize</code></td><td>获取一个值，表示ArrayList是否具有固定大小</td><td><code>IsReadOnly</code></td><td>获取一个值，表示ArrayList是否只读</td></tr><tr><td><code>IsSynchronized</code></td><td>获取一个值，表示访问ArrayList是否同步（线程安全）</td><td><code>Item[Int32]</code></td><td>获取或设置指定索引处的元素</td></tr><tr><td><code>SyncRoot</code></td><td>获取一个对象用于同步访问ArrayList</td><td></td><td></td></tr></tbody></table><p>下表为ArrayList类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual int Add(object value);</code></td><td>在ArrayList的列表末尾添加一个对象</td><td><code>public virtual void AddRange(ICollection c);</code></td><td>在ArrayList的列表末尾添加ICollection的元素</td></tr><tr><td><code>public virtual void Clear();</code></td><td>在ArrayList中移除所有元素</td><td><code>public virtual bool Contains(object item);</code></td><td>判断某个元素是否存在ArrayList中</td></tr><tr><td><code>public virtual ArrayList GetRange(int index, int count);</code></td><td>返回一个ArrayList，表示源ArrayList中元素的子集</td><td><code>public virtual int IndexOf(object);</code></td><td>返回某个值在ArrayLust中第一次出现的索引，索引从零开始</td></tr><tr><td><code>public virtual void Insert(int index, object value);</code></td><td>在ArrayList指定索引处插入一个元素</td><td><code>public virtual void InsertRange(int index, ICollection c);</code></td><td>在ArrayList的指定索引处，插入某个集合的元素</td></tr><tr><td><code>public virtual void Remove(object obj);</code></td><td>从ArrayList中移除第一次出现的指定对象</td><td><code>public virtual void RemoveAt(int index);</code></td><td>移除ArrayList的指定索引处的元素</td></tr><tr><td><code>public virtual void RemoveRange(int index, int count);</code></td><td>在ArrayList中移除某个范围的元素</td><td><code>public virtual void Reverse();</code></td><td>逆转ArrayList在元素的顺序</td></tr><tr><td><code>public virtual void SetRange(int index, ICollection c);</code></td><td>复制某个集合的元素到ArrayList中某个范围的元素上</td><td><code>public virtual void Sort();</code></td><td>对ArrayList中的元素进行排序</td></tr><tr><td><code>public virtual void TrimToSize();</code></td><td>设置容量为ArrayList中元素的实际个数</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayListTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            ArrayList arrList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            arrList.Add(<span class="number">42</span>);</span><br><span class="line">            arrList.Add(<span class="number">35</span>);</span><br><span class="line">            arrList.Add(<span class="number">55</span>);</span><br><span class="line">            arrList.Add(<span class="number">29</span>);</span><br><span class="line">            arrList.Add(<span class="number">7</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Capacity: {0}"</span>, arrList.Capacity);  <span class="comment">// Capacity: 8</span></span><br><span class="line">            Console.WriteLine(<span class="string">"Count: {0}"</span>, arrList.Count); <span class="comment">// Count: 5</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> e <span class="keyword">in</span> arrList)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(e + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 42 35 55 29 7</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.Write(<span class="string">"Sorted: "</span>);</span><br><span class="line">            arrList.Sort();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> e <span class="keyword">in</span> arrList)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(e + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// Sorted: 7 29 35 42 55</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            arrList.Reverse();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> e <span class="keyword">in</span> arrList)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(e + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// Sorted: 55 42 35 29 7</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-2-哈希表Hashtable">7.2 哈希表Hashtable</h3><p><strong>哈希表Hashtable类代表了一系列基于键的哈希代码组织起来的键/值对</strong>。它是由键来访问集合中的元素。哈希表中的每一项都有一个键/值对，键用于访问集合中的项目。</p><p>下表为Hashtable类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Keys</code></td><td>获取一个ICollection，包含Hashtable中的键</td><td><code>Values</code></td><td>获取一个ICollection，包含Hashtable中的值</td></tr><tr><td><code>IsFixedSize</code></td><td>获取一个值，表示Hashtable是否具有固定大小</td><td><code>IsReadOnly</code></td><td>获取一个值，表示Hashtable是否只读</td></tr><tr><td><code>Count</code></td><td>获取Hashtable中实际包含的键值对个数</td><td><code>Item</code></td><td>获取或设置指定键相关的值</td></tr></tbody></table><p>下表为Hashtable类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual void Add(object key, object value)</code></td><td>向Hashtable添加一个带有指定键和值的元素</td><td><code>public  virtual void Clear()</code></td><td>从Hashtable中移除所有的元素</td></tr><tr><td><code>public virtual bool ContainsKey(object key)</code></td><td>判断Hashtable是否包含指定的键</td><td><code>public virtual bool ContainsValue(object value)</code></td><td>判断Hashtable是否包含指定的值</td></tr><tr><td><code>public virtual void Remove(object key);</code></td><td>从Hashtable移除带有指定的键的元素</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">HashtableTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Hashtable hashT = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            hashT.Add(<span class="string">"001"</span>, <span class="string">"AAA"</span>);</span><br><span class="line">            hashT.Add(<span class="string">"002"</span>, <span class="string">"BBB"</span>);</span><br><span class="line">            hashT.Add(<span class="string">"003"</span>, <span class="string">"CCC"</span>);</span><br><span class="line">            hashT.Add(<span class="string">"004"</span>, <span class="string">"DDD"</span>);</span><br><span class="line">            hashT.Add(<span class="string">"005"</span>, <span class="string">"EEE"</span>);</span><br><span class="line">            <span class="keyword">if</span> (hashT.ContainsValue(<span class="string">"FFF"</span>))</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"The 'BBB' is already in the table"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                hashT.Add(<span class="string">"006"</span>, <span class="string">"FFF"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 获取键的集合</span></span><br><span class="line">            ICollection keys = hashT.Keys;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> k <span class="keyword">in</span> keys)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(k + <span class="string">": "</span> + hashT[k]);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 002: BBB</span></span><br><span class="line"><span class="comment">// 001: AAA</span></span><br><span class="line"><span class="comment">// 003: CCC</span></span><br><span class="line"><span class="comment">// 004: DDD</span></span><br><span class="line"><span class="comment">// 006: FFF</span></span><br><span class="line"><span class="comment">// 005: EEE</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-3-排序列表SortedList">7.3 排序列表SortedList</h3><p><strong>排序列表SortedList类代表了一系列按照键来排序的键/值对，这些键值对可以通过键或索引来访问。</strong></p><p>排序列表是数组和哈希表的组合，包含了一个可使用键或索引访问各项的列表。如果使用索引访问各项，则它是一个动态数组，如果使用键访问各项，则它是一个哈希表。集合中的各项总是按键值排序。</p><p>下表为SortedList类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Capacity</code></td><td>获取或设置SortedList可包含的元素个数</td><td><code>Count</code></td><td>获取SortedList中实际包含的元素个数</td></tr><tr><td><code>IsFixedSize</code></td><td>获取一个值，表示SortedList是否具有固定大小</td><td><code>IsReadOnly</code></td><td>获取一个值，表示SortedList是否只读</td></tr><tr><td><code>Item</code></td><td>获取或设置SortedList中指定键相关的值</td><td><code>Keys</code></td><td>获取SortedList中的键</td></tr><tr><td><code>Values</code></td><td>获取SortedList中的值</td><td></td><td></td></tr></tbody></table><p>下表为ArrayList类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual int Add(object key, object Value);</code></td><td>向SortedList添加一个带有指定键和值的元素</td><td><code>public virtual bool ContainsKey(object key);</code></td><td>判断SortedList是否存在指定的键</td></tr><tr><td><code>public virtual void Clear();</code></td><td>在SortedList中移除所有元素</td><td><code>public virtual bool ContainsValue(object value);</code></td><td>判断SortedList是否存在指定的值</td></tr><tr><td><code>public virtual object GetByIndex(int index);</code></td><td>获取SortedList的指定索引处的值</td><td><code>public virtual object GetKey(int index);</code></td><td>获取SortedList的指定索引处的键</td></tr><tr><td><code>public virtual IList GetKeyList();</code></td><td>获取SortedList中的键</td><td><code>public virtual IList GetValueList();</code></td><td>获取SortedList中的值</td></tr><tr><td><code>public virtual void Remove(object key);</code></td><td>从SortedList中移除带有指定的键的元素</td><td><code>public virtual void RemoveAt(int index);</code></td><td>移除SortedList中指定索引处的元素</td></tr><tr><td><code>public virtual int IndexOfKey(object key);</code></td><td>返回SortedList中的指定键的索引</td><td><code>public virtual int IndexOfValue(object key);</code></td><td>返回SortedList中的指定值第一次出现的索引</td></tr><tr><td><code>public virtual void TrimToSize();</code></td><td>设置容量为SortedList中元素的实际个数</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SortedListTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            SortedList sortedL = <span class="keyword">new</span> SortedList();</span><br><span class="line">            sortedL.Add(<span class="string">"001"</span>, <span class="string">"AAA"</span>);</span><br><span class="line">            sortedL.Add(<span class="string">"002"</span>, <span class="string">"BBB"</span>);</span><br><span class="line">            sortedL.Add(<span class="string">"003"</span>, <span class="string">"CCC"</span>);</span><br><span class="line">            sortedL.Add(<span class="string">"004"</span>, <span class="string">"DDD"</span>);</span><br><span class="line">            sortedL.Add(<span class="string">"005"</span>, <span class="string">"EEE"</span>);</span><br><span class="line">            <span class="keyword">if</span> (sortedL.ContainsValue(<span class="string">"FFF"</span>))</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"The 'FFF' is already in the table"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                sortedL.Add(<span class="string">"006"</span>, <span class="string">"FFF"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 获取键的集合</span></span><br><span class="line">            ICollection keys = sortedL.Keys;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> k <span class="keyword">in</span> keys)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(k + <span class="string">": "</span> + sortedL[k]);</span><br><span class="line">            }</span><br><span class="line"><span class="comment">// 001: AAA</span></span><br><span class="line">            <span class="comment">// 002: BBB</span></span><br><span class="line"><span class="comment">// 003: CCC</span></span><br><span class="line"><span class="comment">// 004: DDD</span></span><br><span class="line"><span class="comment">// 005: EEE</span></span><br><span class="line">            <span class="comment">// 006: FFF</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-4-堆栈Stack">7.4 堆栈Stack</h3><p><strong>堆栈Stack代表了一个后进先出的对象集合</strong>，当需要对各项进行后进先出的访问时，则使用堆栈。当在列表中添加一项，称为推入元素，当从列表中移除一项时，称为弹出元素。</p><p>下表为Stack类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Count</code></td><td>获取Stack中包含的元素个数</td></tr></tbody></table><p>下表为Stack类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual void Clear();</code></td><td>从Stack中移除所有的元素</td><td><code>public virtual bool Contains(object obj);</code></td><td>判断某个元素是否在Stack中</td></tr><tr><td><code>public virtual object Peek();</code></td><td>返回在Stack的顶部的对象，但不移除它</td><td><code>public virtual object Pop();</code></td><td>移除并返回Stack的顶部的对象</td></tr><tr><td><code>public virtual void Push(object obj);</code></td><td>向Stack的顶部添加一个对象</td><td><code>public virtual object[] ToArray();</code></td><td>复制Stack到一个新的数组中</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StackTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Stack st = <span class="keyword">new</span> Stack();</span><br><span class="line">            st.Push(<span class="string">'A'</span>);</span><br><span class="line">            st.Push(<span class="string">'B'</span>);</span><br><span class="line">            st.Push(<span class="string">'C'</span>);</span><br><span class="line">            st.Push(<span class="string">'D'</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> st)</span><br><span class="line">            {</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>); </span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// D C B A</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            st.Push(<span class="string">'E'</span>);</span><br><span class="line">            st.Push(<span class="string">'F'</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"The next popable value in stack: {0}"</span>, st.Peek());</span><br><span class="line">            <span class="comment">// The next popable value in stack: F</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> st)</span><br><span class="line">            {</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>); </span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// F E D C B A</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            st.Pop();</span><br><span class="line">            st.Pop();</span><br><span class="line">            st.Pop();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> st)</span><br><span class="line">            {</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>); </span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// C B A</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-5-队列Queue">7.5 队列Queue</h3><p><strong>队列Queue代表了一个先进先出的对象集合</strong>，当需要对各项进行先进先出的访问时，则使用队列。当在列表中添加一项，称为入队，当从列表中移除一项，称为出队。</p><p>下表为Queue类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Count</code></td><td>获取Queue中包含的元素个数</td></tr></tbody></table><p>下表为Stack类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public virtual void Clear();</code></td><td>从Queue中移除所有的元素</td><td><code>public virtual bool Contains(object obj);</code></td><td>判断某个元素是否在Queue中</td></tr><tr><td><code>public virtual object Dequeue();</code></td><td>移除并返回在Queue的开头的对象</td><td><code>public virtual void Enqueue(object obj);</code></td><td>向Queue的末尾添加一个对象</td></tr><tr><td><code>public virtual object[] ToArray();</code></td><td>复制Queue到一个新的数组中</td><td><code>public virtual void TrimToSize();</code></td><td>设置容量为Queue中元素的实际个数</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">QueueTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Queue q = <span class="keyword">new</span> Queue();</span><br><span class="line">            q.Enqueue(<span class="string">'A'</span>);</span><br><span class="line">            q.Enqueue(<span class="string">'B'</span>);</span><br><span class="line">            q.Enqueue(<span class="string">'C'</span>);</span><br><span class="line">            q.Enqueue(<span class="string">'D'</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> q)</span><br><span class="line">            {</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>); </span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// A B C D</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            q.Enqueue(<span class="string">'E'</span>);</span><br><span class="line">            q.Enqueue(<span class="string">'F'</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> q)</span><br><span class="line">            {</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>); </span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// A B C D E F</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            q.Dequeue();</span><br><span class="line">            q.Dequeue();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> q)</span><br><span class="line">            {</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>); </span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// C D E F</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-6-点阵列BitArray">7.6 点阵列BitArray</h3><p><strong>点阵列BitArray类管理一个紧凑型的位值数组，它是由布尔值来表示，其中true表示位是开启的，false表示位是关闭的</strong>，当你需要存储位，但是事先不知道位数时，则使用点阵列。可以使用整型索引从点阵列集合中访问各项，索引从零开始。</p><p>下表为BitArray类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Count</code></td><td>获取BitArray中包含的元素个数</td></tr><tr><td><code>IsReadyOnly</code></td><td>获取一个值，表示BitArray是否只读</td></tr><tr><td><code>Item</code></td><td>获取或设置BitArray中指定位置的位的值</td></tr><tr><td><code>Length</code></td><td>获取或设置BitArray中的元素个数</td></tr></tbody></table><p>下表为BitArray类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public BitArray And(BitArray value);</code></td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位与操作</td><td><code>public bool Get(int index);</code></td><td>获取BitArray中指定位置的位的值</td></tr><tr><td><code>public BitArray Not();</code></td><td>把当前BitArray中的位值反转，以便设置为true的元素为false，设置为false的元素为true</td><td><code>public BitArray Or(BitArray value);</code></td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位或操作</td></tr><tr><td><code>public void Set(int index, bool value);</code></td><td>把BitArray中指定位置的位设置为指定的值</td><td><code>public void SetAll(bool value);</code></td><td>把BitArray中所有位设置为指定的值</td></tr><tr><td><code>public BitArray Xor(BitArray value);</code></td><td>对当前的BitArray中的元素和指定的BitArray中的相应元素执行按位异或操作</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">BitArrayTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            BitArray ba1 = <span class="keyword">new</span> BitArray(<span class="number">8</span>);</span><br><span class="line">            BitArray ba2 = <span class="keyword">new</span> BitArray(<span class="number">8</span>);</span><br><span class="line">            <span class="built_in">byte</span>[] a = {<span class="number">60</span>};</span><br><span class="line">            <span class="built_in">byte</span>[] b = {<span class="number">13</span>};</span><br><span class="line">            ba1 = <span class="keyword">new</span> BitArray(a);</span><br><span class="line">            ba2 = <span class="keyword">new</span> BitArray(b);</span><br><span class="line">            Console.WriteLine(<span class="string">"BitArray ba1: 60"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ba1.Count; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(<span class="string">"{0, -6}"</span>, ba1[i]);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// False False True True True True False False</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.WriteLine(<span class="string">"BitArray ba2: 13"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ba2.Count; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(<span class="string">"{0, -6}"</span>, ba2[i]);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// True False True True False False False False</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            BitArray ba3 = <span class="keyword">new</span> BitArray(<span class="number">8</span>);</span><br><span class="line">            ba3 = ba1.And(ba2);</span><br><span class="line">            Console.WriteLine(<span class="string">"BitArray ba3 After And Operation: 12"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ba3.Count; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(<span class="string">"{0, -6}"</span>, ba3[i]);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// False False True True False False False False</span></span><br><span class="line">            Console.WriteLine();    </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="8-泛型">8. 泛型</h2><p>**泛型Generic通过数据类型的代替参数编写类或方法，允许编写一个可以与任何类型一起工作的方法或类。**当编译器遇到类的构造函数或方法的函数调用时，它会生成代码来处理指定的数据类型。</p><p>示例如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyGenericArray</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> T[] array;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyGenericArray</span>(<span class="params"><span class="built_in">int</span> size</span>)</span></span><br><span class="line">        {</span><br><span class="line">            array = <span class="keyword">new</span> T[size + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">GetItem</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> array[index];</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetItem</span>(<span class="params"><span class="built_in">int</span> index, T <span class="keyword">value</span></span>)</span></span><br><span class="line">        {</span><br><span class="line">            array[index] = <span class="keyword">value</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GenericTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 声明一个整型数组</span></span><br><span class="line">            MyGenericArray&lt;<span class="built_in">int</span>&gt; intArray = <span class="keyword">new</span> MyGenericArray&lt;<span class="built_in">int</span>&gt;(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">// 设置值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                intArray.SetItem(i, i*i);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 获取值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(intArray.GetItem(i) + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 0 1 4 9 16</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="comment">// 声明一个字符数组</span></span><br><span class="line">            MyGenericArray&lt;<span class="built_in">char</span>&gt; charArray = <span class="keyword">new</span> MyGenericArray&lt;<span class="built_in">char</span>&gt;(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">// 设置值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                charArray.SetItem(i, (<span class="built_in">char</span>)(i+<span class="number">97</span>));</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 获取值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(charArray.GetItem(i) + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// a b c d e</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8-1-特性">8.1 特性</h3><p>使用泛型是一种增强程序功能的技术，具体表现在以下几个方面：</p><ul><li>有助于最大限度地重用代码、保护类型的安全以及提高性能</li><li>可以创建泛型集合类，使用泛型集合类来代替System.Collections中的集合类</li><li>可以创建自己的泛型接口、泛型类、泛型方法、泛型事件、泛型委托。</li><li>对泛型类进行约束以访问特定数据类型的方法</li><li>关于泛型数据类型中使用的类型的信息可运行时通过使用反射获取</li></ul><h3 id="8-2-泛型方法">8.2 泛型方法</h3><p>可以通过类型参数声明泛型方法。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GenericTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">ref</span> T l, <span class="keyword">ref</span> T r</span>)</span></span><br><span class="line">        {</span><br><span class="line">            T temp;</span><br><span class="line">            temp = l;</span><br><span class="line">            l = r;</span><br><span class="line">            r = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a, b;</span><br><span class="line">            <span class="built_in">char</span> c, d;</span><br><span class="line">            a = <span class="number">10</span>;</span><br><span class="line">            b = <span class="number">20</span>;</span><br><span class="line">            c = <span class="string">'M'</span>;</span><br><span class="line">            d = <span class="string">'N'</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}, b = {1}, c = {2}, d = {3}"</span>, a, b, c, d);</span><br><span class="line">            <span class="comment">// a = 10, b = 20, c = M, d = N</span></span><br><span class="line">            Swap&lt;<span class="built_in">int</span>&gt;(<span class="keyword">ref</span> a, <span class="keyword">ref</span> b);</span><br><span class="line">            Swap&lt;Char&gt;(<span class="keyword">ref</span> c, <span class="keyword">ref</span> d);</span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}, b = {1}, c = {2}, d = {3}"</span>, a, b, c, d);</span><br><span class="line">            <span class="comment">// a = 20, b = 10, c = N, d = M</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8-3-泛型委托">8.3 泛型委托</h3><p>可以通过类型参数定义泛型委托，如<code>delegate T NumberChange&lt;T&gt;(T n);</code></p><p>示例如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> T <span class="title">NumberChanger</span>&lt;<span class="title">T</span>&gt;(<span class="params">T n</span>)</span>;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GenericTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num += p;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num *= q;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetNum</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            NumberChanger&lt;<span class="built_in">int</span>&gt; nc1 = <span class="keyword">new</span> NumberChanger&lt;<span class="built_in">int</span>&gt;(AddNum);</span><br><span class="line">            NumberChanger&lt;<span class="built_in">int</span>&gt; nc2 = <span class="keyword">new</span> NumberChanger&lt;<span class="built_in">int</span>&gt;(MultNum);</span><br><span class="line">            nc1(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"num = {0}"</span>, GetNum());  <span class="comment">// num = 15</span></span><br><span class="line">            nc2(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"num = {0}"</span>, GetNum());  <span class="comment">// num = 75</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8-4-泛型约束">8.4 泛型约束</h3><p>在声明泛型方法或泛型类时，可以给泛型加上一定的约束来满足特定的一些条件</p><p>如：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Helper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>泛型限定条件：</p><ul><li>T : 结构 （类型参数必须是值类型，可以指定出Nullable以外的任何值类型）</li><li>T : 类 （类型参数必须是引用类型，包括任何类、接口、委托或数组类型）</li><li>T : new()  （类型参数必须具有无参数的公共构造函数，当与其他约束一起使用new()约束必须最后指定）</li><li>T : &lt;基类名&gt;  （类型参数必须是指定的基类或派生自指定的基类）</li><li>T : &lt;接口名称&gt;  （类型参数必须是指定的接口或实现指定的接口，可以指定多个接口约束。约束接口也可以是泛型的。</li></ul><h2 id="9-匿名方法">9. 匿名方法</h2><p><strong>匿名方法Anonymous methods提供了一种传递代码块作为委托参数的技术，匿名方法是没有名称只有主体的方法。在匿名方法中不需要指定返回类型，它是从方法主体内的return语句推断的。</strong></p><h3 id="9-1-匿名方法的语法">9.1 匿名方法的语法</h3><p>匿名方法是通过使用delegate关键字创建的委托实例来声明的。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line"></span><br><span class="line">NumberChanger nc = <span class="built_in">delegate</span>(<span class="built_in">int</span> x)</span><br><span class="line">{</span><br><span class="line">    Console.WriteLine(<span class="string">"Anonymous methods: {0}"</span>, x);  <span class="comment">// 匿名方法的主体</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>委托可以通过匿名函数调用，也可以通过普通有名称的函数调用，只需要向委托对象中传递相应的方法参数即可。注：匿名函数主体后面要以<code>;</code>结尾。</p><p>示例如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">AnonymousTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 命名函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num += p;</span><br><span class="line">            Console.WriteLine(<span class="string">"命名函数：{0}"</span>, num);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num *= q;</span><br><span class="line">            Console.WriteLine(<span class="string">"命名函数：{0}"</span>, num);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            NumberChanger nc = <span class="built_in">delegate</span>(<span class="built_in">int</span> x)</span><br><span class="line">            {</span><br><span class="line">            Console.WriteLine(<span class="string">"匿名函数：{0}"</span>, x);  </span><br><span class="line">            };</span><br><span class="line">            <span class="comment">// 使用匿名函数调用委托</span></span><br><span class="line">            nc(<span class="number">10</span>);  <span class="comment">// 匿名函数：10</span></span><br><span class="line">            <span class="comment">// 使用命名函数实例化委托</span></span><br><span class="line">            nc = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">            nc(<span class="number">5</span>);  <span class="comment">// 命名函数：15</span></span><br><span class="line">            nc = <span class="keyword">new</span> NumberChanger(MultNum);</span><br><span class="line">            nc(<span class="number">5</span>);  <span class="comment">// 命名函数：75</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="10-不安全代码">10. 不安全代码</h2><p>为了保持类型的安全性，默认情况下C#是不支持指针的，但是如果使用<code>unsafe</code>关键字来修饰类或类中的成员，则会被视为不安全代码。C#允许不安全代码中使用指针变量。</p><p>在公共语言运行中，不安全代码是指无法验证的代码，需要程序员来保证代码的安全性，不安全代码并不意味着一定是危险的。</p><h3 id="10-1-指针变量">10.1 指针变量</h3><p>指针也是变量，但是它的值是另一个变量的内存地址，在使用指针前需要先声明指针。</p><table><thead><tr><th>示例</th><th>说明</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>int* p</code></td><td>p是指向整数的指针</td><td><code>double* p</code></td><td>p是指向双精度数的指针</td></tr><tr><td><code>float* p</code></td><td>p是指向浮点数的指针</td><td><code>int** p</code></td><td>p是指向整数的指针的指针</td></tr><tr><td><code>int*[] p</code></td><td>p是指向整数的指针的一维数组</td><td><code>char* p</code></td><td>p是指向字符的指针</td></tr><tr><td><code>void* p</code></td><td>p是指向未知类型的指针</td><td></td><td></td></tr></tbody></table><p>与声明变量相同，我们同样可以在一行代码中同时声明多个指针，如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>* p1, p2, p3;  <span class="comment">// 同时定义p1、p2、p3三个整数指针</span></span><br></pre></td></tr></tbody></table></figure><p>注意：指针不能从对象中继承，并且装箱和拆箱也不支持指针，但是不同的指针类型以及指针与整型之间可以进行转换。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PointerTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">double</span> f = <span class="number">3.1415</span>;</span><br><span class="line">            <span class="built_in">double</span>* p = &amp;f;</span><br><span class="line">            Console.WriteLine(<span class="string">"数据的内容是：{0}"</span>, f);  <span class="comment">// 字符串的内容是: 3.1415</span></span><br><span class="line">            Console.WriteLine(<span class="string">"数据在内存中的地址是：{0}"</span>, (<span class="built_in">int</span>)p);  <span class="comment">// 字符串在内存中的地址是: 12569862</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意：在编译上述代码时需要在编译命令中添加<code>-unsafe</code>，例如<code>csc -unsafe pointerTest.cs</code></p><h3 id="10-2-使用指针检索数据的值">10.2 使用指针检索数据的值</h3><p>可以使用<code>ToString()</code>来获取指针变量所指向的数据的值，如下所示：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PointerTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">unsafe</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">var</span> = <span class="number">123456</span>;</span><br><span class="line">            <span class="built_in">int</span>* p = &amp;<span class="keyword">var</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"变量var的值为：{0}"</span>, <span class="keyword">var</span>);  <span class="comment">// 变量var的值为: 123456</span></span><br><span class="line">            Console.WriteLine(<span class="string">"指针p指向的值为：{0}"</span>, p-&gt;ToString());  <span class="comment">// 指针p指向的值为: 123456</span></span><br><span class="line">            Console.WriteLine(<span class="string">"指针p的值为：{0}"</span>, (<span class="built_in">int</span>)p);  <span class="comment">// 指针p的值为: 15332624</span></span><br><span class="line">           </span><br><span class="line">        }</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-3-将指针作为参数传递给函数">10.3 将指针作为参数传递给函数</h3><p>可以将指针变量作为参数传递给函数，如下所示：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PointerTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span>* p, <span class="built_in">int</span>* q</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> temp = *p;</span><br><span class="line">            *p = *q;</span><br><span class="line">            *q = temp;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            PointerTest p = <span class="keyword">new</span> PointerTest();</span><br><span class="line">            <span class="built_in">int</span> var1 = <span class="number">10</span>;</span><br><span class="line">            <span class="built_in">int</span> var2 = <span class="number">20</span>;</span><br><span class="line">            <span class="built_in">int</span>* x = &amp;var1;</span><br><span class="line">            <span class="built_in">int</span>* y = &amp;var2;</span><br><span class="line">            Console.WriteLine(<span class="string">"调用Swap函数前：var1 = {0}, var2 = {1}"</span>, var1, var2);</span><br><span class="line">            <span class="comment">// 调用Swap函数前：var1 = 10, var2 = 20</span></span><br><span class="line">            p.Swap(x, y);</span><br><span class="line">            Console.WriteLine(<span class="string">"调用Swap函数后：var1 = {0}, var2 = {1}"</span>, var1, var2);</span><br><span class="line">            <span class="comment">// 调用Swap函数后：var1 = 20, var2 = 10</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-4-使用指针访问数组元素">10.4 使用指针访问数组元素</h3><p>在C#中，数组和指向该数组且与数组名称相同的指针是不同的数据类型，例如<code>int* p</code>和<code>int[] p</code>就是不同的数据类型。可以增加指针p的值，因为它在内存中不是固定的，但数组地址在内存中是固定的，因此不能增加数组p的值，如果需要使用指针变量访问数组数据，则可以使用<code>fixed</code>关键字来固定指针。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PointerTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span>[] list = {<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>};</span><br><span class="line">            <span class="keyword">fixed</span>(<span class="built_in">int</span> *ptr = list);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"List[{0}]的内存地址为：{1}"</span>, i, (<span class="built_in">int</span>)(ptr + i));</span><br><span class="line">                Console.WriteLine(<span class="string">"List[{0}]的值为：{1}"</span>, i, *(ptr + i));</span><br><span class="line">                </span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// list[0] 的内存地址为：51981272</span></span><br><span class="line">            <span class="comment">// list[0] 的值为：10</span></span><br><span class="line">            <span class="comment">// list[1] 的内存地址为：51981276</span></span><br><span class="line">            <span class="comment">// list[1] 的值为：100</span></span><br><span class="line">            <span class="comment">// list[2] 的内存地址为：51981280</span></span><br><span class="line">            <span class="comment">// list[2] 的值为：200</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-正则表达式">11. 正则表达式</h2><p><strong>正则表达式时一种匹配文本输入的模式。</strong>.Net Framework提供了允许这种匹配的正则表达式引擎。模式由一个或多个字符、运算符和结构组成。</p><h3 id="11-1-定义正则表达式">11.1 定义正则表达式</h3><p>用于定义正则表达式的各种类型的字符、运算符和结构有：</p><ul><li>字符转义，正则表达式中的反斜杠<code>\</code>用来表示它后面跟随的字符时特殊字符，具有特殊的含义。如\a、\b、\t等</li><li>字符类，字符类可以与一个字符串中的任何一个字符相匹配。如\w、[character_group]、\p{name}等</li><li>定位符，可以根据字符串出现的具体位置来判断匹配是成功还是失败。如^、$、\A等</li><li>分组结构，描述了正则表达式的子表达式，并捕获输入字符串的子字符串。如（\w)\1、\w+(?=\.)、(?&lt;double&gt;\w)\k&lt;double&gt;等</li><li>限定符，用来指定在字符串中必须存在某个元素才能匹配成功。如*、+、？等</li><li>反向引用构造，允许先前匹配的子表达式随后在相同的正则表达式中进行标志。如\number、\k&lt;name&gt;</li><li>备用构造，用于修改正则表达式以启用either/or匹配。如|、(?(expresion) yes | no)、(?(name)yes | no)</li><li>替换，替换模式中使用的正则表达式，如$number、${name}、$&amp;等</li><li>杂项构造，如(?#注释)、#[行尾]、(?imnsx-imnsx)</li></ul><h3 id="11-2-Regex类">11.2 Regex类</h3><p>Regex类用于使用一个正则表达式，下表列出来Regex类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public bool IsMatch( string input )</code></td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项</td><td><code>public bool IsMatch( string input, int startat )</code></td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项，从字符串中指定的位置开始查找</td></tr><tr><td><code>public static bool IsMatch( string input, string pattern )</code></td><td>指示指定的正则表达式是否在指定的输入字符串中找到匹配项</td><td><code>public MatchCollection Matches( string input )</code></td><td>在指定的输入字符串中搜索正则表达式的所有匹配项</td></tr><tr><td><code>public string Replace( string input, string replacement )</code></td><td>在指定的输入字符串中，把所有匹配正则表达式模式的所有匹配的字符串替换为指定的替换字符串</td><td><code>public string[] Split( string input )</code></td><td>把输入字符串分割为子字符串数组，根据在 Regex 构造函数中指定的正则表达式模式定义的位置进行分割</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">RegexTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowMatch</span>(<span class="params"><span class="built_in">string</span> text, <span class="built_in">string</span> expr</span>)</span></span><br><span class="line">        {</span><br><span class="line">            MatchCollection mc = Regex.Matches(text, expr);</span><br><span class="line">            <span class="keyword">foreach</span> (Match m <span class="keyword">in</span> mc)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(m);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">"make and then manage your maze"</span>;</span><br><span class="line">            ShowMatch(str, <span class="string">@"\bm\S*e\b"</span>);</span><br><span class="line">            <span class="comment">// make</span></span><br><span class="line">            <span class="comment">// manage</span></span><br><span class="line">            <span class="comment">// maze</span></span><br><span class="line">            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12-多线程">12. 多线程</h2><p><strong>多线程就是多个线程同时工作的过程，可将线程看做程序的执行路径，每个线程定义了一个独特的控制流，用来完成特定的任务。</strong></p><p>多线程可以节省CPU资源，同时提高应用程序的执行效率。</p><h3 id="12-1-线程生命周期">12.1 线程生命周期</h3><p>线程声明周期开始于我们创建<strong>System.Theading.Thread</strong>类对象的时候，当线程被终止或完成执行时生命周期终止。</p><p>下面列出来线程生命周期中的各种状态：</p><ul><li>未启动状态：当线程实例被创建但<code>Start</code>方法未被调用时的状况；</li><li>就绪状态：当线程准备好运行并等待CPU周期时的状况；</li><li>不可运行状态：<ul><li>已经调用Sleep方法</li><li>已经调用Wait方法</li><li>通过I/O操作阻塞</li></ul></li><li>死亡状态：当线程已完成执行或已中止时的状况。</li></ul><h3 id="12-2-主线程">12.2 主线程</h3><p>在多线程中执行的第一个线程称为主线程，C#程序开始执行时，将自动创建主线程，使用Thread类创建的线程称为子线程，可以使用<strong>Thread</strong>类的<code>CurrentThread</code>属性访问线程。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ThreadTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Thread th = Thread.CurrentThread;</span><br><span class="line">            th.Name = <span class="string">"主线程"</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"这是{0}"</span>, th.Name);  <span class="comment">// 这是主线程</span></span><br><span class="line">            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="12-3-Thread类的常用属性和方法">12.3 Thread类的常用属性和方法</h3><p>下表为Thread类的常用属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>CurrentContext</code></td><td>获取线程正在其中执行的当前上下文</td><td><code>CurrentCulture</code></td><td>获取或设置当前线程的区域性</td></tr><tr><td><code>CurrentPrincipal</code></td><td>获取或设置线程的当前负责人</td><td><code>CurrentThread</code></td><td>获取当前正在运行的线程</td></tr><tr><td><code>CurrentUICulture</code></td><td>获取或设置资源管理器使用的当前区域性以便在运行时查找区域特定的资源</td><td><code>ExecutionContext</code></td><td>获取一个ExecutionContext对象，该对象包含有关当前线程的各种上下文信息</td></tr><tr><td><code>IsAlive</code></td><td>获取一个值，该值指示当前线程的执行状态</td><td><code>IsBackground</code></td><td>获取或设置一个值，该值指示某个线程是否为后台线程</td></tr><tr><td><code>IsThreadPoolThread</code></td><td>获取一个值，该值指示线程是否属于托管线程池</td><td><code>ManagedThreadId</code></td><td>获取当前托管线程的唯一标识符</td></tr><tr><td><code>Name</code></td><td>获取或设置线程的名称</td><td><code>Priority</code></td><td>获取或设置一个值，该值指示线程的调度优先级</td></tr><tr><td><code>ThreadState</code></td><td>获取一个值，该值包含当前线程的状态</td><td></td><td></td></tr></tbody></table><p>下表为Thread类的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>public void Abort()</code></td><td>在调用此方法的线程上引发ThreadAbortException，以开始终止此线程的过程。调用此方法通常会终止线程</td><td><code>public static LocalDataStoreSlot AllocateDataSlot()</code></td><td>在所有线程上分配未命名的数据槽</td></tr><tr><td><code>public static LocalDataStoreSlot AllocateNamedDataSlot(string name)</code></td><td>在所有线程上分配已命名的数据槽</td><td><code>public static void BeginCriticalRegion()</code></td><td>通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理的异常的影响可能会危害应用程序域中的其他任务</td></tr><tr><td><code>public static void BeginThreadAffinity()</code></td><td>通知主机托管代码将要执行依赖于当前物理操作系统线程的标识的指令</td><td><code>public static void EndCriticalRegion()</code></td><td>通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理的异常仅影响当前任务。</td></tr><tr><td><code>public static void EndThreadAffinity()</code></td><td>通知主机托管代码已执行完依赖于当前物理操作系统线程的标识的指令</td><td><code>public static void FreeNamedDataSlot(string name)</code></td><td>为进程中的所有线程消除名称与槽之间的关联</td></tr><tr><td><code>public static Object GetData(LocalDataStoreSlot slot)</code></td><td>在当前线程的当前域中从当前线程上指定的槽中检索值</td><td><code>public static AppDomain GetDomain()</code></td><td>返回当前线程正在其中运行的当前域</td></tr><tr><td><code>public static AppDomain GetDomainID()</code></td><td>返回唯一的应用程序域标识符</td><td><code>public static LocalDataStoreSlot GetNamedDataSlot(string name)</code></td><td>查找已命名的数据槽</td></tr><tr><td><code>public void Interrupt()</code></td><td>中断处于WaitSleep.Join线程状态的线程</td><td><code>public void Join()</code></td><td>在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止为止</td></tr><tr><td><code>public static void MemoryBarrier()</code></td><td>按如下方式同步内存存取：执行当前线程的处理器在对指令重新排序时，不能采用先执行 MemoryBarrier 调用之后的内存存取，再执行 MemoryBarrier 调用之前的内存存取的方式</td><td><code>public static void ResetAbort()</code></td><td>取消为当前线程请求的Abort</td></tr><tr><td><code>public static void SetData(LocalDataStoreSlot slot, Object data)</code></td><td>在当前正在运行的线程上为此线程的当前域在指定槽中设置数据</td><td><code>public void Start()</code></td><td>开始一个线程</td></tr><tr><td><code>public static void Sleep(int millisecondsTimeout)</code></td><td>让线程暂停一段时间</td><td><code>public static void SpinWait(int iterations)</code></td><td>导致线程等待由 iterations 参数定义的时间量</td></tr><tr><td><code>public static byte VolatileRead(ref byte address)</code><br><code>public static double VolatileRead(ref double address)</code><br><code>public static int VolatileRead(ref int address)</code><br><code>public static Object VolatileRead(ref Object address)</code></td><td>读取字段值。无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值</td><td><code>public static void VolatileWrite(ref byte address, byte value)</code><br><code>public static void VolatileWrite(ref double address, double value)</code><br><code>public static void VolatileWrite(ref int address, int value)</code><br><code>public static void VolatileWrite(ref Object address, Object value)</code></td><td>立即向字段写入一个值，以使该值对计算机中的所有处理器都可见</td></tr><tr><td><code>public static bool Yield()</code></td><td>导致调用线程执行准备好在当前处理器上运行的另一个线程。由操作系统选择要执行的线程</td><td></td><td></td></tr></tbody></table><h3 id="12-4-创建线程">12.4 创建线程</h3><p>线程是通过扩展<strong>Thread</strong>类创建的，扩展的<strong>Thread</strong>类调用<code>Start()</code>方法来开始子线程的执行。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ThreadTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CallToChildThread</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"Child thread starts"</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            ThreadStart childref = <span class="keyword">new</span> ThreadStart(CallToChildThread);</span><br><span class="line">            Thread childThread = <span class="keyword">new</span> Thread(childref);</span><br><span class="line">            childThread.Start();  <span class="comment">// Child thread starts</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="12-5-管理线程">12.5 管理线程</h3><p><strong>Thread</strong>类提供了各种管理线程的方法，下面演示了<code>Sleep()</code>方法的使用，用于在一个特定的时间暂停线程。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ThreadTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CallToChildThread</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"Child thread starts"</span>);</span><br><span class="line">            <span class="built_in">int</span> sleepTime = <span class="number">5000</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"Child thread paused for {0} seconds"</span>, sleepTime / <span class="number">1000</span>);</span><br><span class="line">            Thread.Sleep(sleepTime);</span><br><span class="line">            Console.WriteLine(<span class="string">"Child thread resumes"</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            ThreadStart childref = <span class="keyword">new</span> ThreadStart(CallToChildThread);</span><br><span class="line">            Thread childThread = <span class="keyword">new</span> Thread(childref);</span><br><span class="line">            childThread.Start();</span><br><span class="line">            <span class="comment">// Child thread starts</span></span><br><span class="line">            <span class="comment">// Child thread pasued for 5 seconds</span></span><br><span class="line">            <span class="comment">// Child thread resumes</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="12-6-销毁线程">12.6 销毁线程</h3><p><code>Abort()</code>方法用于销毁进行，通过抛出<code>ThreadAbortException</code>在运行时中止线程。这个异常不能被捕获，如果有<strong>finally</strong>块，控制会被送至<strong>finally</strong>块。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ThreadTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CallToChildThread</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"Child thread starts"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> counter = <span class="number">0</span>; counter &lt;= <span class="number">10</span>; counter++)</span><br><span class="line">                {</span><br><span class="line">                    Thread.Sleep(<span class="number">500</span>);</span><br><span class="line">                    Console.WriteLine(counter);</span><br><span class="line">                }</span><br><span class="line">                Console.WriteLine(<span class="string">"Child thread resumes"</span>);</span><br><span class="line">            }</span><br><span class="line">            catch (ThreadAbortException e)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"Thread Abort Exception"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"Couldn't catch the Thread Exception"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            ThreadStart childref = <span class="keyword">new</span> ThreadStart(CallToChildThread);</span><br><span class="line">            Thread childThread = <span class="keyword">new</span> Thread(childref);</span><br><span class="line">            childThread.Start();</span><br><span class="line">            Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">            childThread.Abort();</span><br><span class="line">            <span class="comment">// Child thread starts</span></span><br><span class="line">            <span class="comment">// 0</span></span><br><span class="line">            <span class="comment">// 1</span></span><br><span class="line">            <span class="comment">// 2</span></span><br><span class="line">            <span class="comment">// Thread Abort Exception</span></span><br><span class="line">            <span class="comment">// Couldn't catch the Thread Exception</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文章">参考文章</h2><p>本文是笔者通过下列网站教程学习C#语言进阶的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/csharp/csharp-tutorial.html">【菜鸟教程C#教程】</a></p><p>2.<a href="http://c.biancheng.net/csharp/">【C语言中文网C#教程】</a></p><p>3.<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">【微软C#官方文档】</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#进阶 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语言基础学习笔记</title>
      <link href="/posts/6569.html"/>
      <url>/posts/6569.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-环境准备">0. 环境准备</h2><h3 id="0-1-简介">0.1 简介</h3><p><strong>C#<strong>又称”<strong>C Sharp</strong>“，是微软发布和维护的一个</strong>现代的</strong>、<strong>通用的</strong>、<strong>面向对象</strong>的编程语言，是专为公共语言基础结构（CLI，由可执行代码和运行时环境组成，允许在不同的计算机平台和体系结构上使用各种高级语言）设计的。</p><p>C#的优点：</p><ul><li>现代的、通用的编程语言</li><li>面向对象</li><li>类型安全</li><li>容易学习</li><li>面向组件</li><li>结构化语言</li><li>产生高效率的程序</li><li>可以在多种计算机平台上编译</li><li>.Net框架的一部分</li></ul><p>C#运行在 <strong>.Net Framework</strong> 上，可以用于开发不同类型的应用程序：</p><ul><li>桌面应用程序</li><li>网络应用程序</li><li>分布式应用程序</li><li>Web服务应用程序</li><li>数据库应用程序</li><li>Unity3D游戏程序</li></ul><p><strong>.Net Framework</strong> 是一个平台，它提供了一个跨语言的统一编程环境，而C#则是一种在 <strong>.Net Framework</strong> 平台上使用的编程语言。</p><h3 id="0-2-推荐IDE">0.2 推荐IDE</h3><ul><li><p><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio</a></p></li><li><p><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio Code</a></p></li><li><p><a href="https://www.codingrooms.com/compiler/csharp">在线IDE</a></p></li></ul><h3 id="0-3-基本语法">0.3 基本语法</h3><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span> </span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 成员变量</span></span><br><span class="line">        <span class="built_in">double</span> length;  <span class="comment">// 长</span></span><br><span class="line">        <span class="built_in">double</span> width;  <span class="comment">// 宽</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 成员函数</span></span><br><span class="line">        <span class="comment">// 设置长和宽</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Acceptdetails</span>(<span class="params"></span>)</span> </span><br><span class="line">        {</span><br><span class="line">            length = <span class="number">4.5</span>;  </span><br><span class="line">            width = <span class="number">3.5</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算面积</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span> </span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 显示输出</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span> </span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"Length: {0}"</span>, length);   <span class="comment">// 4.5</span></span><br><span class="line">            Console.WriteLine(<span class="string">"Width: {0}"</span>, width);     <span class="comment">// 3.5</span></span><br><span class="line">            Console.WriteLine(<span class="string">"Area: {0}"</span>, GetArea());  <span class="comment">// 15.75</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span> </span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> </span><br><span class="line">        {</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            r.Acceptdetails();</span><br><span class="line">            r.Display();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-数据类型">1. 数据类型</h2><p>C#语言的类型主要分为：<strong>值类型</strong>和<strong>引用类型</strong>，值类型的变量直接包含数据，而引用类型的变量存储数据的引用地址。</p><p>对于引用类型，两个变量可以引用同一对象，因此，对一个变量执行的运算可能会影响另一个变量所引用的对象。引用类型在<strong>托管堆</strong>分配空间。</p><p>对于值类型，每个变量都有自己的数据副本，对一个变量执行的操作不会影响另一个。值类型在<strong>线程栈</strong>分配空间。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入命名空间</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 引用类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SomeRef</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> X { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 值类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> SomeVal</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> X { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">ValueTypeTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            SomeRef r1 = <span class="keyword">new</span> SomeRef();  <span class="comment">// 在堆上分配空间</span></span><br><span class="line">            SomeVal v1 = <span class="keyword">new</span> SomeVal();  <span class="comment">// 在栈上分配空间</span></span><br><span class="line">            r1.X = <span class="number">5</span>;  <span class="comment">// 提领指针</span></span><br><span class="line">            v1.X = <span class="number">5</span>;  <span class="comment">// 在栈上修改</span></span><br><span class="line">            Console.WriteLine(r1.X);  <span class="comment">// 5</span></span><br><span class="line">            Console.WriteLine(v1.X);  <span class="comment">// 5</span></span><br><span class="line">            </span><br><span class="line">            SomeRef r2 = r1;  <span class="comment">// 只复制引用</span></span><br><span class="line">            SomeVal v2 = v1;  <span class="comment">// 在栈上分配并赋值成员</span></span><br><span class="line">            r1.X = <span class="number">8</span>;  <span class="comment">// r1.X和r2.X都会修改</span></span><br><span class="line">            v1.X = <span class="number">8</span>;  <span class="comment">// v1.X会修改，v2.X不会</span></span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(r1.X);  <span class="comment">// 8</span></span><br><span class="line">            Console.WriteLine(r2.X);  <span class="comment">// 8</span></span><br><span class="line">            Console.WriteLine(v1.X);  <span class="comment">// 8</span></span><br><span class="line">            Console.WriteLine(v2.X);  <span class="comment">// 5</span></span><br><span class="line">            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-1-值类型">1.1 值类型</h3><p>值类型包含<strong>简单类型</strong>、<strong>结构类型</strong>和<strong>枚举类型</strong>。</p><ul><li>简单类型<ul><li>有符号整型：sbyte、short、int、long</li><li>无符号整型：byte、ushort、unit、ulong</li><li>Unicode字符：char</li><li>IEEE浮点型：float、double</li><li>高精度小数：decimal</li><li>布尔型：bool</li></ul></li><li>结构类型<ul><li>用户自定义类型：struct</li></ul></li><li>枚举类型<ul><li>用户自定义类型：enum</li></ul></li></ul><h3 id="1-2-引用类型">1.2 引用类型</h3><p>引用类型包含<strong>类类型</strong>、<strong>接口类型</strong>、<strong>数组类型</strong>和<strong>委托类型</strong>。</p><ul><li>类类型<ul><li>所有其他类型的最终基类：object</li><li>Unicode字符串：string</li><li>用户自定义类型：class</li></ul></li><li>接口类型<ul><li>用户自定义类型：interface</li></ul></li><li>数组类型<ul><li>单维与多维数组：如int[]、int[,]</li></ul></li><li>委托类型<ul><li>用户自定义类型：delegate</li></ul></li></ul><h3 id="1-3-指针类型">1.3 指针类型</h3><p>仅在不安全代码中提供，使用<code>unsafe</code>关键词，开启不安全代码开发模式后，代码可以使用指针、分配和释放内存块，以及使用函数指针调用方法。<code>unsafe</code>代码的安全需要开发人员自行检测。</p><p>可以定义为指针的类型有</p><ul><li>sbyte、byte、short、unshort、int、uint、long、ulong、char、float、double、decimal、bool</li><li>任何枚举类型</li><li>任何指针类型</li><li>仅包含非托管类型的字段的任何用户定义的结构类型</li></ul><p><strong>装箱和拆箱</strong>操作不支持指针，但是可在不同的指针类型之间以及指针类型与整型之间进行转换。指针不能指向引用或包含引用的结构，因为无法对对象引用进行垃圾回收。</p><p>指针类型声明示例：</p><ul><li><code>int* p</code>: p是指向整数的指针</li><li><code>int** p</code>: p是指向整数的指针的指针</li><li><code>int*[] p</code>: p是指向整数的指针的一维数组</li><li><code>char* p</code>: p是指向字符的指针</li><li><code>void* p</code>: p是指向未知类型的指针</li></ul><p>对指针执行的运算符和语句</p><table><thead><tr><th>运算符/语句</th><th>使用</th><th>运算符/语句</th><th>使用</th></tr></thead><tbody><tr><td><code>*</code></td><td>执行指针间接寻址</td><td><code>-&gt;</code></td><td>通过指针访问结构的成员</td></tr><tr><td><code>[]</code></td><td>为指针建立索引</td><td><code>&amp;</code></td><td>获取变量的地址</td></tr><tr><td><code>++</code>和<code>--</code></td><td>递增和递减指针</td><td><code>+</code>和<code>-</code></td><td>执行指针算法</td></tr><tr><td><code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>和<code>&gt;=</code></td><td>比较指针</td><td><strong>stackalloc</strong></td><td>在堆栈上分配内存</td></tr><tr><td><strong>fixed</strong>语句</td><td>临时固定变量以便找到其地址</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">UnsafeTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span>[] a = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>] { <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> };</span><br><span class="line">            <span class="keyword">unsafe</span> <span class="comment">// 开启不安全代码模式</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">fixed</span> (<span class="built_in">int</span>* p = &amp;a[<span class="number">0</span>])  <span class="comment">// 设置指向托管变量的指针，在执行该语句期间固定此变量</span></span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">int</span>* p2 = p;</span><br><span class="line">                    Console.WriteLine(*p2);  <span class="comment">// 10</span></span><br><span class="line">                    p2 += <span class="number">1</span>;  <span class="comment">// 指针向后移</span></span><br><span class="line">                    Console.WriteLine(*p2);  <span class="comment">// 20</span></span><br><span class="line">                    p2 += <span class="number">1</span>;  <span class="comment">// 指针向后移</span></span><br><span class="line">                    Console.WriteLine(*p2);  <span class="comment">// 30</span></span><br><span class="line">                    </span><br><span class="line">                    Console.WriteLine(<span class="string">"------"</span>);</span><br><span class="line">                    Console.WriteLine(*p);  <span class="comment">// 10</span></span><br><span class="line">                    *p += <span class="number">1</span>;  <span class="comment">// 指针所指向的值加1</span></span><br><span class="line">                    Console.WriteLine(*p);  <span class="comment">// 11</span></span><br><span class="line">                    *p += <span class="number">1</span>;  <span class="comment">// 指针所指向的值加1</span></span><br><span class="line">                    Console.WriteLine(*p);  <span class="comment">// 12</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"------"</span>);</span><br><span class="line">            Console.WriteLine(a[<span class="number">0</span>]);  <span class="comment">// 12</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-装箱与拆箱">1.4 装箱与拆箱</h3><p><strong>值类型转换为引用类型称为装箱</strong>，<strong>引用类型转为值类型称为拆箱</strong>。注：只有被装过箱的对象才能拆箱。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">BoxingAndUnboxingTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> val = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">object</span> obj = val;  <span class="comment">// 装箱操作</span></span><br><span class="line">            Console.WriteLine(<span class="string">"obj = {0}"</span>, obj);  <span class="comment">// obj = 100</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">int</span> num = (<span class="built_in">int</span>) obj;  <span class="comment">// 拆箱操作</span></span><br><span class="line">            Console.WriteLine(<span class="string">"num = {0}"</span>, num);  <span class="comment">// num = 100</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-类型转换">1.5 类型转换</h3><p>类型转换是把数据从一种类型转换为另一种类型，C#中类型转换有两种形式：</p><ul><li><strong>隐式类型转换</strong>：是C#默认的以安全的方式进行的转换，不会导致数据丢失，例如从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li><strong>显式类型转换</strong>-：即强制类型转换，需要强制转换运算符，而且强制转换会造成数据丢失。</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ForceTypeConversionTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">double</span> d = <span class="number">5673.74</span>;</span><br><span class="line">            <span class="built_in">int</span> i;</span><br><span class="line">            </span><br><span class="line">            i = (<span class="built_in">int</span>) d;  <span class="comment">// double强制转换为int</span></span><br><span class="line">            Console.WriteLine(i);  <span class="comment">// 5673</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>下表为C#内置的一些类型转换方法</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ToBoolean</code></td><td>转换为布尔型</td><td><code>ToByte</code></td><td>转换为字节类型</td></tr><tr><td><code>ToChar</code></td><td>转换为单个Unicode字符类型</td><td><code>ToDateTime</code></td><td>把整数或字符串类型转换为日期-时间结构</td></tr><tr><td><code>ToDecimal</code></td><td>把浮点型或整数型转换为十进制类型</td><td><code>ToDouble</code></td><td>转换为双精度浮点型</td></tr><tr><td><code>ToInt16</code></td><td>转换为16位整数类型</td><td><code>ToInt32</code></td><td>转换为32位整数类型</td></tr><tr><td><code>ToInt64</code></td><td>转换为64位整数类型</td><td><code>ToSbyte</code></td><td>转换为有符号字节类型</td></tr><tr><td><code>ToString</code></td><td>转换为字符串类型</td><td><code>ToType</code></td><td>转换为指定类型</td></tr><tr><td><code>ToUInt16</code></td><td>转换为16位无符号整数类型</td><td><code>ToUInt32</code></td><td>转换为32位无符号整数类型</td></tr><tr><td><code>ToUInt64</code></td><td>转换为64位无符号整数类型</td><td><code>ToSingle</code></td><td>转换为浮点数类型</td></tr></tbody></table><p>如：把不同值的类型转换为字符串类型</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StringConversionTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">2022</span>;</span><br><span class="line">            <span class="built_in">float</span> b = <span class="number">8.005f</span>;</span><br><span class="line">            <span class="built_in">double</span> c = <span class="number">2345.6789</span>;</span><br><span class="line">            <span class="built_in">bool</span> d = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 转换为字符串类型</span></span><br><span class="line">            Console.WriteLine(a.ToString());  <span class="comment">// 2022</span></span><br><span class="line">            Console.WriteLine(b.ToString());  <span class="comment">// 8.005</span></span><br><span class="line">            Console.WriteLine(c.ToString());  <span class="comment">// 2345.6789</span></span><br><span class="line">            Console.WriteLine(d.ToString());  <span class="comment">// False</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-变量">2. 变量</h2><p>变量是一种通过变量名表示某个内存区域的方法，变量的值可以更改并重复使用。</p><p>C#中基础变量类型可以归纳为以下几种：</p><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>整型</td><td>sbyte、byte、short、ushort、int、unit、long、ulong、char</td></tr><tr><td>浮点型</td><td>float、doule</td></tr><tr><td>十进制类型</td><td>decimal</td></tr><tr><td>布尔型</td><td>true、false</td></tr><tr><td>空类型</td><td>可为空值的数据类型</td></tr></tbody></table><h3 id="2-1-声明">2.1 声明</h3><p>声明变量的语法格式为<code>&lt;data_type&gt; variable_list;</code></p><p>如：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> i, j, k;</span><br><span class="line"><span class="built_in">double</span> a;</span><br><span class="line"><span class="built_in">char</span> b, c;</span><br><span class="line"><span class="built_in">bool</span> d;</span><br></pre></td></tr></tbody></table></figure><p>变量名需要遵循的规则：</p><ul><li>变量名中只可以包含英文字母<code>a-z</code>,<code>A-Z</code>、数字<code>0-9</code>和下划线<code>_</code></li><li>不能以数字开头</li><li>变量名不能是任何C#的保留字或关键字</li></ul><h3 id="2-2-初始化">2.2 初始化</h3><p>可以在声明时直接初始化，也可以在声明后另起一行进行初始化，如：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">VariableTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">short</span> a;</span><br><span class="line">            <span class="built_in">float</span> b;</span><br><span class="line">            <span class="built_in">double</span> c, d = <span class="number">5.5</span>;</span><br><span class="line">            <span class="comment">// 初始化变量</span></span><br><span class="line">            a = <span class="number">10</span>;</span><br><span class="line">            b = <span class="number">20.1f</span>;</span><br><span class="line">            c = a + b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}, b = {1}, c = {2}, d = {3}"</span>, a, b, c, d);  <span class="comment">// a = 10, b = 20.1, c = 30.1000003814697, d = 5.5</span></span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">            <span class="comment">// 接受用户输入的值</span></span><br><span class="line">            <span class="built_in">int</span> f = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            Console.WriteLine(f);  <span class="comment">// 输出你所输入数字</span></span><br><span class="line">                </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="3-常量">3. 常量</h2><p><strong>常量是固定值</strong>，使用关键字<code>const</code>定义，在程序执行期间不允许修改，常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量、字符串常量、枚举常量。</p><h3 id="3-1-定义">3.1 定义</h3><p>声明常量的语法格式为<code>const &lt;data_type&gt; constant_name = value;</code>，常量在声明的同时需要赋值。</p><h3 id="3-2-使用">3.2 使用</h3><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConstantConversionTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">            <span class="built_in">double</span> r = <span class="number">3</span>;</span><br><span class="line">            <span class="built_in">double</span> area = PI * r * r;</span><br><span class="line">            Console.WriteLine(<span class="string">"半径为：{0}，圆的面积为：{1}"</span>, r, area);  <span class="comment">// 半径为：3，圆的面积为：28.26</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="4-运算符">4. 运算符</h2><p>运算符是一个用来告诉编辑器执行特定数字或逻辑运算的符号。</p><h3 id="4-1-算术运算符">4.1 算术运算符</h3><p>完成特定算术运算的符号：</p><table><thead><tr><th>算术运算符</th><th>描述</th><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>%</code></td><td>取余</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>++</code></td><td>自增</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>--</code></td><td>自减</td></tr><tr><td><code>/</code></td><td>除法</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArithmeticOperatorsTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">20</span>;</span><br><span class="line">            <span class="built_in">int</span> c;</span><br><span class="line">            c = a + b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a + b = {0}"</span>, c);  <span class="comment">// a + b = 30</span></span><br><span class="line">            c = a - b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a - b = {0}"</span>, c);  <span class="comment">// a - b = -10</span></span><br><span class="line">            c = a * b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a * b = {0}"</span>, c);  <span class="comment">// a * b = 200</span></span><br><span class="line">            c = a / b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a / b = {0}"</span>, c);  <span class="comment">// a / b = 0</span></span><br><span class="line">            c = a % b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a % b = {0}"</span>, c);  <span class="comment">// a % b = 10</span></span><br><span class="line">            c = ++a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}, a = {1}"</span>, c, a);  <span class="comment">// c = 11, a = 11</span></span><br><span class="line">            c = --a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}, a = {1}"</span>, c, a);  <span class="comment">// c = 10, a = 10</span></span><br><span class="line">            c = b++;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}, b = {1}"</span>, c, b);  <span class="comment">// c = 20, b = 21</span></span><br><span class="line">            c = b--;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}, b = {1}"</span>, c, b);  <span class="comment">// c = 21, b = 20</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-关系运算符">4.2 关系运算符</h3><p>比较运算符左右两边操作数的符号，结果为<strong>true</strong>或<strong>false</strong>。</p><table><thead><tr><th>关系运算符</th><th>描述</th><th>关系运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>==</code></td><td>检查是否相等</td><td><code>!=</code></td><td>检查是否不等</td></tr><tr><td><code>&gt;</code></td><td>检查左操作数是否大于右操作数</td><td><code>&lt;</code></td><td>检查左操作数是否小于右操作数</td></tr><tr><td><code>&gt;=</code></td><td>检查左操作数是否大于等于右操作数</td><td><code>&lt;=</code></td><td>检查左操作数是否小于等于右操作数</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">RelationalOperatorTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">if</span> (a == b) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a等于b"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a不等于b"</span>);  <span class="comment">// a不等于b</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (a &lt; b) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a小于b"</span>);  <span class="comment">// a小于b</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a不小于b"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (a &gt; b) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a大于b"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a不大于b"</span>);  <span class="comment">// a不大于b</span></span><br><span class="line">            }</span><br><span class="line">            a = <span class="number">15</span>;</span><br><span class="line">            b = <span class="number">33</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &lt;= b) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a小于或等于b"</span>);  <span class="comment">// a小于或等于b</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (b &gt;= a)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"b大于或等于a"</span>);  <span class="comment">// b大于或等于a</span></span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-逻辑运算符">4.3 逻辑运算符</h3><p>进行逻辑运算的符号，结果为<strong>true</strong>或<strong>false</strong>。</p><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑与，两个操作数都为true，结果才为true</td></tr><tr><td><code>||</code></td><td>逻辑或，两个操作数有一个为true，结果就为true</td></tr><tr><td><code>!</code></td><td>逻辑非，操作数为true，结果为false，操作数为false，结果为true</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">LogicalOperatorsTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">bool</span> a = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">bool</span> b = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &amp;&amp; b) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"条件为真"</span>);  <span class="comment">// 条件为真</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (a || b)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"条件为真"</span>);  <span class="comment">// 条件为真</span></span><br><span class="line">            }</span><br><span class="line">            a = <span class="literal">false</span>;</span><br><span class="line">            b = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &amp;&amp; b) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"条件为真"</span>);    </span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                Console.Write(<span class="string">"条件为假"</span>);  <span class="comment">// 条件为假</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!(a &amp;&amp; b))</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"条件为真"</span>);   <span class="comment">// 条件为真  </span></span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-4-位运算符">4.4 位运算符</h3><table><thead><tr><th>位运算符</th><th>描述</th><th>位运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>按位与，均为1时，结果才为1</td><td><code>|</code></td><td>按位或，有一个为1时，结果就为1</td></tr><tr><td><code>^</code></td><td>按位异或，两个位数值不同时，结果才为1</td><td><code>~</code></td><td>按位取反，9变为1，1变为0</td></tr><tr><td><code>&lt;&lt;</code></td><td>二进制左移指定位数</td><td><code>&gt;&gt;</code></td><td>二进制右移指定位数</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">BitwiseOperatorsTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">60</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">13</span>;</span><br><span class="line">            <span class="built_in">int</span> c = <span class="number">0</span>;</span><br><span class="line">            c = a &amp; b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a &amp; b = {0}"</span>, c);  <span class="comment">// a &amp; b = 12</span></span><br><span class="line">            c = a | b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a | b = {0}"</span>, c);  <span class="comment">// a | b = 61</span></span><br><span class="line">            c = a ^ b;</span><br><span class="line">            Console.WriteLine(<span class="string">"a ^ b = {0}"</span>, c);  <span class="comment">// a ^ b = 49</span></span><br><span class="line">            c = ~a;</span><br><span class="line">            Console.WriteLine(<span class="string">"~a = {0}"</span>, c);  <span class="comment">// ~a = -61</span></span><br><span class="line">            c = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"a &lt;&lt; 2 = {0}"</span>, c);  <span class="comment">// a &lt;&lt; 2 = 240</span></span><br><span class="line">            c = a &gt;&gt; <span class="number">2</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"a &gt;&gt; 2 = {0}"</span>, c);  <span class="comment">// a &gt;&gt; 2 = 15</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-5-赋值运算符">4.5 赋值运算符</h3><table><thead><tr><th>赋值运算符</th><th>描述</th><th>赋值运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>右边赋值给左边</td><td><code>+=</code></td><td>左边+右边赋值给左边</td></tr><tr><td><code>-=</code></td><td>左边-右边赋值给左边</td><td><code>*=</code></td><td>左边*右边赋值给左边</td></tr><tr><td><code>/=</code></td><td>左边/右边赋值给左边</td><td><code>%=</code></td><td>左边%右边赋值给左边</td></tr><tr><td><code>&lt;&lt;=</code></td><td>左移且赋值给左边</td><td><code>&gt;&gt;=</code></td><td>右移且赋值给左边</td></tr><tr><td><code>&amp;=</code></td><td>按位与且赋值给左边</td><td><code>^=</code></td><td>按位异或且赋值给左边</td></tr><tr><td><code>|=</code></td><td>按位或且赋值给左边</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">AssignmentOperatorsTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">21</span>;</span><br><span class="line">            <span class="built_in">int</span> c;</span><br><span class="line">            c = a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 21</span></span><br><span class="line">            c += a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 42</span></span><br><span class="line">            c -= a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 21</span></span><br><span class="line">            c *= a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 441</span></span><br><span class="line">            c /= a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 21</span></span><br><span class="line">            c = <span class="number">200</span>;</span><br><span class="line">            c %= a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 11</span></span><br><span class="line">            c &lt;&lt;= a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 23068672</span></span><br><span class="line">            c &gt;&gt;= a;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 11</span></span><br><span class="line">            c &amp;= <span class="number">2</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 2</span></span><br><span class="line">            c ^= <span class="number">2</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 0</span></span><br><span class="line">            c |= <span class="number">2</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"c = {0}"</span>, c);  <span class="comment">// c = 2</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-6-其他运算符">4.6 其他运算符</h3><table><thead><tr><th>其他运算符</th><th>描述</th><th>其他运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>sizeof()</code></td><td>返回数据类型的大小</td><td><code>typeof()</code></td><td>返回class的类型</td></tr><tr><td><code>&amp;</code></td><td>返回变量的地址</td><td><code>*</code></td><td>变量的指针</td></tr><tr><td><code>is</code></td><td>判断对象是否为某一类型</td><td><code>as</code></td><td>强制转换，即使失败也不抛异常</td></tr><tr><td><code>?:</code></td><td>三元运算符</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">AssignmentOperatorsTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"int的大小是{0}"</span>, <span class="keyword">sizeof</span>(<span class="built_in">int</span>));  <span class="comment">// int的大小是4</span></span><br><span class="line">            Console.WriteLine(<span class="string">"short的大小是{0}"</span>, <span class="keyword">sizeof</span>(<span class="built_in">short</span>));  <span class="comment">// short的大小是2</span></span><br><span class="line">            Console.WriteLine(<span class="string">"double的大小是{0}"</span>, <span class="keyword">sizeof</span>(<span class="built_in">double</span>));  <span class="comment">// double的大小是8</span></span><br><span class="line">            <span class="built_in">int</span> a, b;</span><br><span class="line">            a = <span class="number">10</span>;</span><br><span class="line">            b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"b的值是{0}"</span>, b);  <span class="comment">// b的值是30</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="5-条件控制">5. 条件控制</h2><h3 id="5-1-if语句">5.1 if语句</h3><p>由一个布尔表达式后跟一个或多个语句组成。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">IfStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line">            <span class="comment">// 使用if语句检查布尔条件，如果为真则进入if语句内</span></span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">10</span>) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a大于10"</span>);  <span class="comment">// a大于10</span></span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}"</span>, a);  <span class="comment">// a = 20</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-if…else语句">5.2 if…else语句</h3><p>一个<code>if</code>语句后跟一个可选的else语句，<code>else</code>语句在布尔表达式为<strong>false</strong>时执行。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">IfElseStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">5</span>;</span><br><span class="line">            <span class="comment">// 使用if语句检查布尔条件，如果为真则进入if语句内，否则进入else语句内</span></span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">10</span>) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a大于10"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a小于或等于10"</span>);  <span class="comment">// a小于或等于10</span></span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}"</span>, a);  <span class="comment">// a = 5</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-if…else-if…else语句">5.3 if…else if…else语句</h3><p>一个<code>if</code>语句后可跟一个可选的<code>else if ... else</code>语句，用于测试多个条件：</p><ul><li>一个<code>if</code>后可跟零个或一个<code>else</code>，它必须在所有的<code>else if</code>之后</li><li>一个<code>if</code>后可跟两个或多个<code>else if</code>，它们必须在<code>else</code>之前</li><li>一旦某个<code>else if</code>匹配成功，其他<code>else if</code>或<code>else</code>将不会被测试</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">IfElseIFElseStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">10</span>) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a等于10"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">10</span>)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a大于10"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a小于10"</span>);  <span class="comment">// a小于10</span></span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}"</span>, a);  <span class="comment">// a = 5</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-嵌套if语句">5.4 嵌套if语句</h3><p>嵌套<code>if</code>语句意味着你可以在一个<code>if</code>或<code>else if</code>语句内使用另一个<code>if</code>或<code>else if</code>语句。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NestedIfStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">100</span>) </span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="number">200</span>) </span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine(<span class="string">"a = 100, b = 200"</span>);  <span class="comment">// a = 100, b = 200</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-5-switch语句">5.5 switch语句</h3><p>一个<code>switch</code>语句允许测试一个变量等于多个值时的情况。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SwitchStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> day = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">switch</span> (day)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"Monday"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"Tuesday"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"Wednesday"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"Thurday"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"Friday"</span>);  <span class="comment">// Friday</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"Saturday"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"Sunday"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-6-嵌套switch语句">5.6 嵌套switch语句</h3><p>可以在一个<code>switch</code>语句内使用另一个<code>switch</code>语句，不推荐这样做。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NestedSwitchStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">switch</span> (a)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">"a = 100"</span>);  <span class="comment">// a = 100</span></span><br><span class="line">                    <span class="keyword">switch</span> (b)</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">                            Console.WriteLine(<span class="string">"b = 200"</span>);  <span class="comment">// b = 200</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-7-三元运算符">5.7 三元运算符</h3><p>三元运算符又称条件运算符，可以用来代替<code>if...else</code>语句，形式如<code>Exp1 ? Exp2 : Exp3;</code>。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TernaryOperatorTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b = a == <span class="number">200</span> ? <span class="number">100</span> : <span class="number">300</span>;</span><br><span class="line">            <span class="comment">/* 等价于</span></span><br><span class="line"><span class="comment">            int b;</span></span><br><span class="line"><span class="comment">            if (a == 200)</span></span><br><span class="line"><span class="comment">            {</span></span><br><span class="line"><span class="comment">                b = 100;</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">            {</span></span><br><span class="line"><span class="comment">                b = 300;</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}, b = {1}"</span>, a, b);  <span class="comment">// a = 100, b = 300</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-循环控制">6. 循环控制</h2><p>循环语句允许多次执行一个语句或语句组。</p><h3 id="6-1-while循环">6.1 while循环</h3><p>只要给定条件为真，<code>while</code>循环语句会重复执行一个目标语句，<code>while</code>循环又称为<strong>当型循环</strong>，在执行循环主体之前测试条件。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">WhileStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">while</span> (a &lt; <span class="number">7</span>)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a = {0}"</span>, a);</span><br><span class="line">                a++;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// a = 3</span></span><br><span class="line">            <span class="comment">// a = 4</span></span><br><span class="line">            <span class="comment">// a = 5</span></span><br><span class="line">            <span class="comment">// a = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-for-foreach循环">6.2 for/foreach循环</h3><p><strong>for</strong></p><p><code>for</code>循环是允许编写一个执行特定次数循环的循环控制结构。</p><p>语法为：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">for (init; condition; increment)</span><br><span class="line">{</span><br><span class="line">    statement(s);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ForStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> a = <span class="number">3</span>; a &lt; <span class="number">7</span>; a++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a = {0}"</span>, a);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// a = 3</span></span><br><span class="line">            <span class="comment">// a = 4</span></span><br><span class="line">            <span class="comment">// a = 5</span></span><br><span class="line">            <span class="comment">// a = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>foreach</strong></p><p><code>foreach</code>可以迭代数组或者一个集合对象。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ForeachStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[]{<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> num <span class="keyword">in</span> array)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"num = {0}"</span>, num);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// num = 3</span></span><br><span class="line">            <span class="comment">// num = 4</span></span><br><span class="line">            <span class="comment">// num = 5</span></span><br><span class="line">            <span class="comment">// num = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-do…while循环">6.3 do…while循环</h3><p><code>do...while</code>循环是在尾部检查循环条件，直到给定的条件变为假为止。<code>do...while</code>又称<strong>直到型循环</strong>，会保证循环体至少执行一次。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DoWhileStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a = {0}"</span>, a);</span><br><span class="line">                a += <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">while</span> (a &lt; <span class="number">7</span>);</span><br><span class="line">            <span class="comment">// a = 3</span></span><br><span class="line">            <span class="comment">// a = 4</span></span><br><span class="line">            <span class="comment">// a = 5</span></span><br><span class="line">            <span class="comment">// a = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-4-嵌套循环">6.4 嵌套循环</h3><p><code>C#</code>允许在任何类型循环内嵌套任何类型的循环。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NestedLoopStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">                {</span><br><span class="line">                    Console.Write(<span class="string">"{0} * {1} = {2}\t"</span>, j, i, i * j);</span><br><span class="line">                }</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 * 1 = 1</span></span><br><span class="line"><span class="comment">1 * 2 = 2       2 * 2 = 4</span></span><br><span class="line"><span class="comment">1 * 3 = 3       2 * 3 = 6       3 * 3 = 9</span></span><br><span class="line"><span class="comment">1 * 4 = 4       2 * 4 = 8       3 * 4 = 12      4 * 4 = 16</span></span><br><span class="line"><span class="comment">1 * 5 = 5       2 * 5 = 10      3 * 5 = 15      4 * 5 = 20      5 * 5 = 25</span></span><br><span class="line"><span class="comment">1 * 6 = 6       2 * 6 = 12      3 * 6 = 18      4 * 6 = 24      5 * 6 = 30      6 * 6 = 36</span></span><br><span class="line"><span class="comment">1 * 7 = 7       2 * 7 = 14      3 * 7 = 21      4 * 7 = 28      5 * 7 = 35      6 * 7 = 42      7 * 7 = 49</span></span><br><span class="line"><span class="comment">1 * 8 = 8       2 * 8 = 16      3 * 8 = 24      4 * 8 = 32      5 * 8 = 40      6 * 8 = 48      7 * 8 = 56      8 * 8 = 64</span></span><br><span class="line"><span class="comment">1 * 9 = 9       2 * 9 = 18      3 * 9 = 27      4 * 9 = 36      5 * 9 = 45      6 * 9 = 54      7 * 9 = 63      8 * 9 = 72     9 * 9 = 81</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-5-break语句">6.5 break语句</h3><p><code>break</code>语句有两种用法：</p><ul><li>当<code>break</code>语句出现在一个循环内时，循环会立即终止，跳出当前循环体，执行下一条语句</li><li>可用于<code>switch</code>语句中终止一个<code>case</code></li></ul><p>注意，如果是嵌套循环，<code>break</code>循环只会跳出他所在的那一层循环。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">BreakStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">while</span> (a &lt; <span class="number">1000</span>) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"a = {0}"</span>, a);</span><br><span class="line">                a++;</span><br><span class="line">                <span class="keyword">if</span> (a &gt; <span class="number">6</span>) </span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// a = 3</span></span><br><span class="line">            <span class="comment">// a = 4</span></span><br><span class="line">            <span class="comment">// a = 5</span></span><br><span class="line">            <span class="comment">// a = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-6-continue语句">6.6 continue语句</h3><p><code>continue</code>语句会提前结束这次循环，开始下一次循环。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ContinueStatementTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">while</span> (a &lt; <span class="number">7</span>) </span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (a == <span class="number">4</span>) </span><br><span class="line">                {</span><br><span class="line">                    a++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                Console.WriteLine(<span class="string">"a = {0}"</span>, a);</span><br><span class="line">                a++;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// a = 3</span></span><br><span class="line">            <span class="comment">// a = 5</span></span><br><span class="line">            <span class="comment">// a = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7-数组">7. 数组</h2><p>数组是存储<strong>相同类型</strong>元素的固定大小的<strong>顺序</strong>集合，数组中某个指定元素是通过索引来访问的，所有的数组是由连续的内存位置组成，最低的地址对应第一个元素，最高的地址对应最后一个元素。</p><h3 id="7-1-声明">7.1 声明</h3><p>声明语法为<code>datatype[] arrayName;</code>，其中datatype用于指定数组内元素的类型，[]指定数组的大小，arrayName指定数组的名字，如<code>double[] balance;</code>。</p><h3 id="7-2-初始化">7.2 初始化</h3><p>声明一个数组不会在内存中初始化数组，当初始化数组遍历时，可以赋值给数组。</p><p>数组是一个引用类型，所以需要使用<code>new</code>关键字来创建数组的实例，如<code>double[] balance = new double[10];</code>。</p><h3 id="7-3-赋值">7.3 赋值</h3><p>赋值有多种形式，可以通过索引号赋值给单个的数组元素，如<code>balance[0] = 123.0;</code>。</p><p>也可以在声明的同时给数组赋值，如<code>double[] balance = {123.0, 456.0, 789.0};</code>。</p><p>还可以创建并初始化一个数组，如<code>int[] marks = new int[3]{1, 2, 3};</code>，此处可以省略数组的大小，即<code>int[] marks = new int[]{1, 2, 3};。</code></p><p>可以赋值给一个数组变量到另一个目标数组变量中，此时目标和源会指向相同的内存位置。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] marks = <span class="keyword">new</span> <span class="built_in">int</span>[]{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"><span class="built_in">int</span>[] numbers = marks;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-4-访问数组元素">7.4 访问数组元素</h3><p>元素是通过带索引的数组名称来访问的，如<code>int a = numbers[1];</code>。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayTest1</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span>[] num = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];  <span class="comment">// 声明并初始化</span></span><br><span class="line">            <span class="comment">// 循环赋值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                num[i] = i + <span class="number">100</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 循环访问、遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"num[{0}] = {1}"</span>, j, num[j]);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// num[0] = 100</span></span><br><span class="line">            <span class="comment">// num[1] = 101</span></span><br><span class="line">            <span class="comment">// num[2] = 102</span></span><br><span class="line">            <span class="comment">// num[3] = 103</span></span><br><span class="line">            <span class="comment">// num[4] = 104</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>除了使用<code>for</code>循环来访问数组中每个元素，还可以使用<code>foreach</code>语句</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayTest2</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span>[] num = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];  <span class="comment">// 声明并初始化</span></span><br><span class="line">            <span class="comment">// 循环赋值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                num[i] = i + <span class="number">100</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 遍历</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> j <span class="keyword">in</span> num)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"num[{0}] = {1}"</span>, j - <span class="number">100</span>, j);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// num[0] = 100</span></span><br><span class="line">            <span class="comment">// num[1] = 101</span></span><br><span class="line">            <span class="comment">// num[2] = 102</span></span><br><span class="line">            <span class="comment">// num[3] = 103</span></span><br><span class="line">            <span class="comment">// num[4] = 104</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-5-多维数组">7.5 多维数组</h3><p><code>C#</code>支持多维数组，多维数组又称为矩形数组，二维数组是最简单最常用的多维数组，可以被认为是一个带有x行和y列的表格。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TwoDArrayTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 声明初始化并赋值</span></span><br><span class="line">            <span class="built_in">int</span>[,] num = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>, <span class="number">2</span>] {{<span class="number">1</span>, <span class="number">2</span>}, {<span class="number">3</span>, <span class="number">4</span>}, {<span class="number">5</span>, <span class="number">6</span>}};</span><br><span class="line">            <span class="comment">// 遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine(<span class="string">"num[{0},{1}] = {2}"</span>, i, j, num[i, j]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// num[0,0] = 1</span></span><br><span class="line">            <span class="comment">// num[0,1] = 2</span></span><br><span class="line">            <span class="comment">// num[1,0] = 3</span></span><br><span class="line">            <span class="comment">// num[1,1] = 4</span></span><br><span class="line">            <span class="comment">// num[2,0] = 5</span></span><br><span class="line">            <span class="comment">// num[2,1] = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-6-交替数组">7.6 交替数组</h3><p>交替数组是数组的数组，是一维数组。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">AlternatingArrayTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 声明初始化并赋值</span></span><br><span class="line">            <span class="built_in">int</span>[][] num = <span class="keyword">new</span> <span class="built_in">int</span>[][] {<span class="keyword">new</span> <span class="built_in">int</span>[]{<span class="number">1</span>, <span class="number">2</span>}, <span class="keyword">new</span> <span class="built_in">int</span>[]{<span class="number">3</span>, <span class="number">4</span>}, <span class="keyword">new</span> <span class="built_in">int</span>[]{<span class="number">5</span>, <span class="number">6</span>}};</span><br><span class="line">            <span class="comment">// 遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine(<span class="string">"num[{0}][{1}] = {2}"</span>, i, j, num[i][j]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// num[0][0] = 1</span></span><br><span class="line">            <span class="comment">// num[0][1] = 2</span></span><br><span class="line">            <span class="comment">// num[1][0] = 3</span></span><br><span class="line">            <span class="comment">// num[1][1] = 4</span></span><br><span class="line">            <span class="comment">// num[2][0] = 5</span></span><br><span class="line">            <span class="comment">// num[2][1] = 6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-7-传递数组给函数">7.7 传递数组给函数</h3><p>可以传递数组作为函数的参数，可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayAndFunctionTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="built_in">double</span> <span class="title">GetAverage</span>(<span class="params"><span class="built_in">int</span>[] arr, <span class="built_in">int</span> size</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++) </span><br><span class="line">            {</span><br><span class="line">                sum += arr[i];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">double</span>) sum / size;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span>[] num = <span class="keyword">new</span> <span class="built_in">int</span>[]{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>};</span><br><span class="line">            ArrayAndFunctionTest app = <span class="keyword">new</span> ArrayAndFunctionTest();</span><br><span class="line">            <span class="built_in">double</span> avg = app.GetAverage(num, <span class="number">4</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"avg = {0}"</span>, avg);  <span class="comment">// avg = 2.5</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-8-参数数组">7.8 参数数组</h3><p>当声明一个方法时，可能无法确定传递给函数的参数数目，此时，可以使用参数数组解决该问题，参数数组通常用于传递未知数量的参数给函数。C#提供了<code>params</code>关键字，是调用数组为形参的方法时，既可以传递数组实参，又可以传递一组数组元素。其格式为<code>public 返回类型 方法名称(params 类型名称[] 数组名称)</code>。</p><p>注意：</p><ul><li>带<code>params</code>关键字的参数类型必须是一维数组，不能使用多维数组</li><li>不能和<code>ref</code>、<code>out</code>同时使用</li><li>带<code>params</code>关键字的参数必须是最后一个参数，并且只能运行一个<code>params</code>关键字</li><li>不能使用<code>params</code>来使用重载方法</li><li>没有<code>params</code>关键字的方法优先级高于有<code>params</code>关键字的方法</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayAndParamsTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"a + b = {0}"</span>, a + b);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] arr</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arr)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(<span class="string">"{0} "</span>, i);</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Test(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// a + b = 3</span></span><br><span class="line">            Test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);  <span class="comment">// 1 2 3 4 5</span></span><br><span class="line">            <span class="built_in">int</span>[] arr = {<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>};</span><br><span class="line">            Test(arr);  <span class="comment">// 1 1 2 2</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-9-Array类">7.9 Array类</h3><p><code>Array</code>类是C#中所有数组的基类，他是在<code>System</code>命名空间定义的，<code>Array</code>类提供了各种用于数组的属性和方法。</p><p><strong>属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>IsFixedSize</code></td><td>获取一个值，该值指示数组是否带有固定大小</td></tr><tr><td><code>IsReadOnly</code></td><td>获取一个值，该值指示数组是否只读</td></tr><tr><td><code>Length</code></td><td>获取一个32位整数，该值表示所有维度的数组的元素总数</td></tr><tr><td><code>LongLength</code></td><td>获取一个64位整数，该值表示所有维度的数组的元素总数</td></tr><tr><td><code>Rank</code></td><td>获取数组的维度</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Clear</code></td><td>根据元素类型，设置数组中某个范围的元素为零、false或null</td><td><code>Copy(Array, Array, Int32)</code></td><td>从数组的第一个元素开始复制某个范围的元素到另一个数组的第一个元素位置</td></tr><tr><td><code>CopyTo(Array, Int32)</code></td><td>从当前的一维数组中复制所有元素到一个指定的一维数组的指定索引位置</td><td><code>GetLength</code></td><td>获取一个32位整数，表示指定维度的数组中的元素总和</td></tr><tr><td><code>GetLongLength</code></td><td>获取一个64位整数，表示指定维度的数组中的元素总和</td><td><code>GetLowerBound</code></td><td>获取数组中指定维度的下界</td></tr><tr><td><code>GetType</code></td><td>获取当前实例的类型</td><td><code>GetUpperBound</code></td><td>获取数组中指定维度的上界</td></tr><tr><td><code>GetValue(Int32)</code></td><td>获取一维数组中指定位置的值</td><td><code>IndexOf(Array, Object)</code></td><td>搜索指定的对象，返回整个一维数组中第一次出现的索引</td></tr><tr><td><code>Reverse(Array)</code></td><td>逆转整个一维数组中元素的顺序</td><td><code>SetValue(Object, Int32)</code></td><td>给一维数组中指定位置的元素设置值</td></tr><tr><td><code>Sort(Array)</code></td><td>使用数组的每个元素的<strong>IComparable</strong>接口实现排序</td><td><code>ToString</code></td><td>返回当前对象的字符串</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayClassTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span>[] list = {<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>};</span><br><span class="line">            Console.WriteLine(<span class="string">"数组长度：{0}"</span>, list.Length);</span><br><span class="line">            Console.Write(<span class="string">"原始数组："</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> list)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(i + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Array.Reverse(list);</span><br><span class="line">            Console.Write(<span class="string">"逆转数组："</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> list)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(i + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Array.Sort(list);</span><br><span class="line">            Console.Write(<span class="string">"排序数组："</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> list)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(i + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            <span class="comment">// 数组长度：6</span></span><br><span class="line">            <span class="comment">// 原始数组：3 2 5 8 7 6 </span></span><br><span class="line">            <span class="comment">// 逆转数组：6 7 8 5 2 3 </span></span><br><span class="line">            <span class="comment">// 排序数组：2 3 5 6 7 8</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-10-Array、ArrayList与泛型List-T-的区别">7.10 Array、ArrayList与泛型List&lt;T&gt;的区别</h3><p><strong>Array</strong></p><p>数组<code>Array</code>是一个存储相同类型元素的固定大小的顺序集合，数组是用来存储数据的集合，通常认为数组是一个同一类型变量的集合。</p><p><code>Array</code>类是**C#**中所有数组的基类，在<code>System</code>空间定义的。</p><p>数组在内存中是连续存储的，所以优点是索引速度很快，赋值和修改元素也非常简单。</p><p>缺点是声明数组的时候必须指定数组的长度；如果数组太长会造成内存浪费，太短会造成数据溢出的错误；在数组两个数据间插入数据很麻烦。</p><p><strong>ArrayList</strong></p><p>为了解决数组的缺点，<strong>C#<strong>提供了<code>ArrayList</code>对象，<code>ArrayList</code>是在命名空间<code>System.Collections</code>下，使用该类时必须进行引用，同时继承了</strong>IList</strong>接口，提供了数据存储和检索。</p><p><code>ArrayList</code>对象的大小是按照其中存储的数据来动态扩充与收缩的，不需要再声明时指定长度。</p><p><code>ArrayList</code>的默认初始容量是0，随着元素添加到<code>ArrayList</code>中，容量会根据需要重新分配自动增加。</p><p><code>ArrayList</code>解决了前面提到的Array数组的所有缺点，但是在存储或检索值类型时通常会发生装箱和拆箱操作，带来很大性能损耗，不是类型安全的。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayListTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            list.Add(<span class="string">"Hello"</span>);</span><br><span class="line">            list.Add(<span class="string">"World"</span>);</span><br><span class="line">            list.Add(<span class="string">"!"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Count: {0}, Capacity: {1}"</span>, list.Count, list.Capacity);</span><br><span class="line">            PrintValues(list);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            <span class="comment">// Count: 3, Capacity: 4</span></span><br><span class="line">            <span class="comment">// Hello World !</span></span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintValues</span>(<span class="params">IEnumerable list</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">object</span> obj <span class="keyword">in</span> list)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(<span class="string">"{0} "</span>, obj);</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>泛型List&lt;T&gt;</strong></p><p>由于<code>ArrayList</code>存在不安全类型与装箱拆箱的缺点，所以出现了<code>List</code>类，该类使用大小可按需动态增加的数组实现<strong>IList</strong>泛型接口，是类型安全的，在声明<code>List</code>集合时，必须为其<code>List</code>集合内数据声明数据类型。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ListTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            list.Add(<span class="string">"Hello"</span>);</span><br><span class="line">            list.Add(<span class="string">"World"</span>);</span><br><span class="line">            list.Add(<span class="string">"!"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Count: {0}, Capacity: {1}"</span>, list.Count, list.Capacity);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> e <span class="keyword">in</span> list)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(<span class="string">"{0} "</span>, e);</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            <span class="comment">// Count: 3, Capacity: 4</span></span><br><span class="line">            <span class="comment">// Hello World !</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong>：</p><ul><li><p>数组<code>Array</code>的容量固定，而<code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>的容量可自动扩充</p></li><li><p>数组<code>Array</code>可有多个维度，而<code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>始终只有一个维度</p></li><li><p>特定类型的数组<code>Array</code>性能优于<code>ArrayList</code>的性能</p></li><li><p><code>ArrayList</code>和泛型<code>List&lt;T&gt;</code>基本等同，如果<code>List&lt;T&gt; </code>类的类型T是引用类型，则两个类的行为是完全相同的。如果T是值类型，需要考虑装箱和拆箱造成的性能损耗，<code>List&lt;T&gt; </code>是类型安全</p></li></ul><h2 id="8-枚举">8. 枚举</h2><p>枚举是一种类型，适用于某些取值范围有限的数据，枚举类型是使用<code>enum</code>关键字声明的，默认访问权限和类一样，都是<strong>internal</strong>，枚举的每一个值都是一个整型，默认是从0开始。</p><h3 id="8-1-声明">8.1 声明</h3><p>声明的一般语法为 <code>[访问权限修饰符] enum &lt;enum_name&gt; { enumeration list }</code></p><p>其中<code>enum_name</code>为枚举的类型名称，遵循大驼峰命名法，<code>enumeration list</code>是一个用逗号分割的标识符列表，如</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Days</span><br><span class="line">{</span><br><span class="line">    Sun, Mon, Tue, Wed, Thu, Fri, Sat</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8-2-访问">8.2 访问</h3><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">EnumTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">enum</span> Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat}</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(Days.Sun);  <span class="comment">// Sun</span></span><br><span class="line">            Console.WriteLine((<span class="built_in">int</span>)Days.Sun);  <span class="comment">// 0</span></span><br><span class="line">            Console.WriteLine((Days)<span class="number">4</span>);  <span class="comment">// Thu</span></span><br><span class="line">            Days a = (Days)<span class="number">4</span>;</span><br><span class="line">            Console.WriteLine(a.ToString());  <span class="comment">// Thu</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="9-字符串">9. 字符串</h2><h3 id="9-1-创建String对象">9.1 创建String对象</h3><p>使用以下方法来创建<code>String</code>对象：</p><ul><li>通过给<code>String</code>变量指定一个字符串</li><li>通过使用<code>String</code>类构造函数</li><li>通过使用字符串串联符号<code>+</code></li><li>通过检索属性或调用一个返回字符串的方法</li><li>通过格式化方法来转换一个值或对象为它的字符串表示形式</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StringCreateTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 指定一个字符串</span></span><br><span class="line">            <span class="built_in">string</span> fname, lname;</span><br><span class="line">            fname = <span class="string">"Harry"</span>;</span><br><span class="line">            lname = <span class="string">"Peter"</span>;</span><br><span class="line">            <span class="comment">// 通过+符号连接</span></span><br><span class="line">            <span class="built_in">string</span> fullname = fname + lname;</span><br><span class="line">            Console.WriteLine(<span class="string">"Full Name: {0}"</span>, fullname);  <span class="comment">// Full Name: HarryPeter</span></span><br><span class="line">            <span class="comment">// 使用string构造函数</span></span><br><span class="line">            <span class="built_in">char</span>[] letters = {<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>};</span><br><span class="line">            <span class="built_in">string</span> greetings = <span class="keyword">new</span> <span class="built_in">string</span>(letters);</span><br><span class="line">            Console.WriteLine(<span class="string">"Greetings: {0}"</span>, greetings);  <span class="comment">// Greetings: Hello</span></span><br><span class="line">            <span class="comment">// 方法返回字符串</span></span><br><span class="line">            <span class="built_in">string</span>[] sarray = {<span class="string">"Hello"</span>, <span class="string">"From"</span>, <span class="string">"C#"</span>};</span><br><span class="line">            <span class="built_in">string</span> message = String.Join(<span class="string">" "</span>, sarray);</span><br><span class="line">            Console.WriteLine(<span class="string">"Message: {0}"</span>, message);  <span class="comment">// Message: Hello from C#</span></span><br><span class="line">            <span class="comment">// 用于转化值的格式化方法</span></span><br><span class="line">            DateTime waiting = <span class="keyword">new</span> DateTime(<span class="number">2022</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">string</span> chat01 = String.Format(<span class="string">"Message sent at {0:t} on {0:D}"</span>, waiting);</span><br><span class="line">            Console.WriteLine(<span class="string">"Message: {0}"</span>, chat01);  <span class="comment">// Message: Message sent at 9:01 on Monday, October 10, 2022</span></span><br><span class="line">            <span class="built_in">string</span> chat02 = <span class="string">$"Message sent at <span class="subst">{waiting:t}</span> on <span class="subst">{waiting:D}</span>"</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"Message: {0}"</span>, chat02);  <span class="comment">// Message: Message sent at 9:01 on Monday, October 10, 2022</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="9-2-属性和方法">9.2 属性和方法</h3><p><code>String</code>类有两个属性:</p><ul><li><code>Chars</code>：在当前<code>String</code>对象中获取<code>Char</code>对象的指定位置</li><li><code>Length</code>：在当前<code>String</code>对象中获取字符数</li></ul><p><code>String</code>类的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td><code>public static int Compare(string strA, string strB)</code></td><td>比较两个指定的string对象，并返回一个表示他们在排列顺序中相对位置的整数。该方法区分大小写</td><td><code>public static int Compare(string strA, string strB, bool ignoreCase)</code></td><td>比较两个指定的string对象，并返回一个表示他们在排列顺序中相对位置的整数。该方法不区分大小写</td></tr><tr><td><code>public static string Concat(string str0, string str1)</code></td><td>连接两个string对象</td><td><code>public static string Concat(string str0, string str1, string str2)</code></td><td>连接三个string对象</td></tr><tr><td><code>public static string Concat(string str0, string str1, string str2, string str3)</code></td><td>连接四个string对象</td><td><code>public bool Contains(string value)</code></td><td>返回一个表示指定string对象是否出现在字符串中的值</td></tr><tr><td><code>public static string Copy(string str)</code></td><td>创建一个与指定字符串具有相同值的新string对象</td><td><code>public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)</code></td><td>从string对象的指定位置开始复制指定数量的字符到Unicode字符数组中的指定位置</td></tr><tr><td><code>public bool EndsWith(string value)</code></td><td>判断string对象的结尾是否匹配指定的字符串</td><td><code>public bool Equals(string value)</code></td><td>判断当前的string对象是否与指定的string对象具有相同的值</td></tr><tr><td><code>public static bool Equals(string value)</code></td><td>判断两个指定的string对象是否具有相同的值</td><td><code>public static string Format(string format, Object arg0)</code></td><td>把指定字符串中一个或多个格式项替换为指定对象的字符串表示形式</td></tr><tr><td><code>public int IndexOf(char value)</code></td><td>返回指定Unicode字符在当前字符串中第一次出现的索引，索引从0开始</td><td><code>public int IndexOf(string value)</code></td><td>返回指定字符串在该实例中第一次出现的索引，索引从0开始</td></tr><tr><td><code>public int IndexOf(char value, int startIndex)</code></td><td>返回指定Unicode字符在当前字符串中指定字符位置开始搜索第一次出现的索引，索引从0开始</td><td><code>public int IndexOf(string value, int startIndex)</code></td><td>返回指定字符串在当前字符串中指定字符位置开始搜索第一次出现的索引，索引从0开始</td></tr><tr><td><code>public int IndexOfAny(char[] anyOf)</code></td><td>返回某一个指定的Unicode字符数组中任意字符在该实例中第一次出现的索引，索引从0开始</td><td><code>public int IndexOfAny(char[] anyOf, int startIndex)</code></td><td>返回某一个指定的Unicode字符数组从任意字符指定字符位置开始搜索第一次出现的索引，索引从0开始</td></tr><tr><td><code>public string Insert(int startIndex, string value)</code></td><td>返回一个新的字符串，其中，指定的字符串被插入在当前string对象的指定索引位置</td><td><code>public static bool IsNullOrEmpty(string value)</code></td><td>指示指定的字符串是否为null或者是否为一个空的字符串</td></tr><tr><td><code>public static string Join(string separator, string[] value)</code></td><td>连接一个字符串数组中的所有元素，使用指定的分隔符分割每个元素</td><td><code>public static string Join(string separator, string[] value, int startIndex, int count)</code></td><td>连接一个字符串数组中从指定位置开始的元素，使用指定的分隔符分割每个元素</td></tr><tr><td><code>public int LastIndexOf(char value)</code></td><td>返回指定Unicode字符在当前string对象中最后一次出现的索引位置，索引从0开始</td><td><code>public int LastIndexOf(string value)</code></td><td>返回指定字符串在当前string对象中最后一次出现的索引位置，索引从0开始</td></tr><tr><td><code>public string Remove(int startIndex)</code></td><td>移除当前实例中的所有字符，从指定位置开始，一直到最后一个位置为止，并返回字符串</td><td><code>public string Remove(int startIndex, int count)</code></td><td>从当前字符串的指定位置开始移除指定数量的字符，并返回字符串</td></tr><tr><td><code>public string Replace(char oldChar, char newChar)</code></td><td>把当前string对象中，所有指定的Unicode字符替换为另一个Unicode字符，并返回新的字符串</td><td><code>public string Replace(string oldValue, string newValue)</code></td><td>把当前string对象中，所有指定的字符串替换为另一个指定的字符串，并返回新的字符串</td></tr><tr><td><code>public string[] Split(params char[] separator)</code></td><td>返回一个字符串数组，包含当前的string对象中的子字符串，子字符串是按照指定的Unicode字符数组中的元素进行分隔的</td><td><code>public string[] Split(char[] separator, int count)</code></td><td>返回一个字符串数组，包含当前的string对象中的子字符串，子字符串是按照指定的Unicode字符数组中的元素进行分隔的,count指定要返回的子字符串最大数目</td></tr><tr><td><code>public bool StartsWith(string value)</code></td><td>判断字符串实例的开头是否匹配指定的字符串</td><td><code>public char[] ToCharArray()</code></td><td>返回一个带有当前string对象中所有字符的Unicode字符数组</td></tr><tr><td><code>public char[] ToCharArray(int startIndex, int length)</code></td><td>返回一个带有当前string对象中所有字符的Unicode字符数组，从指定索引开始，直到到达指定的长度为止</td><td><code>public string ToLower()</code></td><td>把字符串转换为小写并返回</td></tr><tr><td><code>public string ToUpper()</code></td><td>把字符串转换为大写并返回</td><td><code>public string Trim()</code></td><td>移除当前string对象中前后所有的空白字符</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StringMethodsTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">string</span> str1 = <span class="string">"This is text"</span>;</span><br><span class="line">            <span class="built_in">string</span> str2 = <span class="string">"This is test"</span>;</span><br><span class="line">            <span class="keyword">if</span> (String.Compare(str1, str2) == <span class="number">0</span>) </span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(str1 + <span class="string">" and "</span> + str2 + <span class="string">" are equal."</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(str1 + <span class="string">" and "</span> + str2 + <span class="string">" are not equal."</span>);</span><br><span class="line">                <span class="comment">// This is text and This is test are not equal.</span></span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (str1.Contains(<span class="string">"text"</span>))</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"The sequence 'text' was found."</span>);</span><br><span class="line">                <span class="comment">// The sequence 'text' was found.</span></span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">string</span> substr = str1.Substring(<span class="number">8</span>);</span><br><span class="line">            Console.WriteLine(substr); <span class="comment">// text</span></span><br><span class="line">            <span class="built_in">string</span>[] strarray = <span class="keyword">new</span> <span class="built_in">string</span>[]{<span class="string">"Hello world"</span>, <span class="string">"Hello Csharp"</span>, <span class="string">"Hello Sunday"</span>};</span><br><span class="line">            <span class="built_in">string</span> str = String.Join(<span class="string">"\n"</span>, strarray);</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            <span class="comment">// Hello world</span></span><br><span class="line">            <span class="comment">// Hello Csharp</span></span><br><span class="line">            <span class="comment">// Hello Sunday</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="10-命名空间">10. 命名空间</h2><p>命名空间的设计目的是提供一种让一组名称与其他名称分隔的方式，可以使一个命名空间中声明的类名与另一个命名空间中声明的同类名不冲突。举个例子，一个文件夹中可以包含多个文件夹，每一个文件夹中不能有相同的文件名，但是不同文件夹中的文件可以重名。</p><h3 id="10-1-定义">10.1 定义</h3><p>以关键字<code>namespace</code>开始，后跟命名空间的名字</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FirstSpace</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ClassA</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyFunc</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"Inside FirstSpace"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SecondSpace</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ClassA</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyFunc</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"Inside SecondSpace"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    {</span><br><span class="line">        FirstSpace.ClassA fc = <span class="keyword">new</span> FirstSpace.ClassA();</span><br><span class="line">        SecondSpace.ClassA sc = <span class="keyword">new</span> SecondSpace.ClassA();</span><br><span class="line">        fc.MyFunc();  <span class="comment">// Inside FirstSpace</span></span><br><span class="line">        sc.MyFunc();  <span class="comment">// Inside SecondSpace</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="10-2-using的用法">10.2 using的用法</h3><ul><li><code>using指令</code>：可以引入命名空间，如：</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br></pre></td></tr></tbody></table></figure><ul><li><code>using static指令</code>：无需指定类型名称即可访问其静态成员的类型。</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Math;</span><br><span class="line"><span class="keyword">var</span> = PI;</span><br></pre></td></tr></tbody></table></figure><ul><li>起别名</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Project = PC.MyCompany.Project;</span><br></pre></td></tr></tbody></table></figure><ul><li><code>using语句</code>：将实例与代码绑定。</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (Font font3 = <span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">10.0f</span>),</span><br><span class="line">              font4 = <span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">10.0f</span>))</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// Use font3 and font4.</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 代码段结束时，自动调用font3和font4的Dispose方法，释放实例</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-3-嵌套命名空间">10.3 嵌套命名空间</h3><p>命名空间可以被嵌套，即可以在一个命名空间内部定义另一个命名空间，使用点运算符访问嵌套命名空间的成员。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace.Nested;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SomeNameSpace</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassA</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"Inside SomeNameSpace"</span>);  <span class="comment">// Inside SomeNameSpace</span></span><br><span class="line">            Nested.ClassB.MyFunc();  <span class="comment">// Inside Nested</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内嵌命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Nested</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassB</span></span><br><span class="line">        {</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyFunc</span>(<span class="params"></span>)</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"Inside Nested"</span>);</span><br><span class="line">            }</span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="11-类">11. 类</h2><p>类是对象的蓝图，对象是类的实例，构成类的方法和变量称为类的成员。</p><h3 id="11-1-定义">11.1 定义</h3><p>类的定义是以关键字<code>class</code>开始的，后跟类的名称，类的主体包含在一对花括号里面，主体的组成可能包括构造函数、析构函数、成员变量、成员函数，如：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">specifier</span>&gt;</span> class class_name</span><br><span class="line">{</span><br><span class="line">    // member variables</span><br><span class="line">    <span class="tag">&lt;<span class="name">access</span> <span class="attr">specifier</span>&gt;</span> <span class="tag">&lt;<span class="name">data</span> <span class="attr">type</span>&gt;</span> variable1;</span><br><span class="line">    <span class="tag">&lt;<span class="name">access</span> <span class="attr">specifier</span>&gt;</span> <span class="tag">&lt;<span class="name">data</span> <span class="attr">type</span>&gt;</span> variable2;</span><br><span class="line">    // member methods</span><br><span class="line">    <span class="tag">&lt;<span class="name">access</span> <span class="attr">specifier</span>&gt;</span> <span class="tag">&lt;<span class="name">return</span> <span class="attr">type</span>&gt;</span> method1(parameter_list)</span><br><span class="line">    {</span><br><span class="line">        // method body</span><br><span class="line">    }</span><br><span class="line">    <span class="tag">&lt;<span class="name">access</span> <span class="attr">specifier</span>&gt;</span> <span class="tag">&lt;<span class="name">return</span> <span class="attr">type</span>&gt;</span> method2(parameter_list)</span><br><span class="line">    {</span><br><span class="line">        // method body</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>访问标识符<code>&lt;access specifier&gt;</code>指定了对类及其成员的访问权限，如果没有指定，则使用默认的访问标志符，类的默认访问标识符是<code>internal</code>，成员的默认访问标识符是<code>private</code>。</li><li>数据类型<code>&lt;data type&gt;</code>指定了变量的类型，返回类型<code>&lt;return type&gt;</code>指定了方法返回的数据类型</li><li>如果要访问类的成员，使用<code>.</code>运算符，其链接了对象的名称和成员的名称。</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BoxApplication</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> width;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> height;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetVolume</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length * width * height;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Boxtest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Box box1 = <span class="keyword">new</span> Box();</span><br><span class="line">            Box box2 = <span class="keyword">new</span> Box();</span><br><span class="line">            <span class="built_in">double</span> volume = <span class="number">0.0</span>;</span><br><span class="line">            box1.length = <span class="number">5.0</span>;</span><br><span class="line">            box1.width = <span class="number">6.0</span>;</span><br><span class="line">            box1.height = <span class="number">7.0</span>;</span><br><span class="line">            box2.length = <span class="number">10.0</span>;</span><br><span class="line">            box2.width = <span class="number">11.0</span>;</span><br><span class="line">            box2.height = <span class="number">12.0</span>;</span><br><span class="line">            volume = box1.GetVolume();</span><br><span class="line">            Console.WriteLine(<span class="string">"Box1的体积：{0}"</span>, volume);  <span class="comment">// Box1的体积：210</span></span><br><span class="line">            volume = box2.GetVolume();</span><br><span class="line">            Console.WriteLine(<span class="string">"Box2的体积：{0}"</span>, volume);  <span class="comment">// Box2的体积：1320</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-2-成员函数和封装">11.2 成员函数和封装</h3><p>类的成员函数是在类内部定义的函数，能在类的任何对象上操作，其能访问该对象的所有成员。</p><p>类的成员变量是对象的属性，且保持私有来实现封装，这些变量只能使用公共成员函数来访问。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BoxApplication</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> width;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> height;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetLength</span>(<span class="params"><span class="built_in">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        {</span><br><span class="line">            length = <span class="keyword">value</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWidth</span>(<span class="params"><span class="built_in">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        {</span><br><span class="line">            width = <span class="keyword">value</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetHeight</span>(<span class="params"><span class="built_in">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        {</span><br><span class="line">            height = <span class="keyword">value</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetVolume</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length * width * height;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Boxtest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Box box1 = <span class="keyword">new</span> Box();</span><br><span class="line">            Box box2 = <span class="keyword">new</span> Box();</span><br><span class="line">            <span class="built_in">double</span> volume = <span class="number">0.0</span>;</span><br><span class="line">            box1.SetLength(<span class="number">5.0</span>);</span><br><span class="line">            box1.SetWidth(<span class="number">6.0</span>);</span><br><span class="line">            box1.SetHeight(<span class="number">7.0</span>);</span><br><span class="line">            box2.SetLength(<span class="number">10.0</span>);</span><br><span class="line">            box2.SetWidth(<span class="number">11.0</span>);</span><br><span class="line">            box2.SetHeight(<span class="number">12.0</span>);</span><br><span class="line">            volume = box1.GetVolume();</span><br><span class="line">            Console.WriteLine(<span class="string">"Box1的体积：{0}"</span>, volume);  <span class="comment">// Box1的体积：210</span></span><br><span class="line">            volume = box2.GetVolume();</span><br><span class="line">            Console.WriteLine(<span class="string">"Box2的体积：{0}"</span>, volume);  <span class="comment">// Box2的体积：1320</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-3-构造函数">11.3 构造函数</h3><p>类的构造函数是类的一个特殊的成员函数，当创建类的新对象时执行。</p><p>构造函数的名称与类的名称完全相同，他没有任何返回类型。</p><p>默认的构造函数没有任何参数，但是可以定义一个带参数的构造函数来给对象赋初值。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LineApplication</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Line</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params"><span class="built_in">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        {</span><br><span class="line">            length = <span class="keyword">value</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"对象已经创建，length = {0}"</span>, <span class="keyword">value</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetLength</span>(<span class="params"><span class="built_in">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        {</span><br><span class="line">            length = <span class="keyword">value</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetLength</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Line line = <span class="keyword">new</span> Line(<span class="number">10.0</span>);  <span class="comment">// 对象已经创建，length = 10</span></span><br><span class="line">            Console.WriteLine(<span class="string">"线条的长度：{0}"</span>, line.GetLength());  <span class="comment">// 线条的长度：10</span></span><br><span class="line">            line.SetLength(<span class="number">6.0</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"线条的长度：{0}"</span>, line.GetLength());  <span class="comment">// 线条的长度：6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-4-析构函数">11.4 析构函数</h3><p>类的析构函数是类的一个特殊的成员函数，当类的对象超出范围时执行。</p><p>析构函数的名称是在类的名称前加一个<code>~</code>符号，没有返回值也不接收任何参数。</p><p>析构函数用于在结束程序（如关闭文件、释放内存等）之前释放资源。</p><p>析构函数不能继承或重载。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LineApplication</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Line</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"对象已创建"</span>);</span><br><span class="line">        }</span><br><span class="line">        ~Line()</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"对象已删除"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetLength</span>(<span class="params"><span class="built_in">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        {</span><br><span class="line">            length = <span class="keyword">value</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetLength</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Line line = <span class="keyword">new</span> Line();  <span class="comment">// 对象已创建</span></span><br><span class="line">            line.SetLength(<span class="number">6.0</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"线条的长度：{0}"</span>, line.GetLength());  <span class="comment">// 线条的长度：6</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 对象已删除</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-5-静态成员">11.5 静态成员</h3><p>使用关键字<code>static</code>可以把类成员定义为静态的，当声明一个类成员为静态时，意味着只有一个该静态成员的副本。</p><p>关键字<code>static</code>意味着类中只有一个该成员的实例，静态变量用于定义常量，因为他们的值可以通过直接调用类而不需要创建类的实例来获取。</p><p>静态变量可在成员函数或类定义外部进行初始化，也可以在内部初始化。</p><p>将类成员函数声明为<code>public static</code>无需实例化类即可调用类成员函数。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StaticApplication</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticVar</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> num;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Count</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            num++;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetNum</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            StaticVar s1 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            StaticVar s2 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            s1.Count();</span><br><span class="line">            s2.Count();</span><br><span class="line">            s1.Count();</span><br><span class="line">            Console.WriteLine(<span class="string">"变量num: {0}"</span>, StaticVar.GetNum());  <span class="comment">// 变量num: 3</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12-结构体">12. 结构体</h2><p>结构体是值类型的数据结构，用来代表一个记录，可为单一变量存储各种数据类型的相关数据。</p><h3 id="12-1-定义">12.1 定义</h3><p>使用<code>struct</code>关键字来创建结构体，<code>struct</code>语句为程序定义了一个带有多个成员的结构体。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">struct</span> Books</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> author;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> price;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StructureTest</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    {</span><br><span class="line">        Books book1;</span><br><span class="line">        Books book2;</span><br><span class="line">        book1.title = <span class="string">"C#"</span>;</span><br><span class="line">        book1.author = <span class="string">"Microsoft"</span>;</span><br><span class="line">        book1.subject = <span class="string">"C# Programing Guider"</span>;</span><br><span class="line">        book1.price = <span class="number">49.5</span>;</span><br><span class="line">        </span><br><span class="line">        book2.title = <span class="string">"Harry Peter"</span>;</span><br><span class="line">        book2.author = <span class="string">"Lolly"</span>;</span><br><span class="line">        book2.subject = <span class="string">"Death Cup"</span>;</span><br><span class="line">        book2.price = <span class="number">88.9</span>;</span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">"book1 title: {0}"</span>, book1.title);  <span class="comment">// book1 title: C#</span></span><br><span class="line">        Console.WriteLine(<span class="string">"book1 price: {0}"</span>, book1.price);  <span class="comment">// book1 price: 49.5</span></span><br><span class="line">        Console.WriteLine(<span class="string">"book2 author: {0}"</span>, book2.author);  <span class="comment">// book2 author: Lolly</span></span><br><span class="line">        Console.WriteLine(<span class="string">"book2 subject: {0}"</span>, book2.subject);  <span class="comment">// book2 subject: Death Cup</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="12-2-特点">12.2 特点</h3><ul><li>结构体可带方法、字段、索引、属性、运算符方法和事件</li><li>结构体可定义带参数的构造函数，不能定义析构函数</li><li>结构体不能继承其他的结构或类</li><li>结构体不能作为其他结构或类的基础</li><li>结构可实现一个或多个接口</li><li>结构体成员不能指定为<code>abstract</code>、<code>virtual</code>或<code>protected</code></li><li>使用<code>New</code>操作符创建一个结构对象时，会调用适当的构造函数来创建结构体，结构体可以不使用<code>New</code>操作符即可被实例化</li><li>不使用<code>New</code>操作符，只有在所有的字段都被初始化之后，字段才能被赋值，对象才可用</li></ul><h3 id="12-3-类与结构体的区别">12.3 类与结构体的区别</h3><ul><li>类是引用类型，在堆中分配空间，栈中保存的只是引用，结构体是值类型，在栈中分配空间</li><li>结构体不支持继承</li><li>结构体不能声明默认的构造函数</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">struct</span> Books</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> author;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValues</span> (<span class="params"><span class="built_in">string</span> t, <span class="built_in">string</span> a, <span class="built_in">string</span> s, <span class="built_in">double</span> p</span>)</span></span><br><span class="line">    {</span><br><span class="line">        title = t;</span><br><span class="line">        author = a;</span><br><span class="line">        subject = s;</span><br><span class="line">        price = p;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        Console.WriteLine(<span class="string">"title: {0}"</span>, title);</span><br><span class="line">        Console.WriteLine(<span class="string">"author: {0}"</span>, author);</span><br><span class="line">        Console.WriteLine(<span class="string">"subject: {0}"</span>, subject);</span><br><span class="line">        Console.WriteLine(<span class="string">"price: {0}"</span>, price);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StructureTest</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    {</span><br><span class="line">        Books book1 = <span class="keyword">new</span> Books();</span><br><span class="line">        Books book2 = <span class="keyword">new</span> Books();</span><br><span class="line">        book1.SetValues(<span class="string">"C#"</span>, <span class="string">"Microsoft"</span>, <span class="string">"C# Programing Guider"</span>, <span class="number">49.5</span>);</span><br><span class="line">        book2.SetValues(<span class="string">"Harry Peter"</span>, <span class="string">"Lolly"</span>, <span class="string">"Death Cup"</span>, <span class="number">88.9</span>);</span><br><span class="line">        book1.Display();</span><br><span class="line">        <span class="comment">// title: C#</span></span><br><span class="line">        <span class="comment">// author: Microsoft</span></span><br><span class="line">        <span class="comment">// subject: C# Programing Guider</span></span><br><span class="line">        <span class="comment">// price: 49.5</span></span><br><span class="line">        book2.Display();</span><br><span class="line">        <span class="comment">// title: Harry Peter</span></span><br><span class="line">        <span class="comment">// author: Lolly</span></span><br><span class="line">        <span class="comment">// subject: Death Cup</span></span><br><span class="line">        <span class="comment">// price: 88.9</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="13-接口">13. 接口</h2><p>接口定义了所有类继承接口时应该遵循的语法合同，接口定义了语法合同“是什么”部分，派生类定义了语法合同”怎么做“部分。</p><p>接口定义了属性、方法和事件成员，接口只包含成员的声明，成员的定义是派生类的责任。</p><p>接口使得实现接口的类或结构在形式上保持一致。</p><p>抽象类在某种程度上与接口类似，但是他们只是用在当只有少数方法由基类声明，由派生类实现时。</p><p>抽象类不能直接实例化，但允许派生出具体的、具有实际功能的类。接口本身是不实现任何功能。</p><p>注意：</p><ul><li>接口方法不能用<code>public</code>、<code>private</code>、<code>abstarct</code>等访问修饰符修饰，接口内不能有字段变量、构造函数</li><li>接口内可以定义属性</li><li>实现接口时，必须和接口的格式一致</li><li>必须实现接口的所有方法</li><li>接口是解决C#的单继承问题，使类可以同时继承多个基类</li></ul><h3 id="13-1-定义">13.1 定义</h3><p>使用关键字<code>interface</code>声明，默认是<code>public</code>的，接口名通常以<code>I</code>字母开头，如：</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 接口成员，只有声明，无具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodImplement</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">InterfaceImplementer</span> : <span class="title">IMyIterface</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        InterfaceImplementer iImp = <span class="keyword">new</span> InterfaceImplementer();</span><br><span class="line">        iImp.MethodImplement();  <span class="comment">// Hello My Iterface</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodImplement</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        Console.WriteLine(<span class="string">"Hello My Iterface"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="13-2-继承">13.2 继承</h3><p>如果一个接口继承其他接口，那么实现类或结构需要实现所有接口的成员。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IParentInterface</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span> : <span class="title">IParentInterface</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">InterfaceImplementer</span> : <span class="title">IMyInterface</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        InterfaceImplementer iImp = <span class="keyword">new</span> InterfaceImplementer();</span><br><span class="line">        iImp.MethodToImplement();  <span class="comment">// MethodToImplement() called</span></span><br><span class="line">        iImp.ParentInterfaceMethod();  <span class="comment">// ParentInterfaceMethod() called</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodToImplement</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        Console.WriteLine(<span class="string">"MethodToImplement() called"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        Console.WriteLine(<span class="string">"ParentInterfaceMethod() called"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="14-方法">14. 方法</h2><p>C#中的方法（也称为函数）是一段具有签名（由函数名、参数类型和参数修饰符组成的函数信息）的代码块，用来实现特定的功能，一般组成：</p><ul><li>访问权限修饰符：用于指定函数对一个类的可见性</li><li>返回值类型：用于指定函数返回值的数据类型</li><li>函数名称：用于进行函数调用的唯一名称</li><li>参数列表：在调用函数时需要传递给函数的参数，参数列表是可选的，可为空</li><li>函数主体：其中包含了实现函数功能的若干代码</li></ul><h3 id="14-1-方法声明">14.1 方法声明</h3><p>方法声明语法如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">access_specifier</span>&gt;</span> <span class="tag">&lt;<span class="name">return_type</span>&gt;</span> <span class="tag">&lt;<span class="name">method_name</span>&gt;</span>(parameter_list)</span><br><span class="line">{</span><br><span class="line">    method_body;</span><br><span class="line">    return statement;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>&lt;access_specifier&gt;</code>为访问修饰符，<code>&lt;return_type&gt;</code>为返回值类型，<code>&lt;method_name&gt;</code>为方法名称，<code>paramater_list</code>为参数列表，<code>method_body</code>为方法主体，<code>return statement</code>为返回语句。访问权限修饰符、参数列表和返回语句是可选的。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MethodTest</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetMax</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">int</span> result;</span><br><span class="line">        result = num1 &gt; num2 ? num1 : num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-2-方法调用">14.2 方法调用</h3><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MethodTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetMax</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> result;</span><br><span class="line">            result = num1 &gt; num2 ? num1 : num2;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="built_in">int</span> res;</span><br><span class="line">            MethodTest m = <span class="keyword">new</span> MethodTest();</span><br><span class="line">            res = m.GetMax(a, b);</span><br><span class="line">            Console.WriteLine(<span class="string">"最大值是: {0}"</span>, res);  <span class="comment">// 最大值是: 200</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-3-递归调用">14.3 递归调用</h3><p>递归调用是方法自己调用自己。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">factorial</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> res;</span><br><span class="line">            res = num == <span class="number">1</span> ? <span class="number">1</span> : factorial(num - <span class="number">1</span>) * num;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">var</span> m = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">            Console.WriteLine(<span class="string">"5! = {0}"</span>, m.factorial(<span class="number">5</span>));  <span class="comment">// 5! = 120</span></span><br><span class="line">            Console.WriteLine(<span class="string">"7! = {0}"</span>, m.factorial(<span class="number">7</span>));  <span class="comment">// 7! = 5040</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-4-参数传递">14.4 参数传递</h3><p>不带参数的方法声明时<code>return_type</code>为<code>void</code>，当调用带有参数的方法时，需要向方法传递参数。C#有三种参数传递方式：</p><table><thead><tr><th>方式</th><th>描述</th></tr></thead><tbody><tr><td>值参数</td><td>这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。形参的值改变不会影响到实参的值，可以保证实参数据安全</td></tr><tr><td>引用参数</td><td>这种方法复制参数的内存位置引用给形式参数，意味着形参值的改变也会改变实参的值，使用<code>ref</code>关键字声明引用参数</td></tr><tr><td>输出参数</td><td>这个方式可以返回多个值，使用<code>out</code>关键字声明输出参数，可以不用return语句从函数中返回多个值</td></tr></tbody></table><h3 id="14-5-按值传递参数">14.5 按值传递参数</h3><p>参数默认的传递参数，这种方式实参和形参使用的是两个不同内存中的值。形参的值改变不会影响到实参的值，可以保证实参数据安全。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 交换两个参数的值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num1 = num1 ^ num2;</span><br><span class="line">            num2 = num1 ^ num2;</span><br><span class="line">            num1 = num1 ^ num2;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">var</span> m = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">            Console.WriteLine(<span class="string">"调用方法之前，a = {0}, b = {1}"</span>, a, b);</span><br><span class="line">            m.Swap(a, b);</span><br><span class="line">            Console.WriteLine(<span class="string">"调用方法之后，a = {0}, b = {1}"</span>, a, b);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            <span class="comment">// 调用方法之前，a = 100, b = 200</span></span><br><span class="line">            <span class="comment">// 调用方法之后，a = 100, b = 200</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-6-按引用传递参数">14.6 按引用传递参数</h3><p>引用参数是一个对变量的内存位置的引用，引用参数表示与提供给方法的实际参数具有相同的内存位置，因此，引用参数值的改变也会改变实际参数的值，需要使用<code>ref</code>关键字声明引用参数。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 交换两个参数的值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> num1, <span class="keyword">ref</span> <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        {</span><br><span class="line">            num1 = num1 ^ num2;</span><br><span class="line">            num2 = num1 ^ num2;</span><br><span class="line">            num1 = num1 ^ num2;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">var</span> m = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">            Console.WriteLine(<span class="string">"调用方法之前，a = {0}, b = {1}"</span>, a, b);</span><br><span class="line">            m.Swap(<span class="keyword">ref</span> a, <span class="keyword">ref</span> b);</span><br><span class="line">            Console.WriteLine(<span class="string">"调用方法之后，a = {0}, b = {1}"</span>, a, b);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            <span class="comment">// 调用方法之前，a = 100, b = 200</span></span><br><span class="line">            <span class="comment">// 调用方法之后，a = 200, b = 100</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-7-按输出传递参数">14.7 按输出传递参数</h3><p><code>return</code>语句可用于只从函数中返回一个值，但是，可以使用输出参数来从函数中返回多个值，输出参数会把方法输出的数据赋给自己，提供给输出参数的变量不需要赋值。当需要从一个参数没有指定初始值的方法中返回值时，输出参数特别有用，需要使用<code>out</code>关键字声明引用参数。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">NumberManipulator</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 交换两个参数的值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetValues</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> x, <span class="keyword">out</span> <span class="built_in">int</span> y</span>)</span></span><br><span class="line">        {</span><br><span class="line">            x = <span class="number">13</span>;</span><br><span class="line">            y = <span class="number">14</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">int</span> a, b;</span><br><span class="line">            <span class="keyword">var</span> m = <span class="keyword">new</span> NumberManipulator();</span><br><span class="line">            m.GetValues(<span class="keyword">out</span> a, <span class="keyword">out</span> b);</span><br><span class="line">            Console.WriteLine(<span class="string">"a = {0}, b = {1}"</span>, a, b);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            <span class="comment">// a = 13, b = 14</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="15-封装">15. 封装</h2><p>封装指把一个或多个项目封装在一个物理或逻辑的包中，封装是为了防止对实现细节的访问。</p><p>根据封装的具体需要，可以通过<strong>访问修饰符</strong>来设置使用者的访问权限。</p><ul><li><code>public</code> : 任何公有成员都可以被外部的类访问</li><li><code>private</code> : 只有同一个类中的函数可以访问他的私有成员</li><li><code>protected</code>：该类内部和继承类中可以访问</li><li><code>internal</code> : 同一个程序集的对象可以访问</li><li><code>protected internal</code> : <code>protected</code>和<code>internal</code>的并集，符合任意一条都可以访问</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RectangelApplication</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 成员变量</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">double</span> width;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"面积：{0}"</span>, GetArea());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            r.length = <span class="number">4.0</span>;</span><br><span class="line">            r.width = <span class="number">5.0</span>;</span><br><span class="line">            r.Display();  <span class="comment">// 面积：20</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="16-继承">16. 继承</h2><p>继承是面向对象程序的特征之一，继承允许根据一个类来定义另一个类，有助于维护和创建程序，从而利于重用代码节省开发时间。</p><p>创建一个新类时，新类允许继承一个已有的类，通过继承可以创建新类时重用、扩展和修改被继承类中定义的成员，被继承的类称为“基类”，继承基类的类称为“派生类”。</p><p>注意，C#只支持单继承，派生类只能继承一个基类，但是继承是可以传递的。</p><h3 id="16-1-基类与派生类">16.1 基类与派生类</h3><p>派生类继承了基类的成员变量和成员方法。因此父类对象应在子类对象创建之前被创建。您可以在成员初始化列表中进行父类的初始化。</p><p>创建派生类的语法：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">&lt;访问修饰符&gt; class &lt;基类&gt;</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line">class &lt;派生类&gt; : &lt;基类&gt;</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>举个例子</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> width;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="built_in">double</span> l, <span class="built_in">double</span> w</span>)</span></span><br><span class="line">        {</span><br><span class="line">            length = l;</span><br><span class="line">            width = w;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"长度：{0}"</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">"宽度：{0}"</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">"面积：{0}"</span>, GetArea());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TableTop</span> : <span class="title">Rectangle</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> price = <span class="number">7</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TableTop</span>(<span class="params"><span class="built_in">double</span> l, <span class="built_in">double</span> w</span>) : <span class="title">base</span> (<span class="params">l, w</span>)</span></span><br><span class="line">        {</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetCost</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">double</span> cost;</span><br><span class="line">            cost = GetArea() * price;</span><br><span class="line">            <span class="keyword">return</span> cost;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">base</span>.Display();</span><br><span class="line">            Console.WriteLine(<span class="string">"成本：{0}"</span>, GetCost());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            TableTop t = <span class="keyword">new</span> TableTop(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">            t.Display();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 长度：4</span></span><br><span class="line">        <span class="comment">// 宽度：5</span></span><br><span class="line">        <span class="comment">// 面积：20</span></span><br><span class="line">        <span class="comment">// 成本：140</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-2-接口多重继承">16.2 接口多重继承</h3><p>多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。</p><p>C# 不支持多重继承，但可以使用接口来实现多重继承。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Shape</span> <span class="comment">// 基类</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> width;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetLength</span>(<span class="params"><span class="built_in">double</span> l</span>)</span> {</span><br><span class="line">            length = l;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWidth</span>(<span class="params"><span class="built_in">double</span> w</span>)</span> {</span><br><span class="line">            width = w;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Area</span>  <span class="comment">// 接口</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span>, <span class="title">Area</span>  <span class="comment">// 派生类</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"长度：{0}"</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">"宽度：{0}"</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">"面积：{0}"</span>, GetArea());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Rectangle t = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            t.SetLength(<span class="number">4</span>);</span><br><span class="line">            t.SetWidth(<span class="number">5</span>);</span><br><span class="line">            t.Display();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 长度：4</span></span><br><span class="line">        <span class="comment">// 宽度：5</span></span><br><span class="line">        <span class="comment">// 面积：20</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-3-抽象类与接口区别">16.3 抽象类与接口区别</h3><ul><li>接口支持多继承，抽象类不能实现多继承</li><li>接口只能定义抽象规则，抽象类既能定义规则，还能提供已实现的成员</li><li>接口是一组行为规范，抽象类是一个不完全的类</li><li>接口可以用于支持回调，抽象类不能实现回调，因为继承不支持</li><li>接口只包含方法、属性、索引器、事件的签名，但不能定义字段和包含实现的方法，抽象类可以定义字段、属性、包含有实现的方法</li><li>接口可以作用于值类型和引用类型，抽象类只能作用于引用类型。例如<code>struct</code>就可以继承接口，而不能继承类。</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">A</span>  <span class="comment">// 抽象类</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>(<span class="params"></span>)</span>;  <span class="comment">// 抽象方法</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">B</span>  <span class="comment">// 接口</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> a;  <span class="comment">// 不能给字段赋值，写成public int a = 0;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>(<span class="params"></span>)</span>;  <span class="comment">// 接口方法，继承接口的派生类必须实现此方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="17-多态性">17. 多态性</h2><p>多态性是指同一个行为具有多个不同表现形式或形态的能力，在面向对象编程中表现为"一个接口，多个功能"。</p><p>多态性可以分为<strong>编译时多态</strong>或者<strong>运行时多态</strong>，编译时多态（也称静态多态性）是编译时发生的函数响应，C# 提供了两种技术来实现编译时多态，分为函数重载和运算符重载。而运行时多态（也称动态多态性）是运行时发生的函数响应。</p><p>多态就是同一个接口使用不同实例而执行不同的操作。</p><h3 id="17-1-编译时多态">17.1 编译时多态</h3><p><strong>函数重载</strong></p><p>在同一范围内对相同函数名有多个定义，可以是参数类型或参数个数的不同，返回值类型除外。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReloadTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> c</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> a + b + c;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"输出整型：{0}"</span>, i);</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">double</span> f</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"输出浮点型型：{0}"</span>, f);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            ReloadTest data = <span class="keyword">new</span> ReloadTest();</span><br><span class="line">            <span class="built_in">int</span> add1 = data.Add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">int</span> add2 = data.Add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"add1 = {0}"</span>, add1);  <span class="comment">// add1 = 3</span></span><br><span class="line">            Console.WriteLine(<span class="string">"add2 = {0}"</span>, add2);  <span class="comment">// add2 = 6</span></span><br><span class="line">            data.Print(<span class="number">1</span>);  <span class="comment">// 输出整型：1</span></span><br><span class="line">            data.Print(<span class="number">1.23</span>);  <span class="comment">// 输出浮点型：1.23</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>运算符重载</strong></p><p>见18. 运算符重载</p><h3 id="17-2-运行时多态">17.2 运行时多态</h3><p><strong>抽象类</strong></p><p>C#允许使用关键字<code>abstract</code>创建抽象类，用于提供接口的部分类的实现，当一个派生类继承自该抽象类时，实现即完成。抽象类包含抽象方法，抽象方法可由派生类实现。</p><p>注意：</p><ul><li>不能创建一个抽象类的实例</li><li>不能在一个抽象类外部声明一个抽象方法</li><li>通过关键字<code>sealed</code>可将类声明为密封类，该类不能被继承，抽象类不能被声明为密封类</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span> <span class="comment">// 抽象类</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span>;  <span class="comment">// 抽象方法</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span>  <span class="comment">// 派生类</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> width;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="built_in">double</span> l = <span class="number">0.0</span>, <span class="built_in">double</span> w = <span class="number">0.0</span></span>)  <span class="comment">// 构造函数</span></span></span><br><span class="line">        {</span><br><span class="line">            length = l;</span><br><span class="line">            width = w;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)  <span class="comment">// 重写抽象方法</span></span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10.0</span>, <span class="number">7.0</span>);</span><br><span class="line">            <span class="built_in">double</span> area = r.GetArea();</span><br><span class="line">            Console.WriteLine(<span class="string">"面积：{0}"</span>, area);  <span class="comment">// 面积：70</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>虚方法</strong></p><p>当有一个定义在类中的方法需要在继承类中实现时，可以使用关键字<code>virtual</code>声明虚方法，虚方法可以在不同的基础类中有不同的实现。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span> <span class="comment">// 抽象类</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> length, width;  <span class="comment">// 成员变量</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params"><span class="built_in">double</span> l = <span class="number">0.0</span>, <span class="built_in">double</span> w = <span class="number">0.0</span></span>)  <span class="comment">// 构造函数</span></span></span><br><span class="line">        {</span><br><span class="line">            length = l;</span><br><span class="line">            width = w;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span> { <span class="keyword">return</span> <span class="number">0</span>; }  <span class="comment">// 纯虚方法</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span>  <span class="comment">// 派生类</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="built_in">double</span> l = <span class="number">0</span>, <span class="built_in">double</span> w = <span class="number">0.0</span></span>) : <span class="title">base</span>(<span class="params">l, w</span>)</span></span><br><span class="line">        {</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)  <span class="comment">// 具体实现</span></span></span><br><span class="line">        {</span><br><span class="line">            Console.Write(<span class="string">"Rectangle类的"</span>);</span><br><span class="line">            <span class="keyword">return</span> width * length;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Triangle</span> : <span class="title">Shape</span>  <span class="comment">// 派生类</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span>(<span class="params"><span class="built_in">double</span> l = <span class="number">0</span>, <span class="built_in">double</span> w = <span class="number">0.0</span></span>) : <span class="title">base</span>(<span class="params">l, w</span>)</span></span><br><span class="line">        {</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)  <span class="comment">// 具体实现</span></span></span><br><span class="line">        {</span><br><span class="line">            Console.Write(<span class="string">"Triangle类的"</span>);</span><br><span class="line">            <span class="keyword">return</span> width * length / <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Caller</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallArea</span>(<span class="params">Shape s</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">double</span> area = s.GetArea();</span><br><span class="line">            Console.WriteLine(<span class="string">"面积：{0}"</span>, area);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Caller c = <span class="keyword">new</span> Caller();</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">            Triangle t = <span class="keyword">new</span> Triangle(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">            c.CallArea(r);  <span class="comment">// Rectangle类的面积：20</span></span><br><span class="line">            c.CallArea(t);  <span class="comment">// Triangle类的面积：25</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="18-运算符重载">18. 运算符重载</h2><h3 id="18-1-定义">18.1 定义</h3><p>C#内置的运算符可以被重定义或重载，因此可以使用用户自定义类型的运算符。重载运算符是具有特殊名称的函数，是通过关键字<code>operator</code>后跟运算符符号来定义的，其余跟其他函数一样，有返回类型和参数列表。如定义一个实现Box类加法运算符重载方法，实现两个Box对象对应属性相加，并返回。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span>+ (Box b, Box c)</span><br><span class="line">{</span><br><span class="line">    Box box = <span class="keyword">new</span> Box();</span><br><span class="line">    box.length = b.length + c.length;</span><br><span class="line">    box.width = b.width + c.width;</span><br><span class="line">    box.height = b.height + c.height;</span><br><span class="line">    <span class="keyword">return</span> box</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="18-2-实现">18.2 实现</h3><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">   {</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> length;  <span class="comment">// 长度</span></span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> width;  <span class="comment">// 宽度</span></span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">double</span> height;  <span class="comment">// 高度</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetVolume</span>(<span class="params"></span>)</span></span><br><span class="line">      {</span><br><span class="line">         <span class="keyword">return</span> length * width * height;</span><br><span class="line">      }</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetLength</span>(<span class="params"><span class="built_in">double</span> l</span>)</span></span><br><span class="line">      {</span><br><span class="line">         length = l;</span><br><span class="line">      }</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWidth</span>(<span class="params"><span class="built_in">double</span> w</span>)</span></span><br><span class="line">      {</span><br><span class="line">         width = w;</span><br><span class="line">      }</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetHeight</span>(<span class="params"><span class="built_in">double</span> h</span>)</span></span><br><span class="line">      {</span><br><span class="line">         height = h;</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 重载 + 运算符来把两个 Box 对象相加</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span>+ (Box b, Box c)</span><br><span class="line">      {</span><br><span class="line">         Box box = <span class="keyword">new</span> Box();</span><br><span class="line">         box.length = b.length + c.length;</span><br><span class="line">         box.width = b.width + c.width;</span><br><span class="line">         box.height = b.height + c.height;</span><br><span class="line">         <span class="keyword">return</span> box;</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">   {</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      {</span><br><span class="line">         Box Box1 = <span class="keyword">new</span> Box();         <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">         Box Box2 = <span class="keyword">new</span> Box();         <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">         Box Box3 = <span class="keyword">new</span> Box();         <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">         <span class="built_in">double</span> volume = <span class="number">0.0</span>;          <span class="comment">// 体积</span></span><br><span class="line">         <span class="comment">// Box1 详述</span></span><br><span class="line">         Box1.SetLength(<span class="number">6.0</span>);</span><br><span class="line">         Box1.SetWidth(<span class="number">7.0</span>);</span><br><span class="line">         Box1.SetHeight(<span class="number">5.0</span>);</span><br><span class="line">         <span class="comment">// Box2 详述</span></span><br><span class="line">         Box2.SetLength(<span class="number">12.0</span>);</span><br><span class="line">         Box2.SetWidth(<span class="number">13.0</span>);</span><br><span class="line">         Box2.SetHeight(<span class="number">10.0</span>);</span><br><span class="line">         <span class="comment">// Box1 的体积</span></span><br><span class="line">         volume = Box1.GetVolume();</span><br><span class="line">         Console.WriteLine(<span class="string">"Box1 的体积：{0}"</span>, volume);  <span class="comment">// Box1的体积：210</span></span><br><span class="line">         <span class="comment">// Box2 的体积</span></span><br><span class="line">         volume = Box2.GetVolume();</span><br><span class="line">         Console.WriteLine(<span class="string">"Box2 的体积：{0}"</span>, volume);  <span class="comment">// Box2的体积：1560</span></span><br><span class="line">         <span class="comment">// 把两个对象相加</span></span><br><span class="line">         Box3 = Box1 + Box2;</span><br><span class="line">         <span class="comment">// Box3 的体积</span></span><br><span class="line">         volume = Box3.GetVolume();</span><br><span class="line">         Console.WriteLine(<span class="string">"Box3 的体积：{0}"</span>, volume);  <span class="comment">// Box3的体积：5400</span></span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="18-3-可重载与不可重载运算符">18.3 可重载与不可重载运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code>, <code>-</code>, <code>!</code>, <code>~</code>, <code>++</code>, <code>--</code></td><td>一元运算符只有一个操作数，且可以被重载</td></tr><tr><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td>二元运算符带有两个操作数，且可以被重载</td></tr><tr><td><code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td><td>比较运算符可以被重载</td></tr><tr><td><code>&amp;&amp;</code>, <code>||</code></td><td>条件运算符不能被直接重载</td></tr><tr><td><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></td><td>赋值运算符不能被重载</td></tr><tr><td><code>=</code>, <code>.</code>, <code>?:</code>, <code>-&gt;</code>, <code>new</code>, <code>is</code>, <code>sizeof</code>, <code>typeof</code></td><td>这些运算符不能被重载</td></tr></tbody></table><h2 id="19-文件读写">19. 文件读写</h2><p>文件是存储在磁盘中的具有特定名称和目录路径的数据集合，当使用程序对文件进行读写时，程序会将文件以数据流的形式读入内存中。因此流可以看作是通过通信路径传递的字节序列。</p><p>流分为输入流和输出流，输入流主要用来从文件读取数据，输出流主要用于向文件写入数据。</p><h3 id="19-1-I-O类">19.1 I/O类</h3><p><code>System.IO</code>命名空间中包含了各种作用于文件操作的类，例如文件创建、删除、读取、写入等。</p><table><thead><tr><th>I/O类</th><th>描述</th><th>I/O类</th><th>描述</th></tr></thead><tbody><tr><td><code>BinaryReader</code></td><td>从二进制流中读取原始数据</td><td><code>BinaryWriter</code></td><td>以二进制格式写入原始数据</td></tr><tr><td><code>BufferedStream</code></td><td>临时存储字节流</td><td><code>Directory</code></td><td>对目录进行复制、移动、重命名、创建和删除等</td></tr><tr><td><code>DirectoryInfo</code></td><td>用于对目录执行操作</td><td><code>DriveInfo</code></td><td>获取驱动器信息</td></tr><tr><td><code>File</code></td><td>对文件进行操作</td><td><code>FileInfo</code></td><td>用于对文件执行操作</td></tr><tr><td><code>FileStream</code></td><td>用于文件中任何位置的读写</td><td><code>MomoryStream</code></td><td>用于随机访问存储在内存中的数据流</td></tr><tr><td><code>Path</code></td><td>对路径信息执行操作</td><td><code>StreamReader</code></td><td>用于从字节流中读取字符</td></tr><tr><td><code>StringReader</code></td><td>用于从字符串缓冲区读取数据</td><td><code>StringWriter</code></td><td>用于向字符串缓冲区写入数据</td></tr></tbody></table><h3 id="19-2-FileStream类">19.2 FileStream类</h3><p><code>FileStream</code>类在<code>System.IO</code>命名空间下，使用它可读取、写入和关闭文件。创建<code>FileStream</code>类对象的语法格式如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">FileStream <span class="tag">&lt;<span class="name">object_name</span>&gt;</span> = new FileStram(<span class="tag">&lt;<span class="name">file_name</span>&gt;</span>, <span class="tag">&lt;<span class="name">FileMode</span> <span class="attr">Enumerator</span>&gt;</span>, <span class="tag">&lt;<span class="name">FileAccess</span> <span class="attr">Enumerator</span>&gt;</span>, <span class="tag">&lt;<span class="name">FileShare</span> <span class="attr">Enumerator</span>&gt;</span>);</span><br></pre></td></tr></tbody></table></figure><p><code>FileStream</code>类中常用方法如下：</p><table><thead><tr><th>方法</th><th>描述</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Close()</code></td><td>释放内存，关闭文件</td><td><code>CopyTo(Stream)</code></td><td>当前流读取字节并写入另一个流</td></tr><tr><td><code>Dispose()</code></td><td>是否流使用的所有资源</td><td><code>Equals(Object)</code></td><td>判断指定对象是否等于当前对象</td></tr><tr><td><code>Finalize()</code></td><td>确保资源回收和清理完成</td><td><code>Flush()</code></td><td>清除流的缓冲区，所有数据写入文件</td></tr><tr><td><code>GetHashCode()</code></td><td>获取哈希函数</td><td><code>GetType()</code></td><td>获取当前实例的Type</td></tr><tr><td><code>Lock(Int64, Int64)</code></td><td>防止其他进程读取或写入FileStream</td><td><code>Read(Byte[], Int32, Int32)</code></td><td>读取字节块并写入缓冲区</td></tr><tr><td><code>ReadByte()</code></td><td>读取单个字节</td><td><code>ToString()</code></td><td>返回当前对象的字符串</td></tr><tr><td><code>Unlock(Int64, Int64)</code></td><td>允许其他进程访问FileStream</td><td><code>Write(Byte[], Int32, Int32)</code></td><td>将字节块写入文件流</td></tr><tr><td><code>WriteByte(Byte)</code></td><td>写入单个字节到文件流当前位置</td><td></td><td></td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            FileStream file = <span class="keyword">new</span> FileStream(<span class="string">"test.txt"</span>, FileMode.OpenOrCreate, FileAccess.ReadWrite);  <span class="comment">// 定义文件流</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                file.WriteByte((<span class="built_in">byte</span>)i);  <span class="comment">// 写入字节</span></span><br><span class="line">            }</span><br><span class="line">            file.Position = <span class="number">0</span>;  <span class="comment">// 将读取位置重设为文件开头</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(file.ReadByte() + <span class="string">" "</span>);  <span class="comment">// 读取字节</span></span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 </span></span><br><span class="line">            file.Close();  <span class="comment">// 关闭文件流</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="19-3-高级文件操作">19.3 高级文件操作</h3><p>其他高级的I/O文件操作，如文本文件的读写，二进制文件的读写，Windows文件系统的操作等详见<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamwriter?view=net-6.0">官方文档</a>。</p><h2 id="20-预处理器">20. 预处理器</h2><p>预处理器指令指导编译器在实际编译开始之前对信息进行预处理。</p><p>所有的预处理器指令都是以<code>#</code>开始的，一个预处理器指令必须是该行上唯一的指令。</p><table><thead><tr><th>预处理器指令</th><th>描述</th><th>预处理器指令</th><th>描述</th></tr></thead><tbody><tr><td><code>#define</code></td><td>定义一系列称为符号的字符</td><td><code>#undef</code></td><td>取消定义的字符</td></tr><tr><td><code>#if</code></td><td>测试符号是否为真</td><td><code>#else</code></td><td>创建符合条件指令，与#if一起使用</td></tr><tr><td><code>#elif</code></td><td>创建符合条件指令，与#if一起使用</td><td><code>#endif</code></td><td>指定一个条件指令的结束</td></tr><tr><td><code>#line</code></td><td>可修改编辑器的行数以及删除错误和警告的文件名</td><td><code>#error</code></td><td>从代码指定位置生成一个错误</td></tr><tr><td><code>#warning</code></td><td>从代码指定位置生成一个警告</td><td><code>#region</code></td><td>指定可折叠代码块的起始</td></tr><tr><td><code>#endregion</code></td><td>#region块的结束</td><td><code>#pragma</code></td><td>抑制或还原指定的编译警告</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RELEASE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> disable 168 // 取消编号168的警告</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> restore 168 // 还原编号168的警告 </span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">if</span> (DEBUG &amp;&amp; !RELEASE)</span></span><br><span class="line">            Console.WriteLine(<span class="string">"DEBUG is defined"</span>);</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">elif</span> (!DEBUG &amp;&amp; RELEASE)</span></span><br><span class="line">            Console.WriteLine(<span class="string">"RELEASE is defined"</span>);</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">elif</span> (DEBUG &amp;&amp; RELEASE)</span></span><br><span class="line">            Console.WriteLine(<span class="string">"DEBUG and RELEASE are defined"</span>);  <span class="comment">// DEBUG and RELEASE are defined</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">            Console.WriteLine(<span class="string">"DEBUG and RELEASE are not defined"</span>);</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="21-异常处理">21. 异常处理</h2><p>异常是在程序执行期间出现的问题，C#中的异常是对程序运行时出现的特殊情况的一种响应，比如尝试除以零。</p><p>异常提供了一种把程序控制权从某个部分转移到另一个部分的方式。</p><h3 id="21-1-语法">21.1 语法</h3><p>C#异常处理是建立在<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>四个关键词之上的。</p><ul><li><code>try</code>：一个try块标识了一个将被激活的特定的异常代码块，后跟一个或多个<code>catch</code>块</li><li><code>catch</code>：程序通过异常处理程序捕获异常，<code>catch</code>关键字表示异常的捕获</li><li><code>finally</code>：用于执行给定的语句，不管异常是否被抛出都会执行</li><li><code>throw</code>：当出现问题时，程序抛出一个异常，使用该关键字来完成</li></ul><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 可能引起异常的语句</span></span><br><span class="line">}</span><br><span class="line">catch (ExceptionName e1)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 错误处理代码</span></span><br><span class="line">}</span><br><span class="line">catch (ExceptionName e2)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 错误处理代码</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 无论是否抛出异常，都会执行的语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="21-2-异常类">21.2 异常类</h3><p>C#异常是用类来表示的，异常类主要是直接或间接派生自<code>System.Exception</code>类。<code>System.ApplicationException</code>类支持由应用程序生成的异常，自定义类都应派生自该类。</p><p><code>System.SystemException</code>类是所有预定义的系统异常的基类。</p><table><thead><tr><th>异常类</th><th>描述</th><th>异常类</th><th>描述</th></tr></thead><tbody><tr><td><code>System.IO.IOException</code></td><td>处理I/O错误</td><td><code>System.IndexOutOfRangeException</code></td><td>处理数组索引超范围错误</td></tr><tr><td><code>System.ArrayTypeMismatchException</code></td><td>处理数组类型不匹配错误</td><td><code>System.NullReferenceException</code></td><td>处理当依次空对象时错误</td></tr><tr><td><code>System.DivideByZeroException</code></td><td>处理当除以零时错误</td><td><code>System.InvalidCastException</code></td><td>处理类型转换期间错误</td></tr><tr><td><code>System.OutOfMemoryException</code></td><td>处理空间内存不足错误</td><td><code>System.StackOverflowException</code></td><td>处理栈溢出错误</td></tr></tbody></table><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ErrorHandleApplication</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DivNumbers</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">int</span> result;</span><br><span class="line">        DivNumbers()</span><br><span class="line">        {</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">division</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            {</span><br><span class="line">                result = num1 / num2;</span><br><span class="line">            }</span><br><span class="line">            catch (DivideByZeroException e)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"Exception caugth: {0}"</span>, e);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"Result: {0}"</span>, result);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            DivNumbers d = <span class="keyword">new</span> DivNumbers();</span><br><span class="line">            d.division(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* Exception caugth: System.DivideByZeroException: Attempted to divide by zero.</span></span><br><span class="line"><span class="comment">  at ErrorHandleApplication.DivNumbers.division (System.Int32 num1, System.Int32 num2) [0x00000] in &lt;c41f6dc696cc46ac9b099084f035765f&gt;:0 </span></span><br><span class="line"><span class="comment">Result: 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="21-3-自定义异常">21.3 自定义异常</h3><p>用户可以创建自定义异常，派生自<code>ApplicationException</code>类。</p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempIsZeroException</span> : <span class="title">ApplicationException</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TempIsZeroException</span>(<span class="params"><span class="built_in">string</span> message</span>) : <span class="title">base</span> (<span class="params">message</span>)</span></span><br><span class="line">    {</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Temperature</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">int</span> temperature = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowTemp</span>(<span class="params"></span>)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (temperature == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span>(<span class="keyword">new</span> TempIsZeroException(<span class="string">"Zero temperature"</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">"Temperature: {0}"</span>, temperature);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UserDefineExecption</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TempTest</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] arg</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Temperature temp = <span class="keyword">new</span> Temperature();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            {</span><br><span class="line">                temp.ShowTemp();</span><br><span class="line">            }</span><br><span class="line">            catch (TempIsZeroException e)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(<span class="string">"TempIsZeroException: {0}"</span>, e.Message);</span><br><span class="line">                <span class="comment">// TempIsZeroException：Zero temperature</span></span><br><span class="line">            }</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文章-2">参考文章</h2><p>本文是笔者通过下列网站教程学习C#基础的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/csharp/csharp-tutorial.html">【菜鸟教程C#教程】</a></p><p>2.<a href="http://c.biancheng.net/csharp/">【C语言中文网C#教程】</a></p><p>3.<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">【微软C#官方文档】</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
            <tag> C#基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境的使用</title>
      <link href="/posts/19904.html"/>
      <url>/posts/19904.html</url>
      
        <content type="html"><![CDATA[<p>python虚拟环境的主要目的是为Python项目创建一个隔离的环境，意味着每个环境都可以拥有自己的依赖项。</p><h2 id="1-安装virtualenv">1.安装virtualenv</h2><p><code>pip install virtualenv</code></p><h2 id="2-创建虚拟环境并指定Python版本">2.创建虚拟环境并指定Python版本</h2><p><code>virtualenv venv --python=python3.8</code></p><h2 id="3-进入虚拟环境">3.进入虚拟环境</h2><p><code>source bin/active</code></p><h2 id="4-退出虚拟环境">4.退出虚拟环境</h2><p><code>deactive</code></p><h2 id="5-删除虚拟环境">5.删除虚拟环境</h2><p><code>rm -r venv</code></p><h2 id="6-生成requirements-txt文件">6.生成requirements.txt文件</h2><p><strong>方法一:</strong></p><p><code>pip freeze &gt; requirements.txt</code></p><p><strong>方法二:</strong></p><p><code>pip install pipreqs</code></p><p><code>pipreqs ./ --encoding=utf-8 --force</code></p><h2 id="7-使用requirements-txt文件">7.使用requirements.txt文件</h2><p><code>pip install -r requirements.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> 使用记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua语言学习笔记</title>
      <link href="/posts/5067.html"/>
      <url>/posts/5067.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-环境准备-2">0. 环境准备</h2><h3 id="0-1-简介-2">0.1 简介</h3><p><strong>Lua</strong>是由标准C编写而成的脚本语言，诞生于1993年，具有<strong>高效性</strong>、<strong>可移植性</strong>、<strong>可嵌入性</strong>、<strong>简单强大</strong>、<strong>小巧轻便</strong>、<strong>免费开源</strong>等诸多优点，主要应用场景包括做为嵌入脚本、做为独立脚本、用于应用程序的动态配置、游戏开发以及Web应用脚本等。</p><h3 id="0-2-Windows下载与安装Lua">0.2 Windows下载与安装Lua</h3><ol><li>选择合适版本的Lua语言开发包<a href="http://joedf.ahkscript.org/LuaBuilds/">下载</a></li><li>解压下载好的Lua压缩包到合适的路径</li><li>将Lua的解压路径添加到环境变量<code>Path</code>中</li><li>打开Windows命令行工具，输入指令<code>lua</code>，命令行输出Lua版本信息，安装成功</li></ol><h3 id="0-3-CentOS下载与安装Lua">0.3 CentOS下载与安装Lua</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.4.4.tar.gz  <span class="comment"># 拉取合适的Lua包</span></span><br><span class="line">tar -C /usr/<span class="built_in">local</span> -zxvf lua-5.4.4.tar.gz  <span class="comment"># 解压到合适的目录下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lua-5.4.4/  <span class="comment"># 进入Lua包解压路径</span></span><br><span class="line">make all <span class="built_in">test</span>  <span class="comment"># 开始安装</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lua-5.4.4/src/lua /usr/bin/lua  <span class="comment"># 建立连接（可选步骤）</span></span><br><span class="line">lua -v  <span class="comment"># 查看版本，输出Lua版本信息</span></span><br></pre></td></tr></tbody></table></figure><h3 id="0-4-推荐IDE">0.4 推荐IDE</h3><ol><li>VSCode(微软出品) + Lua扩展插件(Tencent出品)</li><li>在线IDE  <a href="https://replit.com/languages/lua">https://replit.com/languages/lua</a></li></ol><h2 id="1-基本数据类型">1. 基本数据类型</h2><h3 id="1-1-table">1.1 table</h3><p><strong>table类型</strong>是一个"关联数组"，需要注意：</p><ol><li>table的索引可以是数字或者是字符串，所有索引值都需要用<code>[</code>和<code>]</code>括起来，如果是字符串，还可以去掉引号和中括号</li><li>table的默认初始索引一般以1开始，如果不写索引，则索引会被认为是数字，并按顺序自动从1往后排</li><li>table变量只是一个地址引用，对table操作不会产生数据影响</li><li>table不固定长度大小，有新数据插入时长度会自动增长</li><li>table里保存数据可以是任何类型，包括<code>function</code>和<code>table</code></li><li>table所有元素之间用逗号<code>,</code>隔开</li></ol><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 初始化</span></span><br><span class="line">mytable = {}</span><br><span class="line"><span class="comment">-- 指定值</span></span><br><span class="line">mytable[<span class="number">1</span>] = <span class="string">"lua"</span></span><br><span class="line">mytable[<span class="string">"name"</span>] = <span class="string">"table"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改值</span></span><br><span class="line">mytable[<span class="number">1</span>] = <span class="string">"Lua"</span></span><br><span class="line"><span class="comment">-- 获取值</span></span><br><span class="line"><span class="built_in">print</span>(mytable[<span class="number">1</span>]) </span><br><span class="line"><span class="comment">-- 输出：Lua</span></span><br><span class="line"><span class="built_in">print</span>(mytable.name) </span><br><span class="line"><span class="comment">-- 输出：table</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 移除引用</span></span><br><span class="line">mytable = <span class="literal">nil</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-string">1.2 string</h3><p><strong>string类型</strong>可以使用双引号<code>""</code>或单引号<code>''</code>声明，如果是块字符串，可以以<code>[[</code>开始，以<code>]]</code>结尾。<br>字符串不可修改值，可以通过<code>string.gsub</code>函数来替换字符串中的子串。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="string">'1024'</span></span><br><span class="line">b = <span class="string">'3.14159'</span></span><br><span class="line">c = <span class="string">"Hello"</span></span><br><span class="line">d = <span class="string">"2022"</span></span><br><span class="line">e = <span class="string">[[</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head /&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, d) </span><br><span class="line"><span class="comment">-- 输出：1024   3.14159 Hello  2022</span></span><br><span class="line"><span class="built_in">print</span>(e) </span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">&lt;html&gt;</span></span><br><span class="line"><span class="comment">&lt;head /&gt;</span></span><br><span class="line"><span class="comment">&lt;body&gt;</span></span><br><span class="line"><span class="comment">&lt;a href="https://www.lua.org/"&gt;Lua&lt;/a&gt;</span></span><br><span class="line"><span class="comment">&lt;/body&gt;</span></span><br><span class="line"><span class="comment">&lt;/html&gt;</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-number">1.3 number</h3><p><strong>number类型</strong>只有一种，即<strong>双精度浮点double类型</strong></p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">1024</span></span><br><span class="line">b = <span class="number">3.14159</span></span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">type</span>(a))</span><br><span class="line"><span class="comment">-- 输出：1024    number</span></span><br><span class="line"><span class="built_in">print</span>(b, <span class="built_in">type</span>(b))</span><br><span class="line"><span class="comment">-- 输出：3.14159 number</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-boolean">1.4 boolean</h3><p><strong>boolean类型</strong>只有两个可选值：<strong>true</strong>（真）和 <strong>false</strong>（假）。<strong>判断时false和nil都是假，其他都为真</strong>。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="literal">true</span></span><br><span class="line">b = <span class="literal">false</span></span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">type</span>(a))</span><br><span class="line"><span class="comment">-- 输出：true    boolean</span></span><br><span class="line"><span class="built_in">print</span>(b, <span class="built_in">type</span>(b))</span><br><span class="line"><span class="comment">-- 输出：false   boolean</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-nil">1.5 nil</h3><p><strong>nil类型</strong>表示一个无效值，只有值<code>nil</code>，如果打印没有赋值的变量，则会输出nil。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"first: "</span>, a)</span><br><span class="line"><span class="comment">-- 输出：first:  nil</span></span><br><span class="line">a = <span class="number">1024</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"second: "</span>, a)</span><br><span class="line"><span class="comment">-- 输出：second:   1024</span></span><br><span class="line">a = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"third: "</span>, a)</span><br><span class="line"><span class="comment">-- 输出：third:  nil</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">type</span>(a) == <span class="string">"nil"</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a is nil"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a is not nil"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出：a is nil</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：要判断变量是否为 nil 的时候，需要使用 type 获取变量的类型，然后与字符串的 nil 进行比较</p><h3 id="1-6-function">1.6 function</h3><p><strong>function类型</strong>是由C或Lua编写的完成某一功能的程序指令的集合，称为函数，可分为<strong>自定义函数</strong>和<strong>系统函数</strong>。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">result1 = sum(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">result2 = sum(<span class="number">1024</span>, <span class="number">99</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"result1 = %d, result2 = %d"</span>, result1, result2))</span><br><span class="line"><span class="comment">-- 输出：result1 = 300, result2 = 1123</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-thread">1.7 thread</h3><p><strong>thread类型</strong>表示执行的独立线路，用于执行协同程序。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">cor = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(fun)</span><br><span class="line"><span class="built_in">print</span>(cor, <span class="built_in">type</span>(cor))</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">thread: 0x13691f0   thread</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-8-userdata">1.8 userdata</h3><p><strong>userdata类型</strong>是一种用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型，可以将任意C/C++的任意数据类型的数据存储在Lua变量中调用。</p><p>userdata可分为<strong>full userdata</strong>和<strong>light userdata</strong>。</p><table><thead><tr><th></th><th>full userdata</th><th>light userdata</th></tr></thead><tbody><tr><td>定义</td><td>用户自定义数据</td><td>一种表示C指针的值，不用创建</td></tr><tr><td>使用</td><td>需要显示的创建一块内存，该段内存有Lua垃圾回收器管理，不需要使用者关心</td><td>存储在栈上，使用者需要关心内存使用</td></tr><tr><td>创建</td><td>没有进行参数合法性检查<br><code>void *lua_newuserdata(lua State *L, size_t size);</code><br>有进行参数合法性检查<br><code>void *lua_checkudata(lua State *L, int arg, const char *tname);</code></td><td><code>void lua_pushlightuserdata(lua_State *L, void *p);</code></td></tr><tr><td>其他</td><td>可以指定其<strong>metatable</strong>和<strong>metamethods</strong></td><td>不可以指定其<strong>metatable</strong>和<strong>metamethods</strong></td></tr></tbody></table><h2 id="2-注释">2. 注释</h2><h3 id="2-1-单行注释">2.1 单行注释</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 这是行注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello Lua"</span>)</span><br><span class="line"><span class="comment">-- 这是行注释</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-多行注释">2.2 多行注释</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">这是块注释，</span></span><br><span class="line"><span class="comment">块注释可以</span></span><br><span class="line"><span class="comment">注释多行内容</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello Lua"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="3-变量">3. 变量</h2><p>变量相当于内存中一个数据存储空间的表示，通过变量名可以访问到变量的具体的值。</p><p>Lua的变量在定义时不需要指定明确的类型，而是会根据赋的默认值来断定变量的类型。</p><h3 id="3-1-变量赋值">3.1 变量赋值</h3><p>赋值是给已经定义的变量重新设置值的过程。</p><p>同时为多个变量赋值时：</p><ul><li><p>当变量个数 &gt; 值的个数时，按变量个数补足nil</p></li><li><p>当变量个数 &lt; 值的个数时，多余的值会被忽略</p></li></ul><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="literal">true</span></span><br><span class="line">c, d = <span class="string">"Hello"</span>, <span class="number">2022</span></span><br><span class="line">name, age, address = <span class="string">"Xiaoming"</span>, <span class="number">18</span></span><br><span class="line">day, week = <span class="number">30</span>, <span class="string">"星期四"</span>, <span class="number">2022</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"><span class="comment">-- 输出：1   true</span></span><br><span class="line"><span class="built_in">print</span>(c, d)</span><br><span class="line"><span class="comment">-- 输出：Hello  2022</span></span><br><span class="line"><span class="built_in">print</span>(name, age, address)</span><br><span class="line"><span class="comment">-- 输出：XiaoMing   18   nil</span></span><br><span class="line"><span class="built_in">print</span>(day, week)</span><br><span class="line"><span class="comment">-- 输出：30  星期四</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-全局变量和局部变量">3.2 全局变量和局部变量</h3><p>变量根据作用域可分为全局变量和局部变量，且用<code>local</code>显式声明的变量为局部变量，其余全部为全局变量。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">1024</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">pi</span> = <span class="number">3.14159</span></span><br><span class="line">    <span class="keyword">local</span> name = <span class="string">"Lua"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">hello()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a = "</span>, a, <span class="string">"pi = "</span>, <span class="built_in">pi</span>)</span><br><span class="line"><span class="comment">-- 输出：a =    1024   pi =   3.14159</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"name = "</span>, name)</span><br><span class="line"><span class="comment">-- 输出：name =  nil</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-类型转换">3.3 类型转换</h3><p>Lua中，除了table类型，其他任何类型的变量都可以通过<code>tostring</code>函数转化为字符串类型。</p><p>能表示数字的字符串类型的变量可以通过<code>tonumber</code>函数转化为数字类型。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="literal">true</span></span><br><span class="line">sa = <span class="built_in">tostring</span>(a)</span><br><span class="line">sb = <span class="built_in">tostring</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"sa = "</span>, sa, <span class="string">"type(sa) = "</span>, <span class="built_in">type</span>(sa))</span><br><span class="line"><span class="comment">-- 输出：sa =    100 type(sa) =  string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"sb = "</span>, sb, <span class="string">"type(sb) = "</span>, <span class="built_in">type</span>(sb))</span><br><span class="line"><span class="comment">-- 输出：sb =    true    type(sb) =  string</span></span><br><span class="line">sc = <span class="string">"3.14"</span></span><br><span class="line">sd = <span class="string">"0XA"</span></span><br><span class="line">c = <span class="built_in">tonumber</span>(sc)</span><br><span class="line">d = <span class="built_in">tonumber</span>(sd)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"c = "</span>, c, <span class="string">"type(c) = "</span>, <span class="built_in">type</span>(c))</span><br><span class="line"><span class="comment">-- 输出：c =    3.14    type(c) =  number</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"d = "</span>, d, <span class="string">"type(d) = "</span>, <span class="built_in">type</span>(d))</span><br><span class="line"><span class="comment">-- 输出：d =    10    type(d) =  number</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-获取输入">3.4 获取输入</h3><p>使用<code>io.read</code>函数获取用户输入。</p><p>可选参数：</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>“*n”</td><td>读取一个数字</td></tr><tr><td>“*a”</td><td>从当前位置读取剩余的全部内容</td></tr><tr><td>"*l”</td><td>读取下一行内容</td></tr><tr><td>10</td><td>读取指定数字的长度</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> name = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"name = "</span>, name, <span class="string">"type(name) = "</span>, <span class="built_in">type</span>(name))</span><br><span class="line"><span class="comment">-- 用户输入：Lua</span></span><br><span class="line"><span class="comment">-- 输出：name =   lua type(name) =   string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> num = <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*n"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"num = "</span>, num, <span class="string">"type(num) = "</span>, <span class="built_in">type</span>(num))</span><br><span class="line"><span class="comment">-- 用户输入：1024</span></span><br><span class="line"><span class="comment">-- 输出：name =   1024 type(name) =   number</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-格式化输出">3.5 格式化输出</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">name = <span class="string">"lua"</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"name = %s, age = %d"</span>, name, age))</span><br><span class="line"><span class="comment">-- 输出：name = lua, age = 18</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4-循环控制">4. 循环控制</h2><p>循环控制就是让程序满足一定的条件就一直循环的去执行，直到条件不满足，则跳出循环继续执行循环以外的语句。</p><h3 id="4-1-while">4.1 while</h3><p><strong>while循环</strong>，<strong>当型循环</strong>，先判断条件，满足则执行循环，否则不进入循环。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 求和</span></span><br><span class="line"><span class="keyword">local</span> num = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) <span class="keyword">do</span></span><br><span class="line">    sum = sum + num</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"sum = %d"</span>, sum))</span><br><span class="line"><span class="comment">-- 输出：sum = 5050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打印乘法表</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">9</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= i) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%d * %d = % -6d"</span>, j, i, j * i))</span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1 * 1 =  1    </span></span><br><span class="line"><span class="comment">1 * 2 =  2    2 * 2 =  4    </span></span><br><span class="line"><span class="comment">1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    </span></span><br><span class="line"><span class="comment">1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   </span></span><br><span class="line"><span class="comment">1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   </span></span><br><span class="line"><span class="comment">1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   </span></span><br><span class="line"><span class="comment">1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   </span></span><br><span class="line"><span class="comment">1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   </span></span><br><span class="line"><span class="comment">1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-repeat-…-until">4.2 repeat … until</h3><p><strong>repeat until循环</strong>，<strong>直到型循环</strong>，后判断条件，满足则跳出循环，不满足则进入循环，<strong>循环至少会执行1次</strong>。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 求和</span></span><br><span class="line"><span class="keyword">local</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    sum = sum + num</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> (num &gt; <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"sum = %d"</span>, sum))</span><br><span class="line"><span class="comment">-- 输出：sum = 5050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打印乘法表</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">local</span> j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%d * %d = %-6d"</span>, j, i, j * i))</span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">until</span> j &gt; i</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">until</span> (i &gt; <span class="number">9</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1 * 1 =  1    </span></span><br><span class="line"><span class="comment">1 * 2 =  2    2 * 2 =  4    </span></span><br><span class="line"><span class="comment">1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    </span></span><br><span class="line"><span class="comment">1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   </span></span><br><span class="line"><span class="comment">1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   </span></span><br><span class="line"><span class="comment">1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   </span></span><br><span class="line"><span class="comment">1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   </span></span><br><span class="line"><span class="comment">1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   </span></span><br><span class="line"><span class="comment">1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-for">4.3 for</h3><p>如果循环的语句是<code>for i = 1, 9, 1 do ...</code>，表示从1开始，大于9结束，每次步进1。如果是步进1，最后1可以省略，变为<code>for i = 1, 9 do ...</code>。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 求和</span></span><br><span class="line"><span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num = <span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">sum = sum + num</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"sum = %d"</span>, sum))</span><br><span class="line"><span class="comment">-- 输出：sum = 5050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打印乘法表</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">9</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j = <span class="number">1</span>, i <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%d * %d = %-6d"</span>, j, i, j * i))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1 * 1 =  1    </span></span><br><span class="line"><span class="comment">1 * 2 =  2    2 * 2 =  4    </span></span><br><span class="line"><span class="comment">1 * 3 =  3    2 * 3 =  6    3 * 3 =  9    </span></span><br><span class="line"><span class="comment">1 * 4 =  4    2 * 4 =  8    3 * 4 =  12   4 * 4 =  16   </span></span><br><span class="line"><span class="comment">1 * 5 =  5    2 * 5 =  10   3 * 5 =  15   4 * 5 =  20   5 * 5 =  25   </span></span><br><span class="line"><span class="comment">1 * 6 =  6    2 * 6 =  12   3 * 6 =  18   4 * 6 =  24   5 * 6 =  30   6 * 6 =  36   </span></span><br><span class="line"><span class="comment">1 * 7 =  7    2 * 7 =  14   3 * 7 =  21   4 * 7 =  28   5 * 7 =  35   6 * 7 =  42   7 * 7 =  49   </span></span><br><span class="line"><span class="comment">1 * 8 =  8    2 * 8 =  16   3 * 8 =  24   4 * 8 =  32   5 * 8 =  40   6 * 8 =  48   7 * 8 =  56   8 * 8 =  64   </span></span><br><span class="line"><span class="comment">1 * 9 =  9    2 * 9 =  18   3 * 9 =  27   4 * 9 =  36   5 * 9 =  45   6 * 9 =  54   7 * 9 =  63   8 * 9 =  72   9 * 9 =  81</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 遍历table</span></span><br><span class="line">weekdays = {<span class="string">"Sunday"</span>,<span class="string">"Monday"</span>,<span class="string">"Tuesday"</span>,<span class="string">"Wednesday"</span>,<span class="string">"Thursday"</span>,<span class="string">"Friday"</span>,<span class="string">"Saturday"</span>}</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(weekdays) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%s --&gt; %s"</span>, i, v))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1 --&gt; Sunday</span></span><br><span class="line"><span class="comment">2 --&gt; Monday</span></span><br><span class="line"><span class="comment">3 --&gt; Tuesday</span></span><br><span class="line"><span class="comment">4 --&gt; Wednesday</span></span><br><span class="line"><span class="comment">5 --&gt; Thursday</span></span><br><span class="line"><span class="comment">6 --&gt; Friday</span></span><br><span class="line"><span class="comment">7 --&gt; Saturday</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-4-break">4.4 break</h3><p>终止循环的继续运行，如果有多层循环，只能终止当层循环，无法终止外层循环。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j = <span class="number">0</span>, <span class="number">20</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">2</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"i = %d, j = %d"</span>, i, j))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">i = 0, j = 0</span></span><br><span class="line"><span class="comment">i = 0, j = 1</span></span><br><span class="line"><span class="comment">i = 1, j = 0</span></span><br><span class="line"><span class="comment">i = 1, j = 1</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Lua中没有continue语句</strong>，但是可以借助for循环以及repeat until循环实现continue功能。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">4</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"i = %d"</span>, i))</span><br><span class="line">    <span class="keyword">until</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">i = 0</span></span><br><span class="line"><span class="comment">i = 1</span></span><br><span class="line"><span class="comment">i = 3</span></span><br><span class="line"><span class="comment">i = 4</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-5-return">4.5 return</h3><p>使用<strong>return语句</strong>，终止循环、函数的执行。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"i = %d"</span>, i))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">i = 0</span></span><br><span class="line"><span class="comment">i = 1</span></span><br><span class="line"><span class="comment">i = 2</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">(value)</span></span></span><br><span class="line">    <span class="keyword">if</span> (value &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"value &lt;= 0"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value &gt; 0"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">check(<span class="number">12</span>)</span><br><span class="line">check(<span class="number">-1</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">value &gt; 0</span></span><br><span class="line"><span class="comment">value &lt;= 0</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-6-goto">4.6 goto</h3><p>允许将控制流程无条件地转到被标记的语句处，<strong>仅lua5.2以上版本支持</strong>。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">1</span></span><br><span class="line">::label:: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-- goto label --"</span>)</span><br><span class="line">a = a+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">goto</span> label</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">-- goto label --</span></span><br><span class="line"><span class="comment">-- goto label --</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-7-pairs和ipairs">4.7 pairs和ipairs</h3><p><strong>pairs和iparis</strong>都是能遍历集合（表、数组），但是<strong>iparis</strong>仅仅遍历值，按照索引升序遍历，索引中断停止遍历，即不能返回nil，只能返回数字0，如果遇到nil则退出。只能遍历到集合中出现的第一个不是整数的key。<strong>pairs</strong>能遍历集合的所有元素。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">table</span> = {<span class="string">"A"</span>, <span class="string">"B"</span>, [<span class="number">5</span>] = <span class="string">"yes"</span>, [<span class="string">"t"</span>] = <span class="string">"no"</span>}</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, <span class="built_in">table</span>[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, <span class="built_in">table</span>[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1   A</span></span><br><span class="line"><span class="comment">2   B</span></span><br><span class="line"><span class="comment">5   yes</span></span><br><span class="line"><span class="comment">t   no</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1   A</span></span><br><span class="line"><span class="comment">2   B</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-分支控制">5. 分支控制</h2><p>分支控制就是让程序有选择的执行，主要分为：<strong>单分支</strong>、<strong>双分支</strong>和<strong>多分支</strong>形式。</p><h3 id="5-1-if">5.1 if</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &gt; b"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Out If"</span>)</span><br><span class="line"><span class="comment">--[[ 输出:</span></span><br><span class="line"><span class="comment">a &gt; b</span></span><br><span class="line"><span class="comment">Out If</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-else">5.2 else</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &gt; b"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &lt;= b"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Out If"</span>)</span><br><span class="line"><span class="comment">--[[ 输出:</span></span><br><span class="line"><span class="comment">Out If</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-elseif">5.3 elseif</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &gt; b"</span>)</span><br><span class="line"><span class="keyword">elseif</span> (a == b) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a == b"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &lt;= b"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Out If"</span>)</span><br><span class="line"><span class="comment">--[[ 输出:</span></span><br><span class="line"><span class="comment">a == b</span></span><br><span class="line"><span class="comment">Out If</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-条件嵌套">5.4 条件嵌套</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &gt; b"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (a == b) <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a == b"</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a &lt;= b"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Out If"</span>)</span><br><span class="line"><span class="comment">--[[ 输出:</span></span><br><span class="line"><span class="comment">a == b</span></span><br><span class="line"><span class="comment">Out If</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-函数">6. 函数</h2><p>在程序中，编写函数的<strong>主要目的</strong>是将一个需要很多行代码的复杂问题分解为一系列简单的任务来解决，而且，同一个函数可以被多次调用，有助于代码重用。</p><h3 id="6-1-function">6.1 function</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">result1 = sum(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">result2 = sum(<span class="number">1</span>, <span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"result1 = %d, result2 = %d"</span>, result1, result2));</span><br><span class="line"><span class="comment">--输出：result1 = 300, result2 = 100</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-多返回值">6.2 多返回值</h3><p>Lua中的函数可以不返回任何值，也可以返回一个值，也支持返回多个值。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_user</span><span class="params">(score)</span></span></span><br><span class="line">    <span class="keyword">if</span> score &gt; <span class="number">85</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span>, <span class="literal">true</span></span><br><span class="line">    <span class="keyword">elseif</span> score &gt; <span class="number">60</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B"</span>, <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C"</span>, <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> level1, isOk = check_user(<span class="number">99</span>)</span><br><span class="line"><span class="keyword">local</span> level2, _ = check_user(<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"level1 = %s, level2 = %s"</span>, level1, level2))</span><br><span class="line"><span class="comment">-- 输出：level1 = A, level2 = C</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-可变参数">6.3 可变参数</h3><p>函数参数的个数可以是任意的，可变参数使用<code>...</code>来表示，若想要获取用户传入的所有的参数，可以使用<code>arg</code>变量。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span> = {...}</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> iparis(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">        result = result + v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result = sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"result = %d"</span>, result))</span><br><span class="line"><span class="comment">-- 输出：result = 25</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-4-匿名函数">6.4 匿名函数</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_func</span><span class="params">(tab, fun)</span></span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(fun(k, v))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tab = {key1 = <span class="string">"val1"</span>, key2 = <span class="string">"val2"</span>}</span><br><span class="line">test_func(tab, <span class="function"><span class="keyword">function</span><span class="params">(key, val)</span></span> <span class="keyword">return</span> key .. <span class="string">" = "</span> .. val <span class="keyword">end</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">key1 = val1</span></span><br><span class="line"><span class="comment">key2 = val2</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-5-闭包">6.5 闭包</h3><p>闭包的主要作用：</p><ul><li>简洁，不需要在不使用时生成对象，也不需要函数名</li><li>可以捕获外部变量形成不同的调用环境</li></ul><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> inner1 = func()</span><br><span class="line"><span class="built_in">print</span>(inner1(), inner1())</span><br><span class="line"><span class="comment">-- 输出：1   2</span></span><br><span class="line"><span class="keyword">local</span> inner2 = func()</span><br><span class="line"><span class="built_in">print</span>(inner2(), inner2())</span><br><span class="line"><span class="comment">-- 输出：1   2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="7-运算符">7. 运算符</h2><h3 id="7-1-算术运算符">7.1 算术运算符</h3><p><strong>算术运算符</strong>是对数值类型的变量进行运算的。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-4</td><td>-3</td></tr><tr><td>+</td><td>加法运算</td><td>5 + 5</td><td>10</td></tr><tr><td>-</td><td>减法运算</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘法运算</td><td>5 * 2</td><td>10</td></tr><tr><td>/</td><td>除法运算</td><td>10  / 3</td><td>3.3</td></tr><tr><td>%</td><td>取余运算</td><td>10 % 3</td><td>1</td></tr><tr><td>^</td><td>幂运算</td><td>2^3</td><td>8</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a, b = <span class="number">-20</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">local</span> c = a + b</span><br><span class="line"><span class="keyword">local</span> d = a - b</span><br><span class="line"><span class="keyword">local</span> e = a * b</span><br><span class="line"><span class="keyword">local</span> f = a / b</span><br><span class="line"><span class="keyword">local</span> g = a % b</span><br><span class="line"><span class="keyword">local</span> h = a ^ b</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"c = %d, d = %d, e = %d, f = %f, g = %d, h = %d"</span>, c, d, e, f, g, h))</span><br><span class="line"><span class="comment">-- 输出：c = -17, d = -23, e = -60, f = -6.666667, g = 1, h = -8000</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-2-关系运算符">7.2 关系运算符</h3><p><strong>关系运算符</strong>结果要么是真，要么是假。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等</td><td>4 == 3</td><td>false</td></tr><tr><td>~=</td><td>不等于</td><td>4 ~= 3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 3</td><td>true</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">99</span></span><br><span class="line"><span class="keyword">local</span> c = a == b</span><br><span class="line"><span class="keyword">local</span> d = a ~= b</span><br><span class="line"><span class="keyword">local</span> e = a &gt; b</span><br><span class="line"><span class="keyword">local</span> f = a &lt; b</span><br><span class="line"><span class="keyword">local</span> g = a &gt;= b</span><br><span class="line"><span class="keyword">local</span> h = a &lt;= b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"c = "</span>, c, <span class="string">"d = "</span>, d, <span class="string">"e = "</span>, e, <span class="string">"f = "</span>, f, <span class="string">"g = "</span>, g, <span class="string">"h = "</span>, h)</span><br><span class="line"><span class="comment">-- 输出：c =     false   d =     true    e =     true    f =     false   g =     true    h =     false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-3-逻辑运算符">7.3 逻辑运算符</h3><p><strong>逻辑运算符</strong>用来连接多个条件，最终返回是true或false，使用逻辑运算符可以模拟三目运算符。</p><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>A and B，如果A的值为假，则不会再计算B的值</td></tr><tr><td>or</td><td>逻辑或</td><td>A or B，如果A的值为真，则不会再计算B的值</td></tr><tr><td>not</td><td>逻辑非</td><td>not A</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> age = <span class="number">40</span></span><br><span class="line"><span class="keyword">local</span> b = age &gt; <span class="number">30</span> <span class="keyword">and</span> age &lt; <span class="number">50</span></span><br><span class="line"><span class="keyword">local</span> c = age &gt; <span class="number">40</span> <span class="keyword">or</span> age &lt; <span class="number">30</span></span><br><span class="line"><span class="keyword">local</span> d = <span class="keyword">not</span> age</span><br><span class="line"><span class="keyword">local</span> e = <span class="keyword">not</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> f = <span class="keyword">not</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> g = age &gt; <span class="number">30</span> <span class="keyword">and</span> age <span class="keyword">or</span> <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"b = "</span>, b, <span class="string">"c = "</span>, c, <span class="string">"d = "</span>, d, <span class="string">"e = "</span>, e, <span class="string">"f = "</span>, f, <span class="string">"g = "</span>, g)</span><br><span class="line"><span class="comment">-- 输出：b =     true    c =     false   d =     false   e =     true   f =     false   g = 40</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-4-其他运算符">7.4 其他运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>…</td><td>连接运算符</td><td>str1…str2</td></tr><tr><td>#</td><td>获取字符串长度</td><td>#str1</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> str1 = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">local</span> str2 = <span class="string">"lua"</span></span><br><span class="line"><span class="keyword">local</span> str3 = str1..str2</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str3 = %s, #str3 = %d"</span>, str3, #str3))</span><br><span class="line"><span class="comment">-- 输出：str3 = hellolua, #str3 = 8</span></span><br></pre></td></tr></tbody></table></figure><h2 id="8-字符串">8. 字符串</h2><h3 id="8-1-字符串函数">8.1 字符串函数</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>upper(arg)</td><td>字符串全部转为大写字母</td></tr><tr><td>lower(arg)</td><td>字符串全部转为小写字母</td></tr><tr><td>sub(s, i, [,j])</td><td>截取字符串</td></tr><tr><td>gsub(mainString, findString, replaceString, num)</td><td>在字符串中替换</td></tr><tr><td>dump(function)</td><td>把函数序列化为字符串来保存</td></tr><tr><td>find(str, substr, [init, [end]])</td><td>在字符串中查找，存在返回具体位置，不存在返回nil</td></tr><tr><td>reverse(arg)</td><td>字符串反转</td></tr><tr><td>format(…)</td><td>返回一个格式化字符串</td></tr><tr><td>char(arg)</td><td>将整型数字转化为字符并连接</td></tr><tr><td>byte[arg[int,]]</td><td>byte转换字符为整数值</td></tr><tr><td>len(arg)</td><td>计算字符串长度</td></tr><tr><td>rep(string, n)</td><td>返回字符串string的n个拷贝</td></tr><tr><td>…</td><td>连接两个字符串</td></tr><tr><td>gmatch(str, pattern)</td><td>迭代器函数，每次调用返回一个查找到的子串</td></tr><tr><td>match(str, pattern, init)</td><td>查找第一个配对的子串</td></tr></tbody></table><h3 id="8-1-大小写转换">8.1 大小写转换</h3><p><code>string.upper(s)</code> 用于将字符串中所有字母转化为大写。</p><p><code>string.lower(s)</code> 用于将字符串中所有字母转化为小写。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str1 = <span class="string">"Hello Lua"</span></span><br><span class="line">str2 = <span class="built_in">string</span>.<span class="built_in">upper</span>(str1)</span><br><span class="line">str3 = <span class="built_in">string</span>.<span class="built_in">lower</span>(str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str1 = %s, str2 = %s, str3 = %s"</span>, str1, str2, str3))</span><br><span class="line"><span class="comment">-- 输出：str1 = Hello Lua, str2 = HELLO LUA, str3 = hello lua</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-2-字符串截取">8.2 字符串截取</h3><p><code>string.sub(s, i [, j])</code> 用于字符串截取，返回字符串s从第i个字符到第j个字符的子串。注意，字符串的第1个字符索引是1。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str1 = <span class="string">"Hello Lua"</span></span><br><span class="line">str2 = <span class="built_in">string</span>.<span class="built_in">sub</span>(str1, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">str3 = <span class="built_in">string</span>.<span class="built_in">sub</span>(str1, <span class="number">-3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str1 = %s, str2 = %s, str3 = %s"</span>, str1, str2, str3))</span><br><span class="line"><span class="comment">-- 输出：str1 = Hello Lua, str2 = Hello, str3 = Lua</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-3-字符串替换">8.3 字符串替换</h3><p><code>string.gsub(mainString, findString, replaceString, num)</code> 用于字符串替换，num指定替换字符串的次数，默认全部替换。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str1 = <span class="string">"Hello world, Hello Lua"</span></span><br><span class="line">str2 = <span class="built_in">string</span>.<span class="built_in">gsub</span>(str1, <span class="string">"Hello"</span>, <span class="string">"Nihao"</span>)</span><br><span class="line">str3 = <span class="built_in">string</span>.<span class="built_in">gsub</span>(str1, <span class="string">"Hello"</span>, <span class="string">"Nihao"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str1 = %s, str2 = %s, str3 = %s"</span>, str1, str2, str3))</span><br><span class="line"><span class="comment">-- 输出：str1 = Hello world, Hello Lua, str2 = Nihao world, Nihao Lua, str3 = Nihao world, Hello Lua</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-4-序列化与加载">8.4 序列化与加载</h3><p><code>string.dump(function)</code> 用于将函数序列化为字符串，便于函数的保存与传输<code>loadstring(str)</code> 用于将序列化后的函数字符串反序列化加载为函数。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(a, b)</span></span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">str = <span class="built_in">string</span>.<span class="built_in">dump</span>(sum)</span><br><span class="line">res = <span class="built_in">loadstring</span>(str)</span><br><span class="line"><span class="built_in">print</span>(str, res(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">-- 输出：uaQ 3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-5-字符串查找">8.5 字符串查找</h3><p><code>string.find(str, substr, [init, [end]])</code> 用于在一个指定的目标字符串中搜素指定的内容，返回其具体位置，不存在返回nil，也支持使用正则匹配查找。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str1 = <span class="string">"Hello Lua"</span></span><br><span class="line">index1 = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">"Hello Lua"</span>, <span class="string">"Lua"</span>)</span><br><span class="line">index2 = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">"Hello Lua"</span>, <span class="string">"Lua"</span>, <span class="number">8</span>)</span><br><span class="line">index3 = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">"Hello Lua"</span>, <span class="string">"%s%u%a."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"index1 = "</span>, index1, <span class="string">"index2 = "</span>, index2, <span class="string">"index3 = "</span>, index3)</span><br><span class="line"><span class="comment">-- 输出：index1 =   7   index2 =   nil   index3 =   6</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-6-字符串反转">8.6 字符串反转</h3><p><code>string.reverse(arg)</code> 用于反转字符串。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str = <span class="string">"Hello Lua"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str = %s, res = %s"</span>, str, <span class="built_in">string</span>.<span class="built_in">reverse</span>(str)))</span><br><span class="line"><span class="comment">-- 输出：str = Hello Lua, res = auL olleH</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-7-格式化字符串">8.7 格式化字符串</h3><table><thead><tr><th>格式</th><th>描述</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>接收数字，转化为字符</td><td>%d,%i</td><td>接收数字，转化为有符号整数</td></tr><tr><td>%o</td><td>接收数字，转化为八进制数</td><td>%u</td><td>接收数字，转化为无符号整数</td></tr><tr><td>%x</td><td>接收数字，转化为十六进制数，使用小写字母</td><td>%X</td><td>接收数字，转化为十六进制数，使用大写字母</td></tr><tr><td>%e</td><td>接收数字，转化为科学计数法，使用小写字母e</td><td>%E</td><td>接收数字，转化为科学计数法，使用大写字母E</td></tr><tr><td>%f</td><td>接收数字，转化为浮点数</td><td>%g,%G</td><td>接收数字，转化为%e,%f中较短格式</td></tr><tr><td>%q</td><td>接收字符串，转化为可安全被Lua编译器读入的格式</td><td>%s</td><td>接收字符串，按给定参数格式化字符串</td></tr><tr><td>%+</td><td>表示其后的数字转义符将让正数显示正号</td><td>%占位符</td><td>在后面指定了字串宽度时占位用</td></tr><tr><td>%对齐标识</td><td>在指定了字串宽度时, 默认为右对齐, 增加 - 号改为左对齐</td><td>%宽度数值</td><td>占位宽度</td></tr><tr><td>%小数位数/字串裁切</td><td>数字保留位数，字符串做裁切</td><td></td><td></td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%c"</span>, <span class="number">65</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%+d"</span>, <span class="number">17.0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%05d"</span>, <span class="number">17</span>))</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">+17</span></span><br><span class="line"><span class="comment">00017</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-8-数字与字符的转换">8.8 数字与字符的转换</h3><p><code>string.char(arg)</code> 用于将整数转化为字符并连接。</p><p><code>string.byte(arg[,int])</code> 用于将字符转化为整数并连接，int表示要转换的字符。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">char</span>(<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">"ABCD"</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">67</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-9-字符串长度">8.9 字符串长度</h3><p><code>string.len()</code>用于获取字符串长度，另外<code>#</code>也可以获取字符串长度。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str1 = <span class="string">"ABC"</span></span><br><span class="line">str2 = <span class="string">"Hello"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str1's len = %d, str2's len = %d"</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(str1), #str2))</span><br><span class="line"><span class="comment">-- 输出：str1's len = 3, str2's len = 5</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-10-字符串拷贝">8.10 字符串拷贝</h3><p><code>string.rep(string, n)</code> 用于将字符串拷贝n次。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str = <span class="string">"ABCD"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str = %s"</span>, <span class="built_in">string</span>.<span class="built_in">rep</span>(str, <span class="number">2</span>)))</span><br><span class="line"><span class="comment">-- 输出：str = ABCDABCD</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-11-字符串连接">8.11 字符串连接</h3><p>字符串可以使用<code>..</code>连接。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">str1 = <span class="string">"hello"</span></span><br><span class="line">str2 = <span class="string">"lua"</span></span><br><span class="line">res = str1 .. <span class="string">" "</span> .. str2</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"res = %s"</span>, res))</span><br><span class="line"><span class="comment">-- 输出：hello lua</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-12-字符串匹配">8.12 字符串匹配</h3><p><code>string.gmatch(str, pattern)</code> 是一个迭代器函数，每调用一次，返回一个在字符串str查找到的符合pattern描述的子串，如果没找到返回nil，也支持正则匹配。</p><p><code>string.match(str, pattern, init)</code> 只找寻str中第一个配对，搜索起点可配置，也支持正则匹配。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(<span class="string">"Hello Lua"</span>, <span class="string">"%a+"</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(word)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">match</span>(<span class="string">"I have 2 questions for you."</span>, <span class="string">"%d+ %a+"</span>))</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">Hello</span></span><br><span class="line"><span class="comment">Lua</span></span><br><span class="line"><span class="comment">2 questions</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-13-转义字符">8.13 转义字符</h3><table><thead><tr><th>转义字符</th><th>意义</th><th>转义字符</th><th>意义</th></tr></thead><tbody><tr><td>\a</td><td>响铃</td><td>\b</td><td>退格，将当前位置移到前一列</td></tr><tr><td>\f</td><td>换页，将当前位置移到下页开头</td><td>\n</td><td>换行，将当前位置移到下一行开头</td></tr><tr><td>\r</td><td>回车，将当前位置移到本行开头</td><td>\t</td><td>水平制表，跳到下一个Tab位置</td></tr><tr><td>\v</td><td>垂直制表</td><td>\</td><td>代表一个反斜线字符</td></tr><tr><td>’</td><td>代表一个单引号字符</td><td>"</td><td>代表一个双引号字符</td></tr><tr><td>\0</td><td>空字符</td><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td></tr><tr><td>\xhh</td><td>1到2位十六进制数所代表的任意字符</td><td></td><td></td></tr></tbody></table><h2 id="9-Table">9. Table</h2><p><strong>数组与表的类型都为table</strong>。</p><p>数组的语法为<code>arrName = {element1, element2, ....}</code>，数组保存的一组数据类型可以不一致，数组的索引值是以1为起始的，也可以人为指定为0开始，如<code>arrName = {[0]=element1, element2, ....}</code>。</p><p>表是一个 “关联数组”，表的索引可以是数字或者是字符串，所有索引值都需要用 <code>[</code> 和 <code>]</code> 括起来；如果没有 [] 括起，则认为是字符串索引，可以认为，数组是索引为以0或1开始的连续数字的一种特殊的表，因此，表的一些增删改查行为函数也适用于数组。</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>concat</td><td>连接</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>maxn</td><td>最大key</td></tr><tr><td>remove</td><td>移除</td></tr><tr><td>sort</td><td>升序排序</td></tr></tbody></table><h3 id="9-1-定义">9.1 定义</h3><p><code>#</code>后面直接加数组名可以获取数组的长度，如果设置了索引从0开始，则获取到的数组长度会比实际的长度少1。</p><p><code>#</code>后面直接加表名无法准确获取数组的长度，会在索引中断的地方停止计数，应该用循环遍历来获取正确长度。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 数组</span></span><br><span class="line">letters = {}</span><br><span class="line">letters[<span class="number">1</span>] = <span class="string">"A"</span></span><br><span class="line">letters[<span class="number">2</span>] = <span class="string">"B"</span></span><br><span class="line">letters[<span class="number">3</span>] = <span class="string">"C"</span></span><br><span class="line">letters[<span class="number">4</span>] = <span class="string">"D"</span></span><br><span class="line">letters[<span class="number">5</span>] = <span class="string">"E"</span></span><br><span class="line">days = {[<span class="number">0</span>]=<span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>, <span class="string">"Saturday"</span>, <span class="string">"Sunday"</span>}</span><br><span class="line">numbers = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">nil</span>}</span><br><span class="line">all = {<span class="number">1</span>, <span class="string">"A"</span>, <span class="literal">nil</span>, <span class="literal">true</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"Len: letters = %d, days = %d, numbers = %d, all = %d"</span>, #letters, #days, #numbers, #all))</span><br><span class="line"><span class="comment">-- 输出：Len: letters = 5, days = 6, numbers = 3, all = 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表</span></span><br><span class="line">mytable1 = {[<span class="number">1</span>] = <span class="string">"Lua"</span>, greet = <span class="string">"Hello"</span>, [<span class="number">3</span>] = <span class="string">"Count"</span>}</span><br><span class="line">mytable2 = {}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"Len: mytable1 = %d, mytable2 = %d"</span>, #mytable1, #mytable2))</span><br><span class="line"><span class="comment">-- 输出：Len: mytable1 = 1, mytable2 = 0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-2-遍历">9.2 遍历</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 数组</span></span><br><span class="line">days = {[<span class="number">0</span>]=<span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>, <span class="string">"Saturday"</span>, <span class="string">"Sunday"</span>}</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>, #days <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"days[%d] = %s"</span>, i, days[i]))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">days[0] = Monday</span></span><br><span class="line"><span class="comment">days[1] = Tuesday</span></span><br><span class="line"><span class="comment">days[2] = Wednesday</span></span><br><span class="line"><span class="comment">days[3] = Thursday</span></span><br><span class="line"><span class="comment">days[4] = Friday</span></span><br><span class="line"><span class="comment">days[5] = Saturday</span></span><br><span class="line"><span class="comment">days[6] = Sunday</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line">letters = {<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>}</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(letters) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"letters[%d] = %s"</span>, i, v))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">letters[1] = A</span></span><br><span class="line"><span class="comment">letters[2] = B</span></span><br><span class="line"><span class="comment">letters[3] = C</span></span><br><span class="line"><span class="comment">letters[4] = D</span></span><br><span class="line"><span class="comment">letters[5] = E</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表</span></span><br><span class="line">mytable = {[<span class="number">1</span>] = <span class="string">"Lua"</span>, greet = <span class="string">"Hello"</span>, [<span class="number">3</span>] = <span class="string">"Count"</span>}</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1   Lua</span></span><br><span class="line"><span class="comment">3   Count</span></span><br><span class="line"><span class="comment">greet   Hello</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="9-3-连接">9.3 连接</h3><p><code>table.concat(table [, sep [, start [, end]]])</code> 函数列出参数中指定table的数组部分从start位置到end位置的所有元素，元素键以指定分隔符sep隔开，start默认为1。注：该函数只处理table下标为数字的数据，且下标是连续的才能被处理，断开就结束了。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">fruits = {<span class="string">"orange"</span>, <span class="string">"apple"</span>, <span class="string">"banana"</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str = %s"</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(fruits, <span class="string">", "</span>)))</span><br><span class="line"><span class="comment">-- 输出：orange, apple, banana</span></span><br><span class="line"></span><br><span class="line">letters = {[<span class="number">0</span>]=<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str = %s"</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(letters, <span class="string">", "</span>)))</span><br><span class="line"><span class="comment">-- 输出：B, C, D, E</span></span><br><span class="line"></span><br><span class="line">mytable = {[<span class="number">1</span>] = <span class="string">"Lua"</span>, greet = <span class="string">"Hello"</span>, [<span class="number">3</span>] = <span class="string">"Count"</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"str = %s"</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(mytable, <span class="string">", "</span>)))</span><br><span class="line"><span class="comment">-- 输出：Lua</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-4-插入">9.4 插入</h3><p><code>table.insert(table [pos,] value)</code> 函数在table指定位置pos插入一个value元素，pos默认为数组部分末尾，即连续下标元素的最后。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">fruits = {<span class="string">"orange"</span>, <span class="string">"apple"</span>, <span class="string">"banana"</span>}</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits, <span class="number">3</span>, <span class="string">"watermelon"</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(fruits) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1   orange</span></span><br><span class="line"><span class="comment">2   apple</span></span><br><span class="line"><span class="comment">3   watermelon</span></span><br><span class="line"><span class="comment">4   banana</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line">letters = {[<span class="number">0</span>]=<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>}</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(letters, <span class="number">3</span>, <span class="string">"W"</span>)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>， #letters <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, letters[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">0   A</span></span><br><span class="line"><span class="comment">1   B</span></span><br><span class="line"><span class="comment">2   C</span></span><br><span class="line"><span class="comment">3   W</span></span><br><span class="line"><span class="comment">4   D</span></span><br><span class="line"><span class="comment">5   E</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line">mytable = {[<span class="number">1</span>] = <span class="string">"Lua"</span>, greet = <span class="string">"Hello"</span>, [<span class="number">3</span>] = <span class="string">"Count"</span>}</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(mytable, <span class="number">2</span>, <span class="string">"Table"</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(#mytable)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1   Lua</span></span><br><span class="line"><span class="comment">2   Table</span></span><br><span class="line"><span class="comment">3   Count</span></span><br><span class="line"><span class="comment">greet   Hello</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-5-最大值">9.5 最大值</h3><p><code>table.maxn(table)</code> 函数返回table的最大正数索引，如果没有正数索引返回0。Lua5.2之后的版本已移除该函数。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">fruits = {<span class="string">"orange"</span>, <span class="string">"apple"</span>, <span class="string">"banana"</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">maxn</span>(fruits))</span><br><span class="line"></span><br><span class="line">letters = {[<span class="number">0</span>]=<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">maxn</span>(letters))</span><br><span class="line"></span><br><span class="line">mytable = {[<span class="number">1</span>] = <span class="string">"Lua"</span>, greet = <span class="string">"Hello"</span>, [<span class="number">3</span>] = <span class="string">"Count"</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">maxn</span>(mytable))</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-6-删除">9.6 删除</h3><p><code>table.remove(table [,pos])</code> 函数删除指定pos位置的元素，pos默认为table长度。即连续索引的最大值。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">fruits = {<span class="string">"orange"</span>, <span class="string">"apple"</span>, <span class="string">"banana"</span>}</span><br><span class="line">remove1 = <span class="built_in">table</span>.<span class="built_in">remove</span>(fruits)</span><br><span class="line">remove2 = <span class="built_in">table</span>.<span class="built_in">remove</span>(fruits, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"remove1 = %s, remove2 = %s"</span>, remove1, remove2))</span><br><span class="line"><span class="comment">-- 输出：remove1 = banana, remove2 = orange</span></span><br><span class="line"></span><br><span class="line">mytable = {[<span class="number">1</span>] = <span class="string">"Lua"</span>, greet = <span class="string">"Hello"</span>, [<span class="number">3</span>] = <span class="string">"Count"</span>}</span><br><span class="line"><span class="built_in">remove</span> = <span class="built_in">table</span>.<span class="built_in">remove</span>(mytable)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"remove = %s"</span>, <span class="built_in">remove</span>))</span><br><span class="line"><span class="comment">-- 输出：remove = Lua</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-7-排序">9.7 排序</h3><p><code>table.sort(table [,comp])</code> 函数用于对给定的table进行升序排序，还支持传入排序规则。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> test0 ={<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>}</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(test0)</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">pairs</span>(test0) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(v..<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">local</span> test1 ={</span><br><span class="line">                {id=<span class="number">1</span>, name=<span class="string">"deng"</span>},</span><br><span class="line">                {id=<span class="number">9</span>, name=<span class="string">"luo"</span>},</span><br><span class="line">                {id=<span class="number">2</span>, name=<span class="string">"yang"</span>},</span><br><span class="line">                {id=<span class="number">8</span>, name=<span class="string">"ma"</span>},</span><br><span class="line">                {id=<span class="number">5</span>, name=<span class="string">"wu"</span>},</span><br><span class="line">}</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(test1, <span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span> <span class="keyword">return</span> a.id &lt; b.id <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">pairs</span>(test1) <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(test1[i].id, test1[i].name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1 2 3 4 6 7 8 9</span></span><br><span class="line"><span class="comment">1   deng</span></span><br><span class="line"><span class="comment">2   yang</span></span><br><span class="line"><span class="comment">5   wu</span></span><br><span class="line"><span class="comment">8   ma</span></span><br><span class="line"><span class="comment">9   luo</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="10-元素metatable">10. 元素metatable</h2><h3 id="10-1-定义-2">10.1 定义</h3><p>Lua的table中可以访问对应的key来得到value值，但是却无法对两个table进行操作。元表允许改变table的行为，每个行为关联了对应的元方法。如两个table相加操作<code>a+b</code>，当Lua尝试对两个表相加时，先检查两者之一是否有元表，之后检查<code>__add</code>字段是否存在，如果操作，则调用相应的值。<code>__add</code>等即时字段其对应的值就是元方法。</p><p>有两个重要的函数处理元表：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>setmetatable(table, metatable)</td><td>对指定的table设置元表，如果元表中存在<code>__metatable</code>键值，则setmetatable会失败</td></tr><tr><td>getmetatable(table)</td><td>返回对象的元表</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">mytable = {}      <span class="comment">-- 普通表</span></span><br><span class="line">mymetatable = {}  <span class="comment">-- 元表</span></span><br><span class="line"><span class="built_in">setmetatable</span>(mytable, mymetatable) <span class="comment">-- 设置元表</span></span><br><span class="line"><span class="built_in">getmetatable</span>(mytable) <span class="comment">-- 返回元表</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-2-index元方法">10.2 __index元方法</h3><p><code>__index</code>元方法用来对表访问。</p><p>Lua查找一个表元素时的规则：</p><p>1 在表中查找，如果找到，返回该元素，找不到继续</p><p>2 判断该表是否有元表，如果没有元表，返回nil，有元表则继续</p><p>3 判断该表有没有<code>__index</code>方法，如果<code>__index</code>方法为nil，则返回nil，如果<code>__index</code>方法是一个表，则重复1、2、3步；如果<code>__index</code>方法是一个函数，则返回该函数的返回值</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">mytable = <span class="built_in">setmetatable</span>({key1 = <span class="string">"value1"</span>}, {</span><br><span class="line"><span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, key)</span></span></span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">"key2"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"metatablevalue"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line">})</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"key1 = %s, key2 = %s"</span>, mytable.key1, mytable.key2))</span><br><span class="line"><span class="comment">-- 输出：key1 = value1, key2 = metatablevalue</span></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line">mytable = <span class="built_in">setmetatable</span>({key1 = <span class="string">"value1"</span>}, {<span class="built_in">__index</span> = {key2 = <span class="string">"metatablevalue"</span>}})</span><br><span class="line"><span class="built_in">print</span>(mytable.key1, mytable.key2)</span><br><span class="line"><span class="comment">-- 输出：value1    metatablevalue</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-3-newindex元方法">10.3 __newindex元方法</h3><p><code>__newindex</code>元方法用来对表更新。</p><p>当给表的一个缺少的索引赋值，解释器会查找<code>__newindex</code>元方法，如果存在，则调用这个函数而不进行赋值操作。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">mytable = <span class="built_in">setmetatable</span>({key1 = <span class="string">"value1"</span>}, {</span><br><span class="line">    <span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, key, value)</span></span></span><br><span class="line">        <span class="built_in">rawset</span>(mytable, key, <span class="string">"\""</span>..value..<span class="string">"\""</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">})</span><br><span class="line">mytable.key1 = <span class="string">"new value"</span></span><br><span class="line">mytable.key2 = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.foramt(<span class="string">"key1 = %s, key2 = %s"</span>, mytable.key1, mytable.key2))</span><br><span class="line"><span class="comment">-- 输出：key1 = new value, key2 = "4"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-4-call元方法">10.4 __call元方法</h3><p><code>__call</code>元方法可以让table当做一个函数来使用。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mt = {}</span><br><span class="line">mt.<span class="built_in">__call</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable,...)</span></span></span><br><span class="line">    <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>{...} <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(v)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">t = {}</span><br><span class="line"><span class="built_in">setmetatable</span>(t, mt)</span><br><span class="line">t(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-5-tostring元方法">10.5 __tostring元方法</h3><p><code>__tostring</code>元方法用于修改表的输出行为。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">mytable = <span class="built_in">setmetatable</span>({<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>}, {</span><br><span class="line"><span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable)</span></span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line">            sum = sum + v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"sum = "</span> ..sum</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">})</span><br><span class="line"><span class="built_in">print</span>(mytable)</span><br><span class="line"><span class="comment">-- 输出：sum = 60</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-6-为表添加操作符">10.6 为表添加操作符</h3><table><thead><tr><th>模式</th><th>等价于运算符</th><th>模式</th><th>等价于运算符</th></tr></thead><tbody><tr><td>__add</td><td>+</td><td>__sub</td><td>-</td></tr><tr><td>__mul</td><td>*</td><td>__div</td><td>/</td></tr><tr><td>__mod</td><td>%</td><td>__unm</td><td>-</td></tr><tr><td>__concat</td><td>…</td><td>__eq</td><td>==</td></tr><tr><td>__lt</td><td>&lt;</td><td>__le</td><td>&lt;=</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table_maxn</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> mn = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> mn &lt; k <span class="keyword">then</span></span><br><span class="line">            mn = k</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> mn</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 两表相加</span></span><br><span class="line">mytable = <span class="built_in">setmetatable</span>({<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}, {</span><br><span class="line">    <span class="built_in">__add</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, newtable)</span></span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, table_maxn(newtable) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">table</span>.<span class="built_in">insert</span>(mytable, table_maxn(mytable)+<span class="number">1</span>, newtable[i])</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> mytable</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">})</span><br><span class="line">secondtable = {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>}</span><br><span class="line">mytable = mytable + secondtable</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1   1</span></span><br><span class="line"><span class="comment">2   2</span></span><br><span class="line"><span class="comment">3   3</span></span><br><span class="line"><span class="comment">4   4</span></span><br><span class="line"><span class="comment">5   5</span></span><br><span class="line"><span class="comment">6   6</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="11-模块与包">11. 模块与包</h2><h3 id="11-1-模块定义">11.1 模块定义</h3><p>模块类似于一个封装库，是由变量、函数等已知元素组成的table，因此创建模块就是创建一个table，然后把需要导出的常量、函数放入其中，最后返回这个table即可。如下创建自定义模块module。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 文件名 module.lua</span></span><br><span class="line"><span class="comment">-- 定义一个名为module的模块</span></span><br><span class="line"><span class="built_in">module</span> = {}</span><br><span class="line"><span class="comment">-- 定义一个常量</span></span><br><span class="line"><span class="built_in">module</span>.constant = <span class="string">"this is constant"</span></span><br><span class="line"><span class="comment">-- 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"This is a public function\n"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"This is a private function"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func3</span><span class="params">()</span></span></span><br><span class="line">    func2()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span></span><br></pre></td></tr></tbody></table></figure><h3 id="11-2-require函数">11.2 require函数</h3><p><code>require("模块名")</code>用来加载模块，执行require后会返回一个由模块常量或函数组成的table，并且还会定义一个包含该table的全局变量。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"module"</span>)</span><br><span class="line"><span class="comment">-- 别名变量 m</span></span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">"module"</span>)</span><br><span class="line"><span class="built_in">print</span>(m.constant)</span><br><span class="line">m.func3()</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">this is constant</span></span><br><span class="line"><span class="comment">This is a private function</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><p>require函数会尝试从Lua文件或C程序中加载模块，require用于搜索Lua文件的路径存放在全局变量package_path中，当Lua启动后，会以环境变量LUA_PATH的值来初始化这个环境变量，如果找不到该环境变量，则使用一个编译时定义的默认路径来初始化。</p><p>可以自定义设置路况，在当前用户跟目录下打开.profile文件（没有则创建，打开.bashrc文件也可以），例如把"~/lua/"路径加入LUA_PATH环境变量里。</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#LUA_PATH</span></span><br><span class="line"><span class="built_in">export</span> LAU_PATH=<span class="string">"~/lua/?.lua;;"</span></span><br></pre></td></tr></tbody></table></figure><p>文件路径以";“号分割，最后两个”;;"表示新加的路径后面加上原来的默认路径。</p><p>接着执行指令<code>source ~/.profile</code>更新变量参数使之生效。</p><p>如果找到目标文件，则会调用<code>package.loadfile</code>来加载模块，否则就会找C程序库。</p><p>搜索的文件路径是从全局变量 package.cpath 获取，而这个变量则是通过环境变量 LUA_CPATH 来初始。</p><p>搜索的策略跟上面的一样，只不过现在换成搜索的是 so 或 dll 类型的文件。如果找得到，那么 require 就会通过 package.loadlib 来加载它。</p><h3 id="11-3-module函数">11.3 module函数</h3><p><code>module()</code>函数调用时会创建表并将其赋予给全局变量和loaded table，最后还会将这个表设置为主程序块的环境。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 在模块文件在使用module函数</span></span><br><span class="line"><span class="built_in">module</span> <span class="string">"module_name"</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">等同语法</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="comment">-- 定义模块名</span></span><br><span class="line"><span class="keyword">local</span> moduleName = <span class="string">"module_name"</span></span><br><span class="line"><span class="comment">-- 定义用于返回的模块表</span></span><br><span class="line"><span class="keyword">local</span> M = {}</span><br><span class="line"><span class="comment">-- 将模块表加入到全局变量</span></span><br><span class="line"><span class="built_in">_G</span>[moduleName] = M</span><br><span class="line"><span class="comment">-- 将模块表加入到package.loaded中防止多次加载</span></span><br><span class="line"><span class="built_in">package</span>.<span class="built_in">loaded</span>[moduleName] = M</span><br><span class="line"><span class="comment">-- 将模块表设置为函数的环境表，使得模块中的所有操作都是在模块表中，这样定义函数就直接定义在模块表中</span></span><br><span class="line"><span class="built_in">setfenv</span>(<span class="number">1</span>, M)</span><br></pre></td></tr></tbody></table></figure><h3 id="11-4-调用C语言包">11.4 调用C语言包</h3><p>Lua和C语言很容易结合，可以使用C语言为Lua写包，C语言包使用前必须先加载并连接，大多数系统是通过动态连接库机制。</p><p>Lua在一个加loadlib的函数内提供了所有的动态连接功能。这个函数的两个参数：库的绝对路径和初始化函数，如：</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = <span class="string">"/usr/local/lua/lib/libluasocket.so"</span></span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">loadlib</span>(<span class="built_in">path</span>, <span class="string">"luaopen_socket"</span>)</span><br></pre></td></tr></tbody></table></figure><p>loadlib函数加载指定的库并连接到Lua，然而并没有调用初始化函数，而是返回初始化函数作为Lua的一个函数。</p><p>如果加载动态库或者查找初始化函数出错，loadlib将返回nil和错误信息。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">path</span> = <span class="string">"C:\\windows\\luasocket.dll"</span></span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">loadlib</span>(<span class="built_in">path</span>, <span class="string">"luaopen_socket"</span>)</span><br><span class="line"><span class="comment">-- 真正打开库</span></span><br><span class="line">f()</span><br></pre></td></tr></tbody></table></figure><p>一般情况下我们期望二进制的发布库包含一个与前面代码段相似的 stub 文件，安装二进制库的时候可以随便放在某个目录，只需要修改 stub 文件对应二进制库的实际路径即可。</p><p>将 stub 文件所在的目录加入到 LUA_PATH，这样设定后就可以使用 require 函数加载 C 库了。</p><h2 id="12-协程">12. 协程</h2><h3 id="12-1-定义-2">12.1 定义</h3><p>协程与线程比较类似，拥有独立的堆栈、独立的局部变量、独立的指令，同时又与其他协同程序共享全局变量和其他大部分东西。</p><p>一个具有多线程的程序可以同时运行几个线程，而协程却需要彼此写作运行，在任一指定时刻只有一个协程在运行，并且这个正在运行的协同程序只有在明确的被要求挂起时才会被挂起。</p><p>协程有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协程。</p><h3 id="12-2-用法">12.2 用法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>coroutine.create()</td><td>创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用时唤醒函数调用</td></tr><tr><td>coroutine.resume()</td><td>重启coroutine，和create配合使用</td></tr><tr><td>coroutine.yield()</td><td>挂起coroutine，将coroutine设置为挂起状态，和resume配合使用能够有很多效果</td></tr><tr><td>coroutine.status()</td><td>查看coroutine的状态，有dead、suspened、running三种状态</td></tr><tr><td>coroutine.wrap()</td><td>创建coroutine，返回一个函数，一旦调用这个函数，就进入croutine，和create功能重复</td></tr><tr><td>coroutine.running()</td><td>返回正在运行的coroutine，一个coroutine就是一个新村，返回一个coroutine的线程号</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"foo函数输出"</span>, a)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(<span class="number">2</span> * a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(<span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span></span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"第一次协同程序执行输出"</span>, a, b)</span><br><span class="line">        <span class="keyword">local</span> r = foo(a + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"第二次协同程序执行输出"</span>, r)</span><br><span class="line">        <span class="keyword">local</span> r, s = <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a + b, a - b)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"第三次协同程序执行输出"</span>, r, s)</span><br><span class="line">        <span class="keyword">return</span> b, <span class="string">"结束协同程序"</span></span><br><span class="line">   <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"main"</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--分割线--"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"main"</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">"r"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--分割线--"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"main"</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">"x"</span>, <span class="string">"y"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--分割线--"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"main"</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">"x"</span>, <span class="string">"y"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--分割线--"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">第一次协同程序执行输出 1 10</span></span><br><span class="line"><span class="comment">foo 函数输出 2</span></span><br><span class="line"><span class="comment">main true 4</span></span><br><span class="line"><span class="comment">--分割线--</span></span><br><span class="line"><span class="comment">第二次协同程序执行输出 r</span></span><br><span class="line"><span class="comment">main true 11 -9</span></span><br><span class="line"><span class="comment">--分割线--</span></span><br><span class="line"><span class="comment">第三次协同程序执行输出 x y</span></span><br><span class="line"><span class="comment">main true 10 结束协同程序</span></span><br><span class="line"><span class="comment">--分割线--</span></span><br><span class="line"><span class="comment">main false 10 cannot resume dead coroutine</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="12-3-生产者-消费者问题">12.3 生产者-消费者问题</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> newProductor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">productor</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        send(i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> i = receive()</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">status</span>, value = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(newProductor)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(x)</span></span></span><br><span class="line">    <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(x)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">newProductor = coutine.<span class="built_in">create</span>(productor)</span><br><span class="line">cosumer()</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="13-文件IO">13. 文件IO</h2><p>Lua文件IO库用于读取和处理文件，分为<strong>简单模式</strong>和<strong>完全模式</strong>：</p><ul><li>简单模式：拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作，适合做一些简单的文件操作</li><li>完全模式：使用外部的文件句柄来实现，以一种面向对象的形式，将所有的文件操作定义为文件句柄的方法，适合做一些高级的文件操作，如同时读取多个文件</li></ul><h3 id="13-1-简单模式">13.1 简单模式</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>io.input([file])</td><td>设置默认的输入文件，file为文件名，返回文件句柄</td></tr><tr><td>io.output([file])</td><td>设置默认的输出文件，file为文件名</td></tr><tr><td>io.close([file])</td><td>关闭文件，不带参数的默认文件</td></tr><tr><td>io.read(formats)</td><td>读取默认文件，formats取值为<code>a*</code>-全读、<code>*n</code>-按数字读入、<code>*l</code>-按行读入，<code>n</code>-读取n个字符</td></tr><tr><td>io.lines([fn])</td><td>fn文件名，如无文件，取默认文件，返回一个迭代器</td></tr><tr><td>io.write(value)</td><td>向默认文件写入内容</td></tr><tr><td>io.flush()</td><td>把文件缓存里的操作立即作用到默认输出文件</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 以只读方式打开文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="comment">-- 设置默认输入文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file)</span><br><span class="line"><span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"read file: [%s]"</span>, <span class="built_in">io</span>.<span class="built_in">read</span>()))</span><br><span class="line"><span class="comment">-- 关闭文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br><span class="line"><span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>)</span><br><span class="line"><span class="comment">-- 设置默认输出文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file)</span><br><span class="line"><span class="comment">-- 在文件最后一行写入</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"File content in test.lua"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"file write success"</span>)</span><br><span class="line"><span class="comment">-- 关闭文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br></pre></td></tr></tbody></table></figure><h3 id="13-2-完全模式">13.2 完全模式</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 以只读方式打开文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">print</span>(file:<span class="built_in">read</span>())</span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line">file::<span class="built_in">close</span>()</span><br><span class="line"><span class="comment">-- 以附加的方式打开只写文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>)</span><br><span class="line"><span class="comment">-- 在文件最后一行写入</span></span><br><span class="line">file::<span class="built_in">write</span>(<span class="string">"--test"</span>)</span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line">file::<span class="built_in">close</span>()</span><br><span class="line"><span class="comment">-- 以只读方式打开文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="comment">-- 定位到文件倒数第25个位置</span></span><br><span class="line">file::seek(<span class="string">"end"</span>, <span class="number">-25</span>)</span><br><span class="line"><span class="comment">-- 从当前（倒数第25个位置）读取整个文件</span></span><br><span class="line"><span class="built_in">print</span>(file::<span class="built_in">read</span>(<span class="string">"*a"</span>))</span><br><span class="line"><span class="comment">-- 关闭打开的文件</span></span><br><span class="line">file::<span class="built_in">close</span>()</span><br></pre></td></tr></tbody></table></figure><h2 id="14-错误处理">14. 错误处理</h2><p>错误类型分为<strong>语法错误</strong>和<strong>运行错误</strong>。</p><p>语法错误通常是对程序的组件使用不当引起，如：</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a = <span class="number">1</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出：lua: main.lua:2: 'do' expected near 'print'</span></span><br></pre></td></tr></tbody></table></figure><p>运行错误时程序可以正常运行，但是会输出报错信息，如：</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">add(<span class="number">10</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">lua: main.lua:2: attempt to perform arithmetic on local 'b' (a nil value)</span></span><br><span class="line"><span class="comment">stack traceback:</span></span><br><span class="line"><span class="comment">    main.lua:2: in function 'add'</span></span><br><span class="line"><span class="comment">    main.lua:4: in main chunk</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14-1-assert">14.1 assert</h3><p><code>assert(express, message)</code> 断言函数会判断给定express表达式是否成立，成立的话不做任何事情，不成立则以message作为错误信息抛出。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">type</span>(a) == <span class="string">"number"</span>, <span class="string">"a not a number"</span>)</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">type</span>(b) == <span class="string">"number"</span>, <span class="string">"b not a number"</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">add(<span class="number">10</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">lua: main.lua:3: b not a number</span></span><br><span class="line"><span class="comment">stack traceback:</span></span><br><span class="line"><span class="comment">    [C]: in function 'assert'</span></span><br><span class="line"><span class="comment">    main.lua:3: in function 'add'</span></span><br><span class="line"><span class="comment">    main.lua:6: in main chunk</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14-2-error">14.2 error</h3><p><code>error(message [,level])</code> 函数终止正在执行的函数，并返回message的内容作为错误信息，level参数指示获得错误的位置，level=1指出调用error位置，level=2指出调用error函数的函数吗，level=0不添加错误位置信息。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">type</span>(a) ~= <span class="string">"number"</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">error</span>(<span class="string">"a not a number"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">type</span>(b) ~= <span class="string">"number"</span>) <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">error</span>(<span class="string">"b not a number"</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">add(<span class="number">10</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">lua: main.lua:10: b not a number</span></span><br><span class="line"><span class="comment">stack traceback:</span></span><br><span class="line"><span class="comment">    [C]: in function 'error'</span></span><br><span class="line"><span class="comment">    main.lua:6: in function 'add'</span></span><br><span class="line"><span class="comment">    main.lua:10: in main chunk</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14-3-pcall">14.3 pcall</h3><p>可以使用<code>pcall</code>函数包装需要执行的代码，<code>pcall</code>函数接收一个函数和要传递给后者的参数，并执行该函数，无错误返回true，有错误返回false和错误信息。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">a, errorinfo = <span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span><span class="params">(i)</span></span> <span class="built_in">print</span>(i) <span class="keyword">end</span>, <span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(a, errorinfo)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">27</span></span><br><span class="line"><span class="comment">true nil</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line">b, errorinfo = <span class="built_in">pcall</span>(<span class="function"><span class="keyword">function</span><span class="params">(i)</span></span> <span class="built_in">print</span>(i) <span class="built_in">error</span>(<span class="string">'error..'</span>) <span class="keyword">end</span>, <span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(b, errorinfo)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">27</span></span><br><span class="line"><span class="comment">false main.lua1: error..</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14-4-xpcall">14.4 xpcall</h3><p><code>xpcall</code>函数相比<code>pcall</code>函数会返回更多的错误调试信息，并执行该函数，无错误返回true，有错误返回false和错误信息。</p><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span> <span class="params">()</span></span></span><br><span class="line">   n = n / <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myerrorhandler</span><span class="params">(err)</span></span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"ERROR:"</span>, err)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">status</span> = <span class="built_in">xpcall</span>(myfunction, myerrorhandler)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">status</span>)</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">ERROR:  main.lua:2: attempt to perform arithmetic on global 'n' (a nil value)</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="15-垃圾回收">15. 垃圾回收</h2><h3 id="15-1-机制">15.1 机制</h3><p>Lua运行了一个垃圾收集器收集所有死对象来完成自动内存管理的工作。</p><p>Lua实现了一个增量标记-扫描收集器，使用垃圾收集器间歇率和垃圾收集器步进倍率来控制垃圾收集循环。</p><p>垃圾收集器间歇率控制着收集器需要在开启新的循环前要等待多久。</p><p>垃圾收集器步进倍率控制收集器运作速度相对与内存分配速度的倍率，默认值是200%，即运作速度2倍于内存分配速率。</p><h3 id="15-2-垃圾回收器函数">15.2 垃圾回收器函数</h3><p>Lua提供一下函数<code>collectgarbage([opt [,arg]])</code>来控制自动内存管理。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>collectgarbage(“collect”)</td><td>做一次完整的垃圾收集循环</td></tr><tr><td>collectgarbage(“count”)</td><td>以K字节数为单位返回Lua使用的总内存数</td></tr><tr><td>collectgarbage(“restart”)</td><td>重启垃圾收集器的自动运行</td></tr><tr><td>collectgarbage(“setpause”)</td><td>将arg设为收集器的间歇率，返回间歇率的前一个值</td></tr><tr><td>collectgarbage(“setstepmul”)</td><td>返回步进倍率的前一个值</td></tr><tr><td>collectgarbage(“step”)</td><td>单步运行垃圾收集器，步长由arg控制</td></tr><tr><td>collectgarbage(“stop”)</td><td>停止垃圾收集器的运行</td></tr></tbody></table><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">mytable = {<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"banana"</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">"count"</span>))</span><br><span class="line">mytable = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">"count"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">"collect"</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">collectgarbage</span>(<span class="string">"count"</span>))</span><br><span class="line"><span class="comment">--[[ 输出：</span></span><br><span class="line"><span class="comment">27.6396484375</span></span><br><span class="line"><span class="comment">27.6767578125</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">26.623046875</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="16-面向对象">16. 面向对象</h2><h3 id="16-1-面向对象特征">16.1 面向对象特征</h3><ul><li><p>封装：能够把一个实体的信息、功能、响应都装入一个单独的对象中的特征。</p></li><li><p>继承：基础的方法允许在不改动原程序的基础上对其进行扩充，使得原功能得以保存，新功能也得以扩展，有利于减少重复代码，提高开发效率。</p></li><li><p>多态：同一操作作用于不同的对象，产生不同的执行结果，可以通过指向基类的指针，来调用实现派生类的方法。</p></li><li><p>抽象：简化复杂问题的方法，可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。</p></li></ul><h3 id="16-2-类封装">16.2 类封装</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 元类</span></span><br><span class="line">Shape = { area = <span class="number">0</span> }</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基础类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:new</span> <span class="params">(o, size)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> {}</span><br><span class="line">    <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    size = size <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">    <span class="built_in">self</span>.area = size * size</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基础类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:pirntArea</span> <span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The area = "</span>, <span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myshape = Shape:new(<span class="literal">nil</span>, <span class="number">10</span>)</span><br><span class="line">myshape:printArea()</span><br><span class="line"><span class="comment">-- 输出：The area = 100</span></span><br></pre></td></tr></tbody></table></figure><h3 id="16-3-继承与多态">16.3 继承与多态</h3><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 元类</span></span><br><span class="line">Shape = { area = <span class="number">0</span> }</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基础类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:new</span> <span class="params">(o, size)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> {}</span><br><span class="line">    <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    size = size <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">    <span class="built_in">self</span>.area = size * size</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基础类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:pirntArea</span> <span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The area = "</span>, <span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myshape = Shape:new(<span class="literal">nil</span>, <span class="number">10</span>)</span><br><span class="line">myshape:printArea()</span><br><span class="line"><span class="comment">-- 输出：The area = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 继承1</span></span><br><span class="line">Square = Shape:new()</span><br><span class="line"><span class="comment">-- 派生类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:new</span> <span class="params">(o, size)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> Shape:new(o, size)</span><br><span class="line">    <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 派生类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:printArea</span> <span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The Square area = "</span>, <span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">mysquare = Square:new(<span class="literal">nil</span>, <span class="number">10</span>)</span><br><span class="line">mysquare:printArea()</span><br><span class="line"><span class="comment">-- 输出：The Square area = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 继承2</span></span><br><span class="line">Rectangle = Shape:new()</span><br><span class="line"><span class="comment">-- 派生类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:new</span> <span class="params">(o, length, breadth)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> Shape:new(o, size)</span><br><span class="line">    <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="built_in">self</span>.area = length * breadth</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 派生类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:printArea</span> <span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The Rectangle area = "</span>, <span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myrectangle = Rectangle:new(<span class="literal">nil</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">myrectangle:printArea()</span><br><span class="line"><span class="comment">-- 输出：The Rectangle area = 200</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="参考文章-6">参考文章</h2><p>本文是笔者通过下列网站教程学习Lua的记录，有部分修改和补充，转载请注明出处，并附带下面链接。</p><p>1.<a href="https://www.runoob.com/lua/lua-tutorial.html">【菜鸟教程Lua教程】</a></p><p>2.<a href="https://haicoder.net/lua/lua-tutorial.html">【嗨客网Lua教程】</a></p>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Unity开发基础 </tag>
            
            <tag> Lua基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
